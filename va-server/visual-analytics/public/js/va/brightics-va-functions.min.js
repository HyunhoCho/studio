/*   Brightics 2.0 Suite Build 190612 */
(function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.adPoissonFilter = {
    category: "ad",
    defaultFnUnit: {
      func: "adPoissonFilter",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        columns: [],
        hold_columns: [],
        alpha: "0.05",
        window_size: "30",
        "script-id": "adPoissonFilter"
      },
      display: {
        label: "Anomaly Detection Poisson Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It detects and filters false alarms of anomaly alarms comes from an anomaly detection predict model.",
    mandatory: [],
    tags: ["anomaly", "detection", "poisson", "filter"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      hold_columns: this.renderHold_columnsControl,
      alpha: this.renderAlphaControl,
      window_size: this.renderWindow_sizeControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createHold_columnsControl(), this.createAlphaControl(), this.createWindow_sizeControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns;
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createHold_columnsControl = function (t) {
    var e = this;
    e.$elements.hold_columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    var o = e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements.hold_columns);
      var o = {
        multiple: !0,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold_columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.hold_columns = e.createColumnList(e.$elements.hold_columns, o);
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "hold_columns", "Hold Columns");
  }, e.prototype.renderHold_columnsControl = function (t) {
    var e = this.options.fnUnit.param.hold_columns;
    this.controls.hold_columns.setSelectedItems(e);
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    e.$elements.alpha = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Alpha  ( 0 < value < 1  )", function (t) {
      t.append(e.$elements.alpha);
      e.controls.alpha = e.createNumericInput(e.$elements.alpha, {
        placeholder: "0.01",
        numberType: "double"
      }), e.controls.alpha.onChange(function () {
        var t = e.createSetParameterValueCommand("alpha", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderAlphaControl = function (t) {
    var e = this.options.fnUnit.param.alpha;
    this.controls.alpha.setValue(e || "");
  }, e.prototype.createWindow_sizeControl = function (t) {
    var e = this;
    e.$elements.window_size = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Window size ( 0 < value < Total Row Numbers  )", function (t) {
      t.append(e.$elements.window_size);
      e.controls.window_size = e.createNumericInput(e.$elements.window_size, {
        placeholder: "30",
        numberType: "int"
      }), e.controls.window_size.onChange(function () {
        var t = e.createSetParameterValueCommand("window_size", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderWindow_sizeControl = function (t) {
    var e = this.options.fnUnit.param.window_size;
    this.controls.window_size.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.hold_columns.setItems(t);
  }, e.prototype.getPrimaryOperation = function () {
    return "AdPoissonFilter";
  }, t.VA.Core.Functions.Library.adPoissonFilter.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.adPoissonFilter.validator = o;
}).call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.adRandomForestPredict = {
    category: "ad",
    defaultFnUnit: {
      func: "adRandomForestPredict",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "adRandomForestPredict"
      },
      display: {
        label: "Anomaly Detection Random Forest Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It provides detected anomalies using the anomaly detection Random Forest model.   ",
    mandatory: [],
    tags: ["anomaly", "detection", "predict", "Random Forest"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "3",
      max: "3"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {}, this.$elements = {}, this.controls = {};
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.getPrimaryOperation = function () {
    return "AdRandomForestPredict";
  }, t.VA.Core.Functions.Library.adRandomForestPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.adRandomForestPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.adRandomForestTrain = {
    category: "ad",
    defaultFnUnit: {
      func: "adRandomForestTrain",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        columns: [],
        time_column: "",
        alpha: "0.01",
        ntree: "10",
        "script-id": "adRandomForestTrain"
      },
      display: {
        label: "Anomaly Detection Random Forest Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides the Statistics probabilities of training set by Random Forest.",
    mandatory: [],
    tags: ["Anomaly", "Detection", "Random Forest"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      time_column: this.renderTime_columnControl,
      alpha: this.renderAlphaControl,
      ntree: this.renderNtreeControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createTime_columnControl(), this.createAlphaControl(), this.createNtreeControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns;
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createTime_columnControl = function (t) {
    var e = this;
    e.$elements.time_column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    var o = e.addPropertyControl("Time Column", function (t) {
      t.append(e.$elements.time_column);
      var o = {
        multiple: !1,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("time_column", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls.time_column = e.createColumnList(e.$elements.time_column, o);
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "time_column", "Time Column");
  }, e.prototype.renderTime_columnControl = function (t) {
    var e = this.options.fnUnit.param.time_column;
    this.controls.time_column.setSelectedItems([e]);
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    e.$elements.alpha = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Alpha ( 0 < value < 1  )", function (t) {
      t.append(e.$elements.alpha);
      e.controls.alpha = e.createNumericInput(e.$elements.alpha, {
        placeholder: "0.01",
        numberType: "double"
      }), e.controls.alpha.onChange(function () {
        var t = e.createSetParameterValueCommand("alpha", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "alpha", "Alpha");
  }, e.prototype.renderAlphaControl = function (t) {
    var e = this.options.fnUnit.param.alpha;
    this.controls.alpha.setValue(e || "");
  }, e.prototype.createNtreeControl = function (t) {
    var e = this;
    e.$elements.ntree = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Number of tree(s)  ( 1 < value <= 100 )", function (t) {
      t.append(e.$elements.ntree);
      e.controls.ntree = e.createNumericInput(e.$elements.ntree, {
        placeholder: "10",
        numberType: "int"
      }), e.controls.ntree.onChange(function () {
        var t = e.createSetParameterValueCommand("ntree", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNtreeControl = function (t) {
    var e = this.options.fnUnit.param.ntree;
    this.controls.ntree.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.time_column.setItems(t);
  }, e.prototype.getPrimaryOperation = function () {
    return "AdRandomForestTrain";
  }, t.VA.Core.Functions.Library.adRandomForestTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.adRandomForestTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.sbmpredict = {
    category: "ad",
    defaultFnUnit: {
      func: "sbmpredict",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "sbmpredict"
      },
      display: {
        label: "Anomaly Detection SBM Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It provides detected anomalies using the anomaly detection SBM model.   ",
    mandatory: [],
    tags: ["anomaly", "detection", "predict", "SBM"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "3",
      max: "3"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {}, this.$elements = {}, this.controls = {};
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.getPrimaryOperation = function () {
    return "Sbmpredict";
  }, t.VA.Core.Functions.Library.sbmpredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.sbmpredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.sbmtrain = {
    category: "ad",
    defaultFnUnit: {
      func: "sbmtrain",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        columns: [],
        alpha: "0.01",
        k: "1",
        binsize: "30",
        "script-id": "sbmtrain"
      },
      display: {
        label: "Anomaly Detection SBM Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides the Statistics probabilities of training set by SBM",
    mandatory: [],
    tags: ["Anomaly", "Detection", "SBM"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      time_column: this.renderTime_columnControl,
      alpha: this.renderAlphaControl,
      k: this.renderKControl,
      binsize: this.renderBinsizeControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createTime_columnControl(), this.createAlphaControl(), this.createKControl(), this.createBinsizeControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns;
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createTime_columnControl = function (t) {
    var e = this;
    e.$elements.time_column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    var o = e.addPropertyControl("Time Column", function (t) {
      t.append(e.$elements.time_column);
      var o = {
        multiple: !1,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("time_column", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls.time_column = e.createColumnList(e.$elements.time_column, o);
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "time_column", "Time Column");
  }, e.prototype.renderTime_columnControl = function (t) {
    var e = this.options.fnUnit.param.time_column;
    this.controls.time_column.setSelectedItems([e]);
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    e.$elements.alpha = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Alpha ( 0 < value < 1  )", function (t) {
      t.append(e.$elements.alpha);
      e.controls.alpha = e.createNumericInput(e.$elements.alpha, {
        placeholder: "0.01",
        numberType: "double"
      }), e.controls.alpha.onChange(function () {
        var t = e.createSetParameterValueCommand("alpha", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderAlphaControl = function (t) {
    var e = this.options.fnUnit.param.alpha;
    this.controls.alpha.setValue(e || "");
  }, e.prototype.createKControl = function (t) {
    var e = this;
    e.$elements.k = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Number of cluster(s)  ( 1 <= value <= 10)", function (t) {
      t.append(e.$elements.k);
      e.controls.k = e.createNumericInput(e.$elements.k, {
        placeholder: "1",
        numberType: "int"
      }), e.controls.k.onChange(function () {
        var t = e.createSetParameterValueCommand("k", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderKControl = function (t) {
    var e = this.options.fnUnit.param.k;
    this.controls.k.setValue(e || "");
  }, e.prototype.createBinsizeControl = function (t) {
    var e = this;
    e.$elements.binsize = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Binsize  ( 10 <= value <= 100 )", function (t) {
      t.append(e.$elements.binsize);
      e.controls.binsize = e.createNumericInput(e.$elements.binsize, {
        placeholder: "30",
        numberType: "int"
      }), e.controls.binsize.onChange(function () {
        var t = e.createSetParameterValueCommand("binsize", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderBinsizeControl = function (t) {
    var e = this.options.fnUnit.param.binsize;
    this.controls.binsize.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.time_column.setItems(t);
  }, e.prototype.getPrimaryOperation = function () {
    return "Sbmtrain";
  }, t.VA.Core.Functions.Library.sbmtrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.sbmtrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.sprt = {
    category: "ad",
    defaultFnUnit: {
      func: "sprt",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        columns: [],
        hold_columns: [],
        alpha: "0.01",
        beta: "0.01",
        sigma: "3.0",
        "script-id": "sprt"
      },
      display: {
        label: "Anomaly Detection SPRT Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It detects and filters false alarms of anomaly alarms comes from an anomaly detection predict model.",
    mandatory: [],
    tags: ["anomaly", "detection", "sprt", "filter"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      hold_columns: this.renderHold_columnsControl,
      alpha: this.renderAlphaControl,
      beta: this.renderBetaControl,
      sigma: this.renderSigmaControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createHold_columnsControl(), this.createAlphaControl(), this.createBetaControl(), this.createSigmaControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns;
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createHold_columnsControl = function (t) {
    var e = this;
    e.$elements.hold_columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements.hold_columns);
      var o = {
        multiple: !0,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold_columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.hold_columns = e.createColumnList(e.$elements.hold_columns, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHold_columnsControl = function (t) {
    var e = this.options.fnUnit.param.hold_columns;
    this.controls.hold_columns.setSelectedItems(e);
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    e.$elements.alpha = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Alpha  ( 0 < value < 1  )", function (t) {
      t.append(e.$elements.alpha);
      e.controls.alpha = e.createNumericInput(e.$elements.alpha, {
        placeholder: "0.01",
        numberType: "double"
      }), e.controls.alpha.onChange(function () {
        var t = e.createSetParameterValueCommand("alpha", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderAlphaControl = function (t) {
    var e = this.options.fnUnit.param.alpha;
    this.controls.alpha.setValue(e || "");
  }, e.prototype.createBetaControl = function (t) {
    var e = this;
    e.$elements.beta = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Beta  ( 0 < value < 1  )", function (t) {
      t.append(e.$elements.beta);
      e.controls.beta = e.createNumericInput(e.$elements.beta, {
        placeholder: "0.01",
        numberType: "double"
      }), e.controls.beta.onChange(function () {
        var t = e.createSetParameterValueCommand("beta", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderBetaControl = function (t) {
    var e = this.options.fnUnit.param.beta;
    this.controls.beta.setValue(e || "");
  }, e.prototype.createSigmaControl = function (t) {
    var e = this;
    e.$elements.sigma = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Sigma  ( 0 <= value < 6  )", function (t) {
      t.append(e.$elements.sigma);
      e.controls.sigma = e.createNumericInput(e.$elements.sigma, {
        placeholder: "3.0",
        numberType: "double"
      }), e.controls.sigma.onChange(function () {
        var t = e.createSetParameterValueCommand("sigma", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSigmaControl = function (t) {
    var e = this.options.fnUnit.param.sigma;
    this.controls.sigma.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.hold_columns.setItems(t);
  }, e.prototype.getPrimaryOperation = function () {
    return "Sprt";
  }, t.VA.Core.Functions.Library.sprt.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, o.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns, "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "columns", e.param.columns, ["number"]);
    });
  }, t.VA.Core.Functions.Library.sprt.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.t2predict = {
    category: "ad",
    defaultFnUnit: {
      func: "t2predict",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "t2predict"
      },
      display: {
        label: "Anomaly Detection T-Square Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It provides detected anomalies using the anomaly detection t-square model.   ",
    mandatory: [],
    tags: ["anomaly", "detection", "predict", "t2"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "3",
      max: "3"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {}, this.$elements = {}, this.controls = {};
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.getPrimaryOperation = function () {
    return "T2predict";
  }, t.VA.Core.Functions.Library.t2predict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.t2predict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.t2train = {
    category: "ad",
    defaultFnUnit: {
      func: "t2train",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        columns: [],
        alpha: "0.01",
        k: "1",
        "script-id": "t2train"
      },
      display: {
        label: "Anomaly Detection T-square Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides the Statistics distance of training set by CBM T-square.",
    mandatory: [],
    tags: ["Anomaly", "Detection", "T2"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      time_column: this.renderTime_columnControl,
      alpha: this.renderAlphaControl,
      k: this.renderKControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createTime_columnControl(), this.createAlphaControl(), this.createKControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns;
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createTime_columnControl = function (t) {
    var e = this;
    e.$elements.time_column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    var o = e.addPropertyControl("Time Column", function (t) {
      t.append(e.$elements.time_column);
      var o = {
        multiple: !1,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("time_column", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls.time_column = e.createColumnList(e.$elements.time_column, o);
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "time_column", "Time Column");
  }, e.prototype.renderTime_columnControl = function (t) {
    var e = this.options.fnUnit.param.time_column;
    this.controls.time_column.setSelectedItems([e]);
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    e.$elements.alpha = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Alpha ( 0 < value < 1  )", function (t) {
      t.append(e.$elements.alpha);
      e.controls.alpha = e.createNumericInput(e.$elements.alpha, {
        placeholder: "0.01",
        numberType: "double"
      }), e.controls.alpha.onChange(function () {
        var t = e.createSetParameterValueCommand("alpha", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "alpha", "Alpha");
  }, e.prototype.renderAlphaControl = function (t) {
    var e = this.options.fnUnit.param.alpha;
    this.controls.alpha.setValue(e || "");
  }, e.prototype.createKControl = function (t) {
    var e = this;
    e.$elements.k = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Number of cluster(s)  (1 <= value <= 10)", function (t) {
      t.append(e.$elements.k);
      e.controls.k = e.createNumericInput(e.$elements.k, {
        placeholder: "1",
        numberType: "int"
      }), e.controls.k.onChange(function () {
        var t = e.createSetParameterValueCommand("k", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderKControl = function (t) {
    var e = this.options.fnUnit.param.k;
    this.controls.k.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.time_column.setItems(t);
  }, e.prototype.getPrimaryOperation = function () {
    return "T2train";
  }, t.VA.Core.Functions.Library.t2train.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.t2train.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.bootstrapLimit = {
    category: "statistics",
    defaultFnUnit: {
      func: "bootstrapLimit",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        column: [],
        alpha: "0.05",
        bootstrap: "100",
        upperLower: "true",
        scriptId: "bootstrapLimit"
      },
      display: {
        label: "Bootstrap Limit",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It returns a control limit value of alpha from estimated population parameter by bootstrap.",
    mandatory: [],
    tags: ["bootstrap", "limit"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      column: this.renderColumnControl,
      alpha: this.renderAlphaControl,
      upperLower: this.renderUpperLowerControl,
      bootstrap: this.renderBootstrapControl
    }, this.$elements = {}, this.controls = {}, this.createColumnControl(), this.createAlphaControl(), this.createUpperLowerControl(), this.createBootstrapControl();
  }, e.prototype.createColumnControl = function (t) {
    var e = this;
    e.$elements.column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Column", function (t) {
      t.append(e.$elements.column);
      var o = {
        multiple: !0,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("column", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.column = e.createColumnList(e.$elements.column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnControl = function (t) {
    var e = this.options.fnUnit.param.column;
    this.controls.column.setSelectedItems(e);
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    e.$elements.alpha = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("alpha", function (t) {
      t.append(e.$elements.alpha);
      e.controls.alpha = e.createNumericInput(e.$elements.alpha, {
        placeholder: "0.05",
        numberType: "double"
      }), e.controls.alpha.onChange(function () {
        var t = e.createSetParameterValueCommand("alpha", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderAlphaControl = function (t) {
    var e = this.options.fnUnit.param.alpha;
    this.controls.alpha.setValue(e || "");
  }, e.prototype.createUpperLowerControl = function (t) {
    var e = this;
    e.$elements["upperLower.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Upper</div>'), e.$elements["upperLower.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Lower</div>'), e.addPropertyControl("Upper / Lower", function (t) {
      t.append(e.$elements["upperLower.true"]), e.controls["upperLower.true"] = e.createRadioButton(e.$elements["upperLower.true"], {
        width: "undefined",
        groupName: "upperLower"
      }), e.$elements["upperLower.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("upperLower", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["upperLower.false"]), e.controls["upperLower.false"] = e.createRadioButton(e.$elements["upperLower.false"], {
        width: "undefined",
        groupName: "upperLower"
      }), e.$elements["upperLower.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("upperLower", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderUpperLowerControl = function (t) {
    var e = "upperLower." + this.options.fnUnit.param.upperLower;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createBootstrapControl = function (t) {
    var e = this;
    e.$elements.bootstrap = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Number of bootstrap", function (t) {
      t.append(e.$elements.bootstrap);
      e.controls.bootstrap = e.createNumericInput(e.$elements.bootstrap, {
        placeholder: "100",
        numberType: "int"
      }), e.controls.bootstrap.onChange(function () {
        var t = e.createSetParameterValueCommand("bootstrap", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderBootstrapControl = function (t) {
    var e = this.options.fnUnit.param.bootstrap;
    this.controls.bootstrap.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.column.setItems(t);
  }, t.VA.Core.Functions.Library.bootstrapLimit.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnRule();
  }, o.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "column", e.param.column, "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "column", e.param.column);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "column", e.param.column, ["number"]);
    });
  }, t.VA.Core.Functions.Library.bootstrapLimit.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoClassificationPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoClassificationPredict",
      name: "AutoClassificationPredict",
      inData: [],
      outData: [],
      param: {
        "hold-columns": [[]],
        "prediction-col": ""
      },
      display: {
        label: "Auto Classification Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data from AutoClassificationTrain function.",
    mandatory: [],
    tags: ["classification", "randomforest", "logisticregression", "onevsrest", "decisiontree", "gbt", "predict", "auto", "auto Classification Predict"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-columns": this.renderHoldColumnsControl,
      "prediction-col": this.renderPredictionColControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColumnsControl(), this.createPredictionColControl();
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"][0];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "prediction-col", "Prediction Column Name");
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["hold-columns"].setItems(t);
  }, t.VA.Core.Functions.Library.autoClassificationPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addHoldColumnsRule();
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "string"]);
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.autoClassificationPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;
  t.VA.Core.Functions.Library.autoClassificationTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoClassificationTrain",
      name: "AutoClassificationTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        seed: "",
        method: "",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "random",
        "num-search": "",
        "search-seed": "",
        classifiers: ["logit", "ovrlogit", "dt", "rf", "gbt", "mlp"]
      },
      display: {
        label: "Auto Classification Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function trains several classification algorithms that are able to perform using several parameter sets based on grid search using one of the two methods, trainvalid and crossvalid.",
    mandatory: [],
    tags: ["auto", "classification", "train", "autoclassificationtrain", "auto classification train"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "3"
    }
  };
  var e = ["logit", "ovrlogit", "dt", "rf", "gbt", "mlp"],
      o = {
    logit: [{
      label: "Elastic Net",
      name: "elastic-net-arr",
      placeholder: ""
    }, {
      label: "Fit Intercept",
      name: "fit-intercept-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "True",
          value: "true"
        }, {
          label: "False",
          value: "false"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Max Iter",
      name: "max-iter-arr",
      placeholder: ""
    }, {
      label: "Reg Param",
      name: "reg-param-arr",
      placeholder: ""
    }, {
      label: "Standardization",
      name: "standardization",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "True",
          value: "true"
        }, {
          label: "False",
          value: "false"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Threshold",
      name: "threshold-arr",
      placeholder: ""
    }, {
      label: "Thresholds",
      name: "thresholds-arr",
      placeholder: ""
    }, {
      label: "Tolerance",
      name: "tolerance-arr",
      placeholder: ""
    }, {
      label: "Weight Column",
      name: "weight-column-arr",
      placeholder: ""
    }],
    ovrlogit: [{
      label: "Elastic Net",
      name: "elastic-net-arr",
      placeholder: ""
    }, {
      label: "Fit Intercept",
      name: "fit-intercept-arr",
      placeholder: ""
    }, {
      label: "Max Iter",
      name: "max-iter-arr",
      placeholder: ""
    }, {
      label: "Reg Param",
      name: "reg-param-arr",
      placeholder: ""
    }, {
      label: "Standardization",
      name: "standardization",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "True",
          value: "true"
        }, {
          label: "False",
          value: "false"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Threshold",
      name: "threshold-arr",
      placeholder: ""
    }, {
      label: "Thresholds",
      name: "thresholds-arr",
      placeholder: ""
    }, {
      label: "Tolerance",
      name: "tolerance-arr",
      placeholder: ""
    }, {
      label: "Weight Column",
      name: "weight-column-arr",
      placeholder: ""
    }],
    dt: [{
      label: "Impurity",
      name: "impurity-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "Gini",
          value: "gini"
        }, {
          label: "Entropy",
          value: "entropy"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Max Bins",
      name: "max-bins-arr",
      placeholder: ""
    }, {
      label: "Max Depth",
      name: "max-depth-arr",
      placeholder: ""
    }, {
      label: "Min Info Gain",
      name: "min-info-gain-arr",
      placeholder: ""
    }, {
      label: "Min Instances Per Node ",
      name: "min-instances-per-node-arr",
      placeholder: ""
    }, {
      label: "Thresholds",
      name: "thresholds-arr",
      placeholder: ""
    }],
    rf: [{
      label: "Feature Subset Strategy",
      name: "subset-strategy-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "Auto",
          value: "auto"
        }, {
          label: "All",
          value: "all"
        }, {
          label: "Sqrt",
          value: "sqrt"
        }, {
          label: "Log2",
          value: "log2"
        }, {
          label: "Onethird",
          value: "onethird"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Num Trees",
      name: "num-trees-arr",
      placeholder: ""
    }, {
      label: "Max Depth",
      name: "max-depth-arr",
      placeholder: ""
    }, {
      label: "Max Bins",
      name: "max-bins-arr",
      placeholder: ""
    }, {
      label: "Impurity",
      name: "impurity-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "Gini",
          value: "gini"
        }, {
          label: "Entropy",
          value: "entropy"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Min Info Gain",
      name: "min-info-gain-arr",
      placeholder: ""
    }, {
      label: "Min Instances Per Node ",
      name: "min-instances-per-node-arr",
      placeholder: ""
    }, {
      label: "Subsampling Rate",
      name: "subsampling-rate-arr",
      placeholder: ""
    }, {
      label: "Thresholds",
      name: "thresholds-arr",
      placeholder: ""
    }],
    gbt: [{
      label: "Impurity",
      name: "impurity-arr",
      placeholder: ""
    }, {
      label: "Loss Type",
      name: "loss-type-arr",
      placeholder: ""
    }, {
      label: "Max Bins",
      name: "max-bins-arr",
      placeholder: ""
    }, {
      label: "Max Depth",
      name: "max-depth-arr",
      placeholder: ""
    }, {
      label: "Max Iter",
      name: "max-iter-arr",
      placeholder: ""
    }, {
      label: "Min Info Gain",
      name: "min-info-gain-arr",
      placeholder: ""
    }, {
      label: "Min Instances Per Node ",
      name: "min-instances-per-node-arr",
      placeholder: ""
    }, {
      label: "Step Size",
      name: "step-size-arr",
      placeholder: ""
    }, {
      label: "Subsampling Rate",
      name: "subsampling-rate-arr",
      placeholder: ""
    }],
    mlp: [{
      label: "Hidden Layers",
      name: "elastic-net-arr",
      placeholder: ""
    }, {
      label: "Max Iter",
      name: "max-iter-arr",
      placeholder: ""
    }, {
      label: "Tolerance",
      name: "tolerance-arr",
      placeholder: ""
    }]
  };

  function r(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function n() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  r.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), r.prototype.constructor = r, r.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, r.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      classifiers: this.renderClassifiersControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createClassifiersControl();
  }, r.prototype.createSubFunctionsControl = function (t) {
    var e = this;
    this.$stepContainer = $('<div class="brtc-va-editors-sheet-refine-step-container"/>'), e.addPropertyControl("Sub Function", function (t) {
      t.append(e.$stepContainer), e.createPropertiesControl(e.$stepContainer);
    });
  }, r.prototype.createPropertiesControl = function (r) {
    var n = this,
        a = $('<input class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-add-key-condition" type="button" value="Set Properties"/>');
    r.append(a), a.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), a.click(function (r) {
      new t.VA.Core.Dialogs.SubFunctionDialog($(r.target), {
        fnUnit: n.options.fnUnit,
        subFunction: e,
        subFunctionParam: o,
        close: function close(t) {
          if (t.OK) {
            var e = n.createSubFunctionCommand(t.param);
            n.executeCommand(e);
          }
        }
      });
    });
  }, r.prototype.createSubFunctionCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, r.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, r.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, r.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, r.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, r.prototype.createSeedControl = function (t) {
    var e = this;
    e.$elements.seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Seed", function (t) {
      t.append(e.$elements.seed);
      e.controls.seed = e.createNumericInput(e.$elements.seed, {
        placeHolder: "",
        numberType: "int"
      }), e.controls.seed.onChange(function () {
        var t = e.createSetParameterValueCommand("seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderSeedControl = function (t) {
    var e = this.options.fnUnit.param.seed;
    this.controls.seed.setValue(e || "");
  }, r.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      e.controls.method = e.createDropDownList(e.$elements.method, {
        source: [{
          label: "TrainValid",
          value: "TrainValid"
        }, {
          label: "CrossValid",
          value: "CrossValid"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.method.on("change", function (t) {
        var o = e.createSetParameterValueCommand("method", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderMethodControl = function (t) {
    var e = this.options.fnUnit.param.method;
    this.$elements.method.val(e);
  }, r.prototype.createNumFoldsControl = function (e) {
    var o = this;
    o.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numFoldsProperties = o.addPropertyControl("Number of Folds", function (e) {
      e.append(o.$elements["num-folds"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)"),
        numberType: "int"
      };
      o.controls["num-folds"] = o.createNumericInput(o.$elements["num-folds"], r), o.controls["num-folds"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-folds", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, r.prototype.createTrainRatioControl = function (t) {
    var e = this;
    e.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$trainRatioProperties = e.addPropertyControl("Train Ratio", function (t) {
      t.append(e.$elements["train-ratio"]);
      e.controls["train-ratio"] = e.createNumericInput(e.$elements["train-ratio"], {
        placeholder: "(0 < value < 1)",
        numberType: "double"
      }), e.controls["train-ratio"].onChange(function () {
        var t = e.createSetParameterValueCommand("train-ratio", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, r.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "f1",
          value: "f1"
        }, {
          label: "weighted precision",
          value: "weightedPrecision"
        }, {
          label: "weighted recall",
          value: "weightedRecall"
        }, {
          label: "accuracy",
          value: "accuracy"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$metricNameProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "metric-name", "Metric Name");
  }, r.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, r.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, r.prototype.createNumSearchControl = function (e) {
    var o = this;
    o.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numSearchProperties = o.addPropertyControl("Number of Random Hyperparameters", function (e) {
      e.append(o.$elements["num-search"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-search"] = o.createNumericInput(o.$elements["num-search"], r), o.controls["num-search"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-search", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, r.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, r.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, r.prototype.createClassifiersControl = function (t) {
    var e = this;
    e.$elements.classifiers = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.classifiers.append(o), e.$elements.classifiers.append(r), e.addPropertyControl("Classifiers", function (t) {
      t.append(e.$elements.classifiers), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Logistic Regression",
        value: "logit"
      }, {
        label: "One Vs Rest Logistic Regression",
        value: "ovrlogit"
      }, {
        label: "Decision Tree",
        value: "dt"
      }, {
        label: "Random Forest",
        value: "rf"
      }, {
        label: "Gradient Boosted Trees",
        value: "gbt"
      }, {
        label: "Multi Layer Perceptron",
        value: "mlp"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "classifiers." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createClassifiersCommand(t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "classifiers." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.classifiers.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "classifiers." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "classifiers." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createClassifiersCommand(r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "classifiers." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createClassifiersCommand([]);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderClassifiersControl = function (t) {
    var e,
        o = this.options.fnUnit.param.classifiers,
        r = [{
      label: "Logistic Regression",
      value: "logit"
    }, {
      label: "One Vs Rest Logistic Regression",
      value: "ovrlogit"
    }, {
      label: "Decision Tree",
      value: "dt"
    }, {
      label: "Random Forest",
      value: "rf"
    }, {
      label: "Gradient Boosted Trees",
      value: "gbt"
    }, {
      label: "Multi Layer Perceptron",
      value: "mlp"
    }];

    for (var n in r) {
      e = "classifiers." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, r.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e && (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "");
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, r.prototype.createClassifiersCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param.classifiers = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, r.prototype.changeSearchMethodParameter = function (t) {
    "grid" == t ? (this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$numSearchProperties.show(), this.$searchSeedProperties.show());
  }, r.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0), this.controls.xcolumns.setItems(t);
  }, t.VA.Core.Functions.Library.autoClassificationTrain.propertiesPanel = r, n.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), n.prototype.constructor = n, n.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule();
  }, n.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    });
  }, n.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    });
  }, t.VA.Core.Functions.Library.autoClassificationTrain.validator = n;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoDataCleansing = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoDataCleansing",
      name: "AutoDataCleansing",
      inData: [],
      outData: [],
      param: {
        "input-cols": [],
        "target-cols": [],
        regressor: "random-forest",
        classifier: "random-forest",
        "max-iter": "",
        remove: []
      },
      display: {
        label: "Auto Data Cleansing",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function imputes missing values by using various types of machine learning algorithms as well as delete zero, dependency, null or NaN in rows or columns perspective.",
    mandatory: [],
    tags: ["auto data cleansing", "data cleansing", "data", "cleansing", "autodatacleansing", "autodata", "datacleansing"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-cols": this.renderInputColsControl,
      "target-cols": this.renderTargetColsControl,
      regressor: this.renderRegressorControl,
      classifier: this.renderClassifierControl,
      "max-iter": this.renderMaxIterControl,
      remove: this.renderRemoveControl
    }, this.$elements = {}, this.controls = {}, this.createInputColsControl(), this.createTargetColsControl(), this.createRegressorControl(), this.createClassifierControl(), this.createMaxIterControl(), this.createRemoveControl();
  }, e.prototype.createInputColsControl = function (t) {
    var e = this;
    e.$elements["input-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Columns", function (t) {
      t.append(e.$elements["input-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "4",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["input-cols"] = e.createColumnList(e.$elements["input-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColsControl = function (t) {
    var e = this.options.fnUnit.param["input-cols"];
    this.controls["input-cols"].setSelectedItems(e);
  }, e.prototype.createTargetColsControl = function (t) {
    var e = this;
    e.$elements["target-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Target Columns", function (t) {
      t.append(e.$elements["target-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "4",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("target-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["target-cols"] = e.createColumnList(e.$elements["target-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderTargetColsControl = function (t) {
    var e = this.options.fnUnit.param["target-cols"];
    this.controls["target-cols"].setSelectedItems(e);
  }, e.prototype.createRegressorControl = function (t) {
    var e = this;
    e.$elements["regressor.linear-regression"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Linear Regression</div>'), e.$elements["regressor.decision-tree"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Decision Tree</div>'), e.$elements["regressor.random-forest"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Random Forest</div>'), e.$elements["regressor.gradient-boosted-trees"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Gradient Boosted Trees</div>');
    var o = e.addPropertyControl("Regressor", function (t) {
      t.append(e.$elements["regressor.linear-regression"]), e.controls["regressor.linear-regression"] = e.createRadioButton(e.$elements["regressor.linear-regression"], {
        width: "undefined",
        groupName: "regressor"
      }), e.$elements["regressor.linear-regression"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("regressor", "linear-regression");
        e.executeCommand(o);
      }), t.append(e.$elements["regressor.decision-tree"]), e.controls["regressor.decision-tree"] = e.createRadioButton(e.$elements["regressor.decision-tree"], {
        width: "undefined",
        groupName: "regressor"
      }), e.$elements["regressor.decision-tree"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("regressor", "decision-tree");
        e.executeCommand(o);
      }), t.append(e.$elements["regressor.random-forest"]), e.controls["regressor.random-forest"] = e.createRadioButton(e.$elements["regressor.random-forest"], {
        width: "undefined",
        groupName: "regressor",
        checked: !0
      }), e.$elements["regressor.random-forest"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("regressor", "random-forest");
        e.executeCommand(o);
      }), t.append(e.$elements["regressor.gradient-boosted-trees"]), e.controls["regressor.gradient-boosted-trees"] = e.createRadioButton(e.$elements["regressor.gradient-boosted-trees"], {
        width: "undefined",
        groupName: "regressor"
      }), e.$elements["regressor.gradient-boosted-trees"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("regressor", "gradient-boosted-trees");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "regressor", "Regressor");
  }, e.prototype.renderRegressorControl = function (t) {
    var e = "regressor." + this.options.fnUnit.param.regressor;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createClassifierControl = function (t) {
    var e = this;
    e.$elements["classifier.logistic-regression"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Logistic Regression</div>'), e.$elements["classifier.one-vs-rest-lr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">One Vs Rest Logistic Regression</div>'), e.$elements["classifier.decision-tree"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Decision Tree</div>'), e.$elements["classifier.random-forest"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Random Forest</div>'), e.$elements["classifier.gradient-boosted-trees"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Gradient Boosted Trees</div>'), e.$elements["classifier.multilayer-perceptron"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Multilayer Perceptron</div>');
    var o = e.addPropertyControl("Classifier", function (t) {
      t.append(e.$elements["classifier.logistic-regression"]), e.controls["classifier.logistic-regression"] = e.createRadioButton(e.$elements["classifier.logistic-regression"], {
        width: "undefined",
        groupName: "classifier"
      }), e.$elements["classifier.logistic-regression"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("classifier", "logistic-regression");
        e.executeCommand(o);
      }), t.append(e.$elements["classifier.one-vs-rest-lr"]), e.controls["classifier.one-vs-rest-lr"] = e.createRadioButton(e.$elements["classifier.one-vs-rest-lr"], {
        width: "undefined",
        groupName: "classifier"
      }), e.$elements["classifier.one-vs-rest-lr"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("classifier", "one-vs-rest-lr");
        e.executeCommand(o);
      }), t.append(e.$elements["classifier.decision-tree"]), e.controls["classifier.decision-tree"] = e.createRadioButton(e.$elements["classifier.decision-tree"], {
        width: "undefined",
        groupName: "classifier"
      }), e.$elements["classifier.decision-tree"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("classifier", "decision-tree");
        e.executeCommand(o);
      }), t.append(e.$elements["classifier.random-forest"]), e.controls["classifier.random-forest"] = e.createRadioButton(e.$elements["classifier.random-forest"], {
        width: "undefined",
        groupName: "classifier",
        checked: !0
      }), e.$elements["classifier.random-forest"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("classifier", "random-forest");
        e.executeCommand(o);
      }), t.append(e.$elements["classifier.gradient-boosted-trees"]), e.controls["classifier.gradient-boosted-trees"] = e.createRadioButton(e.$elements["classifier.gradient-boosted-trees"], {
        width: "undefined",
        groupName: "classifier"
      }), e.$elements["classifier.gradient-boosted-trees"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("classifier", "gradient-boosted-trees");
        e.executeCommand(o);
      }), t.append(e.$elements["classifier.multilayer-perceptron"]), e.controls["classifier.multilayer-perceptron"] = e.createRadioButton(e.$elements["classifier.multilayer-perceptron"], {
        width: "undefined",
        groupName: "classifier"
      }), e.$elements["classifier.multilayer-perceptron"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("classifier", "multilayer-perceptron");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "classifier", "Classifier");
  }, e.prototype.renderClassifierControl = function (t) {
    var e = "classifier." + this.options.fnUnit.param.classifier;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMaxIterControl = function (e) {
    var o = this;
    o.$elements["max-iter"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Max Iteration", function (e) {
      e.append(o.$elements["max-iter"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)"),
        numberType: "int"
      };
      o.controls["max-iter"] = o.createNumericInput(o.$elements["max-iter"], r), o.controls["max-iter"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-iter", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-iter", "Max Iteration");
  }, e.prototype.renderMaxIterControl = function (t) {
    var e = this.options.fnUnit.param["max-iter"];
    this.controls["max-iter"].setValue(e || "");
  }, e.prototype.createRemoveControl = function (t) {
    var e = this;
    e.$elements.remove = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.remove.append(o), e.$elements.remove.append(r);
    var n = e.addPropertyControl("Remove", function (t) {
      t.append(e.$elements.remove), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Zero Columns",
        value: "zero-cols",
        default: !1
      }, {
        label: "Dependency Columns",
        value: "dependency-cols",
        default: !1
      }, {
        label: "Rows containing null",
        value: "null-rows",
        default: !1
      }, {
        label: "Rows containing NaN",
        value: "nan-rows",
        default: !1
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "remove." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("remove", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "remove." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.remove.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "remove." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "remove." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("remove", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "remove." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("remove", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "remove", "Remove");
  }, e.prototype.renderRemoveControl = function (t) {
    var e,
        o = this.options.fnUnit.param.remove,
        r = [{
      label: "Zero Columns",
      value: "zero-cols",
      default: !1
    }, {
      label: "Dependency Columns",
      value: "dependency-cols",
      default: !1
    }, {
      label: "Rows containing null",
      value: "null-rows",
      default: !1
    }, {
      label: "Rows containing NaN",
      value: "nan-rows",
      default: !1
    }];

    for (var n in r) {
      e = "remove." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["input-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["target-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.autoDataCleansing.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputColsRule(), this.addTargetColsRule();
  }, o.prototype.addInputColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-cols", e.param["input-cols"], "Input Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-cols", e.param["input-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "input-cols", e.param["input-cols"], ["number", "string"]);
    });
  }, o.prototype.addTargetColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "target-cols", e.param["target-cols"], "Target Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "target-cols", e.param["target-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "target-cols", e.param["target-cols"], ["number", "String"]);
    });
  }, t.VA.Core.Functions.Library.autoDataCleansing.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoFeatureSelection = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoFeatureSelection",
      name: "AutoFeatureSelection",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "label-col": "",
        "model-type": "auto",
        "max-num-features": "",
        "num-buckets": ""
      },
      display: {
        label: "Auto Feature Selection",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Ranking of features in classification or regression data sets and creating new data set with recommended combination of features.",
    mandatory: [],
    tags: ["auto", "feature", "selection", "rank"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "3"
    },
    deprecated: !0,
    "deprecated-message": "Auto Feature Selection is deprecated."
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "label-col": this.renderLabelColControl,
      "model-type": this.renderModelTypeControl,
      "max-num-features": this.renderMaxNumFeaturesControl,
      "num-buckets": this.renderNumBucketsControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createLabelColControl(), this.createModelTypeControl(), this.createMaxNumFeaturesControl(), this.createNumBucketsControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Feature Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "7",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createLabelColControl = function () {
    var t = this;
    t.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), t.addPropertyControl("Label Column", function (e) {
      e.append(t.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(e, o) {
          t.columnListCommand("label-col", o.items[0]);
        }
      };
      t.controls["label-col"] = t.createColumnList(t.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createModelTypeControl = function (t) {
    var e = this;
    e.$elements["model-type.auto"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Auto</div>'), e.$elements["model-type.classification"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Classification</div>'), e.$elements["model-type.regression"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Regression</div>');
    var o = e.addPropertyControl("Model Type", function (t) {
      t.append(e.$elements["model-type.auto"]), e.controls["model-type.auto"] = e.createRadioButton(e.$elements["model-type.auto"], {
        width: "undefined",
        groupName: "model-type",
        checked: !0
      }), e.$elements["model-type.auto"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("model-type", "auto");
        e.executeCommand(o);
      }), t.append(e.$elements["model-type.classification"]), e.controls["model-type.classification"] = e.createRadioButton(e.$elements["model-type.classification"], {
        width: "undefined",
        groupName: "model-type"
      }), e.$elements["model-type.classification"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("model-type", "classification");
        e.executeCommand(o);
      }), t.append(e.$elements["model-type.regression"]), e.controls["model-type.regression"] = e.createRadioButton(e.$elements["model-type.regression"], {
        width: "undefined",
        groupName: "model-type"
      }), e.$elements["model-type.regression"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("model-type", "regression");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "model-type", "Model Type");
  }, e.prototype.renderModelTypeControl = function (t) {
    var e = "model-type." + this.options.fnUnit.param["model-type"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMaxNumFeaturesControl = function (t) {
    var e = this;
    e.$elements["max-num-features"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Max Number of Features", function (t) {
      t.append(e.$elements["max-num-features"]);
      e.controls["max-num-features"] = e.createNumericInput(e.$elements["max-num-features"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["max-num-features"].onChange(function () {
        var t = e.createSetParameterValueCommand("max-num-features", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "max-num-features", "Max Number of Features");
  }, e.prototype.renderMaxNumFeaturesControl = function (t) {
    var e = this.options.fnUnit.param["max-num-features"];
    this.controls["max-num-features"].setValue(e || "");
  }, e.prototype.createNumBucketsControl = function (e) {
    var o = this;
    o.$elements["num-buckets"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Number of Buckets", function (e) {
      e.append(o.$elements["num-buckets"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("32 (2 <= value)"),
        numberType: "int"
      };
      o.controls["num-buckets"] = o.createNumericInput(o.$elements["num-buckets"], r), o.controls["num-buckets"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-buckets", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num-buckets", "Number of Buckets");
  }, e.prototype.renderNumBucketsControl = function (t) {
    var e = this.options.fnUnit.param["num-buckets"];
    this.controls["num-buckets"].setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.columnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string", "number[]"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["label-col"].setItems(t);
  }, t.VA.Core.Functions.Library.autoFeatureSelection.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addLabelColRule();
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number", "string", "number[]"]);
    });
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Label Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.autoFeatureSelection.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoLinearRegressionPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoLinearRegressionPredict",
      name: "AutoLinearRegressionPredict",
      inData: [],
      outData: [],
      param: {
        "hold-cols": [],
        "prediction-col": "",
        "probability-col": "",
        "raw-prediction-col": ""
      },
      display: {
        label: "Auto Linear Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict data using a linear regression model with autonomous features",
    mandatory: [],
    tags: ["auto linear regression predict", "auto linear regression", "auto linear", "linear regression", "auto regression", "auto", "linear", "regression", "predict"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-cols": this.renderHoldColsControl,
      "prediction-col": this.renderPredictionColControl,
      "probability-col": this.renderProbabilityColControl,
      "raw-prediction-col": this.renderRawPredictionColControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColsControl(), this.createPredictionColControl(), this.createProbabilityColControl(), this.createRawPredictionColControl();
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.createProbabilityColControl = function (t) {
    var e = this;
    e.$elements["probability-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Probability Column Name", function (t) {
      t.append(e.$elements["probability-col"]);
      e.controls["probability-col"] = e.createInput(e.$elements["probability-col"], {
        placeHolder: "probability"
      }), e.$elements["probability-col"].on("change", function (t) {
        if (e.isInputValueChanged("probability-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("probability-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderProbabilityColControl = function (t) {
    var e = this.options.fnUnit.param["probability-col"];
    this.$elements["probability-col"].val(e || "");
  }, e.prototype.createRawPredictionColControl = function (t) {
    var e = this;
    e.$elements["raw-prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Raw Prediction Column Name", function (t) {
      t.append(e.$elements["raw-prediction-col"]);
      e.controls["raw-prediction-col"] = e.createInput(e.$elements["raw-prediction-col"], {
        placeHolder: "rawPrediction"
      }), e.$elements["raw-prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("raw-prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("raw-prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderRawPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["raw-prediction-col"];
    this.$elements["raw-prediction-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.autoLinearRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "hold-cols", $.unique($.extend(!0, [], t.param["hold-cols"])));
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.autoLinearRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoLinearRegressionTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoLinearRegressionTrain",
      name: "AutoLinearRegressionTrain",
      inData: [],
      outData: [],
      param: {
        "label-col": "",
        "feature-cols": [],
        "weight-col": [],
        auto: "false",
        method: "crossvalid",
        "metric-name": "",
        "search-method": "grid",
        "num-search": "",
        "search-seed": "",
        "elastic-net-arr": [],
        "fit-intercept-arr": [],
        "max-iter-arr": [],
        "standardization-arr": [],
        "reg-param-arr": [],
        "solver-arr": [],
        "tolerance-arr": [],
        "train-ratio": "",
        "num-folds": "",
        "elastic-net": "",
        "fit-intercept": "true",
        "max-iter": "",
        standardization: "true",
        "reg-param": "",
        solver: "auto",
        tol: ""
      },
      display: {
        label: "Auto Linear Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Auto Linear Regression Train",
    mandatory: [],
    tags: ["auto linear regression train", "auto linear regression", "auto linear", "linear regression", "auto regression", "auto", "linear", "regression", "train"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "5",
      max: "5"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "label-col": this.renderLabelColControl,
      "feature-cols": this.renderFeatureColsControl,
      "weight-col": this.renderWeightColControl,
      auto: this.renderAutoControl,
      method: this.renderMethodControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      "elastic-net-arr": this.renderElasticNetArrControl,
      "fit-intercept-arr": this.renderFitInterceptArrControl,
      "max-iter-arr": this.renderMaxIterArrControl,
      "standardization-arr": this.renderStandardizationArrControl,
      "reg-param-arr": this.renderRegParamArrControl,
      "solver-arr": this.renderSolverArrControl,
      "tolerance-arr": this.renderToleranceArrControl,
      "train-ratio": this.renderTrainRatioControl,
      "num-folds": this.renderNumFoldsControl,
      "elastic-net": this.renderElasticNetControl,
      "fit-intercept": this.renderFitInterceptControl,
      "max-iter": this.renderMaxIterControl,
      standardization: this.renderStandardizationControl,
      "reg-param": this.renderRegParamControl,
      solver: this.renderSolverControl,
      tol: this.renderTolControl
    }, this.$elements = {}, this.controls = {}, this.createLabelColControl(), this.createFeatureColsControl(), this.createWeightColControl(), this.createAutoControl(), this.createMethodControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createElasticNetArrControl(), this.createFitInterceptArrControl(), this.createMaxIterArrControl(), this.createStandardizationArrControl(), this.createRegParamArrControl(), this.createSolverArrControl(), this.createToleranceArrControl(), this.createTrainRatioControl(), this.createNumFoldsControl(), this.createElasticNetControl(), this.createFitInterceptControl(), this.createMaxIterControl(), this.createStandardizationControl(), this.createRegParamControl(), this.createSolverControl(), this.createTolControl();
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "2",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createWeightColControl = function (t) {
    var e = this;
    e.$elements["weight-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Weight Column", function (t) {
      t.append(e.$elements["weight-col"]);
      var o = {
        multiple: !0,
        maxRowCount: "2",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("weight-col", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["weight-col"] = e.createColumnList(e.$elements["weight-col"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderWeightColControl = function (t) {
    var e = this.options.fnUnit.param["weight-col"];
    this.controls["weight-col"].setSelectedItems(e);
  }, e.prototype.createAutoControl = function (e) {
    var o = this;
    o.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), o.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var r = o.addPropertyControl("Auto", function (t) {
      t.append(o.$elements["auto.true"]), o.controls["auto.true"] = o.createRadioButton(o.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto",
        checked: !0
      }), o.$elements["auto.true"].on("checked", function (t) {
        o.changeParameter(!0), o.executeAutoCommand("true");
      }), t.append(o.$elements["auto.false"]), o.controls["auto.false"] = o.createRadioButton(o.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), o.$elements["auto.false"].on("checked", function (t) {
        o.changeParameter(!1), o.executeAutoCommand("false");
      });
    }, {
      mandatory: !1
    });
    "not-allowed" == t.VA.SettingStorage.getValue("common.autonomous.analytics") && r.hide();
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements["method.trainValid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">TrainValid</div>'), e.$elements["method.crossValid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">CrossValid</div>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements["method.trainValid"]), e.controls["method.trainValid"] = e.createRadioButton(e.$elements["method.trainValid"], {
        width: "undefined",
        groupName: "method"
      }), e.$elements["method.trainValid"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("method", "trainValid");
        e.executeCommand(o);
      }), t.append(e.$elements["method.crossValid"]), e.controls["method.crossValid"] = e.createRadioButton(e.$elements["method.crossValid"], {
        width: "undefined",
        groupName: "method",
        checked: !0
      }), e.$elements["method.crossValid"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("method", "crossValid");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMethodControl = function (t) {
    var e = "method." + this.options.fnUnit.param.method;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "RMSE",
          value: "rmse",
          default: !1
        }, {
          label: "MSE",
          value: "mse",
          default: !1
        }, {
          label: "R2",
          value: "r2",
          default: !1
        }, {
          label: "MAE",
          value: "mae",
          default: !1
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (t) {
    var e = this;
    e.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numSearchProperties = e.addPropertyControl("Number of Random Hyperparameters", function (t) {
      t.append(e.$elements["num-search"]);
      e.controls["num-search"] = e.createNumericInput(e.$elements["num-search"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["num-search"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-search", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createElasticNetArrControl = function (t) {
    var e = this;
    e.$elements["elastic-net-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$elasticNetParamArrayProperties = e.addPropertyControl("Elastic Net Parameter Set", function (t) {
      t.append(e.$elements["elastic-net-arr"]);
      e.controls["elastic-net-arr"] = e.createInput(e.$elements["elastic-net-arr"], {
        placeHolder: "(0.0 < value < 1.0)"
      }), e.$elements["elastic-net-arr"].on("change", function (t) {
        if (e.isInputValueChanged("elastic-net-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("elastic-net-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderElasticNetArrControl = function (t) {
    var e = this.options.fnUnit.param["elastic-net-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["elastic-net-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createFitInterceptArrControl = function (t) {
    var e = this;
    e.$elements["fit-intercept-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$fitInterceptArrayProperties = e.addPropertyControl("Fit Intercept Set", function (t) {
      t.append(e.$elements["fit-intercept-arr"]);
      e.controls["fit-intercept-arr"] = e.createInput(e.$elements["fit-intercept-arr"], {
        placeHolder: "(true, false)"
      }), e.$elements["fit-intercept-arr"].on("change", function (t) {
        if (e.isInputValueChanged("fit-intercept-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("fit-intercept-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFitInterceptArrControl = function (t) {
    var e = this.options.fnUnit.param["fit-intercept-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["fit-intercept-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxIterArrControl = function (t) {
    var e = this;
    e.$elements["max-iter-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$maxInterationArrayPropeties = e.addPropertyControl("Max Iteration Set", function (t) {
      t.append(e.$elements["max-iter-arr"]);
      e.controls["max-iter-arr"] = e.createInput(e.$elements["max-iter-arr"], {
        placeHolder: "(value > 0)"
      }), e.$elements["max-iter-arr"].on("change", function (t) {
        if (e.isInputValueChanged("max-iter-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("max-iter-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMaxIterArrControl = function (t) {
    var e = this.options.fnUnit.param["max-iter-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-iter-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createStandardizationArrControl = function (t) {
    var e = this;
    e.$elements["standardization-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$standardizationArrayProperties = e.addPropertyControl("Standardization Set", function (t) {
      t.append(e.$elements["standardization-arr"]);
      e.controls["standardization-arr"] = e.createInput(e.$elements["standardization-arr"], {
        placeHolder: "(true, false)"
      }), e.$elements["standardization-arr"].on("change", function (t) {
        if (e.isInputValueChanged("standardization-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("standardization-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderStandardizationArrControl = function (t) {
    var e = this.options.fnUnit.param["standardization-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["standardization-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createRegParamArrControl = function (t) {
    var e = this;
    e.$elements["reg-param-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$regParamArrayProperties = e.addPropertyControl("Regularization Parameter Set", function (t) {
      t.append(e.$elements["reg-param-arr"]);
      e.controls["reg-param-arr"] = e.createInput(e.$elements["reg-param-arr"], {
        placeHolder: "(value >= 0.0)"
      }), e.$elements["reg-param-arr"].on("change", function (t) {
        if (e.isInputValueChanged("reg-param-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("reg-param-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderRegParamArrControl = function (t) {
    var e = this.options.fnUnit.param["reg-param-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["reg-param-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSolverArrControl = function (t) {
    var e = this;
    e.$elements["solver-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$solverArrayProperties = e.addPropertyControl("Solver Set", function (t) {
      t.append(e.$elements["solver-arr"]);
      e.controls["solver-arr"] = e.createInput(e.$elements["solver-arr"], {
        placeHolder: "(auto, l-bfgs, normal)"
      }), e.$elements["solver-arr"].on("change", function (t) {
        if (e.isInputValueChanged("solver-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("solver-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSolverArrControl = function (t) {
    var e = this.options.fnUnit.param["solver-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["solver-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createToleranceArrControl = function (t) {
    var e = this;
    e.$elements["tolerance-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$tolArrayProperties = e.addPropertyControl("Tolerance Set", function (t) {
      t.append(e.$elements["tolerance-arr"]);
      e.controls["tolerence-arr"] = e.createInput(e.$elements["tolerance-arr"], {
        placeHolder: "(value > 0.0)"
      }), e.$elements["tolerance-arr"].on("change", function (t) {
        if (e.isInputValueChanged("tolerance-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("tolerance-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderToleranceArrControl = function (t) {
    var e = this.options.fnUnit.param["tolerance-arr"];
    this.$elements["tolerance-arr"].val(e || "");
    var o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["tolerance-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createTrainRatioControl = function (t) {
    var e = this;
    e.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$trainRatioProperties = e.addPropertyControl("Train Ratio", function (t) {
      t.append(e.$elements["train-ratio"]);
      e.controls["train-ratio"] = e.createNumericInput(e.$elements["train-ratio"], {
        placeholder: "0.75 (0.0 <= value <= 1.0)",
        numberType: "double"
      }), e.controls["train-ratio"].onChange(function () {
        var t = e.createSetParameterValueCommand("train-ratio", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createNumFoldsControl = function (t) {
    var e = this;
    e.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numFoldsProperties = e.addPropertyControl("Number of Folds", function (t) {
      t.append(e.$elements["num-folds"]);
      e.controls["num-folds"] = e.createNumericInput(e.$elements["num-folds"], {
        placeholder: "3 (value >= 2)",
        numberType: "int"
      }), e.controls["num-folds"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-folds", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createElasticNetControl = function (t) {
    var e = this;
    e.$elements["elastic-net"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$elasticNetProperties = e.addPropertyControl("Elastic Net Parameter", function (t) {
      t.append(e.$elements["elastic-net"]);
      e.controls["elastic-net"] = e.createNumericInput(e.$elements["elastic-net"], {
        placeholder: "0.0 (0.0 < value < 1.0)",
        numberType: "double"
      }), e.controls["elastic-net"].onChange(function () {
        var t = e.createSetParameterValueCommand("elastic-net", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderElasticNetControl = function (t) {
    var e = this.options.fnUnit.param["elastic-net"];
    this.controls["elastic-net"].setValue(e || "");
  }, e.prototype.createFitInterceptControl = function (t) {
    var e = this;
    e.$elements["fit-intercept.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["fit-intercept.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.$fitInterceptProperties = e.addPropertyControl("Fit Intercept", function (t) {
      t.append(e.$elements["fit-intercept.true"]), e.controls["fit-intercept.true"] = e.createRadioButton(e.$elements["fit-intercept.true"], {
        width: "undefined",
        groupName: "fit-intercept",
        checked: !0
      }), e.$elements["fit-intercept.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("fit-intercept", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["fit-intercept.false"]), e.controls["fit-intercept.false"] = e.createRadioButton(e.$elements["fit-intercept.false"], {
        width: "undefined",
        groupName: "fit-intercept"
      }), e.$elements["fit-intercept.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("fit-intercept", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFitInterceptControl = function (t) {
    var e = "fit-intercept." + this.options.fnUnit.param["fit-intercept"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMaxIterControl = function (t) {
    var e = this;
    e.$elements["max-iter"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$maxInterationProperties = e.addPropertyControl("Max Iteration", function (t) {
      t.append(e.$elements["max-iter"]);
      e.controls["max-iter"] = e.createNumericInput(e.$elements["max-iter"], {
        placeholder: "100 (value > 0)",
        numberType: "int"
      }), e.controls["max-iter"].onChange(function () {
        var t = e.createSetParameterValueCommand("max-iter", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMaxIterControl = function (t) {
    var e = this.options.fnUnit.param["max-iter"];
    this.controls["max-iter"].setValue(e || "");
  }, e.prototype.createStandardizationControl = function (t) {
    var e = this;
    e.$elements["standardization.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["standardization.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.$standardizationProperties = e.addPropertyControl("Standardization", function (t) {
      t.append(e.$elements["standardization.true"]), e.controls["standardization.true"] = e.createRadioButton(e.$elements["standardization.true"], {
        width: "undefined",
        groupName: "standardization",
        checked: !0
      }), e.$elements["standardization.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("standardization", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["standardization.false"]), e.controls["standardization.false"] = e.createRadioButton(e.$elements["standardization.false"], {
        width: "undefined",
        groupName: "standardization"
      }), e.$elements["standardization.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("standardization", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderStandardizationControl = function (t) {
    var e = "standardization." + this.options.fnUnit.param.standardization;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createRegParamControl = function (t) {
    var e = this;
    e.$elements["reg-param"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$regParamProperties = e.addPropertyControl("Regularization Parameter", function (t) {
      t.append(e.$elements["reg-param"]);
      e.controls["reg-param"] = e.createNumericInput(e.$elements["reg-param"], {
        placeholder: "0.01 (value >= 0.0)",
        numberType: "double",
        min: 0
      }), e.controls["reg-param"].onChange(function () {
        var t = e.createSetParameterValueCommand("reg-param", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderRegParamControl = function (t) {
    var e = this.options.fnUnit.param["reg-param"];
    this.controls["reg-param"].setValue(e || "");
  }, e.prototype.createSolverControl = function (t) {
    var e = this;
    e.$elements["solver.auto"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Auto</div>'), e.$elements["solver.l-bfgs"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">L-BFGS</div>'), e.$elements["solver.normal"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Normal</div>'), e.$solverProperties = e.addPropertyControl("Solver", function (t) {
      t.append(e.$elements["solver.auto"]), e.controls["solver.auto"] = e.createRadioButton(e.$elements["solver.auto"], {
        width: "undefined",
        groupName: "solver"
      }), e.$elements["solver.auto"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("solver", "auto");
        e.executeCommand(o);
      }), t.append(e.$elements["solver.l-bfgs"]), e.controls["solver.l-bfgs"] = e.createRadioButton(e.$elements["solver.l-bfgs"], {
        width: "undefined",
        groupName: "solver"
      }), e.$elements["solver.l-bfgs"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("solver", "l-bfgs");
        e.executeCommand(o);
      }), t.append(e.$elements["solver.normal"]), e.controls["solver.normal"] = e.createRadioButton(e.$elements["solver.normal"], {
        width: "undefined",
        groupName: "solver"
      }), e.$elements["solver.normal"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("solver", "normal");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSolverControl = function (t) {
    var e = "solver." + this.options.fnUnit.param.solver;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createTolControl = function (t) {
    var e = this;
    e.$elements.tol = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$tolProperties = e.addPropertyControl("Tolerance", function (t) {
      t.append(e.$elements.tol);
      e.controls.tol = e.createNumericInput(e.$elements.tol, {
        placeholder: "0.000001 (value > 0.0)",
        numberType: "double"
      }), e.controls.tol.onChange(function () {
        var t = e.createSetParameterValueCommand("tol", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderTolControl = function (t) {
    var e = this.options.fnUnit.param.tol;
    this.controls.tol.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["label-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls["weight-col"].setItems(t);
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 6 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 5 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? (o.ref.param["elastic-net"] = "", o.ref.param["fit-intercept"] = "", o.ref.param["max-iter"] = "", o.ref.param.standardization = "", o.ref.param["reg-param"] = "", o.ref.param.solver = "", o.ref.param.tol = "") : (o.ref.param.method = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["elastic-net-arr"] = [], o.ref.param["fit-intercept-arr"] = [], o.ref.param["max-iter-arr"] = [], o.ref.param["standardization-arr"] = [], o.ref.param["reg-param-arr"] = [], o.ref.param["tolerance-arr"] = [], o.ref.param["train-ratio"] = "", o.ref.param["num-folds"] = "", o.ref.param["solver-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "") : (o.ref.param["elastic-net-arr"] = [], o.ref.param["fit-intercept-arr"] = [], o.ref.param["max-iter-arr"] = [], o.ref.param["standardization-arr"] = [], o.ref.param["reg-param-arr"] = [], o.ref.param["tolerance-arr"] = [], o.ref.param["solver-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show()) : (this.$elasticNetParamArrayProperties.show(), this.$fitInterceptArrayProperties.show(), this.$maxInterationArrayPropeties.show(), this.$standardizationArrayProperties.show(), this.$regParamArrayProperties.show(), this.$tolArrayProperties.show(), this.$solverArrayProperties.show()), this.$methodProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$trainRatioProperties.show(), this.$numFoldsProperties.show(), this.$elasticNetProperties.hide(), this.$fitInterceptProperties.hide(), this.$maxInterationProperties.hide(), this.$standardizationProperties.hide(), this.$regParamProperties.hide(), this.$solverProperties.hide(), this.$tolProperties.hide()) : (this.$methodProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$elasticNetParamArrayProperties.hide(), this.$fitInterceptArrayProperties.hide(), this.$maxInterationArrayPropeties.hide(), this.$standardizationArrayProperties.hide(), this.$regParamArrayProperties.hide(), this.$tolArrayProperties.hide(), this.$trainRatioProperties.hide(), this.$numFoldsProperties.hide(), this.$solverArrayProperties.hide(), this.$elasticNetProperties.show(), this.$fitInterceptProperties.show(), this.$maxInterationProperties.show(), this.$standardizationProperties.show(), this.$regParamProperties.show(), this.$solverProperties.show(), this.$tolProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$elasticNetParamArrayProperties.show(), this.$fitInterceptArrayProperties.show(), this.$maxInterationArrayPropeties.show(), this.$standardizationArrayProperties.show(), this.$regParamArrayProperties.show(), this.$tolArrayProperties.show(), this.$solverArrayProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$elasticNetParamArrayProperties.hide(), this.$fitInterceptArrayProperties.hide(), this.$maxInterationArrayPropeties.hide(), this.$standardizationArrayProperties.hide(), this.$regParamArrayProperties.hide(), this.$tolArrayProperties.hide(), this.$solverArrayProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show()));
  }, e.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid == t.options.fnUnit.fid ? this.renderValues(t) : t.event.source !== this && this.renderValues(t);
  }, t.VA.Core.Functions.Library.autoLinearRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addYcolumnRule();
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number"]);
    });
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number", "String"]);
    });
  }, t.VA.Core.Functions.Library.autoLinearRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoLogisticRegressionPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoLogisticRegressionPredict",
      name: "AutoLogisticRegressionPredict",
      inData: [],
      outData: [],
      param: {
        "hold-cols": [],
        "prediction-col": "",
        "probability-col": "",
        "raw-prediction-col": ""
      },
      display: {
        label: "Auto Logistic Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict data using a logistic regression model with autonomous features.",
    mandatory: [],
    tags: ["Auto Logistic Regression Predict"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-cols": this.renderHoldColsControl,
      "prediction-col": this.renderPredictionColControl,
      "probability-col": this.renderProbabilityColControl,
      "raw-prediction-col": this.renderRawPredictionColControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColsControl(), this.createPredictionColControl(), this.createProbabilityColControl(), this.createRawPredictionColControl();
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "prediction-col", "Prediction Column Name");
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.createProbabilityColControl = function (t) {
    var e = this;
    e.$elements["probability-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Probability Column Name", function (t) {
      t.append(e.$elements["probability-col"]);
      e.controls["probability-col"] = e.createInput(e.$elements["probability-col"], {
        placeHolder: "probability"
      }), e.$elements["probability-col"].on("change", function (t) {
        if (e.isInputValueChanged("probability-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("probability-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "probability-col", "Probability Column Name");
  }, e.prototype.renderProbabilityColControl = function (t) {
    var e = this.options.fnUnit.param["probability-col"];
    this.$elements["probability-col"].val(e || "");
  }, e.prototype.createRawPredictionColControl = function (t) {
    var e = this;
    e.$elements["raw-prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Raw Prediction Column Name", function (t) {
      t.append(e.$elements["raw-prediction-col"]);
      e.controls["raw-prediction-col"] = e.createInput(e.$elements["raw-prediction-col"], {
        placeHolder: "rawPrediction"
      }), e.$elements["raw-prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("raw-prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("raw-prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "raw-prediction-col", "Raw Prediction Column Name");
  }, e.prototype.renderRawPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["raw-prediction-col"];
    this.$elements["raw-prediction-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["string", "number"]), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.autoLogisticRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "hold-cols", $.unique($.extend(!0, [], t.param["hold-cols"])));
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.autoLogisticRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoLogisticRegressionTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoLogisticRegressionTrain",
      name: "AutoLogisticRegressionTrain",
      inData: [],
      outData: [],
      param: {
        "label-col": "",
        "feature-cols": [],
        auto: "false",
        method: "crossValid",
        "metric-name": "",
        "search-method": "grid",
        "num-search": "",
        "search-seed": "",
        "elastic-net-param-arr": [],
        "fit-intercept-arr": [],
        "max-iter-arr": [],
        "standardization-arr": [],
        "reg-param-arr": [],
        "threshold-arr": [],
        "tol-arr": [],
        "train-ratio": "",
        "num-folds": "",
        "elastic-net-param": "",
        "fit-intercept": "true",
        "max-iter": "",
        standardization: "true",
        "reg-param": "",
        threshold: "",
        tol: ""
      },
      display: {
        label: "Auto Logistic Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fit a logistic regression model with autonomous features.",
    mandatory: [],
    tags: ["Auto Logistic Regression Train"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "4"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "label-col": this.renderLabelColControl,
      "feature-cols": this.renderFeatureColsControl,
      auto: this.renderAutoControl,
      method: this.renderMethodControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      "elastic-net-param-arr": this.renderElasticNetParamArrControl,
      "fit-intercept-arr": this.renderFitInterceptArrControl,
      "max-iter-arr": this.renderMaxIterArrControl,
      "standardization-arr": this.renderStandardizationArrControl,
      "reg-param-arr": this.renderRegParamArrControl,
      "threshold-arr": this.renderThresholdArrControl,
      "tol-arr": this.renderTolArrControl,
      "train-ratio": this.renderTrainRatioControl,
      "num-folds": this.renderNumFoldsControl,
      "elastic-net-param": this.renderElasticNetParamControl,
      "fit-intercept": this.renderFitInterceptControl,
      "max-iter": this.renderMaxIterControl,
      standardization: this.renderStandardizationControl,
      "reg-param": this.renderRegParamControl,
      threshold: this.renderThresholdControl,
      tol: this.renderTolControl
    }, this.$elements = {}, this.controls = {}, this.createLabelColControl(), this.createFeatureColsControl(), this.createAutoControl(), this.createMethodControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createElasticNetParamArrControl(), this.createFitInterceptArrControl(), this.createMaxIterArrControl(), this.createStandardizationArrControl(), this.createRegParamArrControl(), this.createThresholdArrControl(), this.createTolArrControl(), this.createTrainRatioControl(), this.createNumFoldsControl(), this.createElasticNetParamControl(), this.createFitInterceptControl(), this.createMaxIterControl(), this.createStandardizationControl(), this.createRegParamControl(), this.createThresholdControl(), this.createTolControl();
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createAutoControl = function (e) {
    var o = this;
    o.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), o.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var r = o.addPropertyControl("Auto", function (t) {
      t.append(o.$elements["auto.true"]), o.controls["auto.true"] = o.createRadioButton(o.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto",
        checked: !0
      }), o.$elements["auto.true"].on("checked", function (t) {
        o.changeParameter(!0), o.executeAutoCommand("true");
      }), t.append(o.$elements["auto.false"]), o.controls["auto.false"] = o.createRadioButton(o.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), o.$elements["auto.false"].on("checked", function (t) {
        o.changeParameter(!1), o.executeAutoCommand("false");
      });
    }, {
      mandatory: !1
    }),
        n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "auto", "Auto"), "not-allowed" == t.VA.SettingStorage.getValue("common.autonomous.analytics") && r.hide();
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements["method.trainValid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">TrainValid</div>'), e.$elements["method.crossValid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">CrossValid</div>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements["method.trainValid"]), e.controls["method.trainValid"] = e.createRadioButton(e.$elements["method.trainValid"], {
        width: "undefined",
        groupName: "method"
      }), e.$elements["method.trainValid"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("method", "trainValid");
        e.executeCommand(o);
      }), t.append(e.$elements["method.crossValid"]), e.controls["method.crossValid"] = e.createRadioButton(e.$elements["method.crossValid"], {
        width: "undefined",
        groupName: "method",
        checked: !0
      }), e.$elements["method.crossValid"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("method", "crossValid");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$methodProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "method", "Method");
  }, e.prototype.renderMethodControl = function (t) {
    var e = "method." + this.options.fnUnit.param.method;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "f1",
          value: "f1"
        }, {
          label: "weighted precision",
          value: "weightedPrecision"
        }, {
          label: "weighted recall",
          value: "weightedRecall"
        }, {
          label: "accuracy",
          value: "accuracy"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$metricNameProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "metric-name", "Metric Name");
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (t) {
    var e = this;
    e.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numSearchProperties = e.addPropertyControl("Number of Random Hyperparameters", function (t) {
      t.append(e.$elements["num-search"]);
      e.controls["num-search"] = e.createNumericInput(e.$elements["num-search"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["num-search"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-search", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createElasticNetParamArrControl = function (t) {
    var e = this;
    e.$elements["elastic-net-param-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$elasticNetParamArrayProperties = e.addPropertyControl("Elastic Net Parameter Set", function (t) {
      t.append(e.$elements["elastic-net-param-arr"]);
      e.controls["elastic-net-param-arr"] = e.createInput(e.$elements["elastic-net-param-arr"], {
        placeHolder: "(0.0 <= value <= 1.0)"
      }), e.$elements["elastic-net-param-arr"].on("change", function (t) {
        if (e.isInputValueChanged("elastic-net-param-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("elastic-net-param-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = e.$elasticNetParamArrayProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "elastic-net-param-arr", "Elastic Net Parameter Set");
  }, e.prototype.renderElasticNetParamArrControl = function (t) {
    var e = this.options.fnUnit.param["elastic-net-param-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["elastic-net-param-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createFitInterceptArrControl = function (t) {
    var e = this;
    e.$elements["fit-intercept-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$fitInterceptArrayProperties = e.addPropertyControl("Fit Intercept Set", function (t) {
      t.append(e.$elements["fit-intercept-arr"]);
      e.controls["fit-intercept-arr"] = e.createInput(e.$elements["fit-intercept-arr"], {
        placeHolder: "(true, false)"
      }), e.$elements["fit-intercept-arr"].on("change", function (t) {
        if (e.isInputValueChanged("fit-intercept-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("fit-intercept-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = e.$fitInterceptArrayProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "fit-intercept-arr", "Fit Intercept Set");
  }, e.prototype.renderFitInterceptArrControl = function (t) {
    var e = this.options.fnUnit.param["fit-intercept-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["fit-intercept-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxIterArrControl = function (t) {
    var e = this;
    e.$elements["max-iter-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$maxInterationArrayPropeties = e.addPropertyControl("Max Iteration Set", function (t) {
      t.append(e.$elements["max-iter-arr"]);
      e.controls["max-iter-arr"] = e.createInput(e.$elements["max-iter-arr"], {
        placeHolder: "(value > 0)"
      }), e.$elements["max-iter-arr"].on("change", function (t) {
        if (e.isInputValueChanged("max-iter-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("max-iter-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = e.$maxInterationArrayPropeties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "max-iter-arr", "Max Iteration Set");
  }, e.prototype.renderMaxIterArrControl = function (t) {
    var e = this.options.fnUnit.param["max-iter-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-iter-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createStandardizationArrControl = function (t) {
    var e = this;
    e.$elements["standardization-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$standardizationArrayProperties = e.addPropertyControl("Standardization Set", function (t) {
      t.append(e.$elements["standardization-arr"]);
      e.controls["standardization-arr"] = e.createInput(e.$elements["standardization-arr"], {
        placeHolder: "(true, false)"
      }), e.$elements["standardization-arr"].on("change", function (t) {
        if (e.isInputValueChanged("standardization-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("standardization-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = e.$standardizationArrayProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "standardization-arr", "Standardization Set");
  }, e.prototype.renderStandardizationArrControl = function (t) {
    var e = this.options.fnUnit.param["standardization-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["standardization-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createRegParamArrControl = function (t) {
    var e = this;
    e.$elements["reg-param-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$regParamArrayProperties = e.addPropertyControl("Regularization Parameter Set", function (t) {
      t.append(e.$elements["reg-param-arr"]);
      e.controls["reg-param-arr"] = e.createInput(e.$elements["reg-param-arr"], {
        placeHolder: "(value >= 0.0)"
      }), e.$elements["reg-param-arr"].on("change", function (t) {
        if (e.isInputValueChanged("reg-param-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("reg-param-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = e.$regParamArrayProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "reg-param-arr", "Regularization Parameter Set");
  }, e.prototype.renderRegParamArrControl = function (t) {
    var e = this.options.fnUnit.param["reg-param-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["reg-param-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createThresholdArrControl = function (t) {
    var e = this;
    e.$elements["threshold-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$thresholdArrayProperties = e.addPropertyControl("Threshold Set", function (t) {
      t.append(e.$elements["threshold-arr"]);
      e.controls["threshold-arr"] = e.createInput(e.$elements["threshold-arr"], {
        placeHolder: "(0.0 <= value <= 1.0)"
      }), e.$elements["threshold-arr"].on("change", function (t) {
        if (e.isInputValueChanged("threshold-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("threshold-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = e.$thresholdArrayProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "threshold-arr", "Threshold Set");
  }, e.prototype.renderThresholdArrControl = function (t) {
    var e = this.options.fnUnit.param["threshold-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["threshold-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createTolArrControl = function (t) {
    var e = this;
    e.$elements["tol-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$tolArrayProperties = e.addPropertyControl("Tolerance Set", function (t) {
      t.append(e.$elements["tol-arr"]);
      e.controls["tol-arr"] = e.createInput(e.$elements["tol-arr"], {
        placeHolder: "(value > 0.0)"
      }), e.$elements["tol-arr"].on("change", function (t) {
        if (e.isInputValueChanged("tol-arr", $(this).val())) {
          var o = e.createSetArrayParameterCommand("tol-arr", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = e.$tolArrayProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "tol-arr", "Tolerance Set");
  }, e.prototype.renderTolArrControl = function (t) {
    var e = this.options.fnUnit.param["tol-arr"];
    this.$elements["tol-arr"].val(e || "");
    var o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["tol-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createTrainRatioControl = function (t) {
    var e = this;
    e.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$trainRatioProperties = e.addPropertyControl("Train Ratio", function (t) {
      t.append(e.$elements["train-ratio"]);
      e.controls["train-ratio"] = e.createNumericInput(e.$elements["train-ratio"], {
        placeholder: "0.75 (0.0 <= value <= 1.0)",
        numberType: "double"
      }), e.controls["train-ratio"].onChange(function () {
        var t = e.createSetParameterValueCommand("train-ratio", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var o = e.$trainRatioProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "train-ratio", "Train Ratio");
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createNumFoldsControl = function (t) {
    var e = this;
    e.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numFoldsProperties = e.addPropertyControl("Number of Folds", function (t) {
      t.append(e.$elements["num-folds"]);
      e.controls["num-folds"] = e.createNumericInput(e.$elements["num-folds"], {
        placeholder: "3 (value >= 2)",
        numberType: "int"
      }), e.controls["num-folds"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-folds", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var o = e.$numFoldsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "num-folds", "Number of Folds");
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createElasticNetParamControl = function (t) {
    var e = this;
    e.$elements["elastic-net-param"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$elasticNetParamProperties = e.addPropertyControl("Elastic Net Parameter", function (t) {
      t.append(e.$elements["elastic-net-param"]);
      e.controls["elastic-net-param"] = e.createNumericInput(e.$elements["elastic-net-param"], {
        placeholder: "0.0 (0.0 <= value <= 1.0)",
        numberType: "double"
      }), e.controls["elastic-net-param"].onChange(function () {
        var t = e.createSetParameterValueCommand("elastic-net-param", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var o = e.$elasticNetParamProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "elastic-net-param", "Elastic Net Parameter");
  }, e.prototype.renderElasticNetParamControl = function (t) {
    var e = this.options.fnUnit.param["elastic-net-param"];
    this.controls["elastic-net-param"].setValue(e || "");
  }, e.prototype.createFitInterceptControl = function (t) {
    var e = this;
    e.$elements["fit-intercept.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["fit-intercept.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.$fitInterceptProperties = e.addPropertyControl("Fit Intercept", function (t) {
      t.append(e.$elements["fit-intercept.true"]), e.controls["fit-intercept.true"] = e.createRadioButton(e.$elements["fit-intercept.true"], {
        width: "undefined",
        groupName: "fit-intercept",
        checked: !0
      }), e.$elements["fit-intercept.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("fit-intercept", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["fit-intercept.false"]), e.controls["fit-intercept.false"] = e.createRadioButton(e.$elements["fit-intercept.false"], {
        width: "undefined",
        groupName: "fit-intercept"
      }), e.$elements["fit-intercept.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("fit-intercept", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$fitInterceptProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "fit-intercept", "Fit Intercept");
  }, e.prototype.renderFitInterceptControl = function (t) {
    var e = "fit-intercept." + this.options.fnUnit.param["fit-intercept"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMaxIterControl = function (t) {
    var e = this;
    e.$elements["max-iter"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$maxInterationProperties = e.addPropertyControl("Max Iteration", function (t) {
      t.append(e.$elements["max-iter"]);
      e.controls["max-iter"] = e.createNumericInput(e.$elements["max-iter"], {
        placeholder: "100 (value > 0)",
        numberType: "int"
      }), e.controls["max-iter"].onChange(function () {
        var t = e.createSetParameterValueCommand("max-iter", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var o = e.$maxInterationProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "max-iter", "Max Iteration");
  }, e.prototype.renderMaxIterControl = function (t) {
    var e = this.options.fnUnit.param["max-iter"];
    this.controls["max-iter"].setValue(e || "");
  }, e.prototype.createStandardizationControl = function (t) {
    var e = this;
    e.$elements["standardization.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["standardization.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.$standardizationProperties = e.addPropertyControl("Standardization", function (t) {
      t.append(e.$elements["standardization.true"]), e.controls["standardization.true"] = e.createRadioButton(e.$elements["standardization.true"], {
        width: "undefined",
        groupName: "standardization",
        checked: !0
      }), e.$elements["standardization.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("standardization", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["standardization.false"]), e.controls["standardization.false"] = e.createRadioButton(e.$elements["standardization.false"], {
        width: "undefined",
        groupName: "standardization"
      }), e.$elements["standardization.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("standardization", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$standardizationProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "standardization", "Standardization");
  }, e.prototype.renderStandardizationControl = function (t) {
    var e = "standardization." + this.options.fnUnit.param.standardization;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createRegParamControl = function (t) {
    var e = this;
    e.$elements["reg-param"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$regParamProperties = e.addPropertyControl("Regularization Parameter", function (t) {
      t.append(e.$elements["reg-param"]);
      e.controls["reg-param"] = e.createNumericInput(e.$elements["reg-param"], {
        placeholder: "0.0 (value >= 0.0)",
        numberType: "double",
        min: 0
      }), e.controls["reg-param"].onChange(function () {
        var t = e.createSetParameterValueCommand("reg-param", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var o = e.$regParamProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "reg-param", "Regularization Parameter");
  }, e.prototype.renderRegParamControl = function (t) {
    var e = this.options.fnUnit.param["reg-param"];
    this.controls["reg-param"].setValue(e || "");
  }, e.prototype.createThresholdControl = function (t) {
    var e = this;
    e.$elements.threshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$thresholdProperties = e.addPropertyControl("Threshold", function (t) {
      t.append(e.$elements.threshold);
      e.controls.threshold = e.createNumericInput(e.$elements.threshold, {
        placeholder: "0.5 (0.0 <= value <= 1.0)",
        numberType: "double"
      }), e.controls.threshold.onChange(function () {
        var t = e.createSetParameterValueCommand("threshold", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var o = e.$thresholdProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "threshold", "Threshold");
  }, e.prototype.renderThresholdControl = function (t) {
    var e = this.options.fnUnit.param.threshold;
    this.controls.threshold.setValue(e || "");
  }, e.prototype.createTolControl = function (t) {
    var e = this;
    e.$elements.tol = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$tolProperties = e.addPropertyControl("Tolerance", function (t) {
      t.append(e.$elements.tol);
      e.controls.tol = e.createNumericInput(e.$elements.tol, {
        placeholder: "0.000001 (value > 0.0)",
        numberType: "double"
      }), e.controls.tol.onChange(function () {
        var t = e.createSetParameterValueCommand("tol", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var o = e.$tolProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "tol", "Tolerance");
  }, e.prototype.renderTolControl = function (t) {
    var e = this.options.fnUnit.param.tol;
    this.controls.tol.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["label-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["feature-cols"].setItems(t);
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 4 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 3 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? (o.ref.param["elastic-net-param"] = "", o.ref.param["fit-intercept"] = "", o.ref.param["max-iter"] = "", o.ref.param.standardization = "", o.ref.param["reg-param"] = "", o.ref.param.threshold = "", o.ref.param.tol = "") : (o.ref.param.method = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["elastic-net-param-arr"] = [], o.ref.param["fit-intercept-arr"] = [], o.ref.param["max-iter-arr"] = [], o.ref.param["standardization-arr"] = [], o.ref.param["reg-param-arr"] = [], o.ref.param["threshold-arr"] = [], o.ref.param["tol-arr"] = [], o.ref.param["train-ratio"] = "", o.ref.param["num-folds"] = "");
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "") : (o.ref.param["elastic-net-param-arr"] = [], o.ref.param["fit-intercept-arr"] = [], o.ref.param["max-iter-arr"] = [], o.ref.param["standardization-arr"] = [], o.ref.param["reg-param-arr"] = [], o.ref.param["threshold-arr"] = [], o.ref.param["tol-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show()) : (this.$elasticNetParamArrayProperties.show(), this.$fitInterceptArrayProperties.show(), this.$maxInterationArrayPropeties.show(), this.$standardizationArrayProperties.show(), this.$regParamArrayProperties.show(), this.$thresholdArrayProperties.show(), this.$tolArrayProperties.show()), this.$methodProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$trainRatioProperties.show(), this.$numFoldsProperties.show(), this.$elasticNetParamProperties.hide(), this.$fitInterceptProperties.hide(), this.$maxInterationProperties.hide(), this.$standardizationProperties.hide(), this.$regParamProperties.hide(), this.$thresholdProperties.hide(), this.$tolProperties.hide()) : (this.$methodProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$elasticNetParamArrayProperties.hide(), this.$fitInterceptArrayProperties.hide(), this.$maxInterationArrayPropeties.hide(), this.$standardizationArrayProperties.hide(), this.$regParamArrayProperties.hide(), this.$thresholdArrayProperties.hide(), this.$tolArrayProperties.hide(), this.$trainRatioProperties.hide(), this.$numFoldsProperties.hide(), this.$elasticNetParamProperties.show(), this.$fitInterceptProperties.show(), this.$maxInterationProperties.show(), this.$standardizationProperties.show(), this.$regParamProperties.show(), this.$thresholdProperties.show(), this.$tolProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$elasticNetParamArrayProperties.show(), this.$fitInterceptArrayProperties.show(), this.$maxInterationArrayPropeties.show(), this.$standardizationArrayProperties.show(), this.$regParamArrayProperties.show(), this.$thresholdArrayProperties.show(), this.$tolArrayProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$elasticNetParamArrayProperties.hide(), this.$fitInterceptArrayProperties.hide(), this.$maxInterationArrayPropeties.hide(), this.$standardizationArrayProperties.hide(), this.$regParamArrayProperties.hide(), this.$thresholdArrayProperties.hide(), this.$tolArrayProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show()));
  }, e.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid == t.options.fnUnit.fid ? this.renderValues(t) : t.event.source !== this && this.renderValues(t);
  }, t.VA.Core.Functions.Library.autoLogisticRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addLabelColRule(), this.addFeatureColsRule();
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number", "string"]);
    });
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.autoLogisticRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoMLPTrainForClassification = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoMLPTrainForClassification",
      name: "AutoMLPTrainForClassification",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "label-col": "",
        auto: "false",
        method: "crossvalid",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "random",
        "num-search": "",
        "search-seed": "",
        "num-hidden-layers-range": [],
        "size-of-one-layer-range": [],
        "hidden-layers-arr": [],
        "hidden-layers": []
      },
      display: {
        label: "Auto MLP Train For Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Auto Multilayer Perceptron Train For Classification",
    mandatory: [],
    tags: ["multilayer", "perceptron"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "2",
      max: "3"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "label-col": this.renderLabelColControl,
      auto: this.renderAutoControl,
      method: this.renderMethodControl,
      "num-folds": this.renderNumFoldsControl,
      "train-ratio": this.renderTrainRatioControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      "num-hidden-layers-range": this.renderNumHiddenLayersRangeControl,
      "size-of-one-layer-range": this.renderSizeOfOneLayerRangeControl,
      "hidden-layers-arr": this.renderHiddenLayersArrControl,
      "hidden-layers": this.renderHiddenLayersControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createLabelColControl(), this.createAutoControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createNumHiddenLayersRangeControl(), this.createSizeOfOneLayerRangeControl(), this.createHiddenLayersArrControl(), this.createHiddenLayersControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Feature Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Label Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createAutoControl = function (t) {
    var e = this;
    e.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.addPropertyControl("Auto", function (t) {
      t.append(e.$elements["auto.true"]), e.controls["auto.true"] = e.createRadioButton(e.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto"
      }), e.$elements["auto.true"].on("checked", function (t) {
        e.createSetParameterValueCommand("auto", "true");
        e.changeParameter(!0), e.executeAutoCommand("true");
      }), t.append(e.$elements["auto.false"]), e.controls["auto.false"] = e.createRadioButton(e.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), e.$elements["auto.false"].on("checked", function (t) {
        e.createSetParameterValueCommand("auto", "false");
        e.changeParameter(!1), e.executeAutoCommand("false");
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements["method.crossvalid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Cross Validation</div>'), e.$elements["method.trainvalid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Train Validation</div>'), e.$methodProperties = e.$methodProperties = e.addPropertyControl("Validation Method", function (t) {
      t.append(e.$elements["method.crossvalid"]), e.controls["method.crossvalid"] = e.createRadioButton(e.$elements["method.crossvalid"], {
        width: "undefined",
        groupName: "method"
      }), e.$elements["method.crossvalid"].on("checked", function (t) {
        e.changeMethodParameter("crossvalid"), e.executeMethodCommand("crossvalid");
      }), t.append(e.$elements["method.trainvalid"]), e.controls["method.trainvalid"] = e.createRadioButton(e.$elements["method.trainvalid"], {
        width: "undefined",
        groupName: "method"
      }), e.$elements["method.trainvalid"].on("checked", function (t) {
        e.changeMethodParameter("trainvalid"), e.executeMethodCommand("trainvalid");
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderMethodControl = function (t) {
    var e = "method." + this.options.fnUnit.param.method;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.changeMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("crossvalid" == t ? (this.$numFoldsProperties.show(), this.$trainRatioProperties.hide()) : (this.$numFoldsProperties.hide(), this.$trainRatioProperties.show()));
  }, e.prototype.executeMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param.method = e, "crossvalid" === e ? o.ref.param["train-ratio"] = "" : o.ref.param["num-folds"] = "";
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createNumFoldsControl = function (t) {
    var e = this;
    e.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numFoldsProperties = e.addPropertyControl(" Number of Folds", function (t) {
      t.append(e.$elements["num-folds"]);
      e.controls["num-folds"] = e.createNumericInput(e.$elements["num-folds"], {
        placeholder: "3 (2 <= value)",
        numberType: "int"
      }), e.controls["num-folds"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-folds", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createTrainRatioControl = function (t) {
    var e = this;
    e.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$trainRatioProperties = e.addPropertyControl(" Train Ratio", function (t) {
      t.append(e.$elements["train-ratio"]);
      e.controls["train-ratio"] = e.createNumericInput(e.$elements["train-ratio"], {
        placeholder: "0.75 (0 < value < 1)",
        numberType: "double"
      }), e.controls["train-ratio"].onChange(function () {
        var t = e.createSetParameterValueCommand("train-ratio", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "f1",
          value: "f1",
          default: !1
        }, {
          label: "Weighted Precision",
          value: "weightedPrecision",
          default: !1
        }, {
          label: "Weighted Recall",
          value: "weightedRecall",
          default: !1
        }, {
          label: "Accuracy",
          value: "accuracy",
          default: !1
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Random Search</div>'), e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Grid Search</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      }), t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (t) {
    var e = this;
    e.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numSearchProperties = e.addPropertyControl("Number of Random Hyperparameters", function (t) {
      t.append(e.$elements["num-search"]);
      e.controls["num-search"] = e.createNumericInput(e.$elements["num-search"], {
        placeholder: "15",
        numberType: "int"
      }), e.controls["num-search"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-search", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createNumHiddenLayersRangeControl = function (t) {
    var e = this;
    e.$elements["num-hidden-layers-range"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$numHiddenLayersRangeProperties = e.addPropertyControl("Number of Hidden Layer (range)", function (t) {
      t.append(e.$elements["num-hidden-layers-range"]);
      e.controls["num-hidden-layers-range"] = e.createInput(e.$elements["num-hidden-layers-range"], {
        placeHolder: "1, 3"
      }), e.$elements["num-hidden-layers-range"].on("change", function (t) {
        if (e.isInputValueChanged("num-hidden-layers-range", $(this).val() ? [$(this).val()] : [])) {
          var o = e.createSetArrayParameterCommand("num-hidden-layers-range", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumHiddenLayersRangeControl = function (t) {
    var e = this.options.fnUnit.param["num-hidden-layers-range"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["num-hidden-layers-range"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSizeOfOneLayerRangeControl = function (t) {
    var e = this;
    e.$elements["size-of-one-layer-range"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$sizeOfOneLayersRangeProperties = e.addPropertyControl("Size of Each Layer (range)", function (t) {
      t.append(e.$elements["size-of-one-layer-range"]);
      e.controls["size-of-one-layer-range"] = e.createInput(e.$elements["size-of-one-layer-range"], {
        placeHolder: "3, 29"
      }), e.$elements["size-of-one-layer-range"].on("change", function (t) {
        if (e.isInputValueChanged("size-of-one-layer-range", $(this).val() ? [$(this).val()] : [])) {
          var o = e.createSetArrayParameterCommand("size-of-one-layer-range", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSizeOfOneLayerRangeControl = function (t) {
    var e = this.options.fnUnit.param["size-of-one-layer-range"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["size-of-one-layer-range"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createHiddenLayersRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-property-row-container brtc-va-editors-property-row-content"></div>'),
        n = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        a = $('<div class="brtc-va-editors-property-row-content-add-button"></div>'),
        i = $('<div class="brtc-va-editors-property-row-content-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.$elements["hidden-layers-arr"].append(r), this.createInput(n, {
      height: "23px"
    }, "", {
      width: "90%",
      float: "left"
    }), this.byHiddenLayerssControlArray.push(n), e || n.jqxInput("focus"), n.on("change", function (t) {
      var e = [];

      for (var r in o.byHiddenLayerssControlArray) {
        var n = o.byHiddenLayerssControlArray[r].val().split(",");

        for (var a in n) {
          e.push(n[a].trim());
        }
      }

      if (JSON.stringify(o.options.fnUnit.param["hidden-layers-arr"]) != JSON.stringify([e])) {
        var i = o.createHiddenLayersArrCommand();
        o.executeCommand(i);
      }
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-property-row-content"),
          e = t.prevAll().length;
      o.byHiddenLayerssControlArray.splice(e, 1), t.remove();
      var r = o.createHiddenLayersArrCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createHiddenLayersRow(!1, !1);
      var t = o.createHiddenLayersArrCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.createHiddenLayersArrControl = function (t) {
    var e = this;
    e.$elements["hidden-layers-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$hiddenLayersArrProperties = e.addPropertyControl("Hidden Layers (array)", function (t) {
      t.append(e.$elements["hidden-layers-arr"]);
    }, {
      mandatory: !1
    });
    var o = e.$hiddenLayersArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "hidden-layers-arr", "Hidden Layers (array)");
  }, e.prototype.renderHiddenLayersArrControl = function (t) {
    var e = this.options.fnUnit.param["hidden-layers-arr"];
    this.byHiddenLayerssControlArray = [], this.$elements["hidden-layers-arr"].empty(), this.createHiddenLayersRow(!0, !0);

    for (var o = 0; o < e.length; o++) {
      o >= 1 && this.createHiddenLayersRow(!1, !0);
      var r = "";

      for (var n in e[o]) {
        r = r + e[o][n] + ",";
      }

      this.byHiddenLayerssControlArray[o].val(r.substring(0, r.length - 1));
    }
  }, e.prototype.createHiddenLayersArrCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["hidden-layers-arr"] = [];
    var o = [];

    for (var r in this.byHiddenLayerssControlArray) {
      var n = [],
          a = this.byHiddenLayerssControlArray[r].val().split(",");

      for (var i in a) {
        n.push(a[i].trim());
      }

      o.push(n);
    }

    return e.ref.param["hidden-layers-arr"] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createHiddenLayersControl = function (t) {
    var e = this;
    e.$elements["hidden-layers"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$hiddenLayersProperties = e.addPropertyControl("Hidden layers", function (t) {
      t.append(e.$elements["hidden-layers"]);
      e.controls["hidden-layers"] = e.createInput(e.$elements["hidden-layers"], {
        placeHolder: "3, 29"
      }), e.$elements["hidden-layers"].on("change", function (t) {
        if (e.isInputValueChanged("hidden-layers", $(this).val() ? [$(this).val()] : [])) {
          var o = e.createSetArrayParameterCommand("hidden-layers", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderHiddenLayersControl = function (t) {
    var e = this.options.fnUnit.param["hidden-layers"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["hidden-layers"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show(), this.$numHiddenLayersRangeProperties.show(), this.$sizeOfOneLayersRangeProperties.show()) : this.$hiddenLayersArrProperties.show(), this.$methodProperties.show(), this.$elements["method.crossvalid"].val() ? this.$numFoldsProperties.show() : this.$trainRatioProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$hiddenLayersProperties.hide()) : (this.$methodProperties.hide(), this.$numFoldsProperties.hide(), this.$trainRatioProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$numHiddenLayersRangeProperties.hide(), this.$sizeOfOneLayersRangeProperties.hide(), this.$hiddenLayersArrProperties.hide(), this.$hiddenLayersProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$hiddenLayersArrProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$numHiddenLayersRangeProperties.hide(), this.$sizeOfOneLayersRangeProperties.hide()) : (this.$hiddenLayersArrProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show(), this.$numHiddenLayersRangeProperties.show(), this.$sizeOfOneLayersRangeProperties.show()));
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 3 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 2 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? o.ref.param["hidden-layers"] = [] : (o.ref.param["num-folds"] = "", o.ref.param["train-ratio"] = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["num-hidden-layers-range"] = [], o.ref.param["size-of-one-layer-range"] = [], o.ref.param["hidden-layers-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["num-hidden-layers-range"] = [], o.ref.param["size-of-one-layer-range"] = []) : o.ref.param["hidden-layers-arr"] = [];
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["label-col"].setItems(t);
  }, t.VA.Core.Functions.Library.autoMLPTrainForClassification.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addLabelColRule(), this.addHiddenLayersRule();
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number", "String"]);
    });
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Label Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number", "string"]);
    });
  }, o.prototype.addHiddenLayersRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "hidden-layers",
        messageParam: ["Hidden layers"]
      }, e, e.param["hidden-layers"]);
    });
  }, t.VA.Core.Functions.Library.autoMLPTrainForClassification.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoOneVsRestLogisticRegressionTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoOneVsRestLogisticRegressionTrain",
      name: "AutoOneVsRestLogisticRegressionTrain",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "label-col": "",
        auto: "false",
        method: "crossvalid",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "random",
        "num-search": "",
        "search-seed": "",
        "fit-intercept-range": [],
        "reg-param-range": [],
        "fit-intercept-arr": [],
        "reg-param-arr": [],
        "fit-intercept": "true",
        "reg-param": ""
      },
      display: {
        label: "Auto One vs Rest Logistic Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Auto One vs Rest Logistic Regression Train",
    mandatory: [],
    tags: [""],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "2",
      max: "3"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "label-col": this.renderLabelColControl,
      auto: this.renderAutoControl,
      method: this.renderMethodControl,
      "num-folds": this.renderNumFoldsControl,
      "train-ratio": this.renderTrainRatioControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      "fit-intercept-range": this.renderFitInterceptRangeControl,
      "reg-param-range": this.renderRegParamRangeControl,
      "fit-intercept-arr": this.renderFitInterceptArrControl,
      "reg-param-arr": this.renderRegParamArrControl,
      "fit-intercept": this.renderFitInterceptControl,
      "reg-param": this.renderRegParamControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createLabelColControl(), this.createAutoControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createFitInterceptRangeControl(), this.createRegParamRangeControl(), this.createFitInterceptArrControl(), this.createRegParamArrControl(), this.createFitInterceptControl(), this.createRegParamControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Feature Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Label Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createAutoControl = function (t) {
    var e = this;
    e.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.addPropertyControl("Auto", function (t) {
      t.append(e.$elements["auto.true"]), e.controls["auto.true"] = e.createRadioButton(e.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto"
      }), e.$elements["auto.true"].on("checked", function (t) {
        e.changeParameter(!0), e.executeAutoCommand("true");
      }), t.append(e.$elements["auto.false"]), e.controls["auto.false"] = e.createRadioButton(e.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), e.$elements["auto.false"].on("checked", function (t) {
        e.changeParameter(!1), e.executeAutoCommand("false");
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements["method.crossvalid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Cross Validation</div>'), e.$elements["method.trainvalid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Train Validation</div>'), e.$methodProperties = e.addPropertyControl("Validation Method", function (t) {
      t.append(e.$elements["method.crossvalid"]), e.controls["method.crossvalid"] = e.createRadioButton(e.$elements["method.crossvalid"], {
        width: "undefined",
        groupName: "method"
      }), e.$elements["method.crossvalid"].on("checked", function (t) {
        e.changeMethodParameter("crossvalid"), e.executeMethodCommand("crossvalid");
      }), t.append(e.$elements["method.trainvalid"]), e.controls["method.trainvalid"] = e.createRadioButton(e.$elements["method.trainvalid"], {
        width: "undefined",
        groupName: "method"
      }), e.$elements["method.trainvalid"].on("checked", function (t) {
        e.changeMethodParameter("trainvalid"), e.executeMethodCommand("trainvalid");
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderMethodControl = function (t) {
    var e = "method." + this.options.fnUnit.param.method;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.changeMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("crossvalid" == t ? (this.$numFoldsProperties.show(), this.$trainRatioProperties.hide()) : (this.$numFoldsProperties.hide(), this.$trainRatioProperties.show()));
  }, e.prototype.executeMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param.method = e, "crossvalid" === e ? o.ref.param["train-ratio"] = "" : o.ref.param["num-folds"] = "";
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createNumFoldsControl = function (t) {
    var e = this;
    e.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numFoldsProperties = e.addPropertyControl(" Number of Folds", function (t) {
      t.append(e.$elements["num-folds"]);
      e.controls["num-folds"] = e.createNumericInput(e.$elements["num-folds"], {
        placeholder: "3 (2 <= value)",
        numberType: "int"
      }), e.controls["num-folds"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-folds", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createTrainRatioControl = function (t) {
    var e = this;
    e.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$trainRatioProperties = e.addPropertyControl(" Train Ratio", function (t) {
      t.append(e.$elements["train-ratio"]);
      e.controls["train-ratio"] = e.createNumericInput(e.$elements["train-ratio"], {
        placeholder: "0.75 (0 < value < 1)",
        numberType: "double"
      }), e.controls["train-ratio"].onChange(function () {
        var t = e.createSetParameterValueCommand("train-ratio", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "f1",
          value: "f1",
          default: !1
        }, {
          label: "Weighted Precision",
          value: "weightedPrecision",
          default: !1
        }, {
          label: "Weighted Recall",
          value: "weightedRecall",
          default: !1
        }, {
          label: "Accuracy",
          value: "accuracy",
          default: !1
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Random Search</div>'), e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Grid Search</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      }), t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (t) {
    var e = this;
    e.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numSearchProperties = e.addPropertyControl("Number of Random Hyperparameters", function (t) {
      t.append(e.$elements["num-search"]);
      e.controls["num-search"] = e.createNumericInput(e.$elements["num-search"], {
        placeholder: "15",
        numberType: "int"
      }), e.controls["num-search"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-search", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createFitInterceptRangeControl = function (t) {
    var e = this;
    e.$elements["fit-intercept-range"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$fitInterceptRangeProperties = e.addPropertyControl("Fit Intercept (range)", function (t) {
      t.append(e.$elements["fit-intercept-range"]);
      e.controls["fit-intercept-range"] = e.createInput(e.$elements["fit-intercept-range"], {
        placeHolder: "true, false"
      }), e.$elements["fit-intercept-range"].on("change", function (t) {
        if (e.isInputValueChanged("fit-intercept-range", $(this).val() ? [$(this).val()] : [])) {
          var o = e.createSetArrayParameterCommand("fit-intercept-range", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFitInterceptRangeControl = function (t) {
    var e = this.options.fnUnit.param["fit-intercept-range"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["fit-intercept-range"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createRegParamRangeControl = function (t) {
    var e = this;
    e.$elements["reg-param-range"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$regParamRangeProperties = e.addPropertyControl("Regularization Parameter (range)", function (t) {
      t.append(e.$elements["reg-param-range"]);
      e.controls["reg-param-range"] = e.createInput(e.$elements["reg-param-range"], {
        placeHolder: "0.0, 0.1"
      }), e.$elements["reg-param-range"].on("change", function (t) {
        if (e.isInputValueChanged("reg-param-range", $(this).val() ? [$(this).val()] : [])) {
          var o = e.createSetArrayParameterCommand("reg-param-range", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderRegParamRangeControl = function (t) {
    var e = this.options.fnUnit.param["reg-param-range"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["reg-param-range"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createFitInterceptRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-property-row-container brtc-va-editors-property-row-content"></div>'),
        n = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        a = $('<div class="brtc-va-editors-property-row-content-add-button"></div>'),
        i = $('<div class="brtc-va-editors-property-row-content-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.$elements["fit-intercept-arr"].append(r), this.createInput(n, {
      height: "23px"
    }, "", {
      width: "90%",
      float: "left"
    }), this.byFitInterceptsControlArray.push(n), e || n.jqxInput("focus"), n.on("change", function (t) {
      var e = [];

      for (var r in o.byFitInterceptsControlArray) {
        var n = o.byFitInterceptsControlArray[r].val().split(",");

        for (var a in n) {
          e.push(n[a].trim());
        }
      }

      if (JSON.stringify(o.options.fnUnit.param["fit-intercept-arr"]) != JSON.stringify([e])) {
        var i = o.createFitInterceptArrCommand();
        o.executeCommand(i);
      }
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-property-row-content"),
          e = t.prevAll().length;
      o.byFitInterceptsControlArray.splice(e, 1), t.remove();
      var r = o.createFitInterceptArrCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createFitInterceptRow(!1, !1);
      var t = o.createFitInterceptArrCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.createFitInterceptArrControl = function (t) {
    var e = this;
    e.$elements["fit-intercept-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$fitInterceptArrProperties = e.addPropertyControl("Fit Intercept (array)", function (t) {
      t.append(e.$elements["fit-intercept-arr"]);
    }, {
      mandatory: !1
    });
    var o = e.$fitInterceptArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "fit-intercept-arr", "Fit Intercept (array)");
  }, e.prototype.renderFitInterceptArrControl = function (t) {
    var e = this.options.fnUnit.param["fit-intercept-arr"];
    this.byFitInterceptsControlArray = [], this.$elements["fit-intercept-arr"].empty(), this.createFitInterceptRow(!0, !0);

    for (var o = 0; o < e.length; o++) {
      o >= 1 && this.createFitInterceptRow(!1, !0);
      var r = "";

      for (var n in e[o]) {
        r = r + e[o][n] + ",";
      }

      this.byFitInterceptsControlArray[o].val(r.substring(0, r.length - 1));
    }
  }, e.prototype.createFitInterceptArrCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["fit-intercept-arr"] = [];
    var o = [];

    for (var r in this.byFitInterceptsControlArray) {
      var n = [],
          a = this.byFitInterceptsControlArray[r].val().split(",");

      for (var i in a) {
        n.push(a[i].trim());
      }

      o.push(n);
    }

    return e.ref.param["fit-intercept-arr"] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createRegParamRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-property-row-container brtc-va-editors-property-row-content"></div>'),
        n = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        a = $('<div class="brtc-va-editors-property-row-content-add-button"></div>'),
        i = $('<div class="brtc-va-editors-property-row-content-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.$elements["reg-param-arr"].append(r), this.createInput(n, {
      height: "23px"
    }, "", {
      width: "90%",
      float: "left"
    }), this.byRegParamsControlArray.push(n), e || n.jqxInput("focus"), n.on("change", function (t) {
      var e = [];

      for (var r in o.byRegParamsControlArray) {
        var n = o.byRegParamsControlArray[r].val().split(",");

        for (var a in n) {
          e.push(n[a].trim());
        }
      }

      if (JSON.stringify(o.options.fnUnit.param["reg-param-arr"]) != JSON.stringify([e])) {
        var i = o.createRegParamArrCommand();
        o.executeCommand(i);
      }
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-property-row-content"),
          e = t.prevAll().length;
      o.byRegParamsControlArray.splice(e, 1), t.remove();
      var r = o.createRegParamArrCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createRegParamRow(!1, !1);
      var t = o.createRegParamArrCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.createRegParamArrControl = function (t) {
    var e = this;
    e.$elements["reg-param-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$regParamArrProperties = e.addPropertyControl("Regularization Parameter (array)", function (t) {
      t.append(e.$elements["reg-param-arr"]);
    }, {
      mandatory: !1
    });
    var o = e.$regParamArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "reg-param-arr", "Fit Intercept (array)");
  }, e.prototype.renderRegParamArrControl = function (t) {
    var e = this.options.fnUnit.param["reg-param-arr"];
    this.byRegParamsControlArray = [], this.$elements["reg-param-arr"].empty(), this.createRegParamRow(!0, !0);

    for (var o = 0; o < e.length; o++) {
      o >= 1 && this.createRegParamRow(!1, !0);
      var r = "";

      for (var n in e[o]) {
        r = r + e[o][n] + ",";
      }

      this.byRegParamsControlArray[o].val(r.substring(0, r.length - 1));
    }
  }, e.prototype.createRegParamArrCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["reg-param-arr"] = [];
    var o = [];

    for (var r in this.byRegParamsControlArray) {
      var n = [],
          a = this.byRegParamsControlArray[r].val().split(",");

      for (var i in a) {
        n.push(a[i].trim());
      }

      o.push(n);
    }

    return e.ref.param["reg-param-arr"] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createFitInterceptControl = function (t) {
    var e = this;
    e.$elements["fit-intercept.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["fit-intercept.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), this.$fitInterceptProperties = e.addPropertyControl("Fit Intercept", function (t) {
      t.append(e.$elements["fit-intercept.true"]), e.controls["fit-intercept.true"] = e.createRadioButton(e.$elements["fit-intercept.true"], {
        width: "undefined",
        groupName: "fit-intercept"
      }), e.$elements["fit-intercept.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("fit-intercept", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["fit-intercept.false"]), e.controls["fit-intercept.false"] = e.createRadioButton(e.$elements["fit-intercept.false"], {
        width: "undefined",
        groupName: "fit-intercept"
      }), e.$elements["fit-intercept.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("fit-intercept", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFitInterceptControl = function (t) {
    var e = "fit-intercept." + this.options.fnUnit.param["fit-intercept"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createRegParamControl = function (t) {
    var e = this;
    e.$elements["reg-param"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.$regParamProperties = e.addPropertyControl("Regularization Parameter", function (t) {
      t.append(e.$elements["reg-param"]);
      e.controls["reg-param"] = e.createNumericInput(e.$elements["reg-param"], {
        placeholder: "0.01",
        numberType: "double"
      }), e.controls["reg-param"].onChange(function () {
        var t = e.createSetParameterValueCommand("reg-param", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderRegParamControl = function (t) {
    var e = this.options.fnUnit.param["reg-param"];
    this.controls["reg-param"].setValue(e || "");
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show(), this.$fitInterceptRangeProperties.show(), this.$regParamRangeProperties.show()) : (this.$fitInterceptArrProperties.show(), this.$regParamArrProperties.show()), this.$methodProperties.show(), this.$elements["method.crossvalid"].val() ? this.$numFoldsProperties.show() : this.$trainRatioProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$fitInterceptProperties.hide(), this.$regParamProperties.hide()) : (this.$methodProperties.hide(), this.$numFoldsProperties.hide(), this.$trainRatioProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$fitInterceptRangeProperties.hide(), this.$regParamRangeProperties.hide(), this.$fitInterceptArrProperties.hide(), this.$regParamArrProperties.hide(), this.$fitInterceptProperties.show(), this.$regParamProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$fitInterceptArrProperties.show(), this.$regParamArrProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$fitInterceptRangeProperties.hide(), this.$regParamRangeProperties.hide()) : (this.$fitInterceptArrProperties.hide(), this.$regParamArrProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show(), this.$fitInterceptRangeProperties.show(), this.$regParamRangeProperties.show()));
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 3 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 2 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? o.ref.param["reg-param"] = "" : (o.ref.param["num-folds"] = "", o.ref.param["train-ratio"] = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["fit-intercept-range"] = [], o.ref.param["reg-param-range"] = [], o.ref.param["fit-intercept-arr"] = [], o.ref.param["reg-param-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["fit-intercept-range"] = [], o.ref.param["reg-param-range"] = []) : (o.ref.param["fit-intercept-arr"] = [], o.ref.param["reg-param-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["label-col"].setItems(t);
  }, t.VA.Core.Functions.Library.autoOneVsRestLogisticRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addLabelColRule();
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number", "String"]);
    });
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Label Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.autoOneVsRestLogisticRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoRegressionPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoRegressionPredict",
      name: "AutoRegressionPredict",
      inData: [],
      outData: [],
      param: {
        "hold-cols": [],
        "prediction-col": ""
      },
      display: {
        label: "Auto Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data from Auto Regression Train function.",
    mandatory: [],
    tags: ["auto", "autonomous", "regression", "predict", "hyperparameter", "auto regression predict"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-cols": this.renderHoldColsControl,
      "prediction-col": this.renderPredictionColControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColsControl(), this.createPredictionColControl();
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "4",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "prediction-col", "Prediction Column Name");
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string", "number[]", "string[]"]), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.autoRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "hold-cols", $.unique($.extend(!0, [], t.param["hold-cols"])));
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.autoRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;
  t.VA.Core.Functions.Library.autoRegressionTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "autoRegressionTrain",
      name: "AutoRegressionTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        seed: "",
        method: "",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "random",
        "num-search": "",
        "search-seed": "",
        regressors: ["lr", "dt", "rf", "gbt"]
      },
      display: {
        label: "Auto Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function trains several regression algorithms that are able to perform using several parameter sets based on grid search using one of the two methods, trainvalid and crossvalid.",
    mandatory: [],
    tags: ["auto", "regression", "train", "autoregressiontrain", "auto regression train"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "3"
    }
  };
  var e = ["lr", "dt", "rf", "gbt"],
      o = {
    lr: [{
      label: "Elastic Net Array",
      name: "elastic-net-arr",
      placeholder: "range [0, 1]"
    }, {
      label: "Fit Intercept Array",
      name: "fit-intercept-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "True",
          value: "true"
        }, {
          label: "False",
          value: "false"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Max Iter Array",
      name: "max-iter-arr",
      placeholder: ">= 0"
    }, {
      label: "Reg Param Array",
      name: "reg-param-arr",
      placeholder: ">= 0"
    }, {
      label: "Standardization Array",
      name: "standardization-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "True",
          value: "true"
        }, {
          label: "False",
          value: "false"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Tolerance Array",
      name: "tolerance-arr",
      placeholder: ""
    }, {
      label: "Weight Column Array",
      name: "weight-col-arr",
      placeholder: ""
    }],
    dt: [{
      label: "Impurity Array",
      name: "impurity-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "Variance",
          value: "variance"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Max Bins Array",
      name: "max-bins-arr",
      placeholder: ">= 0"
    }, {
      label: "Max Depth Array",
      name: "max-depth-arr",
      placeholder: ">= 0"
    }, {
      label: "Min Info Gain Array",
      name: "min-info-gain-arr",
      placeholder: ""
    }, {
      label: "Min Instances Per Node Array",
      name: "min-instances-per-node-arr",
      placeholder: ""
    }],
    rf: [{
      label: "Feature Subset Strategy Array",
      name: "feature-subset-strategy-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "Auto",
          value: "auto"
        }, {
          label: "All",
          value: "all"
        }, {
          label: "Sqrt",
          value: "sqrt"
        }, {
          label: "Log2",
          value: "log2"
        }, {
          label: "Onethird",
          value: "onethird"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Trees Number Array",
      name: "num-trees-arr",
      placeholder: ">= 1"
    }, {
      label: "Max Depth Array",
      name: "max-depth-arr",
      placeholder: ">= 0"
    }, {
      label: "Max Bins Array",
      name: "max-bins-arr",
      placeholder: ">= 2"
    }, {
      label: "Impurity Array",
      name: "impurity-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "Variance",
          value: "variance"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Min Info Gain Array",
      name: "min-info-gain-arr",
      placeholder: ""
    }, {
      label: "Min Instances Per Node Array",
      name: "min-instances-per-node-arr",
      placeholder: ""
    }, {
      label: "Subsampling Rate Array",
      name: "sub-sampling-rate-arr",
      placeholder: "range (0, 1]"
    }],
    gbt: [{
      label: "Impurity Array",
      name: "impurity-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "Variance",
          value: "variance"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Loss Type Array",
      name: "loss-type-arr",
      placeholder: "",
      controltype: "dropdown",
      opt: {
        source: [{
          label: "Squared",
          value: "squared"
        }, {
          label: "Absolute",
          value: "absolute"
        }],
        displayMember: "label",
        valueMember: "value"
      }
    }, {
      label: "Max Bins Array",
      name: "max-bins-arr",
      placeholder: ">= 2"
    }, {
      label: "Max Depth Array",
      name: "max-depth-arr",
      placeholder: ">= 0"
    }, {
      label: "Max Iter Array",
      name: "max-iter-arr",
      placeholder: ">= 0"
    }, {
      label: "Min Info Gain Array",
      name: "min-info-gain-arr",
      placeholder: ""
    }, {
      label: "Min Instances Per Node Array",
      name: "min-instances-per-node-arr",
      placeholder: ""
    }, {
      label: "Step Size Array",
      name: "step-size-arr",
      placeholder: ""
    }, {
      label: "Subsampling Rate Array",
      name: "sub-sampling-rate-arr",
      placeholder: "range (0, 1]"
    }]
  };

  function r(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function n() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  r.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), r.prototype.constructor = r, r.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, r.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      regressors: this.renderRegressorsControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createRegressorsControl();
  }, r.prototype.createSubFunctionsControl = function (t) {
    var e = this;
    this.$stepContainer = $('<div class="brtc-va-editors-sheet-refine-step-container"/>'), e.addPropertyControl("Sub Function", function (t) {
      t.append(e.$stepContainer), e.createPropertiesControl(e.$stepContainer);
    });
  }, r.prototype.createPropertiesControl = function (r) {
    var n = this,
        a = $('<input class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-add-key-condition" type="button" value="Set Properties"/>');
    r.append(a), a.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), a.click(function (r) {
      new t.VA.Core.Dialogs.SubFunctionDialog($(r.target), {
        fnUnit: n.options.fnUnit,
        subFunction: e,
        subFunctionParam: o,
        close: function close(t) {
          if (t.OK) {
            var e = n.createSubFunctionCommand(t.param);
            n.executeCommand(e);
          }
        }
      });
    });
  }, r.prototype.createSubFunctionCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, r.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, r.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, r.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, r.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, r.prototype.createSeedControl = function (t) {
    var e = this;
    e.$elements.seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Seed", function (t) {
      t.append(e.$elements.seed);
      e.controls.seed = e.createNumericInput(e.$elements.seed, {
        placeHolder: "",
        numberType: "int"
      }), e.controls.seed.onChange(function () {
        var t = e.createSetParameterValueCommand("seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderSeedControl = function (t) {
    var e = this.options.fnUnit.param.seed;
    this.controls.seed.setValue(e || "");
  }, r.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      e.controls.method = e.createDropDownList(e.$elements.method, {
        source: [{
          label: "TrainValid",
          value: "TrainValid"
        }, {
          label: "CrossValid",
          value: "CrossValid"
        }],
        displayMember: "label",
        valueMember: "value",
        dropDownHeight: 50
      }), e.controls.method.on("change", function (t) {
        var o = e.createSetParameterValueCommand("method", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderMethodControl = function (t) {
    var e = this.options.fnUnit.param.method;
    this.$elements.method.val(e);
  }, r.prototype.createNumFoldsControl = function (t) {
    var e = this;
    e.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$numFoldsProperties = e.addPropertyControl("Number of Folds", function (t) {
      t.append(e.$elements["num-folds"]);
      e.controls["num-folds"] = e.createNumericInput(e.$elements["num-folds"], {
        placeHolder: "",
        numberType: "int"
      }), e.controls["num-folds"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-folds", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, r.prototype.createTrainRatioControl = function (t) {
    var e = this;
    e.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$trainRatioProperties = e.addPropertyControl("Train Ratio", function (t) {
      t.append(e.$elements["train-ratio"]);
      e.controls["train-ratio"] = e.createNumericInput(e.$elements["train-ratio"], {
        placeHolder: "",
        numberType: "double"
      }), e.controls["train-ratio"].onChange(function () {
        var t = e.createSetParameterValueCommand("train-ratio", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, r.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "rmse",
          value: "rmse"
        }, {
          label: "mse",
          value: "mse"
        }, {
          label: "r2",
          value: "r2"
        }, {
          label: "mae",
          value: "mae"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$metricNameProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "metric-name", "Metric Name");
  }, r.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, r.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, r.prototype.createNumSearchControl = function (e) {
    var o = this;
    o.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numSearchProperties = o.addPropertyControl("Number of Random Hyperparameters", function (e) {
      e.append(o.$elements["num-search"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-search"] = o.createNumericInput(o.$elements["num-search"], r), o.controls["num-search"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-search", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, r.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, r.prototype.createRegressorsControl = function (t) {
    var e = this;
    e.$elements.regressors = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.regressors.append(o), e.$elements.regressors.append(r), e.addPropertyControl("Regressors", function (t) {
      t.append(e.$elements.regressors), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Linear Regression",
        value: "lr"
      }, {
        label: "Decision Tree",
        value: "dt"
      }, {
        label: "Random Forest",
        value: "rf"
      }, {
        label: "Gradient Boosted Trees",
        value: "gbt"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "regressors." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createRegressorsCommand(t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "regressors." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.regressors.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "regressors." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "regressors." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createRegressorsCommand(r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "regressors." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createRegressorsCommand([]);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.renderRegressorsControl = function (t) {
    var e,
        o = this.options.fnUnit.param.regressors,
        r = [{
      label: "Linear Regression",
      value: "lr"
    }, {
      label: "Decision Tree",
      value: "dt"
    }, {
      label: "Random Forest",
      value: "rf"
    }, {
      label: "Gradient Boosted Trees",
      value: "gbt"
    }];

    for (var n in r) {
      e = "regressors." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, r.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e && (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "");
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, r.prototype.createRegressorsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param.regressors = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, r.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, r.prototype.changeSearchMethodParameter = function (t) {
    "grid" == t ? (this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$numSearchProperties.show(), this.$searchSeedProperties.show());
  }, r.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0), this.controls.xcolumns.setItems(t);
  }, t.VA.Core.Functions.Library.autoRegressionTrain.propertiesPanel = r, n.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), n.prototype.constructor = n, n.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule();
  }, n.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    });
  }, n.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    });
  }, t.VA.Core.Functions.Library.autoRegressionTrain.validator = n;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.decisionTreeClassificationPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "decisionTreeClassificationPredict",
      name: "AutoDecisionTreePredictForClassification",
      inData: [],
      outData: [],
      param: {
        "hold-columns": [],
        groupby: [],
        "prediction-col": "",
        "probability-col": "",
        "raw-prediction-col": ""
      },
      display: {
        label: "Auto Decision Tree Predict For Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data based on decision tree from Decision Tree Classification Train function.",
    mandatory: [],
    tags: ["decision", "tree", "classification", "autonomous", "auto", "predict", "Decision Tree Classification Predict", "Auto Decision Tree Predict For Classification"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-columns": this.renderHoldColumnsControl,
      groupby: this.renderGroupbyControl,
      "prediction-col": this.renderPredictionColControl,
      "probability-col": this.renderProbabilityColControl,
      "raw-prediction-col": this.renderRawPredictionColControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColumnsControl(), this.createGroupbyControl(), this.createPredictionColControl(), this.createProbabilityColControl(), this.createRawPredictionColControl();
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "4",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "2",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "prediction-col", "Prediction Column Name");
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.createProbabilityColControl = function (t) {
    var e = this;
    e.$elements["probability-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Probability Column Name", function (t) {
      t.append(e.$elements["probability-col"]);
      e.controls["probability-col"] = e.createInput(e.$elements["probability-col"], {
        placeHolder: "probability"
      }), e.$elements["probability-col"].on("change", function (t) {
        if (e.isInputValueChanged("probability-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("probability-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "probability-col", "Probability Column Name");
  }, e.prototype.renderProbabilityColControl = function (t) {
    var e = this.options.fnUnit.param["probability-col"];
    this.$elements["probability-col"].val(e || "");
  }, e.prototype.createRawPredictionColControl = function (t) {
    var e = this;
    e.$elements["raw-prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Raw Prediction Column Name", function (t) {
      t.append(e.$elements["raw-prediction-col"]);
      e.controls["raw-prediction-col"] = e.createInput(e.$elements["raw-prediction-col"], {
        placeHolder: "raw_prediction"
      }), e.$elements["raw-prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("raw-prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("raw-prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "raw-prediction-col", "Raw Prediction Column Name");
  }, e.prototype.renderRawPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["raw-prediction-col"];
    this.$elements["raw-prediction-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "String", "number[]", "String[]"]), this.controls["hold-columns"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.decisionTreeClassificationPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addHoldColumnsRule(), this.addBaseGroupByRule("hold-columns", "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "String", "number[]", "String[]"]);
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.decisionTreeClassificationPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.decisionTreeClassificationTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "decisionTreeClassificationTrain",
      name: "AutoDecisionTreeTrainForClassification",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        seed: "",
        auto: "false",
        groupby: [],
        method: "",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "grid",
        "num-search": "",
        "search-seed": "",
        impurity: "",
        "max-bins": "",
        "max-depth": "",
        "min-info-gain": "",
        "min-instances-per-node": "",
        thresholds: [],
        "impurity-arr": ["gini", "entropy"],
        "max-bins-arr": [],
        "max-depth-arr": [],
        "min-info-gain-arr": [],
        "min-instances-per-node-arr": [],
        "thresholds-arr": []
      },
      display: {
        label: "Auto Decision Tree Train For Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides decision tree model for classification. It supports both binary and multiclass values of 'Y Column', as well as both continuous and categorical values of 'X Columns'.",
    mandatory: [],
    tags: ["auto", "classification", "decision Tree Classification Train", "Auto Decision Tree Train For Classification"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "4"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      seed: this.renderSeedControl,
      auto: this.renderAutoControl,
      groupby: this.renderGroupbyControl,
      method: this.renderMethodControl,
      "num-folds": this.renderNumFoldsControl,
      "train-ratio": this.renderTrainRatioControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      impurity: this.renderImpurityControl,
      "max-bins": this.renderMaxBinsControl,
      "max-depth": this.renderMaxDepthControl,
      "min-info-gain": this.renderMinInfoGainControl,
      "min-instances-per-node": this.renderMinInstancesPerNodeControl,
      thresholds: this.renderThresholdsControl,
      "impurity-arr": this.renderImpurityArrControl,
      "max-bins-arr": this.renderMaxBinsArrControl,
      "max-depth-arr": this.renderMaxDepthArrControl,
      "min-info-gain-arr": this.renderMinInfoGainArrControl,
      "min-instances-per-node-arr": this.renderMinInstancesPerNodeArrControl,
      "thresholds-arr": this.renderThresholdsArrControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createSeedControl(), this.createAutoControl(), this.createGroupbyControl(), this.createImpurityControl(), this.createMaxDepthControl(), this.createMaxBinsControl(), this.createMinInfoGainControl(), this.createMinInstancesPerNodeControl(), this.createThresholdsControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createImpurityArrControl(), this.createMaxDepthArrControl(), this.createMaxBinsArrControl(), this.createMinInfoGainArrControl(), this.createMinInstancesPerNodeArrControl(), this.createThresholdsArrControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createSeedControl = function (t) {
    var e = this;
    e.$elements.seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Seed", function (t) {
      t.append(e.$elements.seed);
      e.controls.seed = e.createNumericInput(e.$elements.seed, {
        numberType: "int"
      }), e.controls.seed.onChange(function () {
        var t = e.createSetParameterValueCommand("seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "seed", "Seed");
  }, e.prototype.renderSeedControl = function (t) {
    var e = this.options.fnUnit.param.seed;
    this.controls.seed.setValue(e || "");
  }, e.prototype.createAutoControl = function (e) {
    var o = this;
    o.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), o.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var r = o.addPropertyControl("Auto", function (t) {
      t.append(o.$elements["auto.true"]), o.controls["auto.true"] = o.createRadioButton(o.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto",
        checked: !0
      }), o.$elements["auto.true"].on("checked", function (t) {
        o.changeParameter(!0), o.executeAutoCommand("true");
      }), t.append(o.$elements["auto.false"]), o.controls["auto.false"] = o.createRadioButton(o.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), o.$elements["auto.false"].on("checked", function (t) {
        o.changeParameter(!1), o.executeAutoCommand("false");
      });
    }, {
      mandatory: !1
    }),
        n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "auto", "Auto"), "not-allowed" == t.VA.SettingStorage.getValue("common.autonomous.analytics") && r.hide();
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show()) : (this.$impurityArrProperties.show(), this.$maxDepthArrProperties.show(), this.$maxBinsArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$thresholdsArrProperties.show()), this.$methodProperties.show(), this.$numFoldsProperties.show(), this.$trainRatioProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$impurityProperties.hide(), this.$maxDepthProperties.hide(), this.$maxBinsProperties.hide(), this.$minInfoGainProperties.hide(), this.$minInstancesPerNodeProperties.hide(), this.$thresholdsProperties.hide()) : (this.$methodProperties.hide(), this.$numFoldsProperties.hide(), this.$trainRatioProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$impurityArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$thresholdsArrProperties.hide(), this.$impurityProperties.show(), this.$maxDepthProperties.show(), this.$maxBinsProperties.show(), this.$minInfoGainProperties.show(), this.$minInstancesPerNodeProperties.show(), this.$thresholdsProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$impurityArrProperties.show(), this.$maxDepthArrProperties.show(), this.$maxBinsArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$thresholdsArrProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$impurityArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$thresholdsArrProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show()));
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 4 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 3 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? (o.ref.param.impurity = "", o.ref.param["max-depth"] = "", o.ref.param["max-bins"] = "", o.ref.param["min-info-gain"] = "", o.ref.param["min-instances-per-node"] = "", o.ref.param.thresholds = [], o.ref.param.groupby = []) : (o.ref.param.method = "", o.ref.param["num-folds"] = "", o.ref.param["train-ratio"] = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["impurity-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["thresholds-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.createImpurityControl = function (t) {
    var e = this;
    e.$elements.impurity = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$impurityProperties = e.addPropertyControl("Impurity", function (t) {
      t.append(e.$elements.impurity);
      e.controls.impurity = e.createDropDownList(e.$elements.impurity, {
        source: [{
          label: "Gini",
          value: "gini"
        }, {
          label: "Entropy",
          value: "entropy"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.impurity.on("change", function (t) {
        var o = e.createSetParameterValueCommand("impurity", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$impurityProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "impurity", "Impurity");
  }, e.prototype.renderImpurityControl = function (t) {
    var e = this.options.fnUnit.param.impurity;
    this.$elements.impurity.val(e);
  }, e.prototype.createMaxDepthControl = function (e) {
    var o = this;
    o.$elements["max-depth"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxDepthProperties = o.addPropertyControl("Max Depth", function (e) {
      e.append(o.$elements["max-depth"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value <= 30)"),
        numberType: "int"
      };
      o.controls["max-depth"] = o.createNumericInput(o.$elements["max-depth"], r), o.controls["max-depth"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-depth", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth", "Max Depth");
  }, e.prototype.renderMaxDepthControl = function (t) {
    var e = this.options.fnUnit.param["max-depth"];
    this.controls["max-depth"].setValue(e || "");
  }, e.prototype.createMaxBinsControl = function (e) {
    var o = this;
    o.$elements["max-bins"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxBinsProperties = o.addPropertyControl("Max Bins", function (e) {
      e.append(o.$elements["max-bins"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)"),
        numberType: "int"
      };
      o.controls["max-bins"] = o.createNumericInput(o.$elements["max-bins"], r), o.controls["max-bins"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-bins", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins", "Max Bins");
  }, e.prototype.renderMaxBinsControl = function (t) {
    var e = this.options.fnUnit.param["max-bins"];
    this.controls["max-bins"].setValue(e || "");
  }, e.prototype.createMinInfoGainControl = function (e) {
    var o = this;
    o.$elements["min-info-gain"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInfoGainProperties = o.addPropertyControl("Min Information Gain", function (e) {
      e.append(o.$elements["min-info-gain"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)"),
        numberType: "double"
      };
      o.controls["min-info-gain"] = o.createNumericInput(o.$elements["min-info-gain"], r), o.controls["min-info-gain"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-info-gain", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain", "Min Information Gain");
  }, e.prototype.renderMinInfoGainControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain"];
    this.controls["min-info-gain"].setValue(e || "");
  }, e.prototype.createMinInstancesPerNodeControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInstancesPerNodeProperties = o.addPropertyControl("Min Instances Per Node", function (e) {
      e.append(o.$elements["min-instances-per-node"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)"),
        numberType: "int"
      };
      o.controls["min-instances-per-node"] = o.createNumericInput(o.$elements["min-instances-per-node"], r), o.controls["min-instances-per-node"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-instances-per-node", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node", "Min Instances Per Node");
  }, e.prototype.renderMinInstancesPerNodeControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node"];
    this.controls["min-instances-per-node"].setValue(e || "");
  }, e.prototype.createThresholdsControl = function (t) {
    var e = this;
    e.$elements.thresholds = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$thresholdsProperties = e.addPropertyControl("Thresholds", function (t) {
      t.append(e.$elements.thresholds);
      e.controls.thresholds = e.createInput(e.$elements.thresholds, {}), e.$elements.thresholds.on("change", function (t) {
        if (e.isInputValueChanged("thresholds", $(this).val() ? [$(this).val()] : [])) {
          var o = e.createSetArrayParameterCommand("thresholds", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = e.$thresholdsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "thresholds", "Thresholds");
  }, e.prototype.renderThresholdsControl = function (t) {
    var e = this.options.fnUnit.param.thresholds,
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements.thresholds.val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      e.controls.method = e.createDropDownList(e.$elements.method, {
        source: [{
          label: "TrainValid",
          value: "TrainValid"
        }, {
          label: "CrossValid",
          value: "CrossValid"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.method.on("change", function (t) {
        var o = e.createSetParameterValueCommand("method", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$methodProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "method", "Method");
  }, e.prototype.renderMethodControl = function (t) {
    var e = this.options.fnUnit.param.method;
    this.$elements.method.val(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createNumFoldsControl = function (e) {
    var o = this;
    o.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numFoldsProperties = o.addPropertyControl("Number of Folds", function (e) {
      e.append(o.$elements["num-folds"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (2 <= value)"),
        numberType: "int"
      };
      o.controls["num-folds"] = o.createNumericInput(o.$elements["num-folds"], r), o.controls["num-folds"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-folds", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$numFoldsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num-folds", "Number of Folds");
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createTrainRatioControl = function (e) {
    var o = this;
    o.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$trainRatioProperties = o.addPropertyControl("Train Ratio", function (e) {
      e.append(o.$elements["train-ratio"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.75 (0 < value < 1)"),
        numberType: "double"
      };
      o.controls["train-ratio"] = o.createNumericInput(o.$elements["train-ratio"], r), o.controls["train-ratio"].onChange(function () {
        var t = o.createSetParameterValueCommand("train-ratio", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$trainRatioProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "train-ratio", "Train Ratio");
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "f1",
          value: "f1"
        }, {
          label: "weighted precision",
          value: "weightedPrecision"
        }, {
          label: "weighted recall",
          value: "weightedRecall"
        }, {
          label: "accuracy",
          value: "accuracy"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$metricNameProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "metric-name", "Metric Name");
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (e) {
    var o = this;
    o.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numSearchProperties = o.addPropertyControl("Number of Random Hyperparameters", function (e) {
      e.append(o.$elements["num-search"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("30 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-search"] = o.createNumericInput(o.$elements["num-search"], r), o.controls["num-search"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-search", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createImpurityArrControl = function (t) {
    var e = this;
    e.$elements["impurity-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["impurity-arr"].append(o), e.$elements["impurity-arr"].append(r), this.$impurityArrProperties = e.addPropertyControl("Impurity Set", function (t) {
      t.append(e.$elements["impurity-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Gini",
        value: "gini"
      }, {
        label: "Entropy",
        value: "entropy"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("impurity-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "impurity-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["impurity-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("impurity-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("impurity-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
    var n = this.$impurityArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "impurity-arr", "Impurity Set");
  }, e.prototype.renderImpurityArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["impurity-arr"],
        r = [{
      label: "Gini",
      value: "gini"
    }, {
      label: "Entropy",
      value: "entropy"
    }];

    for (var n in r) {
      e = "impurity-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMaxDepthArrControl = function (e) {
    var o = this;
    o.$elements["max-depth-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxDepthArrProperties = o.addPropertyControl("Max Depth Set", function (e) {
      e.append(o.$elements["max-depth-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2, 4, 8, 16, 30 (0 <= value <= 30)")
      };
      o.controls["max-depth-arr"] = o.createInput(o.$elements["max-depth-arr"], r), o.$elements["max-depth-arr"].on("change", function (t) {
        if (o.isInputValueChanged("max-depth-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("max-depth-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth-arr", "Max Depth Set");
  }, e.prototype.renderMaxDepthArrControl = function (t) {
    var e = this.options.fnUnit.param["max-depth-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-depth-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxBinsArrControl = function (e) {
    var o = this;
    o.$elements["max-bins-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxBinsArrProperties = o.addPropertyControl("Max Bins Set", function (e) {
      e.append(o.$elements["max-bins-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("16, 32, 64, 128 (2 <= value)")
      };
      o.controls["max-bins-arr"] = o.createInput(o.$elements["max-bins-arr"], r), o.$elements["max-bins-arr"].on("change", function (t) {
        if (o.isInputValueChanged("max-bins-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("max-bins-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins-arr", "Max Bins Set");
  }, e.prototype.renderMaxBinsArrControl = function (t) {
    var e = this.options.fnUnit.param["max-bins-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-bins-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInfoGainArrControl = function (e) {
    var o = this;
    o.$elements["min-info-gain-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInfoGainArrProperties = o.addPropertyControl("Min Information Gain Set", function (e) {
      e.append(o.$elements["min-info-gain-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)")
      };
      o.controls["min-info-gain-arr"] = o.createInput(o.$elements["min-info-gain-arr"], r), o.$elements["min-info-gain-arr"].on("change", function (t) {
        if (o.isInputValueChanged("min-info-gain-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("min-info-gain-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain-arr", "Min Information Gain Set");
  }, e.prototype.renderMinInfoGainArrControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-info-gain-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInstancesPerNodeArrControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInstancesPerNodeArrProperties = o.addPropertyControl("Min Instances Per Nodes Set", function (e) {
      e.append(o.$elements["min-instances-per-node-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)")
      };
      o.controls["min-instances-per-node-arr"] = o.createInput(o.$elements["min-instances-per-node-arr"], r), o.$elements["min-instances-per-node-arr"].on("change", function (t) {
        if (o.isInputValueChanged("min-instances-per-node-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("min-instances-per-node-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node-arr", "Min Instances Per Nodes Set");
  }, e.prototype.renderMinInstancesPerNodeArrControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-instances-per-node-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createThresholdsRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-property-row-container brtc-va-editors-property-row-content"></div>'),
        n = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        a = $('<div class="brtc-va-editors-property-row-content-add-button"></div>'),
        i = $('<div class="brtc-va-editors-property-row-content-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.$elements["thresholds-arr"].append(r), this.createInput(n, {
      height: "23px"
    }, "", {
      width: "90%",
      float: "left"
    }), this.byThresholdssControlArray.push(n), e || n.jqxInput("focus"), n.on("change", function (t) {
      var e = [];

      for (var r in o.byThresholdssControlArray) {
        var n = o.byThresholdssControlArray[r].val().split(",");

        for (var a in n) {
          e.push(n[a].trim());
        }
      }

      if (JSON.stringify(o.options.fnUnit.param["thresholds-arr"]) != JSON.stringify([e])) {
        var i = o.createThresholdsArrCommand();
        o.executeCommand(i);
      }
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-property-row-content"),
          e = t.prevAll().length;
      o.byThresholdssControlArray.splice(e, 1), t.remove();
      var r = o.createThresholdsArrCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createThresholdsRow(!1, !1);
      var t = o.createThresholdsArrCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.createThresholdsArrControl = function (t) {
    var e = this;
    e.$elements["thresholds-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$thresholdsArrProperties = e.addPropertyControl("Thresholds Set", function (t) {
      t.append(e.$elements["thresholds-arr"]);
    }, {
      mandatory: !1
    });
    var o = e.$thresholdsArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "thresholds-arr", "Thresholds Set");
  }, e.prototype.renderThresholdsArrControl = function (t) {
    var e = this.options.fnUnit.param["thresholds-arr"];
    this.byThresholdssControlArray = [], this.$elements["thresholds-arr"].empty(), this.createThresholdsRow(!0, !0);

    for (var o = 0; o < e.length; o++) {
      o >= 1 && this.createThresholdsRow(!1, !0);
      var r = "";

      for (var n in e[o]) {
        r = r + e[o][n] + ",";
      }

      this.byThresholdssControlArray[o].val(r.substring(0, r.length - 1));
    }
  }, e.prototype.createThresholdsArrCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["thresholds-arr"] = [];
    var o = [];

    for (var r in this.byThresholdssControlArray) {
      var n = [],
          a = this.byThresholdssControlArray[r].val().split(",");

      for (var i in a) {
        n.push(a[i].trim());
      }

      o.push(n);
    }

    return e.ref.param["thresholds-arr"] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "") : (o.ref.param["impurity-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["thresholds-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0), this.controls.xcolumns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, e.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid == t.options.fnUnit.fid ? this.renderValues(t) : t.event.source !== this && this.renderValues(t);
  }, t.VA.Core.Functions.Library.decisionTreeClassificationTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule(), this.addBaseGroupByRule("ycolumn", "Y Column"), this.addBaseGroupByRule("xcolumns", "X Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    });
  }, t.VA.Core.Functions.Library.decisionTreeClassificationTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.decisionTreeRegressionPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "decisionTreeRegressionPredict",
      name: "AutoDecisionTreePredictForRegression",
      inData: [],
      outData: [],
      param: {
        "hold-columns": [],
        groupby: [],
        "prediction-col": ""
      },
      display: {
        label: "Auto Decision Tree Predict For Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data based on decision tree from Decision Tree Regression Train function.",
    mandatory: [],
    tags: ["decision", "tree", "regression", "autonomous", "auto", "predict", "Decision Tree Regression Predict", "Auto Decision Tree Predict For Regression"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-columns": this.renderHoldColumnsControl,
      groupby: this.renderGroupbyControl,
      "prediction-col": this.renderPredictionColControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColumnsControl(), this.createGroupbyControl(), this.createPredictionColControl();
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "4",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "2",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "prediction-col", "Prediction Column Name");
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string", "number[]", "string[]"]), this.controls["hold-columns"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.decisionTreeRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addHoldColumnsRule(), this.addBaseGroupByRule("hold-columns", "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "String", "number[]", "String[]"]);
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.decisionTreeRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.decisionTreeRegressionTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "decisionTreeRegressionTrain",
      name: "AutoDecisionTreeTrainForRegression",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        seed: "",
        auto: "false",
        groupby: [],
        method: "",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "grid",
        "num-search": "",
        "search-seed": "",
        impurity: "",
        "max-bins": "",
        "max-depth": "",
        "min-info-gain": "",
        "min-instances-per-node": "",
        "impurity-arr": ["variance"],
        "max-bins-arr": [],
        "max-depth-arr": [],
        "min-info-gain-arr": [],
        "min-instances-per-node-arr": []
      },
      display: {
        label: "Auto Decision Tree Train For Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides decision tree model for regression. It supports both binary and multiclass values of Y Column, as well as both continuous and categorical values of X Columns.",
    mandatory: [],
    tags: ["auto", "regression", "decision Tree Regression Train", "Auto Decision Tree Train For Regression"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "4"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      seed: this.renderSeedControl,
      auto: this.renderAutoControl,
      groupby: this.renderGroupbyControl,
      method: this.renderMethodControl,
      "num-folds": this.renderNumFoldsControl,
      "train-ratio": this.renderTrainRatioControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      impurity: this.renderImpurityControl,
      "max-bins": this.renderMaxBinsControl,
      "max-depth": this.renderMaxDepthControl,
      "min-info-gain": this.renderMinInfoGainControl,
      "min-instances-per-node": this.renderMinInstancesPerNodeControl,
      "impurity-arr": this.renderImpurityArrControl,
      "max-bins-arr": this.renderMaxBinsArrControl,
      "max-depth-arr": this.renderMaxDepthArrControl,
      "min-info-gain-arr": this.renderMinInfoGainArrControl,
      "min-instances-per-node-arr": this.renderMinInstancesPerNodeArrControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createSeedControl(), this.createAutoControl(), this.createGroupbyControl(), this.createImpurityControl(), this.createMaxDepthControl(), this.createMaxBinsControl(), this.createMinInfoGainControl(), this.createMinInstancesPerNodeControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createImpurityArrControl(), this.createMaxDepthArrControl(), this.createMaxBinsArrControl(), this.createMinInfoGainArrControl(), this.createMinInstancesPerNodeArrControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createSeedControl = function (t) {
    var e = this;
    e.$elements.seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Seed", function (t) {
      t.append(e.$elements.seed);
      e.controls.seed = e.createNumericInput(e.$elements.seed, {
        placeHolder: "long , > 0",
        numberType: "int"
      }), e.controls.seed.onChange(function () {
        var t = e.createSetParameterValueCommand("seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "seed", "Seed");
  }, e.prototype.renderSeedControl = function (t) {
    var e = this.options.fnUnit.param.seed;
    this.controls.seed.setValue(e || "");
  }, e.prototype.createAutoControl = function (e) {
    var o = this;
    o.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), o.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var r = o.addPropertyControl("Auto", function (t) {
      t.append(o.$elements["auto.true"]), o.controls["auto.true"] = o.createRadioButton(o.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto",
        checked: !0
      }), o.$elements["auto.true"].on("checked", function (t) {
        o.changeParameter(!0), o.executeAutoCommand("true");
      }), t.append(o.$elements["auto.false"]), o.controls["auto.false"] = o.createRadioButton(o.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), o.$elements["auto.false"].on("checked", function (t) {
        o.changeParameter(!1), o.executeAutoCommand("false");
      });
    }, {
      mandatory: !1
    }),
        n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "auto", "Auto"), "not-allowed" == t.VA.SettingStorage.getValue("common.autonomous.analytics") && r.hide();
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show()) : (this.$impurityArrProperties.show(), this.$maxDepthArrProperties.show(), this.$maxBinsArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show()), this.$methodProperties.show(), this.$numFoldsProperties.show(), this.$trainRatioProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$impurityProperties.hide(), this.$maxDepthProperties.hide(), this.$maxBinsProperties.hide(), this.$minInfoGainProperties.hide(), this.$minInstancesPerNodeProperties.hide()) : (this.$methodProperties.hide(), this.$numFoldsProperties.hide(), this.$trainRatioProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$impurityArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$impurityProperties.show(), this.$maxDepthProperties.show(), this.$maxBinsProperties.show(), this.$minInfoGainProperties.show(), this.$minInstancesPerNodeProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$impurityArrProperties.show(), this.$maxDepthArrProperties.show(), this.$maxBinsArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$impurityArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show()));
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 4 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 3 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? (o.ref.param.impurity = "", o.ref.param["max-depth"] = "", o.ref.param["max-bins"] = "", o.ref.param["min-info-gain"] = "", o.ref.param["min-instances-per-node"] = "", o.ref.param.groupby = []) : (o.ref.param.method = "", o.ref.param["num-folds"] = "", o.ref.param["train-ratio"] = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["impurity-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "") : (o.ref.param["impurity-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createImpurityControl = function (t) {
    var e = this;
    e.$elements.impurity = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$impurityProperties = e.addPropertyControl("Impurity", function (t) {
      t.append(e.$elements.impurity);
      e.controls.impurity = e.createDropDownList(e.$elements.impurity, {
        source: [{
          label: "Variance",
          value: "variance"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.impurity.on("change", function (t) {
        var o = e.createSetParameterValueCommand("impurity", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$impurityProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "impurity", "Impurity");
  }, e.prototype.renderImpurityControl = function (t) {
    var e = this.options.fnUnit.param.impurity;
    this.$elements.impurity.val(e);
  }, e.prototype.createMaxDepthControl = function (e) {
    var o = this;
    o.$elements["max-depth"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxDepthProperties = o.addPropertyControl("Max Depth", function (e) {
      e.append(o.$elements["max-depth"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value <= 30)"),
        numberType: "int"
      };
      o.controls["max-depth"] = o.createNumericInput(o.$elements["max-depth"], r), o.controls["max-depth"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-depth", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth", "Max Depth");
  }, e.prototype.renderMaxDepthControl = function (t) {
    var e = this.options.fnUnit.param["max-depth"];
    this.controls["max-depth"].setValue(e || "");
  }, e.prototype.createMaxBinsControl = function (e) {
    var o = this;
    o.$elements["max-bins"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxBinsProperties = o.addPropertyControl("Max Bins", function (e) {
      e.append(o.$elements["max-bins"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)"),
        numberType: "int"
      };
      o.controls["max-bins"] = o.createNumericInput(o.$elements["max-bins"], r), o.controls["max-bins"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-bins", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins", "Max Bins");
  }, e.prototype.renderMaxBinsControl = function (t) {
    var e = this.options.fnUnit.param["max-bins"];
    this.controls["max-bins"].setValue(e || "");
  }, e.prototype.createMinInfoGainControl = function (e) {
    var o = this;
    o.$elements["min-info-gain"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInfoGainProperties = o.addPropertyControl("Min Information Gain", function (e) {
      e.append(o.$elements["min-info-gain"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)"),
        numberType: "double"
      };
      o.controls["min-info-gain"] = o.createNumericInput(o.$elements["min-info-gain"], r), o.controls["min-info-gain"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-info-gain", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain", "Min Information Gain");
  }, e.prototype.renderMinInfoGainControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain"];
    this.controls["min-info-gain"].setValue(e || "");
  }, e.prototype.createMinInstancesPerNodeControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInstancesPerNodeProperties = o.addPropertyControl("Min Instances Per Node", function (e) {
      e.append(o.$elements["min-instances-per-node"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)"),
        numberType: "int"
      };
      o.controls["min-instances-per-node"] = o.createNumericInput(o.$elements["min-instances-per-node"], r), o.controls["min-instances-per-node"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-instances-per-node", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node", "Min Instances Per Node");
  }, e.prototype.renderMinInstancesPerNodeControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node"];
    this.controls["min-instances-per-node"].setValue(e || "");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      e.controls.method = e.createDropDownList(e.$elements.method, {
        source: [{
          label: "TrainValid",
          value: "TrainValid"
        }, {
          label: "CrossValid",
          value: "CrossValid"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.method.on("change", function (t) {
        var o = e.createSetParameterValueCommand("method", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$methodProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "method", "Method");
  }, e.prototype.renderMethodControl = function (t) {
    var e = this.options.fnUnit.param.method;
    this.$elements.method.val(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createNumFoldsControl = function (e) {
    var o = this;
    o.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numFoldsProperties = o.addPropertyControl("Number of Folds", function (e) {
      e.append(o.$elements["num-folds"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (2 <= value)"),
        numberType: "int"
      };
      o.controls["num-folds"] = o.createNumericInput(o.$elements["num-folds"], r), o.controls["num-folds"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-folds", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$numFoldsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num-folds", "Number of Folds");
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createTrainRatioControl = function (e) {
    var o = this;
    o.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$trainRatioProperties = o.addPropertyControl("Train Ratio", function (e) {
      e.append(o.$elements["train-ratio"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.75 (0 < value < 1)"),
        numberType: "double"
      };
      o.controls["train-ratio"] = o.createNumericInput(o.$elements["train-ratio"], r), o.controls["train-ratio"].onChange(function () {
        var t = o.createSetParameterValueCommand("train-ratio", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$trainRatioProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "train-ratio", "Train Ratio");
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "rmse",
          value: "rmse"
        }, {
          label: "mse",
          value: "mse"
        }, {
          label: "r2",
          value: "r2"
        }, {
          label: "mae",
          value: "mae"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$metricNameProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "metric-name", "Metric Name");
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (e) {
    var o = this;
    o.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numSearchProperties = o.addPropertyControl("Number of Random Hyperparameters", function (e) {
      e.append(o.$elements["num-search"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("30 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-search"] = o.createNumericInput(o.$elements["num-search"], r), o.controls["num-search"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-search", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createImpurityArrControl = function (t) {
    var e = this;
    e.$elements["impurity-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["impurity-arr"].append(o), e.$elements["impurity-arr"].append(r), this.$impurityArrProperties = e.addPropertyControl("Impurity Set", function (t) {
      t.append(e.$elements["impurity-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Variance",
        value: "variance"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("impurity-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "impurity-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["impurity-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("impurity-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("impurity-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderImpurityArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["impurity-arr"],
        r = [{
      label: "Variance",
      value: "variance"
    }];

    for (var n in r) {
      e = "impurity-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMaxDepthArrControl = function (e) {
    var o = this;
    o.$elements["max-depth-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxDepthArrProperties = o.addPropertyControl("Max Depth Set", function (e) {
      e.append(o.$elements["max-depth-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2, 4, 8, 16, 30 (0 <= value <= 30)")
      };
      o.controls["max-depth-arr"] = o.createInput(o.$elements["max-depth-arr"], r), o.$elements["max-depth-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-depth-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth-arr", "Max Depth Set");
  }, e.prototype.renderMaxDepthArrControl = function (t) {
    var e = this.options.fnUnit.param["max-depth-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-depth-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxBinsArrControl = function (e) {
    var o = this;
    o.$elements["max-bins-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxBinsArrProperties = o.addPropertyControl("Max Bins Set", function (e) {
      e.append(o.$elements["max-bins-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("16, 32, 64, 128 (2 <= value)")
      };
      o.controls["max-bins-arr"] = o.createInput(o.$elements["max-bins-arr"], r), o.$elements["max-bins-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-bins-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins-arr", "Max Bins Set");
  }, e.prototype.renderMaxBinsArrControl = function (t) {
    var e = this.options.fnUnit.param["max-bins-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-bins-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInfoGainArrControl = function (e) {
    var o = this;
    o.$elements["min-info-gain-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInfoGainArrProperties = o.addPropertyControl("Min Information Gain Set", function (e) {
      e.append(o.$elements["min-info-gain-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)")
      };
      o.controls["min-info-gain-arr"] = o.createInput(o.$elements["min-info-gain-arr"], r), o.$elements["min-info-gain-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("min-info-gain-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain-arr", "Min Information Gain Set");
  }, e.prototype.renderMinInfoGainArrControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-info-gain-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInstancesPerNodeArrControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInstancesPerNodeArrProperties = o.addPropertyControl("Min Instances Per Nodes Set", function (e) {
      e.append(o.$elements["min-instances-per-node-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)")
      };
      o.controls["min-instances-per-node-arr"] = o.createInput(o.$elements["min-instances-per-node-arr"], r), o.$elements["min-instances-per-node-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("min-instances-per-node-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node-arr", "Min Instances Per Nodes Set");
  }, e.prototype.renderMinInstancesPerNodeArrControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-instances-per-node-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0), this.controls.xcolumns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, e.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid == t.options.fnUnit.fid ? this.renderValues(t) : t.event.source !== this && this.renderValues(t);
  }, t.VA.Core.Functions.Library.decisionTreeRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule(), this.addBaseGroupByRule("ycolumn", "Y Column"), this.addBaseGroupByRule("xcolumns", "X Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    });
  }, t.VA.Core.Functions.Library.decisionTreeRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.eDA = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "eDA",
      name: "EDA",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "label-col": "",
        "category-base-count": ""
      },
      display: {
        label: "EDA",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Exploratory Data Analysis. Show visualized information of input data.",
    tags: ["eda exploratory data analysis", "EDA"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 9,
      max: 9
    },
    "out-node": !0
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureCols,
      "label-col": this.renderLabelCols,
      "category-base-count": this.renderCategoryBaseCountControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createLabelColsControl(), this.createCategoryBaseCountControl();
  }, e.prototype.createFeatureColsControl = function () {
    var t = this;
    t.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), t.addPropertyControl("Feature Columns", function (e) {
      e.append(t.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(e, o) {
          var r = t.createSetParameterValueCommand("feature-cols", o.items);
          t.executeCommand(r);
        }
      };
      t.controls["feature-cols"] = t.createColumnList(t.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureCols = function () {
    var t = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(t);
  }, e.prototype.createLabelColsControl = function () {
    var t = this;
    t.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), t.addPropertyControl("Label Column", function (e) {
      e.append(t.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(e, o) {
          var r = t.createSetParameterValueCommand("label-col", o.items[0]);
          t.executeCommand(r);
        }
      };
      t.controls["label-col"] = t.createColumnList(t.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelCols = function () {
    var t = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([t]);
  }, e.prototype.createCategoryBaseCountControl = function (e) {
    var o = this;
    o.$elements["category-base-count"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Category Base Count", function (e) {
      e.append(o.$elements["category-base-count"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("10 ( 1 <= value <= 30)"),
        numberType: "int"
      };
      o.controls["category-base-count"] = o.createNumericInput(o.$elements["category-base-count"], r), o.controls["category-base-count"].onChange(function () {
        var t = o.createSetParameterValueCommand("category-base-count", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "category-base-count", "Category Base Count");
  }, e.prototype.renderCategoryBaseCountControl = function (t) {
    var e = this.options.fnUnit.param["category-base-count"];
    this.controls["category-base-count"].setValue(e || "");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, []), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["label-col"].setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.eDA.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addLabelColRule();
  }, e.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    });
  }, e.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Label Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    });
  }, t.VA.Core.Functions.Library.eDA.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.gBTClassificationPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "gBTClassificationPredict",
      name: "AutoGBTPredictForClassification",
      inData: [],
      outData: [],
      param: {
        "hold-columns": [],
        "prediction-col": "",
        groupby: []
      },
      display: {
        label: "Auto GBT Predict For Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data based on gradient boosting trees(GBTs) from GBT Classification Train function.",
    mandatory: [],
    tags: ["gbt", "tree", "classification", "autonomous", "auto", "predict", "GBT Classification Predict", "Auto GBT Predict For Classification"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-columns": this.renderHoldColumnsControl,
      "prediction-col": this.renderPredictionColControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColumnsControl(), this.createPredictionColControl(), this.createGroupbyControl();
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "4",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "prediction-col", "Prediction Column Name");
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string", "number[]", "string[]"]), this.controls["hold-columns"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.gBTClassificationPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addHoldColumnsRule(), this.addBaseGroupByRule("hold-columns", "Hold Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "string", "number[]", "string[]"]);
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.gBTClassificationPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.gBTClassificationTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "gBTClassificationTrain",
      name: "AutoGBTTrainForClassification",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        auto: "false",
        groupby: [],
        method: "",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "grid",
        "num-search": "",
        "search-seed": "",
        "max-iter": "",
        "loss-type": "",
        "max-bins": "",
        "max-depth": "",
        "min-info-gain": "",
        "min-instances-per-node": "",
        "sub-sampling-rate": "",
        "step-size": "",
        "max-iter-arr": [],
        "loss-type-arr": ["logistic"],
        "max-bins-arr": [],
        "max-depth-arr": [],
        "min-info-gain-arr": [],
        "min-instances-per-node-arr": [],
        "sub-sampling-rate-arr": [],
        "step-size-arr": []
      },
      display: {
        label: "Auto GBT Train For Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides Gradient boosting trees(GBTs) model for classification. It only supports binary class values of Y Column, as well as both continuous and categorical values of X Columns.",
    mandatory: [],
    tags: ["auto", "classification", "gBT Classification Train", "Auto GBT Train For Classification"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "4"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      auto: this.renderAutoControl,
      groupby: this.renderGroupbyControl,
      method: this.renderMethodControl,
      "num-folds": this.renderNumFoldsControl,
      "train-ratio": this.renderTrainRatioControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      "max-iter": this.renderMaxIterControl,
      "loss-type": this.renderLossTypeControl,
      "max-bins": this.renderMaxBinsControl,
      "max-depth": this.renderMaxDepthControl,
      "min-info-gain": this.renderMinInfoGainControl,
      "min-instances-per-node": this.renderMinInstancesPerNodeControl,
      "sub-sampling-rate": this.renderSubsamplingRateControl,
      "step-size": this.renderStepSizeControl,
      "max-iter-arr": this.renderMaxIterArrControl,
      "loss-type-arr": this.renderLossTypeArrControl,
      "max-bins-arr": this.renderMaxBinsArrControl,
      "max-depth-arr": this.renderMaxDepthArrControl,
      "min-info-gain-arr": this.renderMinInfoGainArrControl,
      "min-instances-per-node-arr": this.renderMinInstancesPerNodeArrControl,
      "sub-sampling-rate-arr": this.renderSubsamplingRateArrControl,
      "step-size-arr": this.renderStepSizeArrControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createAutoControl(), this.createGroupbyControl(), this.createMaxIterControl(), this.createLossTypeControl(), this.createMaxBinsControl(), this.createMaxDepthControl(), this.createMinInfoGainControl(), this.createMinInstancesPerNodeControl(), this.createSubsamplingRateControl(), this.createStepSizeControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createMaxIterArrControl(), this.createLossTypeArrControl(), this.createMaxBinsArrControl(), this.createMaxDepthArrControl(), this.createMinInfoGainArrControl(), this.createMinInstancesPerNodeArrControl(), this.createSubsamplingRateArrControl(), this.createStepSizeArrControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createAutoControl = function (e) {
    var o = this;
    o.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), o.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var r = o.addPropertyControl("Auto", function (t) {
      t.append(o.$elements["auto.true"]), o.controls["auto.true"] = o.createRadioButton(o.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto",
        checked: !0
      }), o.$elements["auto.true"].on("checked", function (t) {
        o.changeParameter(!0), o.executeAutoCommand("true");
      }), t.append(o.$elements["auto.false"]), o.controls["auto.false"] = o.createRadioButton(o.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), o.$elements["auto.false"].on("checked", function (t) {
        o.changeParameter(!1), o.executeAutoCommand("false");
      });
    }, {
      mandatory: !1
    }),
        n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "auto", "Auto"), "not-allowed" == t.VA.SettingStorage.getValue("common.autonomous.analytics") && r.hide();
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show()) : (this.$maxIterArrProperties.show(), this.$lossTypeArrProperties.show(), this.$maxBinsArrProperties.show(), this.$maxDepthArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$subsamplingRateArrProperties.show(), this.$stepSizeArrProperties.show()), this.$methodProperties.show(), this.$numFoldsProperties.show(), this.$trainRatioProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$maxIterProperties.hide(), this.$lossTypeProperties.hide(), this.$maxDepthProperties.hide(), this.$maxBinsProperties.hide(), this.$minInfoGainProperties.hide(), this.$minInstancesPerNodeProperties.hide(), this.$subsamplingRateProperties.hide(), this.$stepSizeProperties.hide()) : (this.$methodProperties.hide(), this.$numFoldsProperties.hide(), this.$trainRatioProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$maxIterArrProperties.hide(), this.$lossTypeArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$subsamplingRateArrProperties.hide(), this.$stepSizeArrProperties.hide(), this.$maxIterProperties.show(), this.$lossTypeProperties.show(), this.$maxDepthProperties.show(), this.$maxBinsProperties.show(), this.$minInfoGainProperties.show(), this.$minInstancesPerNodeProperties.show(), this.$subsamplingRateProperties.show(), this.$stepSizeProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$maxIterArrProperties.show(), this.$lossTypeArrProperties.show(), this.$maxBinsArrProperties.show(), this.$maxDepthArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$subsamplingRateArrProperties.show(), this.$stepSizeArrProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$maxIterArrProperties.hide(), this.$lossTypeArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$subsamplingRateArrProperties.hide(), this.$stepSizeArrProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show()));
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 4 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 3 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? (o.ref.param["max-iter"] = "", o.ref.param["loss-type"] = "", o.ref.param["max-depth"] = "", o.ref.param["max-bins"] = "", o.ref.param["min-info-gain"] = "", o.ref.param["min-instances-per-node"] = "", o.ref.param["sub-sampling-rate"] = "", o.ref.param["step-size"] = "") : (o.ref.param.method = "", o.ref.param["num-folds"] = "", o.ref.param["train-ratio"] = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["max-iter-arr"] = [], o.ref.param["loss-type-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["sub-sampling-rate-arr"] = [], o.ref.param["step-size-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "") : (o.ref.param["max-iter-arr"] = [], o.ref.param["loss-type-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["sub-sampling-rate-arr"] = [], o.ref.param["step-size-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createImpurityControl = function (t) {
    var e = this;
    e.$elements.impurity = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$impurityProperties = e.addPropertyControl("Impurity", function (t) {
      t.append(e.$elements.impurity);
      e.controls.impurity = e.createDropDownList(e.$elements.impurity, {
        source: [{
          label: "Variance",
          value: "variance"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.impurity.on("change", function (t) {
        var o = e.createSetParameterValueCommand("impurity", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderImpurityControl = function (t) {
    var e = this.options.fnUnit.param.impurity;
    this.$elements.impurity.val(e);
  }, e.prototype.createMaxDepthControl = function (e) {
    var o = this;
    o.$elements["max-depth"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxDepthProperties = o.addPropertyControl("Max Depth", function (e) {
      e.append(o.$elements["max-depth"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value <= 30)"),
        numberType: "int"
      };
      o.controls["max-depth"] = o.createNumericInput(o.$elements["max-depth"], r), o.controls["max-depth"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-depth", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth", "Max Depth");
  }, e.prototype.renderMaxDepthControl = function (t) {
    var e = this.options.fnUnit.param["max-depth"];
    this.controls["max-depth"].setValue(e || "");
  }, e.prototype.createMaxBinsControl = function (e) {
    var o = this;
    o.$elements["max-bins"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxBinsProperties = o.addPropertyControl("Max Bins", function (e) {
      e.append(o.$elements["max-bins"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)"),
        numberType: "int"
      };
      o.controls["max-bins"] = o.createNumericInput(o.$elements["max-bins"], r), o.controls["max-bins"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-bins", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins", "Max Bins");
  }, e.prototype.renderMaxBinsControl = function (t) {
    var e = this.options.fnUnit.param["max-bins"];
    this.controls["max-bins"].setValue(e || "");
  }, e.prototype.createMinInfoGainControl = function (e) {
    var o = this;
    o.$elements["min-info-gain"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInfoGainProperties = o.addPropertyControl("Min Information Gain", function (e) {
      e.append(o.$elements["min-info-gain"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)"),
        numberType: "double"
      };
      o.controls["min-info-gain"] = o.createNumericInput(o.$elements["min-info-gain"], r), o.controls["min-info-gain"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-info-gain", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain", "Min Information Gain");
  }, e.prototype.renderMinInfoGainControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain"];
    this.controls["min-info-gain"].setValue(e || "");
  }, e.prototype.createMinInstancesPerNodeControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInstancesPerNodeProperties = o.addPropertyControl("Min Instances Per Node", function (e) {
      e.append(o.$elements["min-instances-per-node"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)"),
        numberType: "int"
      };
      o.controls["min-instances-per-node"] = o.createNumericInput(o.$elements["min-instances-per-node"], r), o.controls["min-instances-per-node"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-instances-per-node", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node", "Min Instances Per Node");
  }, e.prototype.renderMinInstancesPerNodeControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node"];
    this.controls["min-instances-per-node"].setValue(e || "");
  }, e.prototype.createSubsamplingRateControl = function (e) {
    var o = this;
    o.$elements["sub-sampling-rate"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$subsamplingRateProperties = o.addPropertyControl("Subsampling Rate", function (e) {
      e.append(o.$elements["sub-sampling-rate"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 < value <= 1.0)"),
        numberType: "double"
      };
      o.controls["sub-sampling-rate"] = o.createNumericInput(o.$elements["sub-sampling-rate"], r), o.controls["sub-sampling-rate"].onChange(function () {
        var t = o.createSetParameterValueCommand("sub-sampling-rate", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$subsamplingRateProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "sub-sampling-rate", "Subsampling Rate");
  }, e.prototype.renderSubsamplingRateControl = function (t) {
    var e = this.options.fnUnit.param["sub-sampling-rate"];
    this.controls["sub-sampling-rate"].setValue(e || "");
  }, e.prototype.createStepSizeControl = function (e) {
    var o = this;
    o.$elements["step-size"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$stepSizeProperties = o.addPropertyControl("Step Size", function (e) {
      e.append(o.$elements["step-size"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.1 (0 < value <= 1.0)"),
        numberType: "double"
      };
      o.controls["step-size"] = o.createNumericInput(o.$elements["step-size"], r), o.controls["step-size"].onChange(function () {
        var t = o.createSetParameterValueCommand("step-size", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$stepSizeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "step-size", "Step Size");
  }, e.prototype.renderStepSizeControl = function (t) {
    var e = this.options.fnUnit.param["step-size"];
    this.controls["step-size"].setValue(e || "");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      e.controls.method = e.createDropDownList(e.$elements.method, {
        source: [{
          label: "TrainValid",
          value: "TrainValid"
        }, {
          label: "CrossValid",
          value: "CrossValid"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.method.on("change", function (t) {
        var o = e.createSetParameterValueCommand("method", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$methodProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "method", "Method");
  }, e.prototype.renderMethodControl = function (t) {
    var e = this.options.fnUnit.param.method;
    this.$elements.method.val(e);
  }, e.prototype.createNumFoldsControl = function (e) {
    var o = this;
    o.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numFoldsProperties = o.addPropertyControl("Number of Folds", function (e) {
      e.append(o.$elements["num-folds"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (2 <= value)"),
        numberType: "int"
      };
      o.controls["num-folds"] = o.createNumericInput(o.$elements["num-folds"], r), o.controls["num-folds"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-folds", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$numFoldsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num-folds", "Number of Folds");
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createTrainRatioControl = function (e) {
    var o = this;
    o.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$trainRatioProperties = o.addPropertyControl("Train Ratio", function (e) {
      e.append(o.$elements["train-ratio"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.75 (0 < value < 1)"),
        numberType: "double"
      };
      o.controls["train-ratio"] = o.createNumericInput(o.$elements["train-ratio"], r), o.controls["train-ratio"].onChange(function () {
        var t = o.createSetParameterValueCommand("train-ratio", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$trainRatioProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "train-ratio", "Train Ratio");
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "f1",
          value: "f1"
        }, {
          label: "weighted precision",
          value: "weightedPrecision"
        }, {
          label: "weighted recall",
          value: "weightedRecall"
        }, {
          label: "accuracy",
          value: "accuracy"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$metricNameProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "metric-name", "Metric Name");
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (e) {
    var o = this;
    o.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numSearchProperties = o.addPropertyControl("Number of Random Hyperparameters", function (e) {
      e.append(o.$elements["num-search"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("10 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-search"] = o.createNumericInput(o.$elements["num-search"], r), o.controls["num-search"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-search", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createMaxIterControl = function (e) {
    var o = this;
    o.$elements["max-iter"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxIterProperties = o.addPropertyControl("Max Iteration", function (e) {
      e.append(o.$elements["max-iter"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("10 (1 <= value)"),
        numberType: "int"
      };
      o.controls["max-iter"] = o.createNumericInput(o.$elements["max-iter"], r), o.controls["max-iter"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-iter", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxIterProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-iteration", "Max Iteration");
  }, e.prototype.renderMaxIterControl = function (t) {
    var e = this.options.fnUnit.param["max-iter"];
    this.controls["max-iter"].setValue(e || "");
  }, e.prototype.createLossTypeControl = function (t) {
    var e = this;
    e.$elements["loss-type"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$lossTypeProperties = e.addPropertyControl("Loss Function", function (t) {
      t.append(e.$elements["loss-type"]);
      e.controls["loss-type"] = e.createDropDownList(e.$elements["loss-type"], {
        source: [{
          label: "Logistic",
          value: "logistic"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["loss-type"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("loss-type", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$lossTypeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "loss-type", "Loss Function");
  }, e.prototype.renderLossTypeControl = function (t) {
    var e = this.options.fnUnit.param["loss-type"];
    this.$elements["loss-type"].val(e);
  }, e.prototype.createImpurityArrControl = function (t) {
    var e = this;
    e.$elements["impurity-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["impurity-arr"].append(o), e.$elements["impurity-arr"].append(r), this.$impurityArrProperties = e.addPropertyControl("Impurity Set", function (t) {
      t.append(e.$elements["impurity-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Variance",
        value: "variance"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("impurity-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "impurity-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["impurity-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("impurity-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("impurity-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderImpurityArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["impurity-arr"],
        r = [{
      label: "Variance",
      value: "variance"
    }];

    for (var n in r) {
      e = "impurity-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMaxDepthArrControl = function (e) {
    var o = this;
    o.$elements["max-depth-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxDepthArrProperties = o.addPropertyControl("Max Depth Set", function (e) {
      e.append(o.$elements["max-depth-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5, 7 (0 <= value <= 30)")
      };
      o.controls["max-depth-arr"] = o.createInput(o.$elements["max-depth-arr"], r), o.$elements["max-depth-arr"].on("change", function (t) {
        if (o.isInputValueChanged("max-depth-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("max-depth-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth-arr", "Max Depth Set");
  }, e.prototype.renderMaxDepthArrControl = function (t) {
    var e = this.options.fnUnit.param["max-depth-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-depth-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxBinsArrControl = function (e) {
    var o = this;
    o.$elements["max-bins-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxBinsArrProperties = o.addPropertyControl("Max Bins Set", function (e) {
      e.append(o.$elements["max-bins-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)")
      };
      o.controls["max-bins-arr"] = o.createInput(o.$elements["max-bins-arr"], r), o.$elements["max-bins-arr"].on("change", function (t) {
        if (o.isInputValueChanged("max-bins-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("max-bins-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins-arr", "Max Bins Set");
  }, e.prototype.renderMaxBinsArrControl = function (t) {
    var e = this.options.fnUnit.param["max-bins-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-bins-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInfoGainArrControl = function (e) {
    var o = this;
    o.$elements["min-info-gain-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInfoGainArrProperties = o.addPropertyControl("Min Information Gain Set", function (e) {
      e.append(o.$elements["min-info-gain-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)")
      };
      o.controls["min-info-gain-arr"] = o.createInput(o.$elements["min-info-gain-arr"], r), o.$elements["min-info-gain-arr"].on("change", function (t) {
        if (o.isInputValueChanged("min-info-gain-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("min-info-gain-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain-arr", "Min Information Gain Set");
  }, e.prototype.renderMinInfoGainArrControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-info-gain-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInstancesPerNodeArrControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInstancesPerNodeArrProperties = o.addPropertyControl("Min Instances Per Nodes Set", function (e) {
      e.append(o.$elements["min-instances-per-node-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)")
      };
      o.controls["min-instances-per-node-arr"] = o.createInput(o.$elements["min-instances-per-node-arr"], r), o.$elements["min-instances-per-node-arr"].on("change", function (t) {
        if (o.isInputValueChanged("min-instances-per-node-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("min-instances-per-node-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node-arr", "Min Instances Per Nodes Set");
  }, e.prototype.renderMinInstancesPerNodeArrControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-instances-per-node-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSubsamplingRateArrControl = function (e) {
    var o = this;
    o.$elements["sub-sampling-rate-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$subsamplingRateArrProperties = o.addPropertyControl("Subsampling Rate Set", function (e) {
      e.append(o.$elements["sub-sampling-rate-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 < value <= 1)")
      };
      o.controls["sub-sampling-rate-arr"] = o.createInput(o.$elements["sub-sampling-rate-arr"], r), o.$elements["sub-sampling-rate-arr"].on("change", function (t) {
        if (o.isInputValueChanged("sub-sampling-rate-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("sub-sampling-rate-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$subsamplingRateArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "sub-sampling-rate-arr", "Subsampling Rate Set");
  }, e.prototype.renderSubsamplingRateArrControl = function (t) {
    var e = this.options.fnUnit.param["sub-sampling-rate-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["sub-sampling-rate-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createStepSizeArrControl = function (e) {
    var o = this;
    o.$elements["step-size-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$stepSizeArrProperties = o.addPropertyControl("Step Size Set", function (e) {
      e.append(o.$elements["step-size-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.1 (0 < value <= 1)")
      };
      o.controls["step-size-arr"] = o.createInput(o.$elements["step-size-arr"], r), o.$elements["step-size-arr"].on("change", function (t) {
        if (o.isInputValueChanged("step-size-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("step-size-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$stepSizeArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "step-size-arr", "Step Size Set");
  }, e.prototype.renderStepSizeArrControl = function (t) {
    var e = this.options.fnUnit.param["step-size-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["step-size-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxIterArrControl = function (e) {
    var o = this;
    o.$elements["max-iter-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxIterArrProperties = o.addPropertyControl("Max Iteration Set", function (e) {
      e.append(o.$elements["max-iter-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3, 10 (1 <= value)")
      };
      o.controls["max-iter-arr"] = o.createInput(o.$elements["max-iter-arr"], r), o.$elements["max-iter-arr"].on("change", function (t) {
        if (o.isInputValueChanged("max-iter-arr", $(this).val())) {
          var e = o.createSetArrayParameterCommand("max-iter-arr", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxIterArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-iter-arr", "Max Iteration Set");
  }, e.prototype.renderMaxIterArrControl = function (t) {
    var e = this.options.fnUnit.param["max-iter-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-iter-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createLossTypeArrControl = function (t) {
    var e = this;
    e.$elements["loss-type-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["loss-type-arr"].append(o), e.$elements["loss-type-arr"].append(r), this.$lossTypeArrProperties = e.addPropertyControl("Loss Function Set", function (t) {
      t.append(e.$elements["loss-type-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Logistic",
        value: "logistic"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "loss-type-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("loss-type-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "loss-type-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["loss-type-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "loss-type-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "loss-type-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("loss-type-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "loss-type-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("loss-type-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderLossTypeArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["loss-type-arr"],
        r = [{
      label: "Logistic",
      value: "logistic"
    }];

    for (var n in r) {
      e = "loss-type-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0), this.controls.xcolumns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, e.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid == t.options.fnUnit.fid ? this.renderValues(t) : t.event.source !== this && this.renderValues(t);
  }, t.VA.Core.Functions.Library.gBTClassificationTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule(), this.addBaseGroupByRule("ycolumn", "Y Column"), this.addBaseGroupByRule("xcolumns", "X Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    });
  }, t.VA.Core.Functions.Library.gBTClassificationTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.gBTRegressionPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "gBTRegressionPredict",
      name: "AutoGBTPredictForRegression",
      inData: [],
      outData: [],
      param: {
        "hold-columns": [],
        "prediction-col": "",
        groupby: []
      },
      display: {
        label: "Auto GBT Predict For Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data based on gradient boosting trees(GBTs) from GBT Regression Train function.",
    mandatory: [],
    tags: ["gbt", "tree", "regression", "autonomous", "auto", "predict", "GBT Regression Predict", "Auto GBT Predict For Regression"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-columns": this.renderHoldColumnsControl,
      "prediction-col": this.renderPredictionColControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColumnsControl(), this.createPredictionColControl(), this.createGroupbyControl();
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "4",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "prediction-col", "Prediction Column Name");
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string", "number[]", "string[]"]), this.controls["hold-columns"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.gBTRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addHoldColumnsRule(), this.addBaseGroupByRule("hold-columns", "Hold Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "string", "number[]", "string[]"]);
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.gBTRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.gBTRegressionTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "gBTRegressionTrain",
      name: "AutoGBTTrainForRegression",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        auto: "false",
        groupby: [],
        "max-depth": "",
        "max-bins": "",
        "min-info-gain": "",
        "min-instances-per-node": "",
        "sub-sampling-rate": "",
        "step-size": "",
        method: "",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "grid",
        "num-search": "",
        "search-seed": "",
        "max-iter": "",
        "loss-type": "",
        "max-iter-arr": [],
        "loss-type-arr": ["squared", "absolute"],
        "max-depth-arr": [],
        "max-bins-arr": [],
        "min-info-gain-arr": [],
        "min-instances-per-node-arr": [],
        "step-size-arr": [],
        "sub-sampling-rate-arr": []
      },
      display: {
        label: "Auto GBT Train For Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides Gradient boosting trees(GBTs) model for regression. It supports both continuous and categorical values of X Columns.",
    mandatory: [],
    tags: ["auto", "regression", "gBT Regression Train", "Auto GBT Train For Regression"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "4"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      auto: this.renderAutoControl,
      groupby: this.renderGroupbyControl,
      method: this.renderMethodControl,
      "num-folds": this.renderNumFoldsControl,
      "train-ratio": this.renderTrainRatioControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      "max-iter": this.renderMaxIterControl,
      "loss-type": this.renderLossTypeControl,
      "max-bins": this.renderMaxBinsControl,
      "max-depth": this.renderMaxDepthControl,
      "min-info-gain": this.renderMinInfoGainControl,
      "min-instances-per-node": this.renderMinInstancesPerNodeControl,
      "sub-sampling-rate": this.renderSubsamplingRateControl,
      "step-size": this.renderStepSizeControl,
      "max-iter-arr": this.renderMaxIterArrControl,
      "loss-type-arr": this.renderLossTypeArrControl,
      "max-bins-arr": this.renderMaxBinsArrControl,
      "max-depth-arr": this.renderMaxDepthArrControl,
      "min-info-gain-arr": this.renderMinInfoGainArrControl,
      "min-instances-per-node-arr": this.renderMinInstancesPerNodeArrControl,
      "sub-sampling-rate-arr": this.renderSubsamplingRateArrControl,
      "step-size-arr": this.renderStepSizeArrControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createAutoControl(), this.createGroupbyControl(), this.createMaxIterControl(), this.createLossTypeControl(), this.createMaxBinsControl(), this.createMaxDepthControl(), this.createMinInfoGainControl(), this.createMinInstancesPerNodeControl(), this.createSubsamplingRateControl(), this.createStepSizeControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createMaxIterArrControl(), this.createLossTypeArrControl(), this.createMaxDepthArrControl(), this.createMaxBinsArrControl(), this.createMinInfoGainArrControl(), this.createMinInstancesPerNodeArrControl(), this.createSubsamplingRateArrControl(), this.createStepSizeArrControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createAutoControl = function (e) {
    var o = this;
    o.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), o.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var r = o.addPropertyControl("Auto", function (t) {
      t.append(o.$elements["auto.true"]), o.controls["auto.true"] = o.createRadioButton(o.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto",
        checked: !0
      }), o.$elements["auto.true"].on("checked", function (t) {
        o.changeParameter(!0), o.executeAutoCommand("true");
      }), t.append(o.$elements["auto.false"]), o.controls["auto.false"] = o.createRadioButton(o.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), o.$elements["auto.false"].on("checked", function (t) {
        o.changeParameter(!1), o.executeAutoCommand("false");
      });
    }, {
      mandatory: !1
    }),
        n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "auto", "Auto"), "not-allowed" == t.VA.SettingStorage.getValue("common.autonomous.analytics") && r.hide();
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show()) : (this.$maxIterArrProperties.show(), this.$lossTypeArrProperties.show(), this.$maxBinsArrProperties.show(), this.$maxDepthArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$subsamplingRateArrProperties.show(), this.$stepSizeArrProperties.show()), this.$methodProperties.show(), this.$numFoldsProperties.show(), this.$trainRatioProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$maxIterProperties.hide(), this.$lossTypeProperties.hide(), this.$maxBinsProperties.hide(), this.$maxDepthProperties.hide(), this.$minInfoGainProperties.hide(), this.$minInstancesPerNodeProperties.hide(), this.$subsamplingRateProperties.hide(), this.$stepSizeProperties.hide()) : (this.$methodProperties.hide(), this.$numFoldsProperties.hide(), this.$trainRatioProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$maxIterArrProperties.hide(), this.$lossTypeArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$subsamplingRateArrProperties.hide(), this.$stepSizeArrProperties.hide(), this.$maxIterProperties.show(), this.$lossTypeProperties.show(), this.$maxDepthProperties.show(), this.$maxBinsProperties.show(), this.$minInfoGainProperties.show(), this.$minInstancesPerNodeProperties.show(), this.$subsamplingRateProperties.show(), this.$stepSizeProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$maxIterArrProperties.show(), this.$lossTypeArrProperties.show(), this.$maxBinsArrProperties.show(), this.$maxDepthArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$subsamplingRateArrProperties.show(), this.$stepSizeArrProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$maxIterArrProperties.hide(), this.$lossTypeArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$subsamplingRateArrProperties.hide(), this.$stepSizeArrProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show()));
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 4 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 3 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? (o.ref.param["max-iter"] = "", o.ref.param["loss-type"] = "", o.ref.param["max-depth"] = "", o.ref.param["max-bins"] = "", o.ref.param["min-info-gain"] = "", o.ref.param["min-instances-per-node"] = "", o.ref.param["sub-sampling-rate"] = "", o.ref.param["step-size"] = "") : (o.ref.param.method = "", o.ref.param["num-folds"] = "", o.ref.param["train-ratio"] = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["max-iter-arr"] = [], o.ref.param["loss-type-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["sub-sampling-rate-arr"] = [], o.ref.param["step-size-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "") : (o.ref.param["max-iter-arr"] = [], o.ref.param["loss-type-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["sub-sampling-rate-arr"] = [], o.ref.param["step-size-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createImpurityControl = function (t) {
    var e = this;
    e.$elements.impurity = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$impurityProperties = e.addPropertyControl("Impurity", function (t) {
      t.append(e.$elements.impurity);
      e.controls.impurity = e.createDropDownList(e.$elements.impurity, {
        source: [{
          label: "Variance",
          value: "variance"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.impurity.on("change", function (t) {
        var o = e.createSetParameterValueCommand("impurity", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderImpurityControl = function (t) {
    var e = this.options.fnUnit.param.impurity;
    this.$elements.impurity.val(e);
  }, e.prototype.createMaxDepthControl = function (e) {
    var o = this;
    o.$elements["max-depth"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxDepthProperties = o.addPropertyControl("Max Depth", function (e) {
      e.append(o.$elements["max-depth"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value <= 30)"),
        numberType: "int"
      };
      o.controls["max-depth"] = o.createNumericInput(o.$elements["max-depth"], r), o.controls["max-depth"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-depth", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth", "Max Depth");
  }, e.prototype.renderMaxDepthControl = function (t) {
    var e = this.options.fnUnit.param["max-depth"];
    this.controls["max-depth"].setValue(e || "");
  }, e.prototype.createMaxBinsControl = function (e) {
    var o = this;
    o.$elements["max-bins"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxBinsProperties = o.addPropertyControl("Max Bins", function (e) {
      e.append(o.$elements["max-bins"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)"),
        numberType: "int"
      };
      o.controls["max-bins"] = o.createNumericInput(o.$elements["max-bins"], r), o.controls["max-bins"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-bins", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins", "Max Bins");
  }, e.prototype.renderMaxBinsControl = function (t) {
    var e = this.options.fnUnit.param["max-bins"];
    this.controls["max-bins"].setValue(e || "");
  }, e.prototype.createMinInfoGainControl = function (e) {
    var o = this;
    o.$elements["min-info-gain"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInfoGainProperties = o.addPropertyControl("Min Information Gain", function (e) {
      e.append(o.$elements["min-info-gain"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)"),
        numberType: "double"
      };
      o.controls["min-info-gain"] = o.createNumericInput(o.$elements["min-info-gain"], r), o.controls["min-info-gain"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-info-gain", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain", "Min Information Gain");
  }, e.prototype.renderMinInfoGainControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain"];
    this.controls["min-info-gain"].setValue(e || "");
  }, e.prototype.createMinInstancesPerNodeControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInstancesPerNodeProperties = o.addPropertyControl("Min Instances Per Node", function (e) {
      e.append(o.$elements["min-instances-per-node"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)"),
        numberType: "int"
      };
      o.controls["min-instances-per-node"] = o.createNumericInput(o.$elements["min-instances-per-node"], r), o.controls["min-instances-per-node"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-instances-per-node", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node", "Min Instances Per Node");
  }, e.prototype.renderMinInstancesPerNodeControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node"];
    this.controls["min-instances-per-node"].setValue(e || "");
  }, e.prototype.createSubsamplingRateControl = function (e) {
    var o = this;
    o.$elements["sub-sampling-rate"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$subsamplingRateProperties = o.addPropertyControl("Subsampling Rate", function (e) {
      e.append(o.$elements["sub-sampling-rate"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 < value <= 1.0)"),
        numberType: "double"
      };
      o.controls["sub-sampling-rate"] = o.createNumericInput(o.$elements["sub-sampling-rate"], r), o.controls["sub-sampling-rate"].onChange(function () {
        var t = o.createSetParameterValueCommand("sub-sampling-rate", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$subsamplingRateProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "sub-sampling-rate", "Subsampling Rate");
  }, e.prototype.renderSubsamplingRateControl = function (t) {
    var e = this.options.fnUnit.param["sub-sampling-rate"];
    this.controls["sub-sampling-rate"].setValue(e || "");
  }, e.prototype.createStepSizeControl = function (e) {
    var o = this;
    o.$elements["step-size"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$stepSizeProperties = o.addPropertyControl("Step Size", function (e) {
      e.append(o.$elements["step-size"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.1 (0 < value <= 1.0)"),
        numberType: "double"
      };
      o.controls["step-size"] = o.createNumericInput(o.$elements["step-size"], r), o.controls["step-size"].onChange(function () {
        var t = o.createSetParameterValueCommand("step-size", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$stepSizeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "step-size", "Step Size");
  }, e.prototype.renderStepSizeControl = function (t) {
    var e = this.options.fnUnit.param["step-size"];
    this.controls["step-size"].setValue(e || "");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      e.controls.method = e.createDropDownList(e.$elements.method, {
        source: [{
          label: "TrainValid",
          value: "TrainValid"
        }, {
          label: "CrossValid",
          value: "CrossValid"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.method.on("change", function (t) {
        var o = e.createSetParameterValueCommand("method", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$methodProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "method", "Method");
  }, e.prototype.renderMethodControl = function (t) {
    var e = this.options.fnUnit.param.method;
    this.$elements.method.val(e);
  }, e.prototype.createNumFoldsControl = function (e) {
    var o = this;
    o.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numFoldsProperties = o.addPropertyControl("Number of Folds", function (e) {
      e.append(o.$elements["num-folds"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (2 <= value)"),
        numberType: "int"
      };
      o.controls["num-folds"] = o.createNumericInput(o.$elements["num-folds"], r), o.controls["num-folds"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-folds", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$numFoldsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num-folds", "Number of Folds");
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createTrainRatioControl = function (e) {
    var o = this;
    o.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$trainRatioProperties = o.addPropertyControl("Train Ratio", function (e) {
      e.append(o.$elements["train-ratio"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.75 (0 < value < 1)"),
        numberType: "double"
      };
      o.controls["train-ratio"] = o.createNumericInput(o.$elements["train-ratio"], r), o.controls["train-ratio"].onChange(function () {
        var t = o.createSetParameterValueCommand("train-ratio", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$trainRatioProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "train-ratio", "Train Ratio");
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "rmse",
          value: "rmse"
        }, {
          label: "mse",
          value: "mse"
        }, {
          label: "r2",
          value: "r2"
        }, {
          label: "mae",
          value: "mae"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$metricNameProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "metric-name", "Metric Name");
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (e) {
    var o = this;
    o.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numSearchProperties = o.addPropertyControl("Number of Random Hyperparameters", function (e) {
      e.append(o.$elements["num-search"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("10 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-search"] = o.createNumericInput(o.$elements["num-search"], r), o.controls["num-search"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-search", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createMaxIterControl = function (e) {
    var o = this;
    o.$elements["max-iter"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxIterProperties = o.addPropertyControl("Max Iteration", function (e) {
      e.append(o.$elements["max-iter"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("10 (1 <= value)"),
        numberType: "int"
      };
      o.controls["max-iter"] = o.createNumericInput(o.$elements["max-iter"], r), o.controls["max-iter"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-iter", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxIterProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-iteration", "Max Iteration");
  }, e.prototype.renderMaxIterControl = function (t) {
    var e = this.options.fnUnit.param["max-iter"];
    this.controls["max-iter"].setValue(e || "");
  }, e.prototype.createLossTypeControl = function (t) {
    var e = this;
    e.$elements["loss-type"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$lossTypeProperties = e.addPropertyControl("Loss Function", function (t) {
      t.append(e.$elements["loss-type"]);
      e.controls["loss-type"] = e.createDropDownList(e.$elements["loss-type"], {
        source: [{
          label: "squared",
          value: "squared"
        }, {
          label: "absolute",
          value: "absolute"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["loss-type"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("loss-type", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$lossTypeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "loss-type", "Loss Function");
  }, e.prototype.renderLossTypeControl = function (t) {
    var e = this.options.fnUnit.param["loss-type"];
    this.$elements["loss-type"].val(e);
  }, e.prototype.createImpurityArrControl = function (t) {
    var e = this;
    e.$elements["impurity-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["impurity-arr"].append(o), e.$elements["impurity-arr"].append(r), this.$impurityArrProperties = e.addPropertyControl("Impurity Set", function (t) {
      t.append(e.$elements["impurity-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Variance",
        value: "variance"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("impurity-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "impurity-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["impurity-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("impurity-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("impurity-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderImpurityArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["impurity-arr"],
        r = [{
      label: "Variance",
      value: "variance"
    }];

    for (var n in r) {
      e = "impurity-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMaxDepthArrControl = function (e) {
    var o = this;
    o.$elements["max-depth-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxDepthArrProperties = o.addPropertyControl("Max Depth Set", function (e) {
      e.append(o.$elements["max-depth-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5, 7 (0 <= value <= 30)")
      };
      o.controls["max-depth-arr"] = o.createInput(o.$elements["max-depth-arr"], r), o.$elements["max-depth-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-depth-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth-arr", "Max Depth Set");
  }, e.prototype.renderMaxDepthArrControl = function (t) {
    var e = this.options.fnUnit.param["max-depth-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-depth-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxBinsArrControl = function (e) {
    var o = this;
    o.$elements["max-bins-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxBinsArrProperties = o.addPropertyControl("Max Bins Set", function (e) {
      e.append(o.$elements["max-bins-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)")
      };
      o.controls["max-bins-arr"] = o.createInput(o.$elements["max-bins-arr"], r), o.$elements["max-bins-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-bins-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins-arr", "Max Bins Set");
  }, e.prototype.renderMaxBinsArrControl = function (t) {
    var e = this.options.fnUnit.param["max-bins-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-bins-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInfoGainArrControl = function (e) {
    var o = this;
    o.$elements["min-info-gain-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInfoGainArrProperties = o.addPropertyControl("Min Information Gain Set", function (e) {
      e.append(o.$elements["min-info-gain-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)")
      };
      o.controls["min-info-gain-arr"] = o.createInput(o.$elements["min-info-gain-arr"], r), o.$elements["min-info-gain-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("min-info-gain-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain-arr", "Min Information Gain Set");
  }, e.prototype.renderMinInfoGainArrControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-info-gain-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInstancesPerNodeArrControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInstancesPerNodeArrProperties = o.addPropertyControl("Min Instances Per Nodes Set", function (e) {
      e.append(o.$elements["min-instances-per-node-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)")
      };
      o.controls["min-instances-per-node-arr"] = o.createInput(o.$elements["min-instances-per-node-arr"], r), o.$elements["min-instances-per-node-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("min-instances-per-node-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node-arr", "Min Instances Per Nodes Set");
  }, e.prototype.renderMinInstancesPerNodeArrControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-instances-per-node-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSubsamplingRateArrControl = function (e) {
    var o = this;
    o.$elements["sub-sampling-rate-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$subsamplingRateArrProperties = o.addPropertyControl("Subsampling Rate Set", function (e) {
      e.append(o.$elements["sub-sampling-rate-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 < value <= 1)")
      };
      o.controls["sub-sampling-rate-arr"] = o.createInput(o.$elements["sub-sampling-rate-arr"], r), o.$elements["sub-sampling-rate-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("sub-sampling-rate-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$subsamplingRateArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "sub-sampling-rate-arr", "Subsampling Rate Set");
  }, e.prototype.renderSubsamplingRateArrControl = function (t) {
    var e = this.options.fnUnit.param["sub-sampling-rate-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["sub-sampling-rate-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createStepSizeArrControl = function (e) {
    var o = this;
    o.$elements["step-size-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$stepSizeArrProperties = o.addPropertyControl("Step Size Set", function (e) {
      e.append(o.$elements["step-size-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.1 (0 < value <= 1)")
      };
      o.controls["step-size-arr"] = o.createInput(o.$elements["step-size-arr"], r), o.$elements["step-size-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("step-size-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$stepSizeArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "step-size-arr", "Step Size Set");
  }, e.prototype.renderStepSizeArrControl = function (t) {
    var e = this.options.fnUnit.param["step-size-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["step-size-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxIterArrControl = function (e) {
    var o = this;
    o.$elements["max-iter-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxIterArrProperties = o.addPropertyControl("Max Iteration Set", function (e) {
      e.append(o.$elements["max-iter-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3, 10 (1 <= value)")
      };
      o.controls["max-iter-arr"] = o.createInput(o.$elements["max-iter-arr"], r), o.$elements["max-iter-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-iter-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxIterArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-iter-arr", "Max Iteration Set");
  }, e.prototype.renderMaxIterArrControl = function (t) {
    var e = this.options.fnUnit.param["max-iter-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-iter-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createLossTypeArrControl = function (t) {
    var e = this;
    e.$elements["loss-type-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["loss-type-arr"].append(o), e.$elements["loss-type-arr"].append(r), this.$lossTypeArrProperties = e.addPropertyControl("Loss Function Set", function (t) {
      t.append(e.$elements["loss-type-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "squared",
        value: "squared"
      }, {
        label: "absolute",
        value: "absolute"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "loss-type-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("loss-type-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "loss-type-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["loss-type-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "loss-type-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "loss-type-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("loss-type-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "loss-type-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("loss-type-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderLossTypeArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["loss-type-arr"],
        r = [{
      label: "squared",
      value: "squared"
    }, {
      label: "absolute",
      value: "absolute"
    }];

    for (var n in r) {
      e = "loss-type-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0), this.controls.xcolumns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, e.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid == t.options.fnUnit.fid ? this.renderValues(t) : t.event.source !== this && this.renderValues(t);
  }, t.VA.Core.Functions.Library.gBTRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule(), this.addBaseGroupByRule("ycolumn", "Y Column"), this.addBaseGroupByRule("xcolumns", "X Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    });
  }, t.VA.Core.Functions.Library.gBTRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.randomForestClassificationPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "randomForestClassificationPredict",
      name: "AutoRandomForestPredictForClassification",
      inData: [],
      outData: [],
      param: {
        "hold-columns": [[]],
        groupby: [],
        "prediction-col": "",
        "probability-col": "",
        "raw-prediction-col": ""
      },
      display: {
        label: "Auto Random Forest Predict For Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data based on random forest from RandomForestClassificationTrain function.",
    mandatory: [],
    tags: ["classification", "randomforest", "predict", "random Forest Classification predict", "Auto Random Forest Predict For Classification"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-columns": this.renderHoldColumnsControl,
      groupby: this.renderGroupbyControl,
      "prediction-col": this.renderPredictionColControl,
      "probability-col": this.renderProbabilityColControl,
      "raw-prediction-col": this.renderRawPredictionColControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColumnsControl(), this.createGroupbyControl(), this.createPredictionColControl(), this.createProbabilityColControl(), this.createRawPredictionColControl();
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"][0];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.createProbabilityColControl = function (t) {
    var e = this;
    e.$elements["probability-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Probability Column Name", function (t) {
      t.append(e.$elements["probability-col"]);
      e.controls["probability-col"] = e.createInput(e.$elements["probability-col"], {
        placeHolder: "probability"
      }), e.$elements["probability-col"].on("change", function (t) {
        if (e.isInputValueChanged("probability-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("probability-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderProbabilityColControl = function (t) {
    var e = this.options.fnUnit.param["probability-col"];
    this.$elements["probability-col"].val(e || "");
  }, e.prototype.createRawPredictionColControl = function (t) {
    var e = this;
    e.$elements["raw-prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Raw Prediction Column Name", function (t) {
      t.append(e.$elements["raw-prediction-col"]);
      e.controls["raw-prediction-col"] = e.createInput(e.$elements["raw-prediction-col"], {
        placeHolder: "rawPrediction"
      }), e.$elements["raw-prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("raw-prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("raw-prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderRawPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["raw-prediction-col"];
    this.$elements["raw-prediction-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, []), this.controls["hold-columns"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.randomForestClassificationPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addHoldColumnsRule(), this.addBaseGroupByRule("hold-columns", "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "String", "number[]", "String[]"]);
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.randomForestClassificationPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.randomForestClassificationTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "randomForestClassificationTrain",
      name: "AutoRandomForestTrainForClassification",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        seed: "",
        auto: "false",
        groupby: [],
        "num-trees": "",
        "feature-subset-strategy": "",
        impurity: "",
        "max-depth": "",
        "max-bins": "",
        "min-info-gain": "",
        "min-instances-per-node": "",
        "sub-sampling-rate": "",
        thresholds: [],
        method: "",
        "metric-name": "",
        "search-method": "grid",
        "num-search": "",
        "search-seed": "",
        "num-folds": "",
        "train-ratio": "",
        "num-trees-arr": [],
        "feature-subset-strategy-arr": ["auto", "all", "sqrt", "log2", "onethird"],
        "impurity-arr": ["gini", "entropy"],
        "max-depth-arr": [],
        "max-bins-arr": [],
        "min-info-gain-arr": [],
        "min-instances-per-node-arr": [],
        "sub-sampling-rate-arr": [],
        "thresholds-arr": []
      },
      display: {
        label: "Auto Random Forest Train For Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides random forest to generate training set for classification and provides autonomous feature(hyperparameter tuning based on grid search).",
    mandatory: [],
    tags: ["auto", "classification", "random Forest Classification Train", "Auto Random Forest Train For Classification"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "4",
      max: "5"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      seed: this.renderSeedControl,
      auto: this.renderAutoControl,
      groupby: this.renderGroupbyControl,
      "num-trees": this.renderNumTreesControl,
      "feature-subset-strategy": this.renderFeatureSubsetStrategyControl,
      impurity: this.renderImpurityControl,
      "max-depth": this.renderMaxDepthControl,
      "max-bins": this.renderMaxBinsControl,
      "min-info-gain": this.renderMinInfoGainControl,
      "min-instances-per-node": this.renderMinInstancesPerNodeControl,
      "sub-sampling-rate": this.renderSubsamplingRateControl,
      thresholds: this.renderThresholdsControl,
      method: this.renderMethodControl,
      "num-folds": this.renderNumFoldsControl,
      "train-ratio": this.renderTrainRatioControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      "num-trees-arr": this.renderNumTreesArrControl,
      "feature-subset-strategy-arr": this.renderFeatureSubsetStrategyArrControl,
      "impurity-arr": this.renderImpurityArrControl,
      "max-depth-arr": this.renderMaxDepthArrControl,
      "max-bins-arr": this.renderMaxBinsArrControl,
      "min-info-gain-arr": this.renderMinInfoGainArrControl,
      "min-instances-per-node-arr": this.renderMinInstancesPerNodeArrControl,
      "sub-sampling-rate-arr": this.renderSubsamplingRateArrControl,
      "thresholds-arr": this.renderThresholdsArrControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createSeedControl(), this.createAutoControl(), this.createGroupbyControl(), this.createNumTreesControl(), this.createFeatureSubsetStrategyControl(), this.createImpurityControl(), this.createMaxDepthControl(), this.createMaxBinsControl(), this.createMinInfoGainControl(), this.createMinInstancesPerNodeControl(), this.createSubsamplingRateControl(), this.createThresholdsControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createNumTreesArrControl(), this.createFeatureSubsetStrategyArrControl(), this.createImpurityArrControl(), this.createMaxDepthArrControl(), this.createMaxBinsArrControl(), this.createMinInfoGainArrControl(), this.createMinInstancesPerNodeArrControl(), this.createSubsamplingRateArrControl(), this.createThresholdsArrControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createSeedControl = function (t) {
    var e = this;
    e.$elements.seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Seed", function (t) {
      t.append(e.$elements.seed);
      e.controls.seed = e.createNumericInput(e.$elements.seed, {
        numberType: "int"
      }), e.controls.seed.onChange(function () {
        var t = e.createSetParameterValueCommand("seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "seed", "Seed");
  }, e.prototype.renderSeedControl = function (t) {
    var e = this.options.fnUnit.param.seed;
    this.controls.seed.setValue(e || "");
  }, e.prototype.createAutoControl = function (e) {
    var o = this;
    o.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), o.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var r = o.addPropertyControl("Auto", function (t) {
      t.append(o.$elements["auto.true"]), o.controls["auto.true"] = o.createRadioButton(o.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto",
        checked: !0
      }), o.$elements["auto.true"].on("checked", function (t) {
        o.changeParameter(!0), o.executeAutoCommand("true");
      }), t.append(o.$elements["auto.false"]), o.controls["auto.false"] = o.createRadioButton(o.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), o.$elements["auto.false"].on("checked", function (t) {
        o.changeParameter(!1), o.executeAutoCommand("false");
      });
    }, {
      mandatory: !1
    }),
        n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "auto", "Auto"), "not-allowed" == t.VA.SettingStorage.getValue("common.autonomous.analytics") && r.hide();
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show()) : (this.$numTreesArrProperties.show(), this.$featureSubsetStrategyArrProperties.show(), this.$impurityArrProperties.show(), this.$maxDepthArrProperties.show(), this.$maxBinsArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$subsamplingRateArrProperties.show(), this.$thresholdsArrProperties.show()), this.$methodProperties.show(), this.$numFoldsProperties.show(), this.$trainRatioProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$numTreesProperties.hide(), this.$featureSubsetStrategyProperties.hide(), this.$impurityProperties.hide(), this.$maxDepthProperties.hide(), this.$maxBinsProperties.hide(), this.$minInfoGainProperties.hide(), this.$minInstancesPerNodeProperties.hide(), this.$subsamplingRateProperties.hide(), this.$thresholdsProperties.hide()) : (this.$methodProperties.hide(), this.$numFoldsProperties.hide(), this.$trainRatioProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$numTreesArrProperties.hide(), this.$featureSubsetStrategyArrProperties.hide(), this.$impurityArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$subsamplingRateArrProperties.hide(), this.$thresholdsArrProperties.hide(), this.$numTreesProperties.show(), this.$featureSubsetStrategyProperties.show(), this.$impurityProperties.show(), this.$maxDepthProperties.show(), this.$maxBinsProperties.show(), this.$minInfoGainProperties.show(), this.$minInstancesPerNodeProperties.show(), this.$subsamplingRateProperties.show(), this.$thresholdsProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$numTreesArrProperties.show(), this.$featureSubsetStrategyArrProperties.show(), this.$impurityArrProperties.show(), this.$maxDepthArrProperties.show(), this.$maxBinsArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$subsamplingRateArrProperties.show(), this.$thresholdsArrProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$numTreesArrProperties.hide(), this.$featureSubsetStrategyArrProperties.hide(), this.$impurityArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$subsamplingRateArrProperties.hide(), this.$thresholdsArrProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show()));
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 5 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 4 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? (o.ref.param["num-trees"] = "", o.ref.param["feature-subset-strategy"] = "", o.ref.param.impurity = "", o.ref.param["max-depth"] = "", o.ref.param["max-bins"] = "", o.ref.param["min-info-gain"] = "", o.ref.param["min-instances-per-node"] = "", o.ref.param["sub-sampling-rate"] = "", o.ref.param.thresholds = [], o.ref.param.groupby = []) : (o.ref.param.method = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["num-folds"] = "", o.ref.param["train-ratio"] = "", o.ref.param["num-trees-arr"] = [], o.ref.param["feature-subset-strategy-arr"] = [], o.ref.param["impurity-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["sub-sampling-rate-arr"] = [], o.ref.param["thresholds-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "") : (o.ref.param["num-trees-arr"] = [], o.ref.param["feature-subset-strategy-arr"] = [], o.ref.param["impurity-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["sub-sampling-rate-arr"] = [], o.ref.param["thresholds-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createNumTreesControl = function (e) {
    var o = this;
    o.$elements["num-trees"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numTreesProperties = o.addPropertyControl("Number of Trees", function (e) {
      e.append(o.$elements["num-trees"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-trees"] = o.createNumericInput(o.$elements["num-trees"], r), o.controls["num-trees"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-trees", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$numTreesProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num-trees", "Number of Trees");
  }, e.prototype.renderNumTreesControl = function (t) {
    var e = this.options.fnUnit.param["num-trees"];
    this.controls["num-trees"].setValue(e || "");
  }, e.prototype.createFeatureSubsetStrategyControl = function (t) {
    var e = this;
    e.$elements["feature-subset-strategy"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$featureSubsetStrategyProperties = e.addPropertyControl("Feature Subset Strategy", function (t) {
      t.append(e.$elements["feature-subset-strategy"]);
      e.controls["feature-subset-strategy"] = e.createDropDownList(e.$elements["feature-subset-strategy"], {
        source: [{
          label: "Auto",
          value: "auto"
        }, {
          label: "All",
          value: "all"
        }, {
          label: "Sqrt",
          value: "sqrt"
        }, {
          label: "Log2",
          value: "log2"
        }, {
          label: "Onethird",
          value: "onethird"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["feature-subset-strategy"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("feature-subset-strategy", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$featureSubsetStrategyProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "feature-subset-strategy", "Feature Subset Strategy");
  }, e.prototype.renderFeatureSubsetStrategyControl = function (t) {
    var e = this.options.fnUnit.param["feature-subset-strategy"];
    this.$elements["feature-subset-strategy"].val(e);
  }, e.prototype.createImpurityControl = function (t) {
    var e = this;
    e.$elements.impurity = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$impurityProperties = e.addPropertyControl("Impurity", function (t) {
      t.append(e.$elements.impurity);
      e.controls.impurity = e.createDropDownList(e.$elements.impurity, {
        source: [{
          label: "Gini",
          value: "gini"
        }, {
          label: "Entropy",
          value: "entropy"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.impurity.on("change", function (t) {
        var o = e.createSetParameterValueCommand("impurity", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$impurityProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "impurity", "Impurity");
  }, e.prototype.renderImpurityControl = function (t) {
    var e = this.options.fnUnit.param.impurity;
    this.$elements.impurity.val(e);
  }, e.prototype.createMaxDepthControl = function (e) {
    var o = this;
    o.$elements["max-depth"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxDepthProperties = o.addPropertyControl("Max Depth", function (e) {
      e.append(o.$elements["max-depth"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value <= 30)"),
        numberType: "int"
      };
      o.controls["max-depth"] = o.createNumericInput(o.$elements["max-depth"], r), o.controls["max-depth"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-depth", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth", "Max Depth");
  }, e.prototype.renderMaxDepthControl = function (t) {
    var e = this.options.fnUnit.param["max-depth"];
    this.controls["max-depth"].setValue(e || "");
  }, e.prototype.createMaxBinsControl = function (e) {
    var o = this;
    o.$elements["max-bins"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxBinsProperties = o.addPropertyControl("Max Bins", function (e) {
      e.append(o.$elements["max-bins"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)"),
        numberType: "int"
      };
      o.controls["max-bins"] = o.createNumericInput(o.$elements["max-bins"], r), o.controls["max-bins"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-bins", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins", "Max Bins");
  }, e.prototype.renderMaxBinsControl = function (t) {
    var e = this.options.fnUnit.param["max-bins"];
    this.controls["max-bins"].setValue(e || "");
  }, e.prototype.createMinInfoGainControl = function (e) {
    var o = this;
    o.$elements["min-info-gain"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInfoGainProperties = o.addPropertyControl("Min Information Gain", function (e) {
      e.append(o.$elements["min-info-gain"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)"),
        numberType: "double"
      };
      o.controls["min-info-gain"] = o.createNumericInput(o.$elements["min-info-gain"], r), o.controls["min-info-gain"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-info-gain", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain", "Min Information Gain");
  }, e.prototype.renderMinInfoGainControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain"];
    this.controls["min-info-gain"].setValue(e || "");
  }, e.prototype.createMinInstancesPerNodeControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInstancesPerNodeProperties = o.addPropertyControl("Min Instances Per Node", function (e) {
      e.append(o.$elements["min-instances-per-node"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)"),
        numberType: "int"
      };
      o.controls["min-instances-per-node"] = o.createNumericInput(o.$elements["min-instances-per-node"], r), o.controls["min-instances-per-node"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-instances-per-node", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node", "Min Instances Per Node");
  }, e.prototype.renderMinInstancesPerNodeControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node"];
    this.controls["min-instances-per-node"].setValue(e || "");
  }, e.prototype.createSubsamplingRateControl = function (e) {
    var o = this;
    o.$elements["sub-sampling-rate"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$subsamplingRateProperties = o.addPropertyControl("Subsampling Rate", function (e) {
      e.append(o.$elements["sub-sampling-rate"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 < value <= 1.0)"),
        numberType: "double"
      };
      o.controls["sub-sampling-rate"] = o.createNumericInput(o.$elements["sub-sampling-rate"], r), o.controls["sub-sampling-rate"].onChange(function () {
        var t = o.createSetParameterValueCommand("sub-sampling-rate", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$subsamplingRateProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "sub-sampling-rate", "Subsampling Rate");
  }, e.prototype.renderSubsamplingRateControl = function (t) {
    var e = this.options.fnUnit.param["sub-sampling-rate"];
    this.controls["sub-sampling-rate"].setValue(e || "");
  }, e.prototype.createThresholdsControl = function (e) {
    var o = this;
    o.$elements.thresholds = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$thresholdsProperties = o.addPropertyControl("Thresholds", function (e) {
      e.append(o.$elements.thresholds);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(0 <= value)")
      };
      o.controls.thresholds = o.createInput(o.$elements.thresholds, r), o.$elements.thresholds.on("change", function (t) {
        if (o.isInputValueChanged("thresholds", $(this).val() ? [$(this).val()] : [])) {
          var e = o.createSetArrayParameterCommand("thresholds", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    });
    var r = o.$thresholdsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "thresholds", "Thresholds");
  }, e.prototype.renderThresholdsControl = function (t) {
    var e = this.options.fnUnit.param.thresholds,
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements.thresholds.val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      e.controls.method = e.createDropDownList(e.$elements.method, {
        source: [{
          label: "TrainValid",
          value: "TrainValid"
        }, {
          label: "CrossValid",
          value: "CrossValid"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.method.on("change", function (t) {
        var o = e.createSetParameterValueCommand("method", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$methodProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "method", "Method");
  }, e.prototype.renderMethodControl = function (t) {
    var e = this.options.fnUnit.param.method;
    this.$elements.method.val(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createNumFoldsControl = function (e) {
    var o = this;
    o.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numFoldsProperties = o.addPropertyControl("Number of Folds", function (e) {
      e.append(o.$elements["num-folds"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (2 <= value)"),
        numberType: "int"
      };
      o.controls["num-folds"] = o.createNumericInput(o.$elements["num-folds"], r), o.controls["num-folds"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-folds", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$numFoldsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num-folds", "Number of Folds");
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createTrainRatioControl = function (e) {
    var o = this;
    o.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$trainRatioProperties = o.addPropertyControl("Train Ratio", function (e) {
      e.append(o.$elements["train-ratio"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.75 (0 < value < 1)"),
        numberType: "double"
      };
      o.controls["train-ratio"] = o.createNumericInput(o.$elements["train-ratio"], r), o.controls["train-ratio"].onChange(function () {
        var t = o.createSetParameterValueCommand("train-ratio", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
    var r = o.$trainRatioProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "train-ratio", "Train Ratio");
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "f1",
          value: "f1"
        }, {
          label: "weighted precision",
          value: "weightedPrecision"
        }, {
          label: "weighted recall",
          value: "weightedRecall"
        }, {
          label: "accuracy",
          value: "accuracy"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$metricNameProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "metric-name", "Metric Name");
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (e) {
    var o = this;
    o.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numSearchProperties = o.addPropertyControl("Number of Random Hyperparameters", function (e) {
      e.append(o.$elements["num-search"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("15 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-search"] = o.createNumericInput(o.$elements["num-search"], r), o.controls["num-search"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-search", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createNumTreesArrControl = function (e) {
    var o = this;
    o.$elements["num-trees-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$numTreesArrProperties = o.addPropertyControl("Number of Trees Set", function (e) {
      e.append(o.$elements["num-trees-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("8, 20, 32 (1 <= value)")
      };
      o.controls["num-trees-arr"] = o.createInput(o.$elements["num-trees-arr"], r), o.$elements["num-trees-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("num-trees-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$numTreesArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num-trees-arr", "Number of Trees Set");
  }, e.prototype.renderNumTreesArrControl = function (t) {
    var e = this.options.fnUnit.param["num-trees-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["num-trees-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createFeatureSubsetStrategyArrControl = function (t) {
    var e = this;
    e.$elements["feature-subset-strategy-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["feature-subset-strategy-arr"].append(o), e.$elements["feature-subset-strategy-arr"].append(r), e.$featureSubsetStrategyArrProperties = e.addPropertyControl("Feature Subset Strategy Set", function (t) {
      t.append(e.$elements["feature-subset-strategy-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Auto",
        value: "auto"
      }, {
        label: "All",
        value: "all"
      }, {
        label: "Sqrt",
        value: "sqrt"
      }, {
        label: "Log2",
        value: "log2"
      }, {
        label: "Onethird",
        value: "onethird"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "feature-subset-strategy-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("feature-subset-strategy-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "feature-subset-strategy-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["feature-subset-strategy-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "feature-subset-strategy-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "feature-subset-strategy-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("feature-subset-strategy-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "feature-subset-strategy-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("feature-subset-strategy-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFeatureSubsetStrategyArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["feature-subset-strategy-arr"],
        r = [{
      label: "Auto",
      value: "auto"
    }, {
      label: "All",
      value: "all"
    }, {
      label: "Sqrt",
      value: "sqrt"
    }, {
      label: "Log2",
      value: "log2"
    }, {
      label: "Onethird",
      value: "onethird"
    }];

    for (var n in r) {
      e = "feature-subset-strategy-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createImpurityArrControl = function (t) {
    var e = this;
    e.$elements["impurity-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["impurity-arr"].append(o), e.$elements["impurity-arr"].append(r), this.$impurityArrProperties = e.addPropertyControl("Impurity Set", function (t) {
      t.append(e.$elements["impurity-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Gini",
        value: "gini"
      }, {
        label: "Entropy",
        value: "entropy"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("impurity-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "impurity-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["impurity-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("impurity-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("impurity-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderImpurityArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["impurity-arr"],
        r = [{
      label: "Gini",
      value: "gini"
    }, {
      label: "Entropy",
      value: "entropy"
    }];

    for (var n in r) {
      e = "impurity-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMaxDepthArrControl = function (e) {
    var o = this;
    o.$elements["max-depth-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxDepthArrProperties = o.addPropertyControl("Max Depth Set", function (e) {
      e.append(o.$elements["max-depth-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("4, 8, 16 (0 <= value <= 30)")
      };
      o.controls["max-depth-arr"] = o.createInput(o.$elements["max-depth-arr"], r), o.$elements["max-depth-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-depth-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxDepthArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-depth-arr", "Max Depth Set");
  }, e.prototype.renderMaxDepthArrControl = function (t) {
    var e = this.options.fnUnit.param["max-depth-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-depth-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxBinsArrControl = function (e) {
    var o = this;
    o.$elements["max-bins-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxBinsArrProperties = o.addPropertyControl("Max Bins Set", function (e) {
      e.append(o.$elements["max-bins-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("32 (2 <= value)")
      };
      o.controls["max-bins-arr"] = o.createInput(o.$elements["max-bins-arr"], r), o.$elements["max-bins-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-bins-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$maxBinsArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-bins-arr", "Max Bins Set");
  }, e.prototype.renderMaxBinsArrControl = function (t) {
    var e = this.options.fnUnit.param["max-bins-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-bins-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInfoGainArrControl = function (e) {
    var o = this;
    o.$elements["min-info-gain-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInfoGainArrProperties = o.addPropertyControl("Min Information Gain Set", function (e) {
      e.append(o.$elements["min-info-gain-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)")
      };
      o.controls["min-info-gain-arr"] = o.createInput(o.$elements["min-info-gain-arr"], r), o.$elements["min-info-gain-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("min-info-gain-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInfoGainArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-info-gain-arr", "Min Information Gain Set");
  }, e.prototype.renderMinInfoGainArrControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-info-gain-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInstancesPerNodeArrControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInstancesPerNodeArrProperties = o.addPropertyControl("Min Instances Per Nodes Set", function (e) {
      e.append(o.$elements["min-instances-per-node-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)")
      };
      o.controls["min-instances-per-node-arr"] = o.createInput(o.$elements["min-instances-per-node-arr"], r), o.$elements["min-instances-per-node-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("min-instances-per-node-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$minInstancesPerNodeArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-instances-per-node-arr", "Min Instances Per Nodes Set");
  }, e.prototype.renderMinInstancesPerNodeArrControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-instances-per-node-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSubsamplingRateArrControl = function (e) {
    var o = this;
    o.$elements["sub-sampling-rate-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$subsamplingRateArrProperties = o.addPropertyControl("Subsampling Rate Set", function (e) {
      e.append(o.$elements["sub-sampling-rate-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.7, 1.0 (0.0 < value <= 1.0)")
      };
      o.controls["sub-sampling-rate-arr"] = o.createInput(o.$elements["sub-sampling-rate-arr"], r), o.$elements["sub-sampling-rate-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("sub-sampling-rate-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
    var r = o.$subsamplingRateArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "sub-sampling-rate-arr", "Subsampling Rate Set");
  }, e.prototype.renderSubsamplingRateArrControl = function (t) {
    var e = this.options.fnUnit.param["sub-sampling-rate-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["sub-sampling-rate-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createThresholdsRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-property-row-container brtc-va-editors-property-row-content"></div>'),
        n = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        a = $('<div class="brtc-va-editors-property-row-content-add-button"></div>'),
        i = $('<div class="brtc-va-editors-property-row-content-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.$elements["thresholds-arr"].append(r), this.createInput(n, {
      height: "23px"
    }, "", {
      width: "90%",
      float: "left"
    }), this.byThresholdssControlArray.push(n), e || n.jqxInput("focus"), n.on("change", function (t) {
      var e = [];

      for (var r in o.byThresholdssControlArray) {
        var n = o.byThresholdssControlArray[r].val().split(",");

        for (var a in n) {
          e.push(n[a].trim());
        }
      }

      if (JSON.stringify(o.options.fnUnit.param["thresholds-arr"]) != JSON.stringify([e])) {
        var i = o.createThresholdsArrCommand();
        o.executeCommand(i);
      }
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-property-row-content"),
          e = t.prevAll().length;
      o.byThresholdssControlArray.splice(e, 1), t.remove();
      var r = o.createThresholdsArrCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createThresholdsRow(!1, !1);
      var t = o.createThresholdsArrCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.createThresholdsArrControl = function (t) {
    var e = this;
    e.$elements["thresholds-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$thresholdsArrProperties = e.addPropertyControl("Thresholds Set", function (t) {
      t.append(e.$elements["thresholds-arr"]);
    }, {
      mandatory: !1
    });
    var o = e.$thresholdsArrProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "thresholds-arr", "Thresholds Set");
  }, e.prototype.renderThresholdsArrControl = function (t) {
    var e = this.options.fnUnit.param["thresholds-arr"];
    this.byThresholdssControlArray = [], this.$elements["thresholds-arr"].empty(), this.createThresholdsRow(!0, !0);

    for (var o = 0; o < e.length; o++) {
      o >= 1 && this.createThresholdsRow(!1, !0);
      var r = "";

      for (var n in e[o]) {
        r = r + e[o][n] + ",";
      }

      this.byThresholdssControlArray[o].val(r.substring(0, r.length - 1));
    }
  }, e.prototype.createThresholdsArrCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["thresholds-arr"] = [];
    var o = [];

    for (var r in this.byThresholdssControlArray) {
      var n = [],
          a = this.byThresholdssControlArray[r].val().split(",");

      for (var i in a) {
        n.push(a[i].trim());
      }

      o.push(n);
    }

    return e.ref.param["thresholds-arr"] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0), this.controls.xcolumns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, e.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid == t.options.fnUnit.fid ? this.renderValues(t) : t.event.source !== this && this.renderValues(t);
  }, t.VA.Core.Functions.Library.randomForestClassificationTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule(), this.addBaseGroupByRule("ycolumn", "Y Column"), this.addBaseGroupByRule("xcolumns", "X Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    });
  }, t.VA.Core.Functions.Library.randomForestClassificationTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.randomForestRegressionPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "randomForestRegressionPredict",
      name: "AutoRandomForestPredictForRegression",
      inData: [],
      outData: [],
      param: {
        "hold-columns": [[]],
        groupby: [],
        "prediction-col": ""
      },
      display: {
        label: "Auto Random Forest Predict For Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data based on random forest from RandomForestRegressionTrain function.",
    mandatory: [],
    tags: ["regression", "randomforest", "linearregression", "decisiontree", "gbt", "predict", "auto", "random Forest Regression predict", "Auto Random Forest Predict For Regression"],
    "in-range": {
      min: "3",
      max: "3"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-columns": this.renderHoldColumnsControl,
      groupby: this.renderGroupbyControl,
      "prediction-col": this.renderPredictionColControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColumnsControl(), this.createGroupbyControl(), this.createPredictionColControl();
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"][0];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Prediction Column Name", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "prediction-col", "Prediction Column Name");
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, []), this.controls["hold-columns"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.randomForestRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addHoldColumnsRule(), this.addBaseGroupByRule("hold-columns", "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "String", "number[]", "String[]"]);
    });
  }, o.prototype.checkInTableIsEmpty = function (e) {
    return t.VA.Core.Validator.PairInputValidator.prototype.checkInTableIsEmpty.call(this, e, 3);
  }, t.VA.Core.Functions.Library.randomForestRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.randomForestRegressionTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "randomForestRegressionTrain",
      name: "AutoRandomForestTrainForRegression",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        seed: "",
        auto: "false",
        groupby: [],
        "num-trees": "",
        "feature-subset-strategy": "",
        impurity: "",
        "max-depth": "",
        "max-bins": "",
        "min-info-gain": "",
        "min-instances-per-node": "",
        "sub-sampling-rate": "",
        method: "",
        "num-folds": "",
        "train-ratio": "",
        "metric-name": "",
        "search-method": "grid",
        "num-search": "",
        "search-seed": "",
        "feature-subset-strategy-arr": [],
        "impurity-arr": [],
        "num-trees-arr": [],
        "max-depth-arr": [],
        "max-bins-arr": [],
        "min-info-gain-arr": [],
        "min-instances-per-node-arr": [],
        "sub-sampling-rate-arr": []
      },
      display: {
        label: "Auto Random Forest Train For Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides random forest to generate training set for regression and provides autonomous feature(hyperparameter tuning based on grid search).",
    mandatory: [],
    tags: ["auto", "regression", "random Forest Regression Train", "Auto Random Forest Train For Regression"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "4",
      max: "5"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      seed: this.renderSeedControl,
      auto: this.renderAutoControl,
      groupby: this.renderGroupbyControl,
      "num-trees": this.renderNumTreesControl,
      "feature-subset-strategy": this.renderFeatureSubsetStrategyControl,
      impurity: this.renderImpurityControl,
      "max-depth": this.renderMaxDepthControl,
      "max-bins": this.renderMaxBinsControl,
      "min-info-gain": this.renderMinInfoGainControl,
      "min-instances-per-node": this.renderMinInstancesPerNodeControl,
      "sub-sampling-rate": this.renderSubsamplingRateControl,
      method: this.renderMethodControl,
      "num-folds": this.renderNumFoldsControl,
      "train-ratio": this.renderTrainRatioControl,
      "metric-name": this.renderMetricNameControl,
      "search-method": this.renderSearchMethodControl,
      "num-search": this.renderNumSearchControl,
      "search-seed": this.renderSearchSeedControl,
      "num-trees-arr": this.renderNumTreesArrControl,
      "feature-subset-strategy-arr": this.renderFeatureSubsetStrategyArrControl,
      "impurity-arr": this.renderImpurityArrControl,
      "max-depth-arr": this.renderMaxDepthArrControl,
      "max-bins-arr": this.renderMaxBinsArrControl,
      "min-info-gain-arr": this.renderMinInfoGainArrControl,
      "min-instances-per-node-arr": this.renderMinInstancesPerNodeArrControl,
      "sub-sampling-rate-arr": this.renderSubsamplingRateArrControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createSeedControl(), this.createAutoControl(), this.createGroupbyControl(), this.createNumTreesControl(), this.createFeatureSubsetStrategyControl(), this.createImpurityControl(), this.createMaxDepthControl(), this.createMaxBinsControl(), this.createMinInfoGainControl(), this.createMinInstancesPerNodeControl(), this.createSubsamplingRateControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createMetricNameControl(), this.createSearchMethodControl(), this.createNumSearchControl(), this.createSearchSeedControl(), this.createNumTreesArrControl(), this.createFeatureSubsetStrategyArrControl(), this.createImpurityArrControl(), this.createMaxDepthArrControl(), this.createMaxBinsArrControl(), this.createMinInfoGainArrControl(), this.createMinInstancesPerNodeArrControl(), this.createSubsamplingRateArrControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createSeedControl = function (t) {
    var e = this;
    e.$elements.seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Seed", function (t) {
      t.append(e.$elements.seed);
      e.controls.seed = e.createNumericInput(e.$elements.seed, {
        numberType: "int"
      }), e.controls.seed.onChange(function () {
        var t = e.createSetParameterValueCommand("seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSeedControl = function (t) {
    var e = this.options.fnUnit.param.seed;
    this.controls.seed.setValue(e || "");
  }, e.prototype.createAutoControl = function (e) {
    var o = this;
    o.$elements["auto.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), o.$elements["auto.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var r = o.addPropertyControl("Auto", function (t) {
      t.append(o.$elements["auto.true"]), o.controls["auto.true"] = o.createRadioButton(o.$elements["auto.true"], {
        width: "undefined",
        groupName: "auto",
        checked: !0
      }), o.$elements["auto.true"].on("checked", function (t) {
        o.changeParameter(!0), o.executeAutoCommand("true");
      }), t.append(o.$elements["auto.false"]), o.controls["auto.false"] = o.createRadioButton(o.$elements["auto.false"], {
        width: "undefined",
        groupName: "auto"
      }), o.$elements["auto.false"].on("checked", function (t) {
        o.changeParameter(!1), o.executeAutoCommand("false");
      });
    }, {
      mandatory: !1
    });
    "not-allowed" == t.VA.SettingStorage.getValue("common.autonomous.analytics") && r.hide();
  }, e.prototype.changeParameter = function (t) {
    t ? (this.$elements["search-method.random"].val() ? (this.$numSearchProperties.show(), this.$searchSeedProperties.show()) : (this.$numTreesArrProperties.show(), this.$featureSubsetStrategyArrProperties.show(), this.$impurityArrProperties.show(), this.$maxDepthArrProperties.show(), this.$maxBinsArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$subsamplingRateArrProperties.show()), this.$methodProperties.show(), this.$numFoldsProperties.show(), this.$trainRatioProperties.show(), this.$metricNameProperties.show(), this.$searchMethodProperties.show(), this.$numTreesProperties.hide(), this.$featureSubsetStrategyProperties.hide(), this.$impurityProperties.hide(), this.$maxDepthProperties.hide(), this.$maxBinsProperties.hide(), this.$minInfoGainProperties.hide(), this.$minInstancesPerNodeProperties.hide(), this.$subsamplingRateProperties.hide()) : (this.$methodProperties.hide(), this.$numFoldsProperties.hide(), this.$trainRatioProperties.hide(), this.$metricNameProperties.hide(), this.$searchMethodProperties.hide(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide(), this.$numTreesArrProperties.hide(), this.$featureSubsetStrategyArrProperties.hide(), this.$impurityArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$subsamplingRateArrProperties.hide(), this.$numTreesProperties.show(), this.$featureSubsetStrategyProperties.show(), this.$impurityProperties.show(), this.$maxDepthProperties.show(), this.$maxBinsProperties.show(), this.$minInfoGainProperties.show(), this.$minInstancesPerNodeProperties.show(), this.$subsamplingRateProperties.show());
  }, e.prototype.changeSearchMethodParameter = function (t) {
    this.$elements["auto.true"].val() && ("grid" == t ? (this.$numTreesArrProperties.show(), this.$featureSubsetStrategyArrProperties.show(), this.$impurityArrProperties.show(), this.$maxDepthArrProperties.show(), this.$maxBinsArrProperties.show(), this.$minInfoGainArrProperties.show(), this.$minInstancesPerNodeArrProperties.show(), this.$subsamplingRateArrProperties.show(), this.$numSearchProperties.hide(), this.$searchSeedProperties.hide()) : (this.$numTreesArrProperties.hide(), this.$featureSubsetStrategyArrProperties.hide(), this.$impurityArrProperties.hide(), this.$maxDepthArrProperties.hide(), this.$maxBinsArrProperties.hide(), this.$minInfoGainArrProperties.hide(), this.$minInstancesPerNodeArrProperties.hide(), this.$subsamplingRateArrProperties.hide(), this.$numSearchProperties.show(), this.$searchSeedProperties.show()));
  }, e.prototype.renderAutoControl = function (t) {
    var e = "auto." + this.options.fnUnit.param.auto;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit.outData);
    "false" === e && 5 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 4 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref.outData = r, "true" === e ? (o.ref.param["num-trees"] = "", o.ref.param["feature-subset-strategy"] = "", o.ref.param.impurity = "", o.ref.param["max-depth"] = "", o.ref.param["max-bins"] = "", o.ref.param["min-info-gain"] = "", o.ref.param["min-instances-per-node"] = "", o.ref.param["sub-sampling-rate"] = "", o.ref.param.groupby = []) : (o.ref.param.method = "", o.ref.param["num-folds"] = "", o.ref.param["train-ratio"] = "", o.ref.param["metric-name"] = "", o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "", o.ref.param["num-trees-arr"] = "", o.ref.param["feature-subset-strategy-arr"] = [], o.ref.param["impurity-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["sub-sampling-rate-arr"] = []);
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeSearchMethodCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-method"] = e, "grid" === e ? (o.ref.param["num-search"] = "", o.ref.param["search-seed"] = "") : (o.ref.param["num-trees-arr"] = "", o.ref.param["feature-subset-strategy-arr"] = [], o.ref.param["impurity-arr"] = [], o.ref.param["max-depth-arr"] = [], o.ref.param["max-bins-arr"] = [], o.ref.param["min-info-gain-arr"] = [], o.ref.param["min-instances-per-node-arr"] = [], o.ref.param["sub-sampling-rate-arr"] = []);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createNumTreesControl = function (e) {
    var o = this;
    o.$elements["num-trees"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numTreesProperties = o.addPropertyControl("Number of Trees", function (e) {
      e.append(o.$elements["num-trees"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-trees"] = o.createNumericInput(o.$elements["num-trees"], r), o.controls["num-trees"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-trees", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumTreesControl = function (t) {
    var e = this.options.fnUnit.param["num-trees"];
    this.controls["num-trees"].setValue(e || "");
  }, e.prototype.createFeatureSubsetStrategyControl = function (t) {
    var e = this;
    e.$elements["feature-subset-strategy"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$featureSubsetStrategyProperties = e.addPropertyControl("Feature Subset Strategy", function (t) {
      t.append(e.$elements["feature-subset-strategy"]);
      e.controls["feature-subset-strategy"] = e.createDropDownList(e.$elements["feature-subset-strategy"], {
        source: [{
          label: "Auto",
          value: "auto"
        }, {
          label: "All",
          value: "all"
        }, {
          label: "Sqrt",
          value: "sqrt"
        }, {
          label: "Log2",
          value: "log2"
        }, {
          label: "Onethird",
          value: "onethird"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["feature-subset-strategy"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("feature-subset-strategy", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFeatureSubsetStrategyControl = function (t) {
    var e = this.options.fnUnit.param["feature-subset-strategy"];
    this.$elements["feature-subset-strategy"].val(e);
  }, e.prototype.createImpurityControl = function (t) {
    var e = this;
    e.$elements.impurity = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$impurityProperties = e.addPropertyControl("Impurity", function (t) {
      t.append(e.$elements.impurity);
      e.controls.impurity = e.createDropDownList(e.$elements.impurity, {
        source: [{
          label: "Variance",
          value: "variance"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.impurity.on("change", function (t) {
        var o = e.createSetParameterValueCommand("impurity", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderImpurityControl = function (t) {
    var e = this.options.fnUnit.param.impurity;
    this.$elements.impurity.val(e);
  }, e.prototype.createMaxDepthControl = function (e) {
    var o = this;
    o.$elements["max-depth"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxDepthProperties = o.addPropertyControl("Max Depth", function (e) {
      e.append(o.$elements["max-depth"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value <= 30)"),
        numberType: "int"
      };
      o.controls["max-depth"] = o.createNumericInput(o.$elements["max-depth"], r), o.controls["max-depth"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-depth", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMaxDepthControl = function (t) {
    var e = this.options.fnUnit.param["max-depth"];
    this.controls["max-depth"].setValue(e || "");
  }, e.prototype.createMaxBinsControl = function (e) {
    var o = this;
    o.$elements["max-bins"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$maxBinsProperties = o.addPropertyControl("Max Bins", function (e) {
      e.append(o.$elements["max-bins"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)"),
        numberType: "int"
      };
      o.controls["max-bins"] = o.createNumericInput(o.$elements["max-bins"], r), o.controls["max-bins"].onChange(function () {
        var t = o.createSetParameterValueCommand("max-bins", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMaxBinsControl = function (t) {
    var e = this.options.fnUnit.param["max-bins"];
    this.controls["max-bins"].setValue(e || "");
  }, e.prototype.createMinInfoGainControl = function (e) {
    var o = this;
    o.$elements["min-info-gain"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInfoGainProperties = o.addPropertyControl("Min Information Gain", function (e) {
      e.append(o.$elements["min-info-gain"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)"),
        numberType: "double"
      };
      o.controls["min-info-gain"] = o.createNumericInput(o.$elements["min-info-gain"], r), o.controls["min-info-gain"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-info-gain", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMinInfoGainControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain"];
    this.controls["min-info-gain"].setValue(e || "");
  }, e.prototype.createMinInstancesPerNodeControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$minInstancesPerNodeProperties = o.addPropertyControl("Min Instances Per Node", function (e) {
      e.append(o.$elements["min-instances-per-node"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)"),
        numberType: "int"
      };
      o.controls["min-instances-per-node"] = o.createNumericInput(o.$elements["min-instances-per-node"], r), o.controls["min-instances-per-node"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-instances-per-node", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMinInstancesPerNodeControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node"];
    this.controls["min-instances-per-node"].setValue(e || "");
  }, e.prototype.createSubsamplingRateControl = function (e) {
    var o = this;
    o.$elements["sub-sampling-rate"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$subsamplingRateProperties = o.addPropertyControl("Subsampling Rate", function (e) {
      e.append(o.$elements["sub-sampling-rate"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 < value <= 1.0)"),
        numberType: "double"
      };
      o.controls["sub-sampling-rate"] = o.createNumericInput(o.$elements["sub-sampling-rate"], r), o.controls["sub-sampling-rate"].onChange(function () {
        var t = o.createSetParameterValueCommand("sub-sampling-rate", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSubsamplingRateControl = function (t) {
    var e = this.options.fnUnit.param["sub-sampling-rate"];
    this.controls["sub-sampling-rate"].setValue(e || "");
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$methodProperties = e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      e.controls.method = e.createDropDownList(e.$elements.method, {
        source: [{
          label: "TrainValid",
          value: "TrainValid"
        }, {
          label: "CrossValid",
          value: "CrossValid"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls.method.on("change", function (t) {
        var o = e.createSetParameterValueCommand("method", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMethodControl = function (t) {
    var e = this.options.fnUnit.param.method;
    this.$elements.method.val(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.$groupbyProperties = e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createNumFoldsControl = function (e) {
    var o = this;
    o.$elements["num-folds"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numFoldsProperties = o.addPropertyControl("Number of Folds", function (e) {
      e.append(o.$elements["num-folds"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (2 <= value)"),
        numberType: "int"
      };
      o.controls["num-folds"] = o.createNumericInput(o.$elements["num-folds"], r), o.controls["num-folds"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-folds", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumFoldsControl = function (t) {
    var e = this.options.fnUnit.param["num-folds"];
    this.controls["num-folds"].setValue(e || "");
  }, e.prototype.createTrainRatioControl = function (e) {
    var o = this;
    o.$elements["train-ratio"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$trainRatioProperties = o.addPropertyControl("Train Ratio", function (e) {
      e.append(o.$elements["train-ratio"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.75 (0 < value < 1)"),
        numberType: "double"
      };
      o.controls["train-ratio"] = o.createNumericInput(o.$elements["train-ratio"], r), o.controls["train-ratio"].onChange(function () {
        var t = o.createSetParameterValueCommand("train-ratio", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderTrainRatioControl = function (t) {
    var e = this.options.fnUnit.param["train-ratio"];
    this.controls["train-ratio"].setValue(e || "");
  }, e.prototype.createMetricNameControl = function (t) {
    var e = this;
    e.$elements["metric-name"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.$metricNameProperties = e.addPropertyControl("Metric Name", function (t) {
      t.append(e.$elements["metric-name"]);
      e.controls["metric-name"] = e.createDropDownList(e.$elements["metric-name"], {
        source: [{
          label: "rmse",
          value: "rmse"
        }, {
          label: "mse",
          value: "mse"
        }, {
          label: "r2",
          value: "r2"
        }, {
          label: "mae",
          value: "mae"
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["metric-name"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("metric-name", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMetricNameControl = function (t) {
    var e = this.options.fnUnit.param["metric-name"];
    this.$elements["metric-name"].val(e);
  }, e.prototype.createSearchMethodControl = function (t) {
    var e = this;
    e.$elements["search-method.grid"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">grid</div>'), e.$elements["search-method.random"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">random</div>'), e.$searchMethodProperties = e.addPropertyControl("Search Method", function (t) {
      t.append(e.$elements["search-method.grid"]), e.controls["search-method.grid"] = e.createRadioButton(e.$elements["search-method.grid"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.grid"].on("checked", function (t) {
        e.changeSearchMethodParameter("grid"), e.executeSearchMethodCommand("grid");
      }), t.append(e.$elements["search-method.random"]), e.controls["search-method.random"] = e.createRadioButton(e.$elements["search-method.random"], {
        width: "undefined",
        groupName: "search-method"
      }), e.$elements["search-method.random"].on("checked", function (t) {
        e.changeSearchMethodParameter("random"), e.executeSearchMethodCommand("random");
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchMethodControl = function (t) {
    var e = "search-method." + this.options.fnUnit.param["search-method"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createNumSearchControl = function (e) {
    var o = this;
    o.$elements["num-search"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), o.$numSearchProperties = o.addPropertyControl("Number of Random Hyperparameters", function (e) {
      e.append(o.$elements["num-search"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("15 (1 <= value)"),
        numberType: "int"
      };
      o.controls["num-search"] = o.createNumericInput(o.$elements["num-search"], r), o.controls["num-search"].onChange(function () {
        var t = o.createSetParameterValueCommand("num-search", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumSearchControl = function (t) {
    var e = this.options.fnUnit.param["num-search"];
    this.controls["num-search"].setValue(e || "");
  }, e.prototype.createSearchSeedControl = function (t) {
    var e = this;
    e.$elements["search-seed"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.$searchSeedProperties = e.addPropertyControl("Seed for Random Search", function (t) {
      t.append(e.$elements["search-seed"]);
      e.controls["search-seed"] = e.createNumericInput(e.$elements["search-seed"], {
        placeholder: "",
        numberType: "int"
      }), e.controls["search-seed"].onChange(function () {
        var t = e.createSetParameterValueCommand("search-seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSearchSeedControl = function (t) {
    var e = this.options.fnUnit.param["search-seed"];
    this.controls["search-seed"].setValue(e || "");
  }, e.prototype.createNumTreesArrControl = function (e) {
    var o = this;
    o.$elements["num-trees-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$numTreesArrProperties = o.addPropertyControl("Number of Trees Set", function (e) {
      e.append(o.$elements["num-trees-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("8, 20, 32 (1 <= value)")
      };
      o.controls["num-trees-arr"] = o.createInput(o.$elements["num-trees-arr"], r), o.$elements["num-trees-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("num-trees-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumTreesArrControl = function (t) {
    var e = this.options.fnUnit.param["num-trees-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["num-trees-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createFeatureSubsetStrategyArrControl = function (t) {
    var e = this;
    e.$elements["feature-subset-strategy-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["feature-subset-strategy-arr"].append(o), e.$elements["feature-subset-strategy-arr"].append(r), e.$featureSubsetStrategyArrProperties = e.addPropertyControl("Feature Subset Strategy Set", function (t) {
      t.append(e.$elements["feature-subset-strategy-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Auto",
        value: "auto"
      }, {
        label: "All",
        value: "all"
      }, {
        label: "Sqrt",
        value: "sqrt"
      }, {
        label: "Log2",
        value: "log2"
      }, {
        label: "Onethird",
        value: "onethird"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "feature-subset-strategy-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("feature-subset-strategy-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "feature-subset-strategy-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["feature-subset-strategy-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "feature-subset-strategy-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "feature-subset-strategy-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("feature-subset-strategy-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "feature-subset-strategy-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("feature-subset-strategy-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFeatureSubsetStrategyArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["feature-subset-strategy-arr"],
        r = [{
      label: "Auto",
      value: "auto"
    }, {
      label: "All",
      value: "all"
    }, {
      label: "Sqrt",
      value: "sqrt"
    }, {
      label: "Log2",
      value: "log2"
    }, {
      label: "Onethird",
      value: "onethird"
    }];

    for (var n in r) {
      e = "feature-subset-strategy-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createImpurityArrControl = function (t) {
    var e = this;
    e.$elements["impurity-arr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["impurity-arr"].append(o), e.$elements["impurity-arr"].append(r), this.$impurityArrProperties = e.addPropertyControl("Impurity Set", function (t) {
      t.append(e.$elements["impurity-arr"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Variance",
        value: "variance"
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("impurity-arr", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "impurity-arr." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["impurity-arr"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "impurity-arr." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("impurity-arr", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "impurity-arr." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("impurity-arr", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderImpurityArrControl = function (t) {
    var e,
        o = this.options.fnUnit.param["impurity-arr"],
        r = [{
      label: "Variance",
      value: "variance"
    }];

    for (var n in r) {
      e = "impurity-arr." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMaxDepthArrControl = function (e) {
    var o = this;
    o.$elements["max-depth-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxDepthArrProperties = o.addPropertyControl("Max Depth Set", function (e) {
      e.append(o.$elements["max-depth-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("4, 8, 16 (0 <= value <= 30)")
      };
      o.controls["max-depth-arr"] = o.createInput(o.$elements["max-depth-arr"], r), o.$elements["max-depth-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-depth-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMaxDepthArrControl = function (t) {
    var e = this.options.fnUnit.param["max-depth-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-depth-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMaxBinsArrControl = function (e) {
    var o = this;
    o.$elements["max-bins-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$maxBinsArrProperties = o.addPropertyControl("Max Bins Set", function (e) {
      e.append(o.$elements["max-bins-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("32 (2 <= value)")
      };
      o.controls["max-bins-arr"] = o.createInput(o.$elements["max-bins-arr"], r), o.$elements["max-bins-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("max-bins-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMaxBinsArrControl = function (t) {
    var e = this.options.fnUnit.param["max-bins-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["max-bins-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInfoGainArrControl = function (e) {
    var o = this;
    o.$elements["min-info-gain-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInfoGainArrProperties = o.addPropertyControl("Min Information Gain Set", function (e) {
      e.append(o.$elements["min-info-gain-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0.0 <= value)")
      };
      o.controls["min-info-gain-arr"] = o.createInput(o.$elements["min-info-gain-arr"], r), o.$elements["min-info-gain-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("min-info-gain-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMinInfoGainArrControl = function (t) {
    var e = this.options.fnUnit.param["min-info-gain-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-info-gain-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createMinInstancesPerNodeArrControl = function (e) {
    var o = this;
    o.$elements["min-instances-per-node-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$minInstancesPerNodeArrProperties = o.addPropertyControl("Min Instances Per Node Set", function (e) {
      e.append(o.$elements["min-instances-per-node-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (1 <= value)")
      };
      o.controls["min-instances-per-node-arr"] = o.createInput(o.$elements["min-instances-per-node-arr"], r), o.$elements["min-instances-per-node-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("min-instances-per-node-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMinInstancesPerNodeArrControl = function (t) {
    var e = this.options.fnUnit.param["min-instances-per-node-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["min-instances-per-node-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSubsamplingRateArrControl = function (e) {
    var o = this;
    o.$elements["sub-sampling-rate-arr"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), o.$subsamplingRateArrProperties = o.addPropertyControl("Subsampling Rate Set", function (e) {
      e.append(o.$elements["sub-sampling-rate-arr"]);
      var r = {
        placeHolder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.7, 1.0 (0.0 < value <= 1.0)")
      };
      o.controls["sub-sampling-rate-arr"] = o.createInput(o.$elements["sub-sampling-rate-arr"], r), o.$elements["sub-sampling-rate-arr"].on("change", function (t) {
        var e = o.createSetArrayParameterCommand("sub-sampling-rate-arr", $(this).val());
        o.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSubsamplingRateArrControl = function (t) {
    var e = this.options.fnUnit.param["sub-sampling-rate-arr"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["sub-sampling-rate-arr"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0), this.controls.xcolumns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, e.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid == t.options.fnUnit.fid ? this.renderValues(t) : t.event.source !== this && this.renderValues(t);
  }, t.VA.Core.Functions.Library.randomForestRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule(), this.addBaseGroupByRule("ycolumn", "Y Column"), this.addBaseGroupByRule("xcolumns", "X Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    });
  }, t.VA.Core.Functions.Library.randomForestRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.symbolicRegressionPredict = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "symbolicRegressionPredict",
      name: "SymbolicRegressionPredict",
      inData: [],
      outData: [],
      param: {},
      display: {
        label: "Symbolic Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predicts data using the Trained SymbolicRegression model.",
    mandatory: [],
    tags: ["Symbolic", "Regression", "Symbolic Regression", "symbolic Regression predict"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {}, this.$elements = {}, this.controls = {};
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.symbolicRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.symbolicRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.symbolicRegressionTrain = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "symbolicRegressionTrain",
      name: "SymbolicRegressionTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        chains: "",
        repeatRank: "",
        time: "",
        expandRank: "",
        reg: "",
        regGrow: "",
        evalRate: "",
        evalRank: ""
      },
      display: {
        label: "Symbolic Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fits a Symbolic Regression Model by generating random features by semi-genetic evolution algorithms.",
    mandatory: [],
    tags: ["symbolic", "regression", "symbolic regression", "symbolic Regression Train"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      chains: this.renderChainsControl,
      repeatRank: this.renderRepeatRankControl,
      time: this.renderTimeControl,
      expandRank: this.renderExpandRankControl,
      reg: this.renderRegControl,
      regGrow: this.renderRegGrowControl,
      evalRate: this.renderEvalRateControl,
      evalRank: this.renderEvalRankControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createChainsControl(), this.createRepeatRankControl(), this.createTimeControl(), this.createExpandRankControl(), this.createRegControl(), this.createRegGrowControl(), this.createEvalRateControl(), this.createEvalRankControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createChainsControl = function (t) {
    var e = this;
    e.$elements.chains = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Methods", function (t) {
      t.append(e.$elements.chains);
      e.controls.chains = e.createInput(e.$elements.chains, {
        placeHolder: "eee,eepe,eeeeee"
      }), e.$elements.chains.on("change", function (t) {
        if (e.isInputValueChanged("chains", $(this).val())) {
          var o = e.createSetParameterValueCommand("chains", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "chains", "Methods");
  }, e.prototype.renderChainsControl = function (t) {
    var e = this.options.fnUnit.param.chains;
    this.$elements.chains.val(e || "");
  }, e.prototype.createRepeatRankControl = function (e) {
    var o = this;
    o.$elements.repeatRank = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Number of Trials", function (e) {
      e.append(o.$elements.repeatRank);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("20 (1 <= value)"),
        numberType: "int"
      };
      o.controls.repeatRank = o.createNumericInput(o.$elements.repeatRank, r), o.controls.repeatRank.onChange(function () {
        var t = o.createSetParameterValueCommand("repeatRank", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "repeatRank", "Number of Trials");
  }, e.prototype.renderRepeatRankControl = function (t) {
    var e = this.options.fnUnit.param.repeatRank;
    this.controls.repeatRank.setValue(e || "");
  }, e.prototype.createTimeControl = function (e) {
    var o = this;
    o.$elements.time = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Execution Time", function (e) {
      e.append(o.$elements.time);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0 (0 <= value)"),
        numberType: "int"
      };
      o.controls.time = o.createNumericInput(o.$elements.time, r), o.controls.time.onChange(function () {
        var t = o.createSetParameterValueCommand("time", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "time", "Execution Time");
  }, e.prototype.renderTimeControl = function (t) {
    var e = this.options.fnUnit.param.time;
    this.controls.time.setValue(e || "");
  }, e.prototype.createExpandRankControl = function (e) {
    var o = this;
    o.$elements.expandRank = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Expand Rank", function (e) {
      e.append(o.$elements.expandRank);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("80 (5 <= value <= 100)"),
        numberType: "int"
      };
      o.controls.expandRank = o.createNumericInput(o.$elements.expandRank, r), o.controls.expandRank.onChange(function () {
        var t = o.createSetParameterValueCommand("expandRank", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "expandRank", "Expand Rank");
  }, e.prototype.renderExpandRankControl = function (t) {
    var e = this.options.fnUnit.param.expandRank;
    this.controls.expandRank.setValue(e || "");
  }, e.prototype.createRegControl = function (e) {
    var o = this;
    o.$elements.reg = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Initial Regularization", function (e) {
      e.append(o.$elements.reg);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.000000001 (0 <= value)"),
        numberType: "double"
      };
      o.controls.reg = o.createNumericInput(o.$elements.reg, r), o.controls.reg.onChange(function () {
        var t = o.createSetParameterValueCommand("reg", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "reg", "Initial Regularization");
  }, e.prototype.renderRegControl = function (t) {
    var e = this.options.fnUnit.param.reg;
    this.controls.reg.setValue(e || "");
  }, e.prototype.createRegGrowControl = function (e) {
    var o = this;
    o.$elements.regGrow = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Regularization Growth", function (e) {
      e.append(o.$elements.regGrow);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2.0 (1 <= value)"),
        numberType: "double"
      };
      o.controls.regGrow = o.createNumericInput(o.$elements.regGrow, r), o.controls.regGrow.onChange(function () {
        var t = o.createSetParameterValueCommand("regGrow", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "regGrow", "Regularization Growth");
  }, e.prototype.renderRegGrowControl = function (t) {
    var e = this.options.fnUnit.param.regGrow;
    this.controls.regGrow.setValue(e || "");
  }, e.prototype.createEvalRateControl = function (e) {
    var o = this;
    o.$elements.evalRate = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Evaluation Rate", function (e) {
      e.append(o.$elements.evalRate);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.3 (0 < value <= 1)"),
        numberType: "double"
      };
      o.controls.evalRate = o.createNumericInput(o.$elements.evalRate, r), o.controls.evalRate.onChange(function () {
        var t = o.createSetParameterValueCommand("evalRate", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "evalRate", "Evaluation Rate");
  }, e.prototype.renderEvalRateControl = function (t) {
    var e = this.options.fnUnit.param.evalRate;
    this.controls.evalRate.setValue(e || "");
  }, e.prototype.createEvalRankControl = function (e) {
    var o = this;
    o.$elements.evalRank = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Evaluation Rank", function (e) {
      e.append(o.$elements.evalRank);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (1 <= value <= 50)"),
        numberType: "int"
      };
      o.controls.evalRank = o.createNumericInput(o.$elements.evalRank, r), o.controls.evalRank.onChange(function () {
        var t = o.createSetParameterValueCommand("evalRank", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "evalRank", "Evaluation Rank");
  }, e.prototype.renderEvalRankControl = function (t) {
    var e = this.options.fnUnit.param.evalRank;
    this.controls.evalRank.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls.xcolumns.setItems(t);
  }, t.VA.Core.Functions.Library.symbolicRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule();
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "ycolumn", e.param.ycolumn, ["number"]);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "xcolumns", e.param.xcolumns, ["number"]);
    });
  }, t.VA.Core.Functions.Library.symbolicRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.timeSeriesAnalysis = {
    category: "autonomousanalytics",
    defaultFnUnit: {
      func: "timeSeriesAnalysis",
      name: "AutoTimeSeriesAnalysis",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        score: "trainRank"
      },
      display: {
        label: "Auto Time Series Analysis",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Find the best model for a time series data regarding AIC error and predict data using the top three models.",
    tags: ["Time Series Analysis", "TimeSeriesAnalysis", "Time", "Series", "Analysis", "time series", "TimeSeries Analysis", "Autonomous Time Series", "Auto Time Series Analysis"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      score: this.renderScoreControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createScoreControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Column", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !1
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.createScoreControl = function (t) {
    var e = this;
    e.$elements["score.trainRank"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">trainRank</div>'), e.$elements["score.mape"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">MAPE</div>'), e.$elements["score.sse"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">SSE</div>');
    var o = e.addPropertyControl("Scoring", function (t) {
      t.append(e.$elements["score.trainRank"]), e.controls["score.trainRank"] = e.createRadioButton(e.$elements["score.trainRank"], {
        width: "undefined",
        groupName: "score"
      }), e.$elements["score.trainRank"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("score", "trainRank");
        e.executeCommand(o);
      }), t.append(e.$elements["score.mape"]), e.controls["score.mape"] = e.createRadioButton(e.$elements["score.mape"], {
        width: "undefined",
        groupName: "score"
      }), e.$elements["score.mape"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("score", "mape");
        e.executeCommand(o);
      }), t.append(e.$elements["score.sse"]), e.controls["score.sse"] = e.createRadioButton(e.$elements["score.sse"], {
        width: "undefined",
        groupName: "score"
      }), e.$elements["score.sse"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("score", "sse");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "score", "Scoring");
  }, e.prototype.renderScoreControl = function (t) {
    var e = "score." + this.options.fnUnit.param.score;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.timeSeriesAnalysis.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "number");
    });
  }, t.VA.Core.Functions.Library.timeSeriesAnalysis.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataBar = {
    category: "bigdata",
    defaultFnUnit: {
      func: "bigDataBar",
      name: "BigDataBar",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]],
        ycolumn: [[]],
        aggregation: "",
        "color-by": []
      },
      display: {
        label: "Bar Chart",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: ["xcolumn", "ycolumn", "aggregation"],
    description: "Bar Chart rendering for Big Data",
    tags: ["Big Data", "Bar", "Bar Chart"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataBoxPlot = {
    category: "bigdata",
    defaultFnUnit: {
      func: "bigDataBoxPlot",
      name: "BigDataBoxPlot",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]],
        ycolumn: [[]]
      },
      display: {
        label: "Box Plot",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: ["xcolumn", "ycolumn"],
    description: "Box Plot rendering for Big Data",
    tags: ["Big Data", "Box", "Box Plot"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataBubble = {
    category: "bigdata",
    defaultFnUnit: {
      func: "BigDataBubble",
      name: "BigDataBubble",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]],
        ycolumn: [[]],
        "x-min": "",
        "y-min": "",
        "x-max": "",
        "y-max": "",
        "color-by": [],
        "size-by": []
      },
      display: {
        label: "Bubble Chart",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: [],
    description: "Bubble Chart rendering for Big Data",
    tags: ["Big Data", "Bubble", "Bubble Chart"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataCard = {
    category: "bigdata",
    defaultFnUnit: {
      func: "BigDataCard",
      name: "BigDataCard",
      inData: [],
      outData: [],
      param: {
        value: [[]]
      },
      display: {
        label: "Card Chart",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: [],
    description: "Card Chart rendering for Big Data",
    tags: ["Big Data", "Card", "Card Chart"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataColumn = {
    category: "bigdata",
    defaultFnUnit: {
      func: "bigDataColumn",
      name: "BigDataColumn",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]],
        ycolumn: [[]],
        aggregation: "",
        "color-by": []
      },
      display: {
        label: "Column Chart",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: ["xcolumn", "ycolumn", "aggregation"],
    description: "Column Chart rendering for Big Data",
    tags: ["Big Data", "Column", "Column Chart"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataDonut = {
    category: "bigdata",
    defaultFnUnit: {
      func: "bigDataPie",
      name: "bigDataPie",
      inData: [],
      outData: [],
      param: {
        "color-by": [],
        "size-by": [],
        aggregation: ""
      },
      display: {
        label: "Donut Chart",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: ["color-by", "size-by", "aggregation"],
    description: "Donut Chart rendering for Big Data",
    tags: ["Big Data", "Donut", "Donut Chart"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataHeatmap = {
    category: "bigdata",
    defaultFnUnit: {
      func: "BigDataHeatmap",
      name: "BigDataHeatmap",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]],
        ycolumn: [[]],
        "x-min": "",
        "y-min": "",
        "x-max": "",
        "y-max": "",
        "value-by": []
      },
      display: {
        label: "HeatMap",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: [],
    description: "HeatMap rendering for Big Data",
    tags: ["Big Data", "HeatMap"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataHeatmapMatrix = {
    category: "bigdata",
    defaultFnUnit: {
      func: "BigDataHeatmapMatrix",
      name: "BigDataHeatmapMatrix",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]],
        ycolumn: [[]]
      },
      display: {
        label: "HeatmapMatrix",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: [],
    description: "HeatmapMatrix rendering for Big Data",
    tags: ["Big Data", "HeatmapMatrix"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataHistogram = {
    category: "bigdata",
    defaultFnUnit: {
      func: "bigDataHistogram",
      name: "BigDataHistogram",
      inData: [],
      outData: [],
      param: {
        column: []
      },
      display: {
        label: "Histogram Chart",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: ["column"],
    description: "Pie Chart rendering for Big Data",
    tags: ["Big Data", "Histogram", "Histogram Chart"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataLine = {
    category: "bigdata",
    defaultFnUnit: {
      func: "bigDataLine",
      name: "BigDataLine",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]],
        ycolumn: [[]],
        "x-min": "",
        "y-min": "",
        "x-max": "",
        "y-max": "",
        "color-by": []
      },
      display: {
        label: "Line Chart",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: [],
    description: "Line Chart rendering for Big Data",
    tags: ["Big Data", "Line", "Line Chart"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !0
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataPie = {
    category: "bigdata",
    defaultFnUnit: {
      func: "bigDataPie",
      name: "BigDataPie",
      inData: [],
      outData: [],
      param: {
        "color-by": [],
        "size-by": [],
        aggregation: ""
      },
      display: {
        label: "Pie Chart",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: ["color-by", "size-by", "aggregation"],
    description: "Pie Chart rendering for Big Data",
    tags: ["Big Data", "PIe", "Pie Chart"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataScatter = {
    category: "bigdata",
    defaultFnUnit: {
      func: "bigDataScatter",
      name: "BigDataScatter",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]],
        ycolumn: [[]],
        "x-min": "",
        "y-min": "",
        "x-max": "",
        "y-max": "",
        "color-by": []
      },
      display: {
        label: "Scatter Plot",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: [],
    description: "Scatter Plot rendering for Big Data",
    tags: ["Big Data", "Scatter", "Scatter Plot"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !0
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bigDataTreemap = {
    category: "bigdata",
    defaultFnUnit: {
      func: "BigDataTreeMap",
      name: "BigDataTreeMap",
      inData: [],
      outData: [],
      param: {
        hierarchy: [[]],
        "size-by": []
      },
      display: {
        label: "Treemap",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: [{
            panel: [],
            layout: {}
          }]
        }
      }
    },
    mandatory: [],
    description: "Treemap rendering for Big Data",
    tags: ["Big Data", "Treemap"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "out-node": !1
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.dataViewer = {
    category: "brightics",
    defaultFnUnit: {
      func: "dataViewer",
      name: "DataViewer",
      outData: [],
      param: {
        mid: "",
        fid: ""
      },
      skip: !0,
      display: {
        label: "",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "",
    tags: [],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 10
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, e.prototype.addLinkRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkLinkIsConnected(e);
    });
  }, e.prototype.checkLinkIsConnected = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    },
        o = (Studio.getEditorContainer().getActiveModelEditor().getModel(), Studio.getEditorContainer().getActiveModelEditor().getActiveModel());

    for (var r in t.outData) {
      if (o.inData.indexOf(t.outData[r]) < 0) return this.problemFactory.createProblem(e, t);
    }
  }, t.VA.Core.Functions.Library.dataViewer.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.decisionTreeCartPredict = {
    category: "classification",
    defaultFnUnit: {
      func: "decisionTreeCartPredict",
      name: "CartPrediction",
      inData: [],
      outData: [],
      param: {
        predictioncolumn: "",
        groupby: []
      },
      display: {
        label: "Decision Tree Cart Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function gives predicted results by using the trained model of CART.",
    tags: ["DecisionTreeCart Predict", "DecisionTreeCartPredict", "Decision", "Tree", "Cart", "Predict", "Decision Tree Cart Predict", "classification", "impurity", "max depth", "max bins"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_PREDICTION_COLUMN = "predictioncolumn", this.PARAM_GROUP_BY = "groupby", this.render = {
      predictioncolumn: this.renderPredictionColumnControl,
      groupby: this.renderGroupByControl
    }, this.createPredictionColumnControl(), this.createGroupByControl();
  }, e.prototype.createPredictionColumnControl = function () {
    var t = this;
    this.$predictionColumn = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), this.addPropertyControl("Prediction Column", function (e) {
      e.append(t.$predictionColumn), t.$predictionColumnControl = t.createInput(t.$predictionColumn, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    }), this.$predictionColumn.on("change", function () {
      t.isInputValueChanged("predictioncolumn", $(this).val()) && t.createInputCommand($(this).val());
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupBy = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupBy);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          var r = t.createGroupByCommand();
          t.executeCommand(r);
        }
      };
      t.groupByControl = t.createColumnList(t.$groupBy, o);
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.options.fnUnit[IN_DATA][1];
    t && this.dataMap[t] && this.fillRightColumnControlValues(t);
  }, e.prototype.fillRightColumnControlValues = function (t) {
    this.rightTableColumns = this.dataMap[t].columns, this.groupByControl.setItems(this.rightTableColumns);
  }, e.prototype.renderPredictionColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_PREDICTION_COLUMN];
    this.$predictionColumn.val(t);
  }, e.prototype.renderGroupByControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GROUP_BY];
    this.groupByControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_PREDICTION_COLUMN && this.createValidationContent(this.$predictionColumn.parent(), this.problems[t]);
    }
  }, e.prototype.createInputCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param.predictioncolumn = "", e && (o.ref.param.predictioncolumn = e);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_GROUP_BY] = this.groupByControl.getSelectedItems(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.decisionTreeCartPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_PREDICTION_COLUMN = "predictioncolumn", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addNewColumnNameRule(this.PARAM_PREDICTION_COLUMN);
  }, t.VA.Core.Functions.Library.decisionTreeCartPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.decisionTreeCartTrain = {
    category: "classification",
    defaultFnUnit: {
      func: "decisionTreeCartTrain",
      name: "CARTTrain",
      inData: [],
      outData: [],
      param: {
        target: [],
        column: [[]],
        excolumn: [],
        groupby: [],
        levelstop: "",
        gainstop: "",
        elementsstop: "",
        indextype: "",
        criteriarank: ""
      },
      display: {
        label: "Decision Tree Cart Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Decision tree learning uses a decision tree as a predictive model which maps observations about an item to conclusions about the item's target value.",
    tags: ["DecisionTreeCart Train", "DecisionTreeCartTrain", "Decision", "Tree", "Cart", "Train", "Decision Tree Cart Train", "classification", "impurity", "max depth", "max bins"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_TARGET = "target", this.PARAM_COLUMN = "column", this.PARAM_GROUP_BY = "groupby", this.PARAM_LEVEL_STOP = "levelstop", this.PARAM_GAIN_STOP = "gainstop", this.PARAM_ELEMENTS_STOP = "elementsstop", this.PARAM_INDEX_TYPE = "indextype", this.PARAM_CRITERIA_RANK = "criteriarank", this.render = {
      target: this.renderTargetControl,
      column: this.renderColumnControl,
      groupby: this.renderGroupByControl,
      levelstop: this.renderLevelStopControl,
      gainstop: this.renderGainStopControl,
      elementsstop: this.renderElementsStopControl,
      indextype: this.renderIndexTypeControl,
      criteriarank: this.renderCriteriaRankControl
    }, this.createTargetControl(), this.createColumnControl(), this.createGroupByControl(), this.createLevelStopControl(), this.createGainStopControl(), this.createElementsStopControl(), this.createIndexTypeControl(), this.createCriteriaRankControl();
  }, e.prototype.createTargetControl = function (t) {
    var e = this;
    this.$target = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Target", function (t) {
      t.append(e.$target);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createTargetCommand();
          e.executeCommand(r);
        }
      };
      e.targetControl = e.createColumnList(e.$target, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createColumnControl = function (t) {
    var e = this;
    this.$column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Column", function (t) {
      t.append(e.$column);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createColumnCommand();
          e.executeCommand(r);
        }
      };
      e.columnControl = e.createColumnList(e.$column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupBy = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupBy);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          var r = t.createGroupByCommand();
          t.executeCommand(r);
        }
      };
      t.groupByControl = t.createColumnList(t.$groupBy, o);
    });
  }, e.prototype.createIndexTypeControl = function () {
    var t = this;
    this.$indexTypeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = ["", "GINI", "INFO", "REGRESSION_TREE"];
    this.addPropertyControl("Index Type", function (o) {
      t.createDropDownList(this.$indexTypeControl, {
        source: e
      }), o.append(t.$indexTypeControl.parent()), t.$indexTypeControl.on("change", function () {
        var e = t.$indexTypeControl.jqxDropDownList("getSelectedItem") ? t.$indexTypeControl.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand("indextype", e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createLevelStopControl = function () {
    var t = this;
    this.$levelStopControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>'), this.addPropertyControl("Level Stop", function (e) {
      e.append(t.$levelStopControl), t.$levelStop = t.createNumericInput(t.$levelStopControl, {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !0
      }), t.$levelStop.onChange(function (e) {
        var o = t.createLevelStopCommand();
        t.executeCommand(o);
      });
    });
  }, e.prototype.createGainStopControl = function () {
    var t = this;
    this.$gainStopControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>'), this.addPropertyControl("Gain Stop", function (e) {
      e.append(t.$gainStopControl), t.$gainStop = t.createNumericInput(t.$gainStopControl, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !0
      }), t.$gainStop.onChange(function (e) {
        var o = t.createGainStopCommand();
        t.executeCommand(o);
      });
    });
  }, e.prototype.createElementsStopControl = function () {
    var t = this;
    this.$elementsStopControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>'), this.addPropertyControl("Elements Stop", function (e) {
      e.append(t.$elementsStopControl), t.$elementsStop = t.createNumericInput(t.$elementsStopControl, {
        numberType: "int",
        min: 2,
        max: 50,
        minus: !0
      }), t.$elementsStop.onChange(function (e) {
        var o = t.createElementsStopCommand();
        t.executeCommand(o);
      });
    });
  }, e.prototype.createCriteriaRankControl = function () {
    var t = this;
    this.$criteriaRankControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>'), this.addPropertyControl("Criteria Rank", function (e) {
      e.append(t.$criteriaRankControl), t.$criteriaRank = t.createNumericInput(t.$criteriaRankControl, {
        numberType: "int",
        min: 2,
        max: 50,
        minus: !0
      }), t.$criteriaRank.onChange(function (e) {
        var o = t.createCriteriaRankCommand();
        t.executeCommand(o);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnControl.setItems(t), this.targetControl.setItems(t), this.groupByControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMN ? (this.renderPropertyControlHeader(this.$column, this.problems[t]), this.createValidationContent(this.$column, this.problems[t])) : this.problems[t].param === this.PARAM_TARGET && (this.renderPropertyControlHeader(this.$target, this.problems[t]), this.createValidationContent(this.$target, this.problems[t]));
    }
  }, e.prototype.renderTargetControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TARGET];
    this.targetControl.setSelectedItems(t);
  }, e.prototype.renderColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMN];
    this.columnControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupByControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GROUP_BY];
    this.groupByControl.setSelectedItems(t);
  }, e.prototype.renderIndexTypeControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_INDEX_TYPE];
    void 0 === t || "" === t ? this.$indexTypeControl.jqxDropDownList("selectIndex", -1) : this.$indexTypeControl.jqxDropDownList("selectItem", t);
  }, e.prototype.renderLevelStopControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_LEVEL_STOP];
    this.$levelStop.setValue(t && "" !== t ? t : 5);
  }, e.prototype.renderGainStopControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GAIN_STOP];
    this.$gainStop.setValue(t && "" !== t ? t : 0);
  }, e.prototype.renderElementsStopControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ELEMENTS_STOP];
    this.$elementsStop.setValue(t && "" !== t ? t : 0);
  }, e.prototype.renderCriteriaRankControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_BINS];
    this.$criteriaRank.setValue(t && "" !== t ? t : "");
  }, e.prototype.createTargetCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_TARGET] = this.targetControl.getSelectedItems(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMN] = [this.columnControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_GROUP_BY] = this.groupByControl.getSelectedItems(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createLevelStopCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_LEVEL_STOP] = this.$levelStop.getValue() ? this.$levelStop.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createGainStopCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_GAIN_STOP] = this.$gainStop.getValue() ? this.$gainStop.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createElementsStopCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_ELEMENTS_STOP] = this.$elementsStop.getValue() ? this.$elementsStop.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createCriteriaRankCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_CRITERIA_RANK] = this.$criteriaRank.getValue() ? this.$criteriaRank.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, t.VA.Core.Functions.Library.decisionTreeCartTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_TARGET = "target", this.PARAM_COLUMN = "column", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnRule(), this.addTargetRule();
  }, e.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMN, e.param[t.PARAM_COLUMN][0], "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMN, e.param[t.PARAM_COLUMN][0]);
    });
  }, e.prototype.addTargetRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_TARGET, e.param[t.PARAM_TARGET], "Target");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_TARGET, e.param[t.PARAM_TARGET]);
    });
  }, t.VA.Core.Functions.Library.decisionTreeCartTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.decisionTreePredict = {
    category: "classification",
    defaultFnUnit: {
      func: "decisionTreePredict",
      name: "DecisionTreePredict",
      inData: [],
      outData: [],
      param: {
        xcolumns: [[]],
        "hold-columns": [[]],
        groupby: []
      },
      display: {
        label: "Decision Tree Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data based on decision tree from DecisionTreeTrain function.",
    tags: ["DecisionTree Predict", "DecisionTreePredict", "Decision", "Tree", "Predict", "Decision Tree Predict", "classification", "impurity", "max depth", "max bins"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_HOLD_COLUMNS = "hold-columns", this.render = {
      xcolumns: this.renderXColumnsControl,
      "hold-columns": this.renderHoldColumnsControl,
      groupby: this.renderGroupBy
    }, this.createXColumnsControl(), this.createHoldColumnsControl(), this.createGroupByControl();
  }, e.prototype.createXColumnsControl = function (t) {
    var e = this;
    this.$xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("X Columns", function (t) {
      t.append(e.$xcolumns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createXColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.xColumnsControl = e.createColumnList(e.$xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$holdColumns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createHoldColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.options.fnUnit[IN_DATA][0],
        e = this.options.fnUnit[IN_DATA][1];
    t && this.dataMap[t] && this.fillLeftColumnControlValues(t), e && this.dataMap[e] && this.fillRightColumnControlValues(e);
  }, e.prototype.fillLeftColumnControlValues = function (t) {
    this.leftTableColumns = this.dataMap[t].columns, this.numberColumnArray = $.grep(this.leftTableColumns, function (t) {
      return "number" === t.type;
    }), this.xColumnsControl.setItems(this.numberColumnArray), this.holdColumnsControl.setItems(this.leftTableColumns), this.groupbyControl.setItems(this.leftTableColumns);
  }, e.prototype.fillRightColumnControlValues = function (t) {
    this.rightTableColumns = this.dataMap[t].columns;
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_X_COLUMNS && (this.renderPropertyControlHeader(this.$xcolumns, this.problems[t]), this.createValidationContent(this.$xcolumns, this.problems[t])), this.problems[t].param === this.PARAM_HOLD_COLUMNS && (this.renderPropertyControlHeader(this.$holdColumns, this.problems[t]), this.createValidationContent(this.$holdColumns, this.problems[t])), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderXColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_X_COLUMNS];
    this.xColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_HOLD_COLUMNS];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.createXColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_X_COLUMNS] = [this.xColumnsControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createHoldColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_HOLD_COLUMNS] = [this.holdColumnsControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.decisionTreePredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addXColumnsRule(), this.addHoldColumnsRule();
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addXColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], 0);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0], 0);
    }), this.addRule(function (e) {
      var o = [],
          r = [],
          n = e.param[t.PARAM_X_COLUMNS][0],
          a = e.param[t.PARAM_HOLD_COLUMNS][0];
      if (a.length) for (var i in a) {
        n.indexOf(a[i]) > -1 && r.push(a[i]);
      }

      if (r.length > 0) {
        var s = {
          errorCode: "BR-0057",
          param: t.PARAM_HOLD_COLUMNS,
          messageParam: [r, "X Columns", "Hold Columns"]
        };
        o.push(t.problemFactory.createProblem(s, e));
      }

      return o;
    });
  }, t.VA.Core.Functions.Library.decisionTreePredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.decisionTreeTrain = {
    category: "classification",
    defaultFnUnit: {
      func: "decisionTreeTrain",
      name: "DecisionTreeTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        method: "classification",
        impurity: "gini",
        "num-classes": "",
        "max-depth": "",
        "max-bins": "",
        groupby: []
      },
      display: {
        label: "Decision Tree Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides the decision tree for given data which is represented as tables.",
    tags: ["DecisionTree Train", "DecisionTreeTrain", "Decision", "Tree", "Train", "Decision Tree Train", "classification", "impurity", "max depth", "max bins"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_Y_COLUMN = "ycolumn", this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_METHOD = "method", this.PARAM_IMPURITY = "impurity", this.PARAM_NUM_CLASSES = "num-classes", this.PARAM_MAX_DEPTH = "max-depth", this.PARAM_MAX_BINS = "max-bins", this.render = {
      ycolumn: this.renderYColumnControl,
      xcolumns: this.renderXColumnsControl,
      method: this.renderMethodControl,
      impurity: this.renderImpurityControl,
      "num-classes": this.renderNumClassesControl,
      "max-depth": this.renderMaxDepthControl,
      "max-bins": this.renderMaxBinsControl,
      groupby: this.renderGroupBy
    }, this.createYColumnControl(), this.createXColumnsControl(), this.createMethodControl(), this.createImpurityControl(), this.createNumClassesControl(), this.createMaxDepthControl(), this.createMaxBinsControl(), this.createGroupByControl();
  }, e.prototype.createXColumnsControl = function (t) {
    var e = this;
    this.$xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("X Columns", function (t) {
      t.append(e.$xcolumns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createXColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.xColumnsControl = e.createColumnList(e.$xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createYColumnControl = function (t) {
    var e = this;
    this.$yColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Y Column", function (t) {
      t.append(e.$yColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createYColumnCommand();
          e.executeCommand(r);
        }
      };
      e.yColumnControl = e.createColumnList(e.$yColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createMethodControl = function () {
    var t = this;
    this.$methodControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-method"/>');
    var e = this.addPropertyControl("Method", function (e) {
      e.append(t.$methodControl), t.createRadioButtonControl(t.$methodControl, "classification", "method"), t.createRadioButtonControl(t.$methodControl, "regression", "method");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "method", "Method");
  }, e.prototype.createImpurityControl = function () {
    var t = this;
    this.$impurityControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-method"/>');
    var e = this.addPropertyControl("Impurity", function (e) {
      e.append(t.$impurityControl), t.createRadioButtonControl(t.$impurityControl, "gini", "impurity"), t.createRadioButtonControl(t.$impurityControl, "entropy", "impurity"), t.createRadioButtonControl(t.$impurityControl, "variance", "impurity");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "impurity", "Impurity");
  }, e.prototype.createNumClassesControl = function () {
    var e = this;
    this.$numClassesControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Classes Number", function (o) {
      o.append(e.$numClassesControl), e.$numClasses = e.createNumericInput(e.$numClassesControl, {
        numberType: "int",
        min: void 0,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2 (2 <= value)")
      }), e.$numClasses.onChange(function (t) {
        var o = e.createNumClassesCommand();
        e.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "num-classes", "Classes Number");
  }, e.prototype.createMaxDepthControl = function () {
    var e = this;
    this.$maxDepthControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Max Depth", function (o) {
      o.append(e.$maxDepthControl), e.$maxDepth = e.createNumericInput(e.$maxDepthControl, {
        numberType: "int",
        min: void 0,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (1 <= value <= 30)")
      }), e.$maxDepth.onChange(function (t) {
        var o = e.createMaxDepthCommand();
        e.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "max-depth", "Max Depth");
  }, e.prototype.createMaxBinsControl = function () {
    var e = this;
    this.$maxBinsControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Max Bins", function (o) {
      o.append(e.$maxBinsControl), e.$maxBins = e.createNumericInput(e.$maxBinsControl, {
        numberType: "int",
        min: void 0,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("32 (2 <= value)")
      }), e.$maxBins.onChange(function (t) {
        var o = e.createMaxBinsCommand();
        e.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "max-bins", "Max Bins");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      if (!r.checkedFlag) {
        var e = $(t.target).attr("value");

        if ($(t.target).jqxRadioButton("groupName") == r.PARAM_METHOD) {
          var o = !0;
          "classification" == e && (o = !1);
          var n = r.$impurityControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
          $.each(n, function (t, e) {
            "gini" == $(e).attr("value") ? ($(e).jqxRadioButton({
              disabled: o
            }), r.checkedFlag = !0, o || $(e).jqxRadioButton({
              checked: !0
            }), r.checkedFlag = !1) : "entropy" == $(e).attr("value") ? $(e).jqxRadioButton({
              disabled: o
            }) : ($(e).jqxRadioButton({
              disabled: !o
            }), r.checkedFlag = !0, o && $(e).jqxRadioButton({
              checked: !0
            }), r.checkedFlag = !1);
          });
        }

        var a = r.createRadioCommand();
        r.executeCommand(a);
      }
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    this.numberColumnArray = $.grep(t, function (t) {
      return "number" === t.type;
    }), this.xColumnsControl.setItems(this.numberColumnArray), this.yColumnControl.setItems(this.numberColumnArray), this.groupbyControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_X_COLUMNS ? (this.renderPropertyControlHeader(this.$xcolumns, this.problems[t]), this.createValidationContent(this.$xcolumns, this.problems[t])) : this.problems[t].param === this.PARAM_Y_COLUMN && (this.renderPropertyControlHeader(this.$yColumn, this.problems[t]), this.createValidationContent(this.$yColumn, this.problems[t])), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderXColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_X_COLUMNS];
    this.xColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderYColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_Y_COLUMN];
    this.yColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderMethodControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_METHOD];
    t && $(this.$methodControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderImpurityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_IMPURITY];
    t && $(this.$impurityControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderNumClassesControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUM_CLASSES];
    this.$numClasses.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderMaxDepthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_DEPTH];
    this.$maxDepth.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderMaxBinsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_BINS];
    this.$maxBins.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createXColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_X_COLUMNS] = [this.xColumnsControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createYColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_Y_COLUMN] = [this.yColumnControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createRadioCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = "",
        r = "",
        n = this.$methodControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    $.each(n, function (t, e) {
      $(e).jqxRadioButton("val") && (o = $(e).attr("value"));
    });
    var a = this.$impurityControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(a, function (t, e) {
      $(e).jqxRadioButton("val") && (r = $(e).attr("value"));
    }), e.ref.param[this.PARAM_METHOD] = o, e.ref.param[this.PARAM_IMPURITY] = r, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createNumClassesCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_NUM_CLASSES] = this.$numClasses.getValue() ? this.$numClasses.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createMaxDepthCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_MAX_DEPTH] = this.$maxDepth.getValue() ? this.$maxDepth.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createMaxBinsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_MAX_BINS] = this.$maxBins.getValue() ? this.$maxBins.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.decisionTreeTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_Y_COLUMN = "ycolumn", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addXColumnRule(), this.addYColumnRule(), this.addBaseGroupByRule(this.PARAM_X_COLUMNS, "X Columns"), this.addBaseGroupByRule(this.PARAM_Y_COLUMN, "Y Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0]);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = t.getArrayConflicted(e.param[t.PARAM_X_COLUMNS][0], e.param[t.PARAM_Y_COLUMN][0]);
        return t.createProblemForConflicted(o, t.PARAM_X_COLUMNS, "Y Column", e);
      }
    });
  }, e.prototype.addYColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0]);
    });
  }, t.VA.Core.Functions.Library.decisionTreeTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.knn = {
    category: "classification",
    defaultFnUnit: {
      func: "knn",
      name: "KNN",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "target-column": "",
        k: "",
        p: ""
      },
      display: {
        label: "K-nearest neighbors",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "K-nearest neighbors estimates the target value of test data from train data.",
    tags: ["K-nearest neighbors", "K-NearestNeighbors", "KNearestNeighbors", "Classification", "Knn", "k nearest neighbors", "points", "euclidean"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "target-column": this.renderTargetColumn,
      k: this.renderK,
      p: this.renderP
    }, this.renderError = {
      columns: this.renderErrorColumns,
      "target-column": this.renderErrorTargetColumn
    }, this.createColumnsControl(), this.createTargetColumnControl(), this.createKControl(), this.createPControl();
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderTargetColumn = function () {
    var t = this.options.fnUnit.param;
    this.targetColumnControl.setSelectedItems(t["target-column"] ? [t["target-column"]] : []);
  }, e.prototype.renderK = function () {
    this.kControl.setValue(this.options.fnUnit.param.k ? this.options.fnUnit.param.k : "");
  }, e.prototype.renderP = function () {
    this.pControl.setValue(this.options.fnUnit.param.p ? this.options.fnUnit.param.p : "");
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTargetColumnControl = function (t) {
    var e = this;
    this.$targetColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Target Column", function (t) {
      t.append(this.$targetColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          e.createTargetColumnCommand("target-column", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.targetColumnControl = e.createColumnList(e.$targetColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createKControl = function () {
    var e = this;
    this.$k = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("k", function (o) {
      o.append(this.$k);
      var r = {
        numberType: "int",
        min: 1,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(1 <= value)")
      };
      e.kControl = e.createNumericInput(e.$k, r), e.kControl.onChange(function () {
        e.createNumericInputCommand("k", this.getValue());
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "k", "k");
  }, e.prototype.createPControl = function () {
    var e = this;
    this.$p = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("p", function (o) {
      o.append(this.$p);
      var r = {
        numberType: "int",
        min: 2,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2 (2 <= value)")
      };
      e.pControl = e.createNumericInput(e.$p, r), e.pControl.onChange(function () {
        e.createNumericInputCommand("p", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "p", "p");
  }, e.prototype.fillControlValues = function () {
    var t,
        e,
        o = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        r = this.dataMap && this.options.fnUnit[IN_DATA][1] ? this.dataMap[this.options.fnUnit[IN_DATA][1]].columns : [],
        n = [];
    if (o.length > 0 && r.length > 0) for (t = 0; t < o.length; t++) {
      for (!1, e = 0; e < r.length; e++) {
        o[t].name === r[e].name && (n.push(o[t]), !0);
      }
    }
    var a = $.grep(n, function (t) {
      return "number" === t.type;
    }),
        i = $.grep(o, function (t) {
      return "string" === t.type;
    });
    this.columnsControl.setItems(a), this.targetColumnControl.setItems(i);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createTargetColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && o.length > 0 && (r.ref.param[e] = o[0]);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "target-column" === this.problems[t].param && this.createValidationContent(this.$targetColumn, this.problems[t]), "k" === this.problems[t].param && this.createValidationContent(this.$k, this.problems[t]);
    }
  }, e.prototype.renderErrorColumns = function (t) {
    this.renderPropertyControlHeader(this.$columns, t.level);
  }, e.prototype.renderErrorTargetColumn = function (t) {
    this.renderPropertyControlHeader(this.$targetColumn, t.level);
  }, t.VA.Core.Functions.Library.knn.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_TARGET_COLUMN = "target-column", this.PARAM_K = "k", this.PARAM_P = "p", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addTargetColumnRule(), this.addKRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], 0) || t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], 1);
    });
  }, e.prototype.addTargetColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_TARGET_COLUMN, e.param[t.PARAM_TARGET_COLUMN], "Target Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_TARGET_COLUMN, e.param[t.PARAM_TARGET_COLUMN], 0);
    });
  }, e.prototype.addKRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (this._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_K,
          messageParam: ["K"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_K]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.knn.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.logisticRegressionPredict = {
    category: "classification",
    defaultFnUnit: {
      func: "logisticRegressionPredict",
      name: "LogisticRegressionPredict",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        threshold: ""
      },
      display: {
        label: "Logistic Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict data using a logistic regression model.",
    tags: ["LogisticRegression Predict", "LogisticRegressionPredict", "Regression", "Predict", "Trend", "Classification", "Logistic Regression Predict", "logit model", "categorical"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns,
      threshold: this.renderThreshold
    }, this.createColumnsControl(), this.createHoldColumnsControl(), this.createThresholdControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(this.$columns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("columns", o.items);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(this.$holdColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          e.createColumnListCommand("hold-columns", o.items);
        }
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createThresholdControl = function (t) {
    var e = this;
    this.$threshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Threshold", function (t) {
      t.append(this.$threshold);
      e.thresholdControl = e.createNumericInput(e.$threshold, {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: "0.5"
      }), e.thresholdControl.onChange(function () {
        e.createNumericInputCommand("threshold", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "threshold", "Threshold");
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(e, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.holdColumnsControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    t["hold-columns"] ? this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]) : this.holdColumnsControl.setSelectedItems([]);
  }, e.prototype.renderThreshold = function () {
    this.thresholdControl.setValue(this.options.fnUnit.param.threshold || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" == this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "hold-columns" == this.problems[t].param && this.createValidationContent(this.$holdColumns, this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.logisticRegressionPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addHoldColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], 0);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0], 0);
    });
  }, t.VA.Core.Functions.Library.logisticRegressionPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.logisticRegressionTrain = {
    category: "classification",
    defaultFnUnit: {
      func: "logisticRegressionTrain",
      name: "LogisticRegressionTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        "model-name": "",
        types: "",
        intercept: "true",
        iteration: "",
        regularization: "",
        tolerance: ""
      },
      display: {
        label: "Logistic Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fit a logistic regression model.",
    tags: ["LogisticRegression Train", "LogisticRegressionTrain", "Regression", "Train", "Classification", "Trend", "Logistic Regression Train", "logit model", "categorical"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYColumn,
      xcolumns: this.renderXColumns,
      types: this.renderTypes,
      intercept: this.renderIntercept,
      iteration: this.renderIteration,
      regularization: this.renderRegularization,
      tolerance: this.renderTolerance
    }, this.createYColumnControl(), this.createXColumnsControl(), this.createTypesControl(), this.createInterceptControl(), this.createIterationControl(), this.createRegularizationControl(), this.createToleanceControl();
  }, e.prototype.createYColumnControl = function (t) {
    var e = this;
    this.$yColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Y Column", function (t) {
      t.append(this.$yColumn);
      var o = {
        maxRowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          e.createColumnListCommand("ycolumn", o.items);
        }
      };
      e.yColumnControl = e.createColumnList(e.$yColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createXColumnsControl = function (t) {
    var e = this;
    this.$xColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Columns", function (t) {
      t.append(this.$xColumns);
      var o = {
        maxRowCount: 2,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("xcolumns", o.items);
        }
      };
      e.xColumnsControl = e.createColumnList(e.$xColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTypesControl = function (e) {
    var o = this;
    this.$types = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Types", function (e) {
      e.append(this.$types);
      var r = {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0 <= value <= 1)")
      };
      o.typesControl = o.createNumericInput(o.$types, r), o.typesControl.onChange(function () {
        o.createNumericInputCommand("types", o.typesControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "types", "Types");
  }, e.prototype.createInterceptControl = function (t) {
    var e = this;
    this.$InterceptTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$InterceptFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = this.addPropertyControl("Intercept", function (t) {
      t.append(this.$InterceptTrueControl).append(this.$InterceptFalseControl), e.createRadioButton(e.$InterceptTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$InterceptFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$InterceptTrueControl.on("checked", function (t) {
        e.createRadioButtonCommand("intercept", "true");
      }), e.$InterceptFalseControl.on("checked", function (t) {
        e.createRadioButtonCommand("intercept", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "intercept", "Intercept");
  }, e.prototype.createIterationControl = function (e) {
    var o = this;
    this.$iteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Iteration", function (e) {
      e.append(this.$iteration);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("100 (1 <= value)")
      };
      o.iterationControl = o.createNumericInput(o.$iteration, r), o.iterationControl.onChange(function () {
        o.createNumericInputCommand("iteration", o.iterationControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "iteration", "Iteration");
  }, e.prototype.createRegularizationControl = function (e) {
    var o = this;
    this.$regularization = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Regularization ", function (e) {
      e.append(this.$regularization);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0 <= value)")
      };
      o.regularizationControl = o.createNumericInput(o.$regularization, r), o.regularizationControl.onChange(function () {
        o.createNumericInputCommand("regularization", o.regularizationControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "regularization", "Regularization");
  }, e.prototype.createToleanceControl = function (e) {
    var o = this;
    this.$toleranceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Tolerance ", function (e) {
      e.append(this.$toleranceControl);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.000001 (0 < value)")
      };
      o.toleranceControl = o.createNumericInput(o.$toleranceControl, r), o.toleranceControl.onChange(function () {
        o.createNumericInputCommand("tolerance", o.toleranceControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "tolerance", "Tolerance");
  }, e.prototype.fillControlValues = function (t) {
    var e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        o = $.grep(e, function (t, e) {
      return "number" === t.type;
    }),
        r = $.grep(e, function (t, e) {
      return "number" === t.type || "Double[]" === t.internalType;
    });
    this.yColumnControl.setItems(o), this.xColumnsControl.setItems(r);
  }, e.prototype.renderYColumn = function () {
    var t = this.options.fnUnit.param;
    this.yColumnControl.setSelectedItems(t.ycolumn[0]);
  }, e.prototype.renderXColumns = function () {
    var t = this.options.fnUnit.param;
    this.xColumnsControl.setSelectedItems(t.xcolumns[0]);
  }, e.prototype.renderTypes = function () {
    var t = this.options.fnUnit.param;
    this.typesControl.setValue(t.types || "");
  }, e.prototype.renderIntercept = function () {
    var t = this.options.fnUnit.param;
    t.intercept ? "true" === t.intercept ? this.$InterceptTrueControl.jqxRadioButton("check") : this.$InterceptFalseControl.jqxRadioButton("check") : this.$InterceptTrueControl.jqxRadioButton("check");
  }, e.prototype.renderIteration = function () {
    var t = this.options.fnUnit.param;
    this.iterationControl.setValue(t.iteration || "");
  }, e.prototype.renderRegularization = function () {
    var t = this.options.fnUnit.param;
    this.regularizationControl.setValue(t.regularization || "");
  }, e.prototype.renderTolerance = function () {
    var t = this.options.fnUnit.param;
    this.toleranceControl.setValue(t.tolerance || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "xcolumns" === this.problems[t].param && this.createValidationContent(this.$xColumns, this.problems[t]), "ycolumn" === this.problems[t].param && this.createValidationContent(this.$yColumn, this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.logisticRegressionTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_Y_COLUMN = "ycolumn", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addXColumnRule(), this.addYColumnRule();
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0]);
    });
  }, e.prototype.addYColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.logisticRegressionTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.naiveBayesPredict = {
    category: "classification",
    defaultFnUnit: {
      func: "naiveBayesPredict",
      name: "NaiveBayesPredict",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "model-name": "",
        "hold-column": "false"
      },
      display: {
        label: "Naive Bayes Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict and assign class label for the test (feature) data using NaiveBayes Model created by NaiveBayesTrain function.",
    tags: ["NaiveBayesPredict", "Naive", "Bayes", "Predict", "Naive Bayes Predict", "classification"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-column": this.renderHoldColumn
    }, this.createColumnsControls(), this.createHoldColumnControl();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommand("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createModelNameControl = function () {
    var t = this;
    this.$modelName = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-inputbox"/>'), this.addPropertyControl("Model Name", function (e) {
      e.append(this.$modelName);
      t.createInput(t.$modelName, {
        placeHolder: "Enter value"
      }), t.$modelName.on("change", function (e) {
        t.isInputValueChanged("model-name", $(this).val()) && t.createCommonCommand("model-name", t.$modelName.jqxInput("val"));
      });
    });
  }, e.prototype.createHoldColumnControl = function () {
    var t = this;
    this.$holdColumn = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Hold Column", function (e) {
      e.append(t.$holdColumn), t.createRadioButtonControl(t.$holdColumn, "True", "holdColumn"), t.createRadioButtonControl(t.$holdColumn, "False", "holdColumn");
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "True" === e ? e = "true" : "False" === e && (e = "false"), r.createCommonCommand("hold-column", e);
    });
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    $.each(e, function (e, o) {
      "number" === o.type && t.push(o);
    }), this.columnsControl.setItems(t);
  }, e.prototype.getRadioButtonValue = function () {
    var t = "",
        e = this.$displayMode.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(e, function (e, o) {
      $(o).jqxRadioButton("val") && (t = $(o).attr("value"));
    }), t;
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderHoldColumn = function () {
    var t = this.options.fnUnit.param["hold-column"];
    "true" === t ? t = "True" : "false" === t && (t = "False"), t && $(this.$holdColumn[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.columnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.naiveBayesPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_OUT_COL_NAME = "out-col-name", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function (e) {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addOutColNameRule(), this.addNewColumnNameRule(this.PARAM_OUT_COL_NAME);
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns", 0);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], 0);
    });
  }, e.prototype.addOutColNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: this.PARAM_OUT_COL_NAME,
        messageParam: ["Out Column Name"]
      };
      return t._checkStringIsEmpty(o, e, e.param[t.PARAM_OUT_COL_NAME]);
    });
  }, t.VA.Core.Functions.Library.naiveBayesPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.naiveBayesTrain = {
    category: "classification",
    defaultFnUnit: {
      func: "naiveBayesTrain",
      name: "NaiveBayesTrain",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "model-type": "multinomial",
        "label-col-name": "",
        lambda: ""
      },
      display: {
        label: "Naive Bayes Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "NaiveBayes classifiers are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong(naive) independence assumptions between the features.",
    tags: ["NaiveBayesTrain", "Naive", "Bayes", "Train", "Naive Bayes Train", "classification"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "model-type": this.renderModelType,
      "label-col-name": this.renderLabelColName,
      lambda: this.renderLambda
    }, this.createColumnsControls(), this.createModelTypeControl(), this.createLabelColNameControl(), this.createLambdaControl();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        }
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createLabelColNameControl = function () {
    var t = this;
    this.$labelColName = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Label Column Name", function (e) {
      e.append(this.$labelColName);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createLabelColCommand("label-col-name", o.items);
        }
      };
      t.labelColControl = t.createColumnList(t.$labelColName, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createModelTypeControl = function () {
    var t = this;
    this.$displayMode = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>');
    var e = this.addPropertyControl("Model Type", function (e) {
      e.append(t.$displayMode), t.createRadioButtonControl(t.$displayMode, "Multinomial", "model-type"), t.createRadioButtonControl(t.$displayMode, "Bernoulli", "model-type");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "model-type", "Model Type");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "Multinomial" === e ? e = "multinomial" : "Bernoulli" === e && (e = "bernoulli"), r.createCommonCommand("model-type", e || r.getRadioButtonValue());
    });
  }, e.prototype.createLambdaControl = function () {
    var t = this;
    this.$lambdaControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Lambda", function (e) {
      e.append(t.$lambdaControl);
      var o = {
        numberType: "double",
        min: void 0,
        minus: void 0,
        placeholder: "1.0 (0 < value)"
      };
      t.lambda = t.createNumericInput(t.$lambdaControl, o), t.lambda.onChange(function () {
        t.createCommonCommand("lambda", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "lambda", "Lambda");
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    $.each(e, function (e, o) {
      "number" === o.type && t.push(o);
    }), this.columnsControl.setItems(t), this.labelColControl.setItems(t);
  }, e.prototype.getRadioButtonValue = function () {
    var t = "",
        e = this.$displayMode.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(e, function (e, o) {
      $(o).jqxRadioButton("val") && (t = $(o).attr("value"));
    }), t;
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderModelType = function () {
    var t = this.options.fnUnit.param["model-type"];
    "multinomial" === t ? t = "Multinomial" : "bernoulli" === t && (t = "Bernoulli"), t && $(this.$displayMode[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderLabelColName = function () {
    var t = this.options.fnUnit.param;
    this.labelColControl.setSelectedItems([t["label-col-name"]]);
  }, e.prototype.renderLambda = function () {
    var t = this.options.fnUnit.param;
    this.lambda.setValue(t.lambda);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "label-col-name" === this.problems[t].param && this.createValidationContent(this.$labelColName, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = new t.VA.Core.CompoundCommand(this),
        n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = [[]], o && (n.ref.param.columns[0] = o);
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, n),
        i = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
    r.add(a), r.add(i), this.executeCommand(r);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = new t.VA.Core.CompoundCommand(this),
        n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = o;
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, n),
        i = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
    r.add(a), r.add(i), this.executeCommand(r);
  }, e.prototype.createLabelColCommand = function (e, o) {
    var r = new t.VA.Core.CompoundCommand(this),
        n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = o[0] ? o[0] : "";
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, n),
        i = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
    r.add(a), r.add(i), this.executeCommand(r);
  }, t.VA.Core.Functions.Library.naiveBayesTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_LABEL_COL_NAME = "label-col-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addLabelColNameRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "number");
    });
  }, e.prototype.addLabelColNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_LABEL_COL_NAME, e.param[t.PARAM_LABEL_COL_NAME], "Label Column Name");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_LABEL_COL_NAME, e.param[t.PARAM_LABEL_COL_NAME]);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = e.param[this.PARAM_LABEL_COL_NAME];

        if (e.param[this.PARAM_COLUMNS][0].indexOf(o) > -1) {
          var r = {
            errorCode: "BR-0057",
            param: this.PARAM_LABEL_COL_NAME,
            messageParam: [o, "Columns", "Label Column Name"]
          };
          return t.problemFactory.createProblem(r, e);
        }
      }
    });
  }, e = e, t.VA.Core.Functions.Library.naiveBayesTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.oneVsRestLRClassifierPredict = {
    category: "classification",
    defaultFnUnit: {
      func: "oneVsRestLRClassifierPredict",
      name: "OneVsRestLRClassifierPredict",
      inData: [],
      outData: [],
      param: {
        xcolumns: [[]],
        "hold-columns": [[]],
        "predict-column-name": ""
      },
      display: {
        label: "One vs Rest LR Classifier Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data from OneVsRestLRClassifierTrain.",
    tags: ["OneVsRestLRClassifier Predict", "OneVsRestLRClassifierPredict", "Predict", "Classification", "One Vs Rest LR Classifier Predict", "logistic regression"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      xcolumns: this.renderXColumns,
      "hold-columns": this.renderHoldColumns,
      "predict-column-name": this.renderPredictColumnName
    }, this.createXColumnsControl(), this.createHoldColumnsControl(), this.createPredictColumnNameControl();
  }, e.prototype.createXColumnsControl = function () {
    var t = this;
    this.$xColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Columns", function (e) {
      e.append(this.$xColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed(e, o) {
          t.createColumnListCommand("xcolumns", o.items);
        }
      };
      t.xColumnsControl = t.createColumnList(t.$xColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(this.$holdColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed(e, o) {
          t.createColumnListCommand("hold-columns", o.items);
        }
      };
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, o);
    });
  }, e.prototype.createPredictColumnNameControl = function () {
    var t = this;
    this.$predictColumnName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("Predict Column Name", function (e) {
      e.append(t.$predictColumnName), t.predictColumnNameControl = t.createInput(t.$predictColumnName, {
        height: "23px",
        placeHolder: "prediction"
      });
    });
    this.$predictColumnName.on("change", function () {
      t.isInputValueChanged("predict-column-name", $(this).val()) && t.createInputCommand("predict-column-name", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "predict-column-name", "Predict Column Name");
  }, e.prototype.fillControlValues = function (t) {
    var e = [],
        o = [],
        r = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];

    for (var n in r) {
      "string" != r[n].type ? e.push(r[n]) : o.push(r[n]);
    }

    this.xColumnsControl.setItems(e), this.holdColumnsControl.setItems(r);
  }, e.prototype.renderXColumns = function () {
    var t = this.options.fnUnit.param;
    this.xColumnsControl.setSelectedItems(t.xcolumns[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderPredictColumnName = function () {
    var t = this.options.fnUnit.param;
    this.$predictColumnName.val(t["predict-column-name"] || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "xcolumns" === this.problems[t].param && this.createValidationContent(this.$xColumns, this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns, this.problems[t]), "predict-column-name" === this.problems[t].param && this.createValidationContent(this.$predictColumnName.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.oneVsRestLRClassifierPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_PREDICT_COLUMN_NAME = "predict-column-name", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addXColumnRule(), this.addHoldColumnsRule(), this.addNewColumnNameRule(this.PARAM_PREDICT_COLUMN_NAME);
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "number");
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.oneVsRestLRClassifierPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.oneVsRestLRClassifierTrain = {
    category: "classification",
    defaultFnUnit: {
      func: "oneVsRestLRClassifierTrain",
      name: "OneVsRestLRClassifierTrain",
      inData: [],
      outData: [],
      param: {
        xcolumns: [[]],
        ycolumn: [[]],
        types: "",
        intercept: "true",
        iteration: "",
        "reg-param": "",
        tolerance: ""
      },
      display: {
        label: "One vs Rest LR Classifier Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Perform multi-class classification using logistic regression. This function creates a binary classification result for each of the k classes.",
    tags: ["OneVsRestLRClassifier Train", "OneVsRestLRClassifierTrain", "Train", "Classification", "One Vs Rest LR Classifier Train", "logistic regression"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYColumn,
      xcolumns: this.renderXColumns,
      types: this.renderTypes,
      intercept: this.renderIntercept,
      iteration: this.renderIteration,
      "reg-param": this.renderRegParm,
      tolerance: this.renderTolerance
    }, this.createYColumnControl(), this.createXColumnsControl(), this.createTypesControl(), this.createInterceptControl(), this.createIterationControl(), this.createRegParmControl(), this.createToleanceControl();
  }, e.prototype.createYColumnControl = function () {
    var t = this;
    this.$yColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Y Column", function (e) {
      e.append(this.$yColumn);
      var o = {
        maxRowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createColumnListCommand("ycolumn", o.items);
        }
      };
      t.yColumnControl = t.createColumnList(t.$yColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createXColumnsControl = function () {
    var t = this;
    this.$xColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Columns", function (e) {
      e.append(this.$xColumns);
      var o = {
        maxRowCount: 2,
        multiple: !0,
        changed: function changed(e, o) {
          t.createColumnListCommand("xcolumns", o.items);
        }
      };
      t.xColumnsControl = t.createColumnList(t.$xColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTypesControl = function () {
    var e = this;
    this.$types = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Types", function (o) {
      o.append(this.$types);
      var r = {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0 <= value <= 1)")
      };
      e.typesControl = e.createNumericInput(e.$types, r), e.typesControl.onChange(function () {
        e.createNumericInputCommand("types", e.typesControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "types", "Types");
  }, e.prototype.createInterceptControl = function () {
    var t = this;
    this.$InterceptTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$InterceptFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var e = this.addPropertyControl("Intercept", function (e) {
      e.append(this.$InterceptTrueControl).append(this.$InterceptFalseControl), t.createRadioButton(t.$InterceptTrueControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$InterceptFalseControl, {
        width: "80",
        groupName: "Group"
      }), t.$InterceptTrueControl.on("checked", function () {
        t.createRadioButtonCommand("intercept", "true");
      }), t.$InterceptFalseControl.on("checked", function () {
        t.createRadioButtonCommand("intercept", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "intercept", "Intercept");
  }, e.prototype.createIterationControl = function () {
    var e = this;
    this.$iteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Iteration", function (o) {
      o.append(this.$iteration);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("100 (0 <= value)")
      };
      e.iterationControl = e.createNumericInput(e.$iteration, r), e.iterationControl.onChange(function () {
        e.createNumericInputCommand("iteration", e.iterationControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "iteration", "Iteration");
  }, e.prototype.createRegParmControl = function () {
    var e = this;
    this.$regParm = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Reg Param ", function (o) {
      o.append(this.$regParm);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0 <= value)")
      };
      e.regParmControl = e.createNumericInput(e.$regParm, r), e.regParmControl.onChange(function () {
        e.createNumericInputCommand("reg-param", e.regParmControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "reg-param", "Reg Param");
  }, e.prototype.createToleanceControl = function (e) {
    var o = this;
    this.$toleranceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Tolerance ", function (e) {
      e.append(this.$toleranceControl);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.000001 (0 < value)")
      };
      o.toleranceControl = o.createNumericInput(o.$toleranceControl, r), o.toleranceControl.onChange(function () {
        o.createNumericInputCommand("tolerance", o.toleranceControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "tolerance", "Tolerance");
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = [],
        o = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];

    for (var r in o) {
      "string" != o[r].type ? t.push(o[r]) : e.push(o[r]);
    }

    this.xColumnsControl.setItems(t), this.yColumnControl.setItems(o), this.$InterceptTrueControl.jqxRadioButton("check"), this.iterationControl.setValue("100"), this.typesControl.setValue("0.0"), this.regParmControl.setValue("0.0"), this.toleranceControl.setValue("0.000001");
  }, e.prototype.renderYColumn = function () {
    var t = this.options.fnUnit.param;
    this.yColumnControl.setSelectedItems(t.ycolumn[0]);
  }, e.prototype.renderXColumns = function () {
    var t = this.options.fnUnit.param;
    this.xColumnsControl.setSelectedItems(t.xcolumns[0]);
  }, e.prototype.renderTypes = function () {
    var t = this.options.fnUnit.param;
    this.typesControl.setValue(t.types || "");
  }, e.prototype.renderIntercept = function () {
    var t = this.options.fnUnit.param;
    t.intercept ? "true" === t.intercept ? this.$InterceptTrueControl.jqxRadioButton("check") : this.$InterceptFalseControl.jqxRadioButton("check") : this.$InterceptTrueControl.jqxRadioButton("check");
  }, e.prototype.renderIteration = function () {
    var t = this.options.fnUnit.param;
    this.iterationControl.setValue(t.iteration || "");
  }, e.prototype.renderRegParm = function () {
    var t = this.options.fnUnit.param;
    this.regParmControl.setValue(t["reg-param"] || "");
  }, e.prototype.renderTolerance = function () {
    var t = this.options.fnUnit.param;
    this.toleranceControl.setValue(t.tolerance || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "xcolumns" === this.problems[t].param && this.createValidationContent(this.$xColumns, this.problems[t]), "ycolumn" === this.problems[t].param && this.createValidationContent(this.$yColumn, this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.oneVsRestLRClassifierTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_Y_COLUMN = "ycolumn", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addXColumnRule(), this.addYColumnRule();
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "number");
    });
  }, e.prototype.addYColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.oneVsRestLRClassifierTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.randomForestPredict = {
    category: "classification",
    defaultFnUnit: {
      func: "randomForestPredict",
      name: "RandomForestPredict",
      inData: [],
      outData: [],
      param: {
        xcolumns: [[]],
        "hold-columns": [[]],
        groupby: []
      },
      display: {
        label: "Random Forest Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data based on random forest from RandomForestTrain function.",
    tags: ["RandomForest Predict", "RandomForestPredict", "RandomForest", "Random Forest", "Random Forest Predict", "Predict", "classification", "impurity", "max depth", "max bins", "multiple decision trees"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_HOLD_COLUMNS = "hold-columns", this.render = {
      xcolumns: this.renderXColumnsControl,
      "hold-columns": this.renderHoldColumnsControl,
      groupby: this.renderGroupBy
    }, this.createXColumnsControl(), this.createHoldColumnsControl(), this.createGroupByControl();
  }, e.prototype.createXColumnsControl = function (t) {
    var e = this;
    this.$xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("X Columns", function (t) {
      t.append(e.$xcolumns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createXColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.xColumnsControl = e.createColumnList(e.$xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$holdColumns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createHoldColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.options.fnUnit[IN_DATA][0],
        e = this.options.fnUnit[IN_DATA][1];
    t && this.dataMap[t] ? this.fillLeftColumnControlValues(this.dataMap[t].columns) : this.fillLeftColumnControlValues([]), e && this.dataMap[e] ? this.fillRightColumnControlValues(this.dataMap[e].columns) : this.fillRightColumnControlValues([]);
  }, e.prototype.fillLeftColumnControlValues = function (t) {
    this.leftTableColumns = t;
    var e = [];

    for (var o in this.leftTableColumns) {
      "number" != this.leftTableColumns[o].type && "Double[]" !== this.leftTableColumns[o].internalType || e.push(this.leftTableColumns[o]);
    }

    this.xColumnsControl.setItems(e), this.holdColumnsControl.setItems(this.leftTableColumns), this.groupbyControl.setItems(this.leftTableColumns);
  }, e.prototype.fillRightColumnControlValues = function (t) {
    this.rightTableColumns = t;
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_X_COLUMNS && (this.renderPropertyControlHeader(this.$xcolumns, this.problems[t]), this.createValidationContent(this.$xcolumns, this.problems[t])), this.problems[t].param === this.PARAM_HOLD_COLUMNS && this.createValidationContent(this.$holdColumns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderXColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_X_COLUMNS];
    this.xColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_HOLD_COLUMNS];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createXColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_X_COLUMNS] = [this.xColumnsControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createHoldColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_HOLD_COLUMNS] = [this.holdColumnsControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.randomForestPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addXColumnsRule(), this.addHoldColumnsRule(), this.addBaseGroupByRule(this.PARAM_X_COLUMNS, "X Columns"), this.addBaseGroupByRule(this.PARAM_HOLD_COLUMNS, "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addXColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], 0);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0], 0);
    });
  }, t.VA.Core.Functions.Library.randomForestPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.randomForestTrain = {
    category: "classification",
    defaultFnUnit: {
      func: "randomForestTrain",
      name: "RandomForestTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        method: "classification",
        impurity: "gini",
        "num-classes": "",
        "num-trees": "",
        "feature-subset-strategy": "auto",
        "max-depth": "",
        "max-bins": "",
        seed: "",
        groupby: []
      },
      display: {
        label: "Random Forest Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides random forest (or multiple decision trees) to generate training set.",
    tags: ["RandomForest Train", "RandomForestTrain", "RandomForest", "Random Forest", "Random Forest Train", "Train", "classification", "impurity", "max depth", "max bins", "multiple decision trees"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_Y_COLUMN = "ycolumn", this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_METHOD = "method", this.PARAM_NUM_CLASSES = "num-classes", this.PARAM_NUM_TREES = "num-trees", this.PARAM_FEATURE_SUBSET_STRATEGY = "feature-subset-strategy", this.PARAM_IMPURITY = "impurity", this.PARAM_MAX_DEPTH = "max-depth", this.PARAM_MAX_BINS = "max-bins", this.PARAM_SEED = "seed", this.render = {
      ycolumn: this.renderYColumnControl,
      xcolumns: this.renderXColumnsControl,
      method: this.renderMethodControl,
      "num-classes": this.renderNumClassesControl,
      "num-trees": this.renderNumTreesControl,
      "feature-subset-strategy": this.renderFeatureSubsetStrategyControl,
      impurity: this.renderImpurityControl,
      "max-depth": this.renderMaxDepthControl,
      "max-bins": this.renderMaxBinsControl,
      seed: this.renderSeedControl,
      groupby: this.renderGroupBy
    }, this.createYColumnControl(), this.createXColumnsControl(), this.createMethodControl(), this.createNumClassesControl(), this.createNumTreesControl(), this.createFeatureSubsetStrategyControl(), this.createImpurityControl(), this.createMaxDepthControl(), this.createMaxBinsControl(), this.createSeedControl(), this.createGroupByControl();
  }, e.prototype.createXColumnsControl = function (t) {
    var e = this;
    this.$xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("X Columns", function (t) {
      t.append(e.$xcolumns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createXColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.xColumnsControl = e.createColumnList(e.$xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createYColumnControl = function (t) {
    var e = this;
    this.$yColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Y Column", function (t) {
      t.append(e.$yColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createYColumnCommand();
          e.executeCommand(r);
        }
      };
      e.yColumnControl = e.createColumnList(e.$yColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createMethodControl = function () {
    var t = this;
    this.$methodControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-method"/>');
    var e = this.addPropertyControl("Method", function (e) {
      e.append(t.$methodControl), t.createRadioButtonControl(t.$methodControl, "Classification", "classification", "method"), t.createRadioButtonControl(t.$methodControl, "Regression", "regression", "method");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, this.PARAM_METHOD, "Method");
  }, e.prototype.createNumClassesControl = function () {
    var e = this;
    this.$numClassesControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Classes Number", function (o) {
      o.append(e.$numClassesControl), e.$numClasses = e.createNumericInput(e.$numClassesControl, {
        numberType: "int",
        min: void 0,
        max: void 0,
        minus: !0,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2 (2 <= value)")
      }), e.$numClasses.onChange(function (t) {
        var o = e.createNumClassesCommand();
        e.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "num-classes", "Classes Number");
  }, e.prototype.createNumTreesControl = function () {
    var e = this;
    this.$numTreesControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Trees Number", function (o) {
      o.append(e.$numTreesControl), e.$numTrees = e.createNumericInput(e.$numTreesControl, {
        numberType: "int",
        min: void 0,
        max: void 0,
        minus: !0,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (1 <= value)")
      }), e.$numTrees.onChange(function (t) {
        var o = e.createNumTreesCommand();
        e.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "num-trees", "Trees Number");
  }, e.prototype.createFeatureSubsetStrategyControl = function () {
    var t = this;
    this.$featureSubsetStrategyControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-method"/>');
    var e = this.addPropertyControl("Feature Subset Strategy", function (e) {
      e.append(t.$featureSubsetStrategyControl), t.createRadioButtonControl(t.$featureSubsetStrategyControl, "Auto", "auto", "featureSubsetStrategy"), t.createRadioButtonControl(t.$featureSubsetStrategyControl, "All", "all", "featureSubsetStrategy"), t.createRadioButtonControl(t.$featureSubsetStrategyControl, "Sqrt", "sqrt", "featureSubsetStrategy"), t.createRadioButtonControl(t.$featureSubsetStrategyControl, "Log2", "log2", "featureSubsetStrategy"), t.createRadioButtonControl(t.$featureSubsetStrategyControl, "One Third", "onethird", "featureSubsetStrategy");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, this.PARAM_FEATURE_SUBSET_STRATEGY, "Feature Subset Strategy");
  }, e.prototype.createImpurityControl = function () {
    var t = this;
    this.$impurityControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-method"/>');
    var e = this.addPropertyControl("Impurity", function (e) {
      e.append(t.$impurityControl), t.createRadioButtonControl(t.$impurityControl, "Gini", "gini", "impurity"), t.createRadioButtonControl(t.$impurityControl, "Entropy", "entropy", "impurity"), t.createRadioButtonControl(t.$impurityControl, "Variance", "variance", "impurity");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, this.PARAM_IMPURITY, "Impurity");
  }, e.prototype.createMaxDepthControl = function () {
    var e = this;
    this.$maxDepthControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Max Depth", function (o) {
      o.append(e.$maxDepthControl), e.$maxDepth = e.createNumericInput(e.$maxDepthControl, {
        numberType: "int",
        min: void 0,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (1 <= value <= 30)")
      }), e.$maxDepth.onChange(function (t) {
        var o = e.createMaxDepthCommand();
        e.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "max-depth", "Max Depth");
  }, e.prototype.createMaxBinsControl = function () {
    var e = this;
    this.$maxBinsControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Max Bins", function (o) {
      o.append(e.$maxBinsControl), e.$maxBins = e.createNumericInput(e.$maxBinsControl, {
        numberType: "int",
        min: void 0,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("32 (2 <= value)")
      }), e.$maxBins.onChange(function (t) {
        var o = e.createMaxBinsCommand();
        e.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "max-bins", "Max Bins");
  }, e.prototype.createSeedControl = function () {
    var t = this;
    this.$seedControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var e = this.addPropertyControl("Seed", function (e) {
      e.append(t.$seedControl), t.$seed = t.createNumericInput(t.$seedControl, {
        numberType: "int",
        min: void 0,
        max: void 0,
        minus: !1
      }), t.$seed.onChange(function (e) {
        var o = t.createSeedCommand();
        t.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "seed", "Seed");
  }, e.prototype.createRadioButtonControl = function (t, e, o, r) {
    var n = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: r
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", o), t[o] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      if (!n.checkedFlag) {
        var e = $(t.target).attr("value");

        if ($(t.target).jqxRadioButton("groupName") == n.PARAM_METHOD) {
          var o = !0;
          "classification" == e && (o = !1);
          var r = n.$impurityControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
          $.each(r, function (t, e) {
            "gini" == $(e).attr("value") ? ($(e).jqxRadioButton({
              disabled: o
            }), n.checkedFlag = !0, o || $(e).jqxRadioButton({
              checked: !0
            }), n.checkedFlag = !1) : "entropy" == $(e).attr("value") ? $(e).jqxRadioButton({
              disabled: o
            }) : ($(e).jqxRadioButton({
              disabled: !o
            }), n.checkedFlag = !0, o && $(e).jqxRadioButton({
              checked: !0
            }), n.checkedFlag = !1);
          });
        }

        var a = n.createRadioCommand();
        n.executeCommand(a);
      }
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = $.grep(t, function (t, e) {
      return "number" === t.type;
    }),
        o = $.grep(t, function (t, e) {
      return "number" === t.type || "Double[]" === t.internalType;
    });
    this.yColumnControl.setItems(e), this.xColumnsControl.setItems(o), this.groupbyControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_X_COLUMNS ? (this.renderPropertyControlHeader(this.$xcolumns, this.problems[t]), this.createValidationContent(this.$xcolumns, this.problems[t])) : this.problems[t].param === this.PARAM_Y_COLUMN ? (this.renderPropertyControlHeader(this.$yColumn, this.problems[t]), this.createValidationContent(this.$yColumn, this.problems[t])) : "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderXColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_X_COLUMNS];
    this.xColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderYColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_Y_COLUMN];
    this.yColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderMethodControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_METHOD];
    t ? $(this.$methodControl[t]).jqxRadioButton({
      checked: !0
    }) : $(this.$methodControl.classification).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderNumClassesControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUM_CLASSES];
    this.$numClasses.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderNumTreesControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUM_TREES];
    this.$numTrees.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderFeatureSubsetStrategyControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_FEATURE_SUBSET_STRATEGY];
    t && $(this.$featureSubsetStrategyControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderImpurityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_IMPURITY];
    t ? $(this.$impurityControl[t]).jqxRadioButton({
      checked: !0
    }) : $(this.$impurityControl.auto).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderMaxDepthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_DEPTH];
    this.$maxDepth.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderMaxBinsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_BINS];
    this.$maxBins.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderSeedControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_SEED];
    this.$seed.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createXColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_X_COLUMNS] = [this.xColumnsControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createYColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_Y_COLUMN] = [this.yColumnControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createRadioCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = "",
        r = "",
        n = "",
        a = this.$methodControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    $.each(a, function (t, e) {
      $(e).jqxRadioButton("val") && (o = $(e).attr("value"));
    });
    var i = this.$featureSubsetStrategyControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    $.each(i, function (t, e) {
      $(e).jqxRadioButton("val") && (r = $(e).attr("value"));
    });
    var s = this.$impurityControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(s, function (t, e) {
      $(e).jqxRadioButton("val") && (n = $(e).attr("value"));
    }), e.ref.param[this.PARAM_METHOD] = o, e.ref.param[this.PARAM_FEATURE_SUBSET_STRATEGY] = r, e.ref.param[this.PARAM_IMPURITY] = n, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createNumClassesCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_NUM_CLASSES] = this.$numClasses.getValue() ? this.$numClasses.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createNumTreesCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_NUM_TREES] = this.$numTrees.getValue() ? this.$numTrees.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createMaxDepthCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_MAX_DEPTH] = this.$maxDepth.getValue() ? this.$maxDepth.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createMaxBinsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_MAX_BINS] = this.$maxBins.getValue() ? this.$maxBins.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createSeedCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_SEED] = this.$seed.getValue() ? this.$seed.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.randomForestTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_Y_COLUMN = "ycolumn", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addXColumnRule(), this.addYColumnRule(), this.addBaseGroupByRule("xcolumns", "X Columns"), this.addBaseGroupByRule("ycolumn", "Y Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0]);
    });
  }, e.prototype.addYColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.randomForestTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.svmPredict = {
    category: "classification",
    defaultFnUnit: {
      func: "svmPredict",
      name: "SVMPredict",
      inData: [],
      outData: [],
      param: {
        xcolumns: [[]],
        "hold-columns": [[]],
        threshold: "",
        groupby: []
      },
      display: {
        label: "SVM Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Draw a distance value for compare predict value and train value",
    tags: ["SVM Predict", "SVMPredict", "Svm", "Predict", "support vector machine", "classification", "regression"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      xcolumns: this.renderXcolumns,
      "hold-columns": this.renderHoldColumns,
      threshold: this.renderThreshold,
      groupby: this.renderGroupBy
    }, this.createXcolumnsControl(), this.createHoldColumnsControl(), this.createThresholdControl(), this.createGroupByControl();
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    this.$xColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Columns", function (t) {
      t.append(this.$xColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          e.createColumnListCommand("xcolumns", o.items);
        }
      };
      e.xColumnsControl = e.createColumnList(e.$xColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(this.$holdColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          e.createColumnListCommand("hold-columns", o.items);
        }
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createThresholdControl = function (t) {
    var e = this;
    this.$threshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Threshold", function (t) {
      t.append(this.$threshold);
      e.thresholdControl = e.createNumericInput(e.$threshold, {
        numberType: "double",
        minus: !0,
        placeholder: "0.0"
      }), e.thresholdControl.onChange(function () {
        e.createNumericInputCommand("threshold", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "threshold", "Threshold");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = $.grep(e, function (t, e) {
      return "number" === t.type || "Double[]" === t.internalType;
    });
    this.xColumnsControl.setItems(o), this.holdColumnsControl.setItems(e), this.groupbyControl.setItems(e);
  }, e.prototype.renderXcolumns = function () {
    var t = this.options.fnUnit.param;
    this.xColumnsControl.setSelectedItems(t.xcolumns[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderThreshold = function () {
    this.thresholdControl.setValue(this.options.fnUnit.param.threshold || "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "xcolumns" === this.problems[t].param && this.createValidationContent(this.$xColumns, this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.svmPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addXColumnsRule(), this.addHoldColumnsRule(), this.addBaseGroupByRule(this.PARAM_X_COLUMNS, "X Columns"), this.addBaseGroupByRule(this.PARAM_HOLD_COLUMNS, "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addXColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], 0);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0], 0);
    });
  }, e.prototype.yColumnRule = function (t) {
    var e = this.fnUnit.parent(),
        o = this.fnUnit.fid,
        r = e.getPrevious(o),
        n = e.getFnUnitById(r[0]);
    return "svmTrain" === n.func ? n.param.ycolumn === this.fnUnit.param.ycolumn ? void 0 : this.problemFactory.createProblem({
      errorCode: "EI001",
      messageParam: ["[Y-column] should be equal [SVMTrain]'s [Y-column]"]
    }, t) : this.problemFactory.createProblem({
      errorCode: "EL001",
      messageParam: ["SVMPredict"]
    }, t);
  }, e.prototype.xColumnsRule = function (t) {
    var e = this.fnUnit.parent(),
        o = this.fnUnit.fid,
        r = e.getPrevious(o),
        n = e.getFnUnitById(r[0]);
    return "svmTrain" === n.func ? n.param.xcolumns === this.fnUnit.param.xcolumns ? void 0 : this.problemFactory.createProblem({
      errorCode: "EI001",
      messageParam: ["[X-columns] should be equal [SVMTrain]'s [x-columns]"]
    }, t) : this.problemFactory.createProblem({
      errorCode: "EL001",
      messageParam: ["SVMPredict"]
    }, t);
  }, e.prototype.modelNameRule = function (t) {
    var e = this.fnUnit.parent(),
        o = this.fnUnit.fid,
        r = e.getPrevious(o),
        n = e.getFnUnitById(r[0]);
    return "svmTrain" === n.func ? n.param["model-name"] === this.fnUnit.param["model-name"] ? void 0 : this.problemFactory.createProblem({
      errorCode: "EI001",
      messageParam: ["[Model-Name] should be equal [SVMTrain]'s [Model-Name]"]
    }, t) : this.problemFactory.createProblem({
      errorCode: "EL001",
      messageParam: ["SVMPredict"]
    }, t);
  }, t.VA.Core.Functions.Library.svmPredict.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.sVMRBF = {
    category: "classification",
    defaultFnUnit: {
      func: "sVMRBF",
      name: "SVMRBF",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]]
      },
      display: {
        label: "SVM Radial Basis Function",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fits an SVM model using the radial basis function.",
    mandatory: [],
    tags: ["SVM", "RBF", "Radial Basis Function", "SVM Radial Basis Function"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns[0];
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls.xcolumns.setItems(t);
  }, t.VA.Core.Functions.Library.sVMRBF.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule();
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "ycolumn", e.param.ycolumn, ["number", "string"]);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "xcolumns", e.param.xcolumns, ["number"]);
    });
  }, t.VA.Core.Functions.Library.sVMRBF.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.sVMRBFPredict = {
    category: "classification",
    defaultFnUnit: {
      func: "sVMRBFPredict",
      name: "SVMRBFPredict",
      inData: [],
      outData: [],
      param: {
        xcolumns: [],
        "hold-columns": [],
        prob: "false"
      },
      display: {
        label: "SVM Radial Basis Function Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict data using a support vector machine model.",
    mandatory: [],
    tags: ["svm", "support vector machine", "classification", "radial basis function"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      xcolumns: this.renderXcolumnsControl,
      "hold-columns": this.renderHoldColumnsControl,
      prob: this.renderProbControl
    }, this.$elements = {}, this.controls = {}, this.createXcolumnsControl(), this.createHoldColumnsControl(), this.createProbControl();
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns;
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createProbControl = function (t) {
    var e = this;
    e.$elements["prob.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.$elements["prob.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True (for Classification)</div>'), e.addPropertyControl("Print Probilities", function (t) {
      t.append(e.$elements["prob.false"]), e.controls["prob.false"] = e.createRadioButton(e.$elements["prob.false"], {
        width: "undefined",
        groupName: "prob"
      }), e.$elements["prob.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("prob", "false");
        e.executeCommand(o);
      }), t.append(e.$elements["prob.true"]), e.controls["prob.true"] = e.createRadioButton(e.$elements["prob.true"], {
        width: "undefined",
        groupName: "prob"
      }), e.$elements["prob.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("prob", "true");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderProbControl = function (t) {
    var e = "prob." + this.options.fnUnit.param.prob;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.xcolumns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["hold-columns"].setItems(t);
  }, t.VA.Core.Functions.Library.sVMRBFPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addXcolumnsRule(), this.addHoldColumnsRule();
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "xcolumns", e.param.xcolumns, ["number"]);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.sVMRBFPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.sVMRBFTrain = {
    category: "classification",
    defaultFnUnit: {
      func: "sVMRBFTrain",
      name: "SVMRBFTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [],
        xcolumns: [],
        cost: "",
        gamma: ""
      },
      display: {
        label: "SVM Radial Basis Function Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fit a support vector machine model using the radial basis function.",
    mandatory: [],
    tags: ["svm", "support vector machine", "classification", "radial basis function", "SVM Radial Basis Function Train"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "3",
      max: "3"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumns: this.renderXcolumnsControl,
      cost: this.renderCostControl,
      gamma: this.renderGammaControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnsControl(), this.createCostControl(), this.createGammaControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !0,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn;
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    e.$elements.xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements.xcolumns);
      var o = {
        multiple: !0,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumns = e.createColumnList(e.$elements.xcolumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnsControl = function (t) {
    var e = this.options.fnUnit.param.xcolumns;
    this.controls.xcolumns.setSelectedItems(e);
  }, e.prototype.createCostControl = function (t) {
    var e = this;
    e.$elements.cost = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Regularization(Cost)", function (t) {
      t.append(e.$elements.cost);
      e.controls.cost = e.createNumericInput(e.$elements.cost, {
        placeholder: "1.0",
        numberType: "double"
      }), e.controls.cost.onChange(function () {
        var t = e.createSetParameterValueCommand("cost", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderCostControl = function (t) {
    var e = this.options.fnUnit.param.cost;
    this.controls.cost.setValue(e || "");
  }, e.prototype.createGammaControl = function (t) {
    var e = this;
    e.$elements.gamma = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Gamma", function (t) {
      t.append(e.$elements.gamma);
      e.controls.gamma = e.createNumericInput(e.$elements.gamma, {
        numberType: "double"
      }), e.controls.gamma.onChange(function () {
        var t = e.createSetParameterValueCommand("gamma", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGammaControl = function (t) {
    var e = this.options.fnUnit.param.gamma;
    this.controls.gamma.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls.xcolumns.setItems(t);
  }, t.VA.Core.Functions.Library.sVMRBFTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnsRule();
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "ycolumn", e.param.ycolumn, ["number", "String"]);
    });
  }, o.prototype.addXcolumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumns", e.param.xcolumns, "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumns", e.param.xcolumns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "xcolumns", e.param.xcolumns, ["number"]);
    });
  }, t.VA.Core.Functions.Library.sVMRBFTrain.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.svmTrain = {
    category: "classification",
    defaultFnUnit: {
      func: "svmTrain",
      name: "SVMTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        iteration: "",
        "step-size": "",
        "reg-param": "",
        "batch-fraction": "",
        "set-intercept": "true",
        groupby: []
      },
      display: {
        label: "SVM Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "In machine learning, support vector machines (SVMs, also support vector networks) are supervised learning models with associated learning algorithms that analyze data used for classification and regression analysis.",
    tags: ["SVM Train", "SVMTrain", "Svm", "Train", "support vector machine", "classification", "regression"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumn,
      xcolumns: this.renderXcolumns,
      iteration: this.renderIteration,
      "step-size": this.renderStepSize,
      "reg-param": this.renderRegParm,
      "batch-fraction": this.renderBatchFraction,
      "set-intercept": this.renderSetIntercept,
      groupby: this.renderGroupBy
    }, this.createYcolumnControl(), this.createXcolumnsControl(), this.createIterationControl(), this.createStepSizeControl(), this.createRegParmControl(), this.createBatchFractionControl(), this.createSetInterceptControl(), this.createGroupByControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    this.$yColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Y Column", function (t) {
      t.append(this.$yColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          e.createColumnListCommand("ycolumn", o.items);
        }
      };
      e.yColumnControl = e.createColumnList(e.$yColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createXcolumnsControl = function (t) {
    var e = this;
    this.$xColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Columns", function (t) {
      t.append(this.$xColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          e.createColumnListCommand("xcolumns", o.items);
        }
      };
      e.xColumnsControl = e.createColumnList(e.$xColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createIterationControl = function (e) {
    var o = this;
    this.$iteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Iteration", function (e) {
      e.append(this.$iteration);
      var r = {
        numberType: "int",
        min: 1,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("100 (1 <= value)")
      };
      o.iterationControl = o.createNumericInput(o.$iteration, r), o.iterationControl.onChange(function () {
        o.createNumericInputCommand("iteration", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "iteration", "Iteration");
  }, e.prototype.createStepSizeControl = function (t) {
    var e = this;
    this.$stepSize = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Step Size", function (t) {
      t.append(this.$stepSize);
      e.stepSizeControl = e.createNumericInput(e.$stepSize, {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: "1.0 (0 < value)"
      }), e.stepSizeControl.onChange(function () {
        e.createNumericInputCommand("step-size", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "step-size", "Step Size");
  }, e.prototype.createRegParmControl = function (t) {
    var e = this;
    this.$regParm = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Reg Param", function (t) {
      t.append(this.$regParm);
      e.regParmControl = e.createNumericInput(e.$regParm, {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: "0.01 (0 < value)"
      }), e.regParmControl.onChange(function () {
        e.createNumericInputCommand("reg-param", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "reg-param", "Reg Param");
  }, e.prototype.createBatchFractionControl = function (e) {
    var o = this;
    this.$batchFraction = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Batch Fraction", function (e) {
      e.append(this.$batchFraction);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 < value <= 1)")
      };
      o.batchFractionControl = o.createNumericInput(o.$batchFraction, r), o.batchFractionControl.onChange(function () {
        o.createNumericInputCommand("batch-fraction", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "batch-fraction", "Batch Fraction");
  }, e.prototype.createSetInterceptControl = function (t) {
    var e = this;
    this.$setInterceptTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$setInterceptFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = this.addPropertyControl("Set Intercept", function (t) {
      t.append(this.$setInterceptTrueControl).append(this.$setInterceptFalseControl), e.createRadioButton(e.$setInterceptTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$setInterceptFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$setInterceptTrueControl.on("checked", function (t) {
        e.createRadioButtonCommand("set-intercept", "true");
      }), e.$setInterceptFalseControl.on("checked", function (t) {
        e.createRadioButtonCommand("set-intercept", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "set-intercept", "Set Intercept");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = $.grep(e, function (t, e) {
      return "number" === t.type;
    }),
        r = $.grep(e, function (t, e) {
      return "number" === t.type || "Double[]" === t.internalType;
    });
    this.yColumnControl.setItems(o), this.xColumnsControl.setItems(r), this.groupbyControl.setItems(e);
  }, e.prototype.renderYcolumn = function () {
    var t = this.options.fnUnit.param;
    this.yColumnControl.setSelectedItems(t.ycolumn[0]);
  }, e.prototype.renderXcolumns = function () {
    var t = this.options.fnUnit.param;
    this.xColumnsControl.setSelectedItems(t.xcolumns[0]);
  }, e.prototype.renderIteration = function () {
    this.iterationControl.setValue(this.options.fnUnit.param.iteration || "");
  }, e.prototype.renderStepSize = function () {
    this.stepSizeControl.setValue(this.options.fnUnit.param["step-size"] || "");
  }, e.prototype.renderRegParm = function () {
    this.regParmControl.setValue(this.options.fnUnit.param["reg-param"] || "");
  }, e.prototype.renderBatchFraction = function () {
    this.batchFractionControl.setValue(this.options.fnUnit.param["batch-fraction"] || "");
  }, e.prototype.renderSetIntercept = function () {
    var t = this.options.fnUnit.param;
    t["set-intercept"] ? "true" === t["set-intercept"] ? this.$setInterceptTrueControl.jqxRadioButton("check") : this.$setInterceptFalseControl.jqxRadioButton("check") : this.$setInterceptTrueControl.jqxRadioButton("check");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t];
      "ycolumn" === e.param && this.renderErrorYcolumn(e), "xcolumns" === e.param && this.renderErrorXcolumns(e), "groupby" === e.param && this.renderErrorGroupby(e);
    }
  }, e.prototype.renderErrorYcolumn = function (t) {
    this.createValidationContent(this.$yColumn, t);
  }, e.prototype.renderErrorXcolumns = function (t) {
    this.createValidationContent(this.$xColumns, t);
  }, e.prototype.renderErrorGroupby = function (t) {
    this.createValidationContent(this.$groupbys.parent(), this.problems[i]);
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.svmTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_YCOLUMN = "ycolumn", this.PARAM_XCOLUMNS = "xcolumns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXColumnsRule(), this.addBaseGroupByRule(this.PARAM_Y_COLUMN, "Y Column"), this.addBaseGroupByRule(this.PARAM_X_COLUMNS, "X Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_YCOLUMN, e.param[t.PARAM_YCOLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_YCOLUMN, e.param[t.PARAM_YCOLUMN][0]);
    });
  }, e.prototype.addXColumnsRule = function (t) {
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnIsEmpty(t, e.PARAM_XCOLUMNS, t.param[e.PARAM_XCOLUMNS][0], "X Columns");
    }), this.addRule(function (t) {
      return e.checkColumnExists(t, e.PARAM_XCOLUMNS, t.param[e.PARAM_XCOLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.svmTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.gaussianMixturePredict = {
    category: "clustering",
    defaultFnUnit: {
      func: "gaussianMixturePredict",
      name: "GaussianMixturePredict",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "predict-soft": "false",
        groupby: []
      },
      display: {
        label: "Gaussian Mixture Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs expectation maximization for multivariate Gaussian Mixture Models (GMMs).",
    tags: ["GaussianMixture Predict", "GaussianMixturePredict", "GaussianMixture", "Predict", "Gaussian Mixture Predict", "classification", "clustering", "normal distribution", "gaussian distribution", "composite distributions"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "predict-soft": this.renderPredictSoft,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createPredictSoftControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(this.$columns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createPredictSoftControl = function (t) {
    var e = this;
    this.$PredictSoftTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$PredictSoftFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = this.addPropertyControl("Predict Soft", function (t) {
      t.append(this.$PredictSoftTrueControl).append(this.$PredictSoftFalseControl), e.createRadioButton(e.$PredictSoftTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$PredictSoftFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$PredictSoftTrueControl.on("checked", function (t) {
        e.createRadioButtonCommand("predict-soft", "true");
      }), e.$PredictSoftFalseControl.on("checked", function (t) {
        e.createRadioButtonCommand("predict-soft", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "predict-soft", "Predict Soft");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];

    for (var o in t) {
      "number" != t[o].type && "number[]" != t[o].type || e.push(t[o]);
    }

    this.columnsControl.setItems(e), this.groupbyControl.setItems(t);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderPredictSoft = function () {
    var t = this.options.fnUnit.param;
    t["predict-soft"] && "true" === t["predict-soft"] ? this.$PredictSoftTrueControl.jqxRadioButton("check") : this.$PredictSoftFalseControl.jqxRadioButton("check");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.gaussianMixturePredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.gaussianMixturePredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.gaussianMixtureTrain = {
    category: "clustering",
    defaultFnUnit: {
      func: "gaussianMixtureTrain",
      name: "GaussianMixtureTrain",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "num-clusters": "",
        tolerance: "",
        "max-iteration": "",
        seed: "",
        groupby: []
      },
      display: {
        label: "Gaussian Mixture Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs expectation maximization for multivariate Gaussian Mixture Models (GMMs).",
    tags: ["GaussianMixture Train", "GaussianMixtureTrain", "Gaussian", "Mixture", "Train", "Gaussian Mixture Train", "classification", "clustering", "normal distribution", "gaussian distribution", "composite distributions"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "num-clusters": this.renderNumClusters,
      tolerance: this.renderTolerance,
      "max-iteration": this.renderMaxIteration,
      seed: this.renderSeed,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createNumClustersControl(), this.createToleranceControl(), this.createMaxIterationControl(), this.createSeedControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(this.$columns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createNumClustersControl = function (t) {
    var e = this;
    this.$numClusters = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Num Clusters", function (t) {
      t.append(this.$numClusters);
      e.numClustersControl = e.createNumericInput(e.$numClusters, {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: "2"
      }), e.numClustersControl.onChange(function () {
        e.createNumericInputCommand("num-clusters", e.numClustersControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "num-clusters", "Num Clusters");
  }, e.prototype.createToleranceControl = function (t) {
    var e = this;
    this.$toleranceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Tolerance ", function (t) {
      t.append(this.$toleranceControl);
      e.toleranceControl = e.createNumericInput(e.$toleranceControl, {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: "0.01"
      }), e.toleranceControl.onChange(function () {
        e.createNumericInputCommand("tolerance", e.toleranceControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "tolerance", "Tolerance");
  }, e.prototype.createMaxIterationControl = function (e) {
    var o = this;
    this.$maxIteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Max Iteration", function (e) {
      e.append(this.$maxIteration);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("100 (1 <= value)")
      };
      o.maxIterationControl = o.createNumericInput(o.$maxIteration, r), o.maxIterationControl.onChange(function () {
        o.createNumericInputCommand("max-iteration", o.maxIterationControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-iteration", "Max Iteration");
  }, e.prototype.createSeedControl = function (t) {
    var e = this;
    this.$seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Seed", function (t) {
      t.append(this.$seed);
      e.seedControl = e.createNumericInput(e.$seed, {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: "Enter value"
      }), e.seedControl.onChange(function () {
        e.createNumericInputCommand("seed", e.seedControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "seed", "Seed");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];

    for (var o in t) {
      "number" != t[o].type && "number[]" != t[o].type || e.push(t[o]);
    }

    this.columnsControl.setItems(e), this.numClustersControl.setValue("2"), this.toleranceControl.setValue("0.01"), this.maxIterationControl.setValue("100"), this.groupbyControl.setItems(t);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderNumClusters = function () {
    var t = this.options.fnUnit.param;
    this.numClustersControl.setValue(t["num-clusters"] || "");
  }, e.prototype.renderTolerance = function () {
    var t = this.options.fnUnit.param;
    this.toleranceControl.setValue(t.tolerance || "");
  }, e.prototype.renderMaxIteration = function () {
    var t = this.options.fnUnit.param;
    this.maxIterationControl.setValue(t["max-iteration"] || "");
  }, e.prototype.renderSeed = function () {
    var t = this.options.fnUnit.param;
    this.seedControl.setValue(t.seed || "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.gaussianMixtureTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.gaussianMixtureTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.hierarchicalClustering = {
    category: "clustering",
    defaultFnUnit: {
      func: "hierarchicalClustering",
      name: "HierarchicalClustering",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        method: "SingleLinkage",
        "input-mode": "Matrix",
        "key-col": "",
        criteria: "",
        groupby: []
      },
      display: {
        label: "Hierarchical Clustering",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This calculates hierarchical clustering using bottom-up way.",
    tags: ["Hierarchical Clustering", "HierarchicalClustering", "Clustering", "clustering", "bottom up", "linkage", "dendrogram"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      method: this.renderMethod,
      "key-col": this.renderKeyCol,
      "input-mode": this.renderInputMode,
      criteria: this.renderCriteria,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createMethodControl(), this.createKeyColControl(), this.createInputModeControl(), this.createCriteriaControl(), this.createGroupByControl();
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderMethod = function () {
    var t = this.options.fnUnit.param;
    void 0 === t.method || "" === t.method ? this.$method.jqxDropDownList("selectIndex", -1) : this.$method.jqxDropDownList("selectItem", t.method);
  }, e.prototype.renderKeyCol = function () {
    var t = this.options.fnUnit.param;
    this.keyColControl.setSelectedItems([t["key-col"]]);
  }, e.prototype.renderInputMode = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t["input-mode"] ? this.$inputMode[t["input-mode"]].jqxRadioButton("check") : this.$inputMode.Matrix.jqxRadioButton("check");
  }, e.prototype.renderCriteria = function () {
    var t = this.options.fnUnit.param;
    this.criteriaControl.setValue(t.criteria || "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby || [];
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "method" === this.problems[t].param && this.createValidationContent(this.$method.parent(), this.problems[t]), "key-col" === this.problems[t].param && this.createValidationContent(this.$keyCol.parent(), this.problems[t]), "input-mode" === this.problems[t].param && this.createValidationContent(this.$inputMode.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.createColumnListCommand("columns", o.items);
        }
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createMethodControl = function () {
    var t = this;
    this.$method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.methodSource = [{
      label: "SingleLinkage",
      value: "SingleLinkage"
    }, {
      label: "AverageLinkage",
      value: "AverageLinkage"
    }, {
      label: "CompleteLinkage",
      value: "CompleteLinkage"
    }, {
      label: "Centroid",
      value: "Centroid"
    }, {
      label: "McQuitty",
      value: "McQuitty"
    }, {
      label: "Median",
      value: "Median"
    }, {
      label: "Ward",
      value: "Ward"
    }];
    var e = this.addPropertyControl("Method", function (e) {
      t.createDropDownList(this.$method, {
        source: this.methodSource
      }), e.append(t.$method.parent()), t.$method.on("change", function () {
        var e = t.$method.jqxDropDownList("getSelectedItem") ? t.$method.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand("method", e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "method", "Method");
  }, e.prototype.createInputModeControl = function (t) {
    var e = this;
    this.$inputMode = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>');
    var o = this.addPropertyControl("Input Mode", function (t) {
      t.append(e.$inputMode), e.createRadioButtonControl(e.$inputMode, "Matrix", "input-mode"), e.createRadioButtonControl(e.$inputMode, "Original", "input-mode");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "input-mode", "Input Mode");
  }, e.prototype.createKeyColControl = function () {
    var t = this;
    this.keyColControl = {};
    this.$keyCol = this.createCommonColumnsControl("keyColControl", "Key Column", {
      rowCount: 1,
      multiple: !1
    }), this.keyColControl.onChange(function () {
      var e = t.createCommonColumnCommand("key-col", t.keyColControl, "string");
      t.executeCommand(e);
    });
  }, e.prototype.createCriteriaControl = function () {
    var t = this;
    this.$criteria = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Criteria", function (e) {
      e.append(t.$criteria);
      t.criteriaControl = t.createNumericInput(t.$criteria, {
        numberType: "int",
        minus: !1,
        placeholder: "5000 (0 < value)"
      });
    });
    t.criteriaControl.onChange(function (e) {
      var o = t.createCommonCommand("criteria", e);
      t.executeCommand(o);
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "criteria", "Criteria");
  }, e.prototype.createCommonColumnsControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(n);
      r[t] = r.createColumnList(n, o || {
        rowCount: 3,
        multiple: !0
      });
    }), n;
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          n = r.createCommonCommand(o, e);
      r.executeCommand(n);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    if (o) for (var r in o) {
      e.ref.param.columns[0].push(o[r]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && Array.isArray(r)) {
      if (Array.isArray(r[0])) for (var i in a) {
        n.ref.param[e][0].push(a[i]);
      } else for (var i in a) {
        n.ref.param[e].push(a[i]);
      }
    } else a && "string" == typeof r && (n.ref.param[e] = a[0] || "");
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];

    for (var o in t) {
      "number" == t[o].type && e.push(t[o]);
    }

    this.columnsControl.setItems(e), this.keyColControl.setItems(t), this.groupbyControl.setItems(t);
  }, t.VA.Core.Functions.Library.hierarchicalClustering.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_METHOD = "method", this.PARAM_KEY_COL = "key-col", this.PARAM_INPUT_MODE = "input-mode", this.PARAM_METHOD_ARRAY = ["SingleLinkage", "AverageLinkage", "CompleteLinkage", "Centroid", "McQuitty", "Median", "Ward"], this.PARAM_INPUT_MODE_ARRAY = ["Original", "Matrix"], t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addMethodRule(), this.addKeyColRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "number");
    });
  }, e.prototype.addMethodRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_METHOD, e.param[t.PARAM_METHOD], "Method");
    });
  }, e.prototype.addKeyColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_KEY_COL, e.param[t.PARAM_KEY_COL]);
    });
  }, e = e, t.VA.Core.Functions.Library.hierarchicalClustering.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.hierarchicalClusteringPostProcess = {
    category: "clustering",
    defaultFnUnit: {
      func: "hierarchicalClusteringPostProcess",
      name: "HierarchicalClusteringPostProcess",
      inData: [],
      outData: [],
      param: {
        "target-num-clusters": "",
        groupby: []
      },
      display: {
        label: "Hierarchical Clustering Post Process",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function gets the number of clusters from a user and gives label using the result of hierarchical clustering.",
    tags: ["Hierarchical Clustering Post Process", "HierarchicalClusteringPostProcess", "Clustering", "Post", "Process"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "target-num-clusters": this.renderTargetNumClusters,
      groupby: this.renderGroupBy
    }, this.createTargetNumClustersControl(), this.createGroupByControl();
  }, e.prototype.renderTargetNumClusters = function () {
    var t = this.options.fnUnit.param;
    this.targetNumClustersControl.setValue(t["target-num-clusters"] || "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby || [];
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "target-num-clusters" === this.problems[t].param && this.createValidationContent(this.$targetNumClusters, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createTargetNumClustersControl = function () {
    var e = this;
    this.$targetNumClusters = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Target Number Clusters", function (o) {
      o.append(e.$targetNumClusters);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(1 <= value)")
      };
      e.targetNumClustersControl = e.createNumericInput(e.$targetNumClusters, r);
    }, {
      mandatory: !0
    });
    e.targetNumClustersControl.onChange(function (t) {
      var o = e.createCommonCommand("target-num-clusters", t);
      e.executeCommand(o);
    });
    var r = o.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "target-num-clusters", "Target Number Clusters");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    this.groupbyControl.setItems(t);
  }, t.VA.Core.Functions.Library.hierarchicalClusteringPostProcess.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_TARGET_NUM_CLUSTERS = "target-num-clusters", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addTargetNumClustersRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addTargetNumClustersRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_TARGET_NUM_CLUSTERS,
          messageParam: ["Target Number Clusters"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_TARGET_NUM_CLUSTERS]);
      }
    });
  }, t.VA.Core.Functions.Library.hierarchicalClusteringPostProcess.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.kmeans = {
    category: "clustering",
    defaultFnUnit: {
      func: "kmeans",
      name: "KMeans",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        clusters: "",
        iteration: "",
        steps: "",
        tolerance: "",
        seed: "",
        groupby: []
      },
      display: {
        label: "K-means",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It partitions n observations into k clusters in which each observation belongs to the cluster with the nearest mean.",
    tags: ["K-means", "Kmeans", "Clustering", "clustering"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    },
    deprecated: !0,
    "deprecated-message": "K-means is deprecated. Use Kmeans instead."
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      clusters: this.renderClusters,
      iteration: this.renderIteration,
      steps: this.renderSteps,
      tolerance: this.renderTolerance,
      seed: this.renderSeed,
      "hold-columns": this.renderHoldColumns,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createClustersControl(), this.createIterationControl(), this.createStepsControl(), this.createToleranceControl(), this.createSeedControl(), this.createHoldColumnsControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(this.$columns);
      var o = {
        rowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          e.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createClustersControl = function (e) {
    var o = this;
    this.$clusters = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Clusters", function (e) {
      e.append(this.$clusters);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2 (2 <= value)")
      };
      o.clustersControl = o.createNumericInput(o.$clusters, r), o.clustersControl.onChange(function () {
        o.createNumericInputCommand("clusters", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "clusters", "Clusters");
  }, e.prototype.createIterationControl = function (e) {
    var o = this;
    this.$iteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Iteration", function (e) {
      e.append(this.$iteration);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("20 (0 < value)")
      };
      o.iterationControl = o.createNumericInput(o.$iteration, r), o.iterationControl.onChange(function () {
        o.createNumericInputCommand("iteration", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "iteration", "Iteration");
  }, e.prototype.createStepsControl = function (e) {
    var o = this;
    this.$steps = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Steps", function (e) {
      e.append(this.$steps);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (1 <= value)")
      };
      o.stepsControl = o.createNumericInput(o.$steps, r), o.stepsControl.onChange(function () {
        o.createNumericInputCommand("steps", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "steps", "Steps");
  }, e.prototype.createToleranceControl = function (t) {
    var e = this;
    this.$tolerance = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Tolerance", function (t) {
      t.append(this.$tolerance);
      e.toleranceControl = e.createNumericInput(e.$tolerance, {
        numberType: "double",
        minus: !1,
        placeholder: "0.0001 (0 < value)"
      }), e.toleranceControl.onChange(function () {
        e.createNumericInputCommand("tolerance", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "tolerance", "Tolerance");
  }, e.prototype.createSeedControl = function (t) {
    var e = this;
    this.$seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Seed", function (t) {
      t.append(this.$seed);
      e.seedControl = e.createNumericInput(e.$seed, {
        numberType: "double",
        minus: !1,
        placeholder: "Enter value"
      }), e.seedControl.onChange(function () {
        e.createNumericInputCommand("seed", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "seed", "Seed");
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(this.$holdColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.columnListCommnad("hold-columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = [];

    for (var r in e) {
      "Double[]" != e[r].internalType && "number" != e[r].type || o.push(e[r]);
    }

    this.columnsControl.setItems(o), this.holdColumnsControl.setItems(e), this.groupbyControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0] || []);
  }, e.prototype.renderClusters = function () {
    this.clustersControl.setValue(this.options.fnUnit.param.clusters);
  }, e.prototype.renderIteration = function () {
    this.iterationControl.setValue(this.options.fnUnit.param.iteration);
  }, e.prototype.renderSteps = function () {
    this.stepsControl.setValue(this.options.fnUnit.param.steps);
  }, e.prototype.renderTolerance = function () {
    this.toleranceControl.setValue(this.options.fnUnit.param.tolerance);
  }, e.prototype.renderSeed = function () {
    this.seedControl.setValue(this.options.fnUnit.param.seed);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0] || []);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.kmeans.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addHoldColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.kmeans.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.powerIterationClustering = {
    category: "clustering",
    defaultFnUnit: {
      func: "powerIterationClustering",
      name: "PowerIterationClustering",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "similarity-col": "",
        "n-clusters": "",
        "max-iteration": "",
        "initialization-mode": "random"
      },
      display: {
        label: "Power Iteration Clustering",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Power Iteration Clustering (PIC), a scalable graph clustering algorithm developed by Lin and Cohen.",
    tags: ["PowerIteration Clustering", "PowerIterationClustering", "Power", "Iteration", "Clustering", "Power Iteration Clustering", "clustering", "spectral clustering", "cut", "ncut", "normalized cut"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_SIMILARITY_COL = "similarity-col", this.PARAM_N_CLUSTERS = "n-clusters", this.PARAM_MAX_ITERATION = "max-iteration", this.PARAM_INITIALIZATION_MODE = "initialization-mode", this.render = {
      columns: this.renderColumns,
      "similarity-col": this.renderSimilarityCol,
      "n-clusters": this.renderNClusters,
      "max-iteration": this.renderMaxIteration,
      "initialization-mode": this.renderInitializationMode
    }, this.createColumnsControl(), this.createSimilarityColControl(), this.createNClustersControl(), this.createMaxIterationControl(), this.createInitializationMode();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnsCommand("columns", o.items);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createSimilarityColControl = function () {
    var t = this;
    this.$similarityCol = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Similarity Column", function (e) {
      e.append(this.$similarityCol);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createSimilarityColCommand("similarity-col", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.similarityColControl = t.createColumnList(t.$similarityCol, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createNClustersControl = function (e) {
    var o = this;
    this.$nClusters = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("N Clusters", function (e) {
      e.append(this.$nClusters);
      var r = {
        numberType: "int",
        min: 1,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(1 <= value)")
      };
      o.nClustersControl = o.createNumericInput(o.$nClusters, r), o.nClustersControl.onChange(function () {
        o.createNumericInputCommand("n-clusters", o.nClustersControl.getValue());
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "n-clusters", "N Clusters");
  }, e.prototype.createMaxIterationControl = function (e) {
    var o = this;
    this.$maxIteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Max Iteration", function (e) {
      e.append(this.$maxIteration);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("100 (0 <= value)")
      };
      o.maxIterationControl = o.createNumericInput(o.$maxIteration, r), o.maxIterationControl.onChange(function () {
        o.createNumericInputCommand("max-iteration", o.maxIterationControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-iteration", "Max Iteration");
  }, e.prototype.createInitializationMode = function (t) {
    var e = this;
    this.$InitializationModeRandomControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Random</div>'), this.$InitializationModeDegreeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Degree</div>');
    var o = this.addPropertyControl("Initialization Mode", function (t) {
      t.append(this.$InitializationModeRandomControl).append(this.$InitializationModeDegreeControl), e.createRadioButton(e.$InitializationModeRandomControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$InitializationModeDegreeControl, {
        width: "80",
        groupName: "Group"
      }), e.$InitializationModeRandomControl.on("checked", function (t) {
        e.createRadioButtonCommand("initialization-mode", "random");
      }), e.$InitializationModeDegreeControl.on("checked", function (t) {
        e.createRadioButtonCommand("initialization-mode", "degree");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "initialization-mode", "Initialization Mode");
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = [];

    for (var r in e) {
      "Integer" != e[r].internalType && "Long" != e[r].internalType || o.push(e[r]);
    }

    var n = [];

    for (var r in e) {
      "number" != e[r].type && "number[]" != e[r].type || n.push(e[r]);
    }

    this.columnsControl.setItems(o), this.similarityColControl.setItems(n);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS ? this.createValidationContent(this.$columns, this.problems[t]) : this.problems[t].param === this.PARAM_SIMILARITY_COL ? this.createValidationContent(this.$similarityCol, this.problems[t]) : this.problems[t].param === this.PARAM_N_CLUSTERS ? this.createValidationContent(this.$nClusters, this.problems[t]) : this.problems[t].param === this.PARAM_MAX_ITERATION && this.createValidationContent(this.$maxIteration, this.problems[t]);
    }
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t[this.PARAM_COLUMNS][0]);
  }, e.prototype.renderSimilarityCol = function () {
    var t = this.options.fnUnit.param[this.PARAM_SIMILARITY_COL];
    this.similarityColControl.setSelectedItems([t]);
  }, e.prototype.renderNClusters = function () {
    var t = this.options.fnUnit.param;
    this.nClustersControl.setValue(t[this.PARAM_N_CLUSTERS]);
  }, e.prototype.renderMaxIteration = function () {
    var t = this.options.fnUnit.param;
    this.maxIterationControl.setValue(t[this.PARAM_MAX_ITERATION]);
  }, e.prototype.renderInitializationMode = function () {
    var t = this.options.fnUnit.param;
    t[this.PARAM_INITIALIZATION_MODE] ? "random" === t[this.PARAM_INITIALIZATION_MODE] ? this.$InitializationModeRandomControl.jqxRadioButton("check") : this.$InitializationModeDegreeControl.jqxRadioButton("check") : this.$InitializationModeRandomControl.jqxRadioButton("check");
  }, e.prototype.createColumnsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [this.columnsControl.getSelectedItems()];
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createSimilarityColCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o[0] || "");
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.powerIterationClustering.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_SIMILARITY_COL = "similarity-col", this.PARAM_N_CLUSTERS = "n-clusters", this.PARAM_MAX_ITERATION = "max-iteration", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addSimilarityColRule(), this.addNClustersRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addSimilarityColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_SIMILARITY_COL, e.param[t.PARAM_SIMILARITY_COL], "Similarity Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_SIMILARITY_COL, e.param[t.PARAM_SIMILARITY_COL]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_SIMILARITY_COL, e.param[t.PARAM_SIMILARITY_COL]);
    });
  }, e.prototype.addNClustersRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_N_CLUSTERS,
          messageParam: ["N Clusters"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_N_CLUSTERS]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.powerIterationClustering.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.elseIf = {
    defaultFnUnit: {
      func: "elseIf",
      name: "ElseIf",
      param: {
        condition: "",
        functions: [],
        links: {}
      },
      display: {
        label: "Else-If",
        description: "This is a unit of else-if ."
      }
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.exportDataset = {
    category: "controlflow",
    defaultFnUnit: {
      func: "exportDataset",
      name: "ExportData",
      param: {
        "input-path": "/brtc/repo/",
        "copy-to": "alluxio",
        "output-path": "",
        delimiter: ",",
        header: "true",
        quote: '"',
        "array-delimiter": ":",
        "array-start-string": "[",
        "array-end-string": "]",
        "key-value-delimiter": "=",
        "map-start-string": "{",
        "map-end-string": "}",
        "table-name": "",
        "datasource-name": "",
        "is-delete": "true",
        "is-append": "false",
        "connection-timeout": "",
        "login-timeout": "",
        "socket-timeout": "",
        "lock-timeout": ""
      },
      display: {
        label: "Export Data",
        description: "",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["delimiter", "quote", "array-delimiter", "array-start-string", "array-end-string", "key-value-delimiter", "map-start-string", "map-end-string"],
    tags: ["ExportData", "Export Data", "unload", "file"]
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.forEach = {
    category: "controlflow",
    defaultFnUnit: {
      func: "forEach",
      name: "ForEach",
      param: {
        type: "count",
        args: [{
          type: "expression",
          value: ""
        }, {
          type: "literal",
          value: ""
        }, {
          type: "literal",
          value: ""
        }],
        functions: [],
        links: {}
      },
      display: {
        label: "Loop",
        description: "This is a unit of loop."
      }
    },
    description: "This function is Control Flow"
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.ifElse = {
    category: "controlflow",
    defaultFnUnit: {
      func: "ifElse",
      name: "IfElse",
      param: {
        condition: "",
        functions: [{
          func: "if",
          name: "If",
          param: {
            condition: "",
            functions: [],
            links: {}
          },
          display: {
            label: "If",
            description: "This is a unit of if-else."
          }
        }, {
          func: "else",
          name: "Else",
          param: {
            functions: [],
            links: {}
          },
          display: {
            label: "Else",
            description: "This is a unit of else."
          }
        }],
        links: {}
      },
      display: {
        label: "If-Else",
        description: "This is a unit of if-else."
      }
    },
    description: "This function is Control Flow"
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.importDataset = {
    category: "controlflow",
    defaultFnUnit: {
      func: "importDataset",
      name: "ImportData",
      param: {
        "copy-from": "alluxio",
        "column-type": [],
        "is-delete": "false",
        "input-path": "/brtc/repo/",
        "output-path": "/brtc/repo/",
        delimiter: ",",
        quote: '"',
        "array-delimiter": ":",
        "array-start-string": "[",
        "array-end-string": "]",
        "key-value-delimiter": "=",
        "map-start-string": "{",
        "map-end-string": "}",
        "table-name": "",
        "datasource-name": "",
        "connection-timeout": "",
        "execution-timeout": ""
      },
      display: {
        label: "Import Data",
        description: "",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["delimiter", "quote", "array-delimiter", "array-start-string", "array-end-string", "key-value-delimiter", "map-start-string", "map-end-string"],
    tags: ["ImportData", "Import Data", "alluxio", "postgre", "load", "oracle"]
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.while = {
    category: "controlflow",
    defaultFnUnit: {
      func: "while",
      name: "While",
      param: {
        condition: "",
        functions: [],
        links: {}
      },
      display: {
        label: "While",
        description: "This is a unit of while."
      }
    },
    description: "This function is Control Flow"
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.flow = {
    category: "control",
    defaultFnUnit: {
      func: "flow",
      name: "Flow",
      inData: [],
      outData: [],
      param: {
        mid: "",
        versionId: "",
        variables: {}
      },
      display: {
        label: "Flow",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function calls the Data Model",
    tags: ["sub"],
    mandatory: ["mid"],
    "in-range": {
      min: 1,
      max: 10
    },
    "out-range": {
      min: 0,
      max: 10
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = brtc_require("Dao"),
      o = {
    label: "Current",
    value: ""
  };

  function r(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  r.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), r.prototype.constructor = r, r.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, r.prototype.createIntableControl = function () {
    var t = this;

    if (void 0 !== this.options.fnUnit[IN_DATA]) {
      var e = this.getFunctionDef()["in-range"].min || 1;
      this.$intableControl = $('<div class="brtc-va-editors-sheet-controls-property-in-table-control-columnlist"/>'), this.addPropertyInTableControl("In Table", function (o) {
        o.append(t.$intableControl);
        var r = {
          fnUnit: t.options.fnUnit,
          editor: t.options.modelEditor,
          minRow: e
        };
        e > 1 && (r.rowHeaderType = "number"), this._intableControlOption && $.extend(!0, r, this._intableControlOption), t._intableControl = t.createInTableList(t.$intableControl, r);
      });
    }
  }, r.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {}, this.render.mid = this.renderModelIdControl, this.render.versionId = this.renderVersionIDControl, this.render.variables = this.renderVariablesControl, this.$elements = {}, this.controls = {}, this.projectId = this.options.modelEditor.getEditorInput().getProjectId(), this.createModelIdControl(), this.createVersionIDControl(), this.createInputTableControl(), this.createReturnTableControl(), this.createVariablesControl();
  }, r.prototype.createModelIdControl = function (r) {
    var n = this;
    n.$elements.mid = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), n.$elements.sync = $(crel("button", {
      class: "brtc-va-editors-sheet-controls-propertycontrol-button"
    }, "Refresh")).click(function () {
      n.executeCommand(n.createModelSyncCommand(n.$elements.mid.val())), n.renderTableSync(), n.renderInputTableControl(), n.renderReturnTableControl(), n.renderVariablesControl();
    }), n.addPropertyControl("Model", function (r) {
      n.$cont = $(crel("div", {
        class: "brtc-style-display-flex brtc-style-flex-wrap"
      })), r.append(n.$cont), n.$cont.append(n.$elements.mid), n.$cont.append(n.$elements.sync), n.fileList = [];
      var a = Studio.getResourceManager().getFiles(n.projectId);
      $.each(a, function (t, e) {
        "data" == e.data.type && e.data.id != n.options.modelEditor.options.editorInput.getFileId() && n.fileList.push({
          label: _.escape(e.data.label),
          value: e.data.id
        });
      });
      var i = {
        source: n.fileList,
        dropDownHeight: 150,
        displayMember: "label",
        valueMember: "id",
        width: 167
      };
      n.controls.mid = n.createDropDownList(n.$elements.mid, i), n.controls.sync = n.createButton(n.$elements.sync, {
        width: 80,
        height: 27
      }), n.controls.mid.on("change", function (r) {
        if (n.isInputValueChanged("mid", r.args.item.value)) {
          var a = r.args.item.value;
          n.cached = !1;
          var i = {};
          i.mid = a, i.versionId = "";
          var s = new t.VA.Core.CompoundCommand(n, {
            label: "Change FnUnit Properties"
          }),
              l = n.createSetFnUnitCommand({
            param: i
          });
          n.$elements.versionId.val(""), s.add(l), s.add(n.createModelSyncCommand(a)), n.executeCommand(s), n.renderInputTableControl(), n.renderReturnTableControl(), n.renderVariablesControl(n.getParam("variables")), n.fileVersionList = [o], e.VersionDao.getVersionsForced(n.projectId, a, function (t) {
            t.sort(function (t, e) {
              return t.compareToByVersion(e);
            }), $.each(t, function (t, e) {
              n.fileVersionList.push({
                label: e.getVersion(),
                value: e.getVersionId()
              });
            });
          }), n.controls.versionId.jqxDropDownList({
            source: n.fileVersionList,
            dropDownHeight: n.calcDropdownHeight(n.fileVersionList.length, 25)
          });
        }
      });
    }, {
      mandatory: !0
    });
  }, r.prototype.createVersionIDControl = function (r) {
    var n = this;
    n.$elements.versionId = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), n.addPropertyControl("Version", function (r) {
      r.append(n.$elements.versionId), n.fileVersionList = [o];
      var a = n.options.fnUnit.param.mid;
      n.projectId && a && e.VersionDao.getVersionsForced(n.projectId, a, function (t) {
        n.fileVersionList = [o], t.sort(function (t, e) {
          return t.compareToByVersion(e);
        }), $.each(t, function (t, e) {
          n.fileVersionList.push({
            label: e.getVersion(),
            value: e.getVersionId()
          });
        });
      });
      var i = {
        source: n.fileVersionList,
        displayMember: "label",
        valueMember: "value",
        autoDropDownHeight: !1,
        height: "25px",
        dropDownHeight: n.calcDropdownHeight(n.fileVersionList.length, 25)
      };
      n.controls.versionId = n.createDropDownList(n.$elements.versionId, i), n.controls.versionId.on("change", function (e) {
        var o = n.options.fnUnit.param.mid,
            r = e.args.item.value;

        if (n.getFnUnit().param.versionId !== e.args.item.value) {
          n.cached = !1;
          var a = [],
              i = {},
              s = n.getRenderedModel(o, r);
          s && (a = s.getContents()[OUT_DATA], i = s.getContents().variables);

          var l = {
            fnUnit: n.options.fnUnit,
            ref: {
              param: {}
            }
          },
              c = {
            fnUnit: n.options.fnUnit,
            ref: {
              outData: []
            }
          },
              p = n._calcVariables(n.getParam("variables"), i);

          l.ref.param.versionId = r, l.ref.param.variables = p, c.ref[OUT_DATA] = n.generateNewOutDataList(a), n.renderVariablesControl(p), n.renderInputTableControl(), n.renderReturnTableControl();
          var u = new t.VA.Core.CompoundCommand(n, {
            label: "Change FnUnit Properties"
          }),
              m = new t.VA.Core.Editors.Diagram.Commands.NewOutTableCommand(n, c),
              d = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(n, l);
          u.add(d), u.add(m), n.executeCommand(u);
        }
      });
    }, {
      mandatory: !1
    });
  }, r.prototype.generateNewOutDataList = function (e) {
    if (!e) return [];

    for (var o = _.clone(this.options.fnUnit[OUT_DATA]); o.length < e.length;) {
      o.push(t.VA.Core.Utils.IDGenerator.table.id());
    }

    for (; o.length > e.length;) {
      o.pop();
    }

    return o;
  }, r.prototype.getVersionInputData = function () {
    return this.version.getContents()[IN_DATA] || [];
  }, r.prototype.getInputData = function () {
    var t;
    return (t = this.getRenderedModel()) && t.getContents()[IN_DATA] || [];
  }, r.prototype.getVersionReturnData = function () {
    return this.version.getContents()[OUT_DATA] || [];
  }, r.prototype.getReturnData = function () {
    var t;
    return (t = this.getRenderedModel()) && t.getContents()[OUT_DATA] || [];
  }, r.prototype.getFnUnitByTableId = function (e) {
    var o = this.getRenderedModel().getContents(),
        r = function r(n) {
      for (var a = n.functions, i = 0; i < a.length; i++) {
        var s = a[i];
        if (_.indexOf(s[OUT_DATA], e) > -1) return s;

        for (var l = t.VA.Core.Utils.NestedFlowUtils.getSubModels(o, s), c = 0; c < l.length; c++) {
          var p = l[c],
              u = r(p);
          if (u) return u;
        }
      }
    };

    return r(o);
  }, r.prototype.createSelectedTableElements = function (t, e) {
    var o = this,
        r = [];
    return _.forEach(e, function (e) {
      var n = o.getFnUnitByTableId(e);
      n && r.push(o.createSelectedItem(t, n, e));
    }), r;
  }, r.prototype.createSelectedItem = function (t, e, o) {
    var r = this.createItem(e, o);
    return this.wrapSelectedItem(t, r);
  }, r.prototype.createItem = function (e, o) {
    var r = $(crel("div", {
      class: "brtc-va-editors-sheet-controls-dataselector-item"
    })),
        n = t.VA.Core.Utils.WidgetUtils.createPaletteItem(r, e.func, "data");
    n.find(".brtc-va-views-palette-fnunit-label").text(this.getTableItemLabel(e, o)), n.css("cursor", "auto"), r.attr("tid", o), r.attr("fid", e.fid);
    var a = e[OUT_DATA].indexOf(o);
    return r.attr("index", a), n.addClass("item"), r;
  }, r.prototype.getTableItemLabel = function (t, e) {
    var o = t[OUT_DATA].length,
        r = _.indexOf(t[OUT_DATA], e),
        n = t.display.label,
        a = t.display.label + "-" + (r + 1);

    return o > 1 ? a : n;
  }, r.prototype.wrapSelectedItem = function (t, e) {
    var o = $(crel("div", {
      class: "brtc-style-flex-center",
      style: "padding-left: 10px"
    }));
    e.attr("tid"), e.attr("fid");
    o.append(e), t.append(o);
  }, r.prototype.createInputTableControl = function (t) {
    this.$inputTableContainer = $('<div class="brtc-va-editors-sheet-panels-properties-flowproperties-input-table-container"></div>'), this.addPropertyControl("Input Table (Read Only)", function (t) {
      t.append(this.$inputTableContainer);
    });
  }, r.prototype.createReturnTableControl = function (t) {
    this.$returnTableContainer = $('<div class="brtc-va-editors-sheet-panels-properties-flowproperties-return-table-container"></div>'), this.addPropertyControl("Return Table (Read Only)", function (t) {
      t.append(this.$returnTableContainer);
    });
  }, r.prototype.createVariablesControl = function (e) {
    var o = this;
    this.$container = $('<div class="brtc-va-editors-sheet-panels-properties-flowproperties-variable-container"></div>'), this.addPropertyControl("Variables", function (e) {
      e.append(this.$container), this.variableControl = new t.VA.Core.Views.SetVariable(this.$container, {
        width: "100%",
        height: "calc(100% - 30px)",
        editor: this.options.modelEditor,
        isFixedVariable: !0,
        isNormalType: !0,
        onChange: function onChange(t, e) {
          o.createOnChangeCommand(t, e);
        }
      });
    });
  }, r.prototype.renderModelIdControl = function (t) {
    var e = this.options.fnUnit.param.mid;
    e ? this.$elements.mid.val(e) : this.$elements.mid.jqxDropDownList("clearSelection"), this.renderTableSync();
  }, r.prototype.renderVersionIDControl = function (t) {
    var e = this.options.fnUnit.param.versionId,
        r = this.options.fnUnit.param.mid,
        n = !!Studio.getResourceManager().getFile(this.projectId, r);
    r && e ? n ? (this.$elements.versionId.val(this.getRenderedModel().getVersionId()), this.renderInputTableControl(), this.renderReturnTableControl(), this.renderVariablesControl()) : (this.$elements.versionId.jqxDropDownList({
      source: [o]
    }), this.$elements.versionId.val(""), this.renderInputTableControl(), this.renderReturnTableControl(), this.renderVariablesControl()) : (this.$elements.versionId.val(""), this.renderInputTableControl(), this.renderReturnTableControl(), this.renderVariablesControl()), this.renderTableSync();
  }, r.prototype.renderVariablesControl = function (t) {
    var e = t || this.options.fnUnit.param.variables,
        o = [];

    for (var r in e) {
      o.push({
        name: r,
        type: e[r].type,
        value: e[r].value
      });
    }

    this.variableControl.renderValues(o);
  }, r.prototype.renderInputTableControl = function () {
    this.$inputTableContainer.empty(), this.createSelectedTableElements(this.$inputTableContainer, this.getInputData());
  }, r.prototype.renderReturnTableControl = function () {
    this.$returnTableContainer.empty(), this.createSelectedTableElements(this.$returnTableContainer, this.getReturnData());
  }, r.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "mid" === this.problems[t].param && this.createValidationContent(this.$cont, this.problems[t]), "versionId" === this.problems[t].param && this.createValidationContent(this.$elements.versionId, this.problems[t]);
    }
  }, r.prototype.createOnRemoveCommand = function (e) {
    var o = e.name,
        r = this.options.fnUnit.param.variables,
        n = [];

    for (var a in r) {
      r[a].name !== o && n.push(r[a]);
    }

    var i = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          variables: n
        }
      }
    },
        s = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, i);
    this.executeCommand(s);
  }, r.prototype.createOnChangeCommand = function (e, o) {
    var r = e.name,
        n = this.options.fnUnit.param.variables,
        a = {};

    for (var i in n) {
      i !== r ? a[i] = n[i] : (a[i] = {}, a[i].type = o.type, a[i].value = o.param.value);
    }

    var s = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          variables: a
        }
      }
    },
        l = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, s);
    this.executeCommand(l);
  }, r.prototype.calcDropdownHeight = function (t, e) {
    return Math.min(e * t, 150) + "px";
  }, r.prototype.refreshModels = function () {
    var t = this,
        e = _.chain(Studio.getResourceManager().getFiles(this.projectId)).filter(function (e) {
      return "data" === e.getType() && e.getFileId() !== t.getEditor().getEditorInput().getFileId();
    }).map(function (t) {
      return {
        label: _.escape(t.getLabel()),
        value: t.getFileId()
      };
    }).value();

    this.$elements.mid.jqxDropDownList({
      source: e,
      dropDownHeight: this.calcDropdownHeight(e.length, 25)
    });
  }, r.prototype.refreshVersions = function () {
    var t = this,
        r = this.projectId,
        n = this.getFnUnit().param.mid;
    !!Studio.getResourceManager().getFile(r, n) ? e.VersionDao.getVersionsForced(r, n, function (e) {
      var r = [o].concat(_.map(e, function (t) {
        return {
          label: t.getVersion(),
          value: t.getVersionId()
        };
      }));
      t.$elements.versionId.jqxDropDownList({
        source: r,
        dropDownHeight: t.calcDropdownHeight(r.length, 25)
      });
    }) : (this.$elements.versionId.jqxDropDownList({
      source: [o],
      dropDownHeight: this.calcDropdownHeight(0, 25)
    }), this.$elements.versionId.val(""));
  }, r.prototype.renderTableSync = function () {
    var t,
        e,
        o = this.getFnUnit().param.mid,
        r = this.getFnUnit().param.versionId,
        n = Studio.getResourceManager().getFile(this.projectId, o),
        a = n ? n.getContents() : void 0,
        i = o && !r && a && (t = a.variables, e = this.getParam("variables"), !(0 === _.xor(_.keys(t), _.keys(e)).length) || a[OUT_DATA].length !== this.getFnUnit()[OUT_DATA].length);
    this.$elements.sync.jqxButton({
      disabled: !i
    });
  }, r.prototype.refresh = function () {
    this.refreshModels(), this.refreshVersions(), this.renderTableSync(), this.renderInputTableControl(), this.renderReturnTableControl(), this.renderVariablesControl(this.getParam("variables")), this.getFnUnit().hasOwnProperty("parent") && Studio.getInstance().doValidate(this.getModel());
  }, r.prototype.createOutTableSyncCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        outData: []
      }
    },
        r = Studio.getResourceManager().getFile(this.projectId, e);
    return o.ref[OUT_DATA] = this.generateNewOutDataList(r.getContents()[OUT_DATA]), new t.VA.Core.Editors.Diagram.Commands.NewOutTableCommand(this, o);
  }, r.prototype.createInTableSyncCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        inData: []
      }
    },
        r = Studio.getResourceManager().getFile(this.projectId, e).getContents();
    return o.ref[IN_DATA] = _.take(this.options.fnUnit[IN_DATA], parseInt(Math.min(r[IN_DATA].length, this.options.fnUnit[IN_DATA].length))), new t.VA.Core.Editors.Diagram.Commands.ChangeIntableCommand(this, o);
  }, r.prototype._calcVariables = function (t, e) {
    return Object.keys(e).reduce(function (o, r) {
      return o[r] = _.cloneDeep(_.has(t, r) ? t[r] : e[r]), o;
    }, {});
  }, r.prototype.createVariablesSyncCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: []
      }
    },
        r = Studio.getResourceManager().getFile(this.projectId, e).getContents(),
        n = this.getParam("variables"),
        a = r.variables,
        i = this._calcVariables(n, a);

    return o.ref.param.variables = i, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, r.prototype.createModelSyncCommand = function (e) {
    var o = new t.VA.Core.CompoundCommand(this, {
      label: "Refresh Flow"
    });
    return o.add(this.createOutTableSyncCommand(e)), o.add(this.createVariablesSyncCommand(e)), o;
  }, r.prototype.getRenderedModel = function (t, o) {
    if (this.cached) return this.cached;
    var r = this,
        n = this.projectId,
        a = _.isUndefined(t) ? this.getParam("mid") : t,
        i = _.isUndefined(o) ? this.getParam("versionId") : o;
    return a && i ? e.VersionDao.getVersionForced(n, a, i, function (t) {
      r.cached = t;
    }) : a && (r.cached = Studio.getResourceManager().getFile(n, a)), this.cached;
  }, t.VA.Core.Functions.Library.flow.propertiesPanel = r;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addModelRule(), this.addModelIdRule(), this.addVersionIdRule(), this.addSyncTableRule();
  }, e.prototype.addLinkRule = function () {}, e.prototype.addInTableRule = function () {}, e.prototype.addModelRule = function () {
    var t = function t(_t) {
      if (!_t) return !0;
      var e = Studio.getResourceManager().getFile(void 0, _t);
      return !_.isUndefined(e);
    };

    this.addRule(function (e) {
      if (t(e.param.mid)) return [];
      return this.problemFactory.createProblem({
        errorCode: "EI001",
        param: "mid"
      }, e);
    }), this.addRule(function (e) {
      if (t(e.param.mid)) return [];
      return this.problemFactory.createProblem({
        errorCode: "EI001",
        param: "versionId"
      }, e);
    });
  }, e.prototype.addModelIdRule = function (t) {
    var e = this;
    this.addRule(function (t) {
      return e._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "mid",
        messageParam: ["Model"]
      }, t, t.param.mid);
    });
  }, e.prototype.addVersionIdRule = function (t) {}, e.prototype.addSyncTableRule = function (t) {
    this.addRule(function (t) {
      var e,
          o,
          r = t.param.mid,
          n = t.param.versionId,
          a = Studio.getResourceManager().getFile(this.projectId, r),
          i = a ? a.getContents() : void 0;

      if (r && !n && i && (e = i.variables, o = t.param.variables, !(0 === _.xor(_.keys(e), _.keys(o)).length) || i[OUT_DATA].length !== t[OUT_DATA].length)) {
        return this.problemFactory.createProblem({
          errorCode: "EI002",
          param: "mid"
        }, t);
      }
    });
  }, t.VA.Core.Functions.Library.flow.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.forLoop = {
    category: "control",
    defaultFnUnit: {
      func: "forLoop",
      name: "ForLoop",
      inData: [],
      outData: [],
      param: {
        mid: "",
        type: "count",
        prop: {
          start: "",
          end: "",
          "index-variable": ""
        }
      },
      display: {
        label: "For Loop",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This functions that perform iterations while satisfying the condition",
    tags: ["loop", "for", "condition"],
    "in-range": {
      min: 1,
      max: 10
    },
    "out-range": {
      min: 0,
      max: 10
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = this.__module__.ObjectUtils.get;

  function o(e, o) {
    this.tempIdArray = [], t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.call(this, e, o);
  }

  o.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype), o.prototype.constructor = o, o.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, o.prototype.handleSetFnUnitCommand = function (t) {
    this.options.fnUnit.fid != t.options.fnUnit.fid || "UNDO" !== t.event.type && "REDO" !== t.event.type || (this.renderPersistButton(), this.renderValues(t));
  }, o.prototype.handleChangeOutTableCommand = function (t) {}, o.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid != t.options.fnUnit.fid || "UNDO" !== t.event.type && "REDO" !== t.event.type || this.renderValues(t);
  }, o.prototype.handleGlobalVariableCommand = function (t) {}, o.prototype.createIntableControl = function () {
    var t = this;

    if (void 0 !== this.options.fnUnit[IN_DATA]) {
      var e = this.getFunctionDef()["in-range"].min || 1;
      this.$intableControl = $('<div class="brtc-va-editors-sheet-controls-property-in-table-control-columnlist"/>'), this.addPropertyInTableControl("In Table", function (o) {
        o.append(t.$intableControl);
        var r = {
          fnUnit: t.options.fnUnit,
          editor: t.options.modelEditor,
          minRow: e
        };
        e > 1 && (r.rowHeaderType = "number"), this._intableControlOption && $.extend(!0, r, this._intableControlOption), t._intableControl = t.createInTableList(t.$intableControl, r);
      });
    }
  }, o.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationArea = {
      count: {},
      collection: {}
    }, this.template = [{
      label: "Count",
      paramValue: "count",
      controls: [{
        label: "Start",
        paramKey: "start",
        type: "expression",
        mandatory: !0
      }, {
        label: "End",
        paramKey: "end",
        type: "expression",
        mandatory: !0
      }, {
        label: "Index Variable",
        paramKey: "index-variable",
        type: "variable"
      }]
    }, {
      label: "Collection",
      paramValue: "collection",
      controls: [{
        label: "Collection",
        paramKey: "collection",
        type: "expression",
        mandatory: !0
      }, {
        label: "Element Variable",
        paramKey: "element-variable",
        type: "variable"
      }, {
        label: "Index Variable",
        paramKey: "index-variable",
        type: "variable"
      }]
    }], this.prvVal = {}, this.createLoopControls(), this.renderLoopControls(this.options.fnUnit.param.type);
  }, o.prototype.renderValidation = function () {
    var t = this;

    _.forEach(this.problems, function (e) {
      if (e.param.indexOf("/") > -1) {
        var o = e.param.split("/"),
            r = t.getValidationArea(o[0], o[1]);
        t.createValidationContent(r, e);
      }
    });
  }, o.prototype.renderOperationValues = function (t) {
    this.renderLoopControls(this.options.fnUnit.param.type);
  }, o.prototype.renderRadioButton = function () {
    var t = this.options.fnUnit.param.type;

    if (void 0 !== t) {
      for (var e = 0; e < this.template.length; e++) {
        if (t === this.template[e].paramValue) {
          this.template[e].$radio.jqxRadioButton("check");
          break;
        }
      }
    } else this.template[0].$radio.jqxRadioButton("check");
  }, o.prototype.createLoopControls = function () {
    var e = this.template,
        o = this,
        r = this.options.fnUnit;
    this.addPropertyControl("Loop Type", function (n) {
      _.forEach(e, function (e) {
        e.$radio = o.createRadioButton($('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton-looptype">' + e.label + "</div>"), {
          groupName: "loop-type",
          checked: e.paramValue === o.options.fnUnit.param.type
        }), n.append(e.$radio), e.$radio.on("checked", function (e) {
          return function () {
            if (r.param.type !== e.paramValue) {
              var n = new t.VA.Core.CompoundCommand(o, {
                label: "Change FnUnit Properties"
              });
              n.add(new t.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(o, {
                fnUnit: r,
                path: ["param", "type"],
                value: e.paramValue
              }));
              var a = {};
              _.forEach(e.controls, function (t) {
                a[t.paramKey] = "";
              }), n.add(new t.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(o, {
                fnUnit: r,
                path: ["param", "prop"],
                value: a
              })), o.executeCommand(n), o.renderLoopControls(e.paramValue);
            }
          };
        }(e));
      });
    }, {
      mandatory: !0
    }), _.forEach(e, function (t) {
      _.forEach(t.controls, function (e) {
        e.$el = o.addPropertyControl(e.label, function (r) {
          var n = $(crel("textarea"));
          r.append(n), e.$input = o.getInputByType(e.type, n, e.paramKey), o.validationArea[t.paramValue][e.paramKey] = r;
        }, {
          mandatory: e.mandatory
        }), e.$el.hide();
      });
    });
  }, o.prototype.getInputByType = function (o, r, n) {
    var a = this,
        i = ["param", "prop", n],
        s = function s(o) {
      var r = o || "";

      if ((e(a.options.fnUnit, i) || "") !== r) {
        var n = {
          fnUnit: a.options.fnUnit,
          label: "Change FnUnit Properties",
          path: i,
          value: r
        },
            s = new t.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(a, n);
        a.executeCommand(s);
      }
    };

    return "expression" === o ? a.createCodeMirror(r, {
      placeholder: "Expression",
      width: "100%"
    }, !0, s) : "variable" === o ? a.createCodeMirror(r, {
      placeholder: "Enter Variable",
      width: "100%"
    }, !1, s) : void 0;
  }, o.prototype.renderLoopControls = function (t) {
    var e = this;
    this.prvVal = {};

    var o = _.findIndex(this.template, function (e) {
      return e.paramValue === t;
    });

    if (-1 === o) return !1;

    _.forEach(this.template, function (t) {
      _.forEach(t.controls, function (t) {
        return t.$el.hide();
      });
    });

    var r = this.template[o].controls;
    _.forEach(r, function (t) {
      t.$el.show(), t.$input.setValue(e.options.fnUnit.param.prop[t.paramKey]);
    }), this.template[o].$radio.jqxRadioButton("check");
  }, o.prototype.bindRemoveButtonClickListener = function (e, o, r) {
    var n = this;
    e.click(function (e) {
      var a = {
        fnUnit: n.options.fnUnit,
        label: "Change FnUnit Properties",
        path: o instanceof Array ? o : o()
      },
          i = new t.VA.Core.Editors.Diagram.Commands.RemoveOperationCommand(n, a);
      n.executeCommand(i), r && r();
    });
  }, o.prototype.bindAddButtonClickListener = function (e, o, r, n) {
    var a = this;
    e.click(function (e) {
      var i = {
        fnUnit: a.options.fnUnit,
        label: "Change FnUnit Properties",
        path: o instanceof Array ? o : o(),
        value: r
      },
          s = new t.VA.Core.Editors.Diagram.Commands.AddOperationCommand(a, i);
      a.executeCommand(s), n && n();
    });
  }, o.prototype.createCodeMirror = function (e, o, r, n) {
    var a,
        i,
        s = _.merge({}, {
      mode: "brtc-control",
      scrollbarStyle: "null",
      lineWrapping: !1,
      matchBrackets: !1,
      extraKeys: {
        "Ctrl-Space": "autocomplete",
        Tab: !1,
        "Shift-Tab": !1
      },
      showTrailingSpace: !0
    }, o),
        l = CodeMirror.fromTextArea(e[0], s),
        c = this,
        p = (a = r, i = l, {
      setValue: function setValue(t) {
        var e = function (t, e) {
          var o = _.isUndefined(t) ? "" : t;
          return e && c.test(o) ? o.substring(3, o.length - 1) : o;
        }(t, a);

        i.setValue(e);
      },
      getValue: function getValue() {
        var t = i.getValue();
        return a ? "${=" + t + "}" : t;
      },
      refresh: function refresh() {
        i.refresh();
      }
    });

    return t.VA.Core.Utils.WidgetUtils.changeCodeMirrorLineToSingle(l), l.on("blur", function (t, e) {
      t.state.focused && n(p.getValue());
    }), p;
  }, o.prototype.test = function (t) {
    return _.startsWith(t, "${=") && _.endsWith(t, "}");
  }, o.prototype.getValidationArea = function (t, e) {
    return this.validationArea[t][e];
  }, t.VA.Core.Functions.Library.forLoop.propertiesPanel = o;
}.call(this), function (t) {
  "use strict";

  var e = t.Brightics,
      o = {
    count: [{
      prop: "start",
      type: "expression",
      msg: "Start"
    }, {
      prop: "end",
      type: "expression",
      msg: "End"
    }],
    collection: [{
      prop: "collection",
      type: "expression",
      msg: "Collection"
    }]
  };

  function r() {
    e.VA.Core.Validator.SingleInputValidator.call(this);
  }

  r.prototype = Object.create(e.VA.Core.Validator.SingleInputValidator.prototype), r.prototype.constructor = r, r.prototype.initRules = function () {
    e.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addForLoopRule();
  }, r.prototype.addLinkRule = function () {}, r.prototype.addInTableRule = function () {}, r.prototype.addForLoopRule = function () {
    var t = this;
    this.addRule(function (e) {
      var r = e.param,
          n = o[r.type];
      return _.chain(n).map(function (o) {
        if (t.isEmpty(r, o)) return t.problemFactory.createProblem(function (t, e) {
          return {
            errorCode: "BR-0033",
            param: t.join("/"),
            messageParam: [e]
          };
        }([r.type, o.prop], o.msg), e);
      }).compact().value();
    });
  }, r.prototype.isEmpty = function (t, e) {
    var o = t.prop[e.prop];
    return "expression" === e.type ? this.isEmptyExpression(o) : this.isEmptyVariable(o);
  }, r.prototype.isEmptyVariable = function (t) {
    return !_.trim(t);
  }, r.prototype.isEmptyExpression = function (t) {
    var e = t.substring(3, t.length - 1);
    return !_.trim(e);
  }, e.VA.Core.Functions.Library.forLoop.validator = r;
}(this, Brightics), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.if = {
    category: "control",
    defaultFnUnit: {
      func: "if",
      name: "If",
      inData: [],
      outData: [],
      param: {
        if: {
          expression: "${=true}",
          mid: ""
        },
        elseif: [],
        else: {
          mid: ""
        }
      },
      display: {
        label: "Condition",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function that executes a branch based on a condition",
    tags: ["if", "else if", "else", "condition"],
    "in-range": {
      min: 1,
      max: 10
    },
    "out-range": {
      min: 0,
      max: 10
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = this.__module__.ObjectUtils.get;

  function o(e, o) {
    this.tempIdArray = [], t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.call(this, e, o);
  }

  o.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype), o.prototype.constructor = o, o.prototype.handleSetFnUnitCommand = function (t) {
    this.options.fnUnit.fid != t.options.fnUnit.fid || "UNDO" !== t.event.type && "REDO" !== t.event.type || (this.renderPersistButton(), this.renderValues(t));
  }, o.prototype.handleChangeOutTableCommand = function (t) {}, o.prototype.handleSetFnUnitParameterValueCommand = function (t) {
    this.options.fnUnit.fid != t.options.fnUnit.fid || "UNDO" !== t.event.type && "REDO" !== t.event.type || this.renderValues(t);
  }, o.prototype.handleGlobalVariableCommand = function (t) {}, o.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, o.prototype.createIntableControl = function () {
    var t = this;

    if (void 0 !== this.options.fnUnit[IN_DATA]) {
      var e = this.getFunctionDef()["in-range"].min || 1;
      this.$intableControl = $('<div class="brtc-va-editors-sheet-controls-property-in-table-control-columnlist"/>'), this.addPropertyInTableControl("In Table", function (o) {
        o.append(t.$intableControl);
        var r = {
          fnUnit: t.options.fnUnit,
          editor: t.options.modelEditor,
          minRow: e
        };
        e > 1 && (r.rowHeaderType = "number"), this._intableControlOption && $.extend(!0, r, this._intableControlOption), t._intableControl = t.createInTableList(t.$intableControl, r);
      });
    }
  }, o.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.createIfControl(), this.createElseIfArea(), this.createElseIfAddButton(), this.renderIfValue(), this.renderElseIfValue();
  }, o.prototype.renderOperationValues = function (t) {
    this.renderIfValue(), this.renderElseIfValue();
  }, o.prototype.fillControlValues = function () {}, o.prototype.renderValidation = function () {
    var t = this,
        e = $(".brtc-va-editors-sheet-controls-else-if-wrapper");

    _.forEach(this.problems, function (o) {
      if ("if" === o.param) t.createValidationContent(t.$ifControlWrapper, o);else if (o.param.indexOf("_") > -1) {
        var r = o.param.split("_")[1],
            n = $(e[r]);
        t.createValidationContent(n, o);
      }
    });
  }, o.prototype.createIfControl = function () {
    var t = this;
    this.addPropertyControl("If", function (e) {
      t.$ifControl = $(crel("textarea")), e.append(t.$ifControl), t.$input = t.getInputByType("expression", t.$ifControl, "expression", "if"), t.$ifControlWrapper = e;
    }, {
      mandatory: !0
    });
  }, o.prototype.createElseIfArea = function () {
    this.$elseIfInputArea = $(crel("div")), this.$contentsArea.append(this.$elseIfInputArea);
  }, o.prototype.createElseIfAddButton = function () {
    var t = this;
    t.$elseIfAddButton = t.createBarButton($(crel("input", {
      class: "brtc-va-editors-sheet-controls-propertycontrol-columnlist",
      type: "button",
      value: "+ Add Else If"
    }))), t.$elseIfAddButton.css({
      "margin-top": "5px"
    }), t.$contentsArea.append(t.$elseIfAddButton), t.$elseIfAddButton.click(function (e) {
      var o = t.newElseIf();
      t.createElseIfControl(o.path, o.mid);
    });
  }, o.prototype.createElseIfControl = function (t, o) {
    var r = this,
        n = function n(t) {
      var o = e(r.options.fnUnit, ["param", "elseif"]);
      return _.findIndex(o, function (e) {
        return e.mid === t;
      });
    };

    this.addPropertyControl("Else If", function (a) {
      a.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), a.addClass("brtc-va-editors-sheet-controls-else-if-wrapper");
      var i = r.createElseIfRow(t, o);
      a.append(i), r.$elseIfInput.setValue(e(r.options.fnUnit, ["param", "elseif"].concat([n(o), "expression"]))), r.createElseIfRemoveButton(a, o);
    }, {
      propertyControlParent: r.$elseIfInputArea,
      mandatory: !0
    });
  }, o.prototype.createElseIfRemoveButton = function (t, e) {
    var o = this,
        r = t.siblings(".brtc-va-editors-sheet-controls-propertycontrol-label"),
        n = $('<div class="brtc-va-if-property remove-else-if-button brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
    r.append(n), n.click(function (t) {
      o.deleteElseIf(e), $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol").remove(), t.stopPropagation();
    });
  }, o.prototype.createElseIfRow = function (t, o) {
    var r = this,
        n = function n(o) {
      var n = e(r.options.fnUnit, t);
      return _.findIndex(n, function (t) {
        return t.mid === o;
      });
    };

    r.$elseIf = $(crel("div")), r.$elseIfControl = $(crel("textarea")), r.$elseIf.append(r.$elseIfControl), r.$elseIfInput = r.getInputByType("expression", r.$elseIfControl, "expression", "elseif", t.concat([n(o), "expression"]));
    var a = $(crel("div", r.$elseIf[0]));
    return a.css({
      height: "25px",
      "margin-bottom": "10px"
    }), a;
  }, o.prototype.newElseIf = function () {
    var e = this.options.fnUnit,
        o = t.VA.Core.Utils.IDGenerator.model.id(),
        r = {
      expression: "${=true}",
      mid: o
    },
        n = ["param", "elseif"],
        a = {
      fnUnit: e,
      path: n.concat(e.param.elseif.length),
      value: r
    },
        i = new t.VA.Core.Editors.Diagram.Commands.AddOperationCommand(this, a),
        s = new t.VA.Core.Editors.Diagram.Commands.NewActivityCommand(this, {
      fnUnit: e,
      mid: o,
      type: "if",
      conditionType: "elseif"
    }),
        l = e.parent().getMainModel(),
        c = e[IN_DATA],
        p = new t.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(this, {
      target: l.getInnerModels(),
      path: [o, IN_DATA],
      value: c
    }),
        u = new t.VA.Core.CompoundCommand(this, {
      label: "Add Condition"
    });
    return u.add(i), u.add(s), u.add(p), this.executeCommand(u), {
      path: n,
      mid: o
    };
  }, o.prototype.deleteElseIf = function (e) {
    var o = this.options.fnUnit,
        r = new t.VA.Core.CompoundCommand(this, {
      label: "Remove Condition"
    }),
        n = new t.VA.Core.Editors.Diagram.Commands.RemoveActivityCommand(this, {
      mid: e
    }),
        a = _.findIndex(o.param.elseif, function (t) {
      return t.mid == e;
    });

    if (-1 == a) return !1;
    var i = ["param", "elseif", a],
        s = new t.VA.Core.Editors.Diagram.Commands.RemoveOperationCommand(this, {
      fnUnit: o,
      path: i
    });
    return r.add(n), r.add(s), this.executeCommand(r), !0;
  }, o.prototype.renderIfValue = function () {
    var t = this.options.fnUnit;
    this.$input.setValue(t.param.if.expression);
  }, o.prototype.renderElseIfValue = function () {
    this.$elseIfInputArea.empty();
    var t,
        e = this.options.fnUnit.param.elseif;

    for (t = 0; t < e.length; t++) {
      this.createElseIfControl(["param", "elseif"], e[t].mid);
    }
  }, o.prototype.bindRemoveButtonClickListener = function (e, o, r) {
    var n = this;
    e.click(function (e) {
      var a = {
        fnUnit: n.options.fnUnit,
        label: "Change FnUnit Properties",
        path: o instanceof Array ? o : o()
      },
          i = new t.VA.Core.Editors.Diagram.Commands.RemoveOperationCommand(n, a);
      n.executeCommand(i), r && r();
    });
  }, o.prototype.bindAddButtonClickListener = function (e, o, r, n) {
    var a = this;
    e.click(function (e) {
      var i = {
        fnUnit: a.options.fnUnit,
        label: "Change FnUnit Properties",
        path: o instanceof Array ? o : o(),
        value: r
      },
          s = new t.VA.Core.Editors.Diagram.Commands.AddOperationCommand(a, i);
      a.executeCommand(s), n && n();
    });
  }, o.prototype.getInputByType = function (o, r, n, a, i) {
    var s = this,
        l = ["param", a, n];
    i && (l = i);

    var c = function c(o) {
      var r = o || "";

      if ((e(s.options.fnUnit, l) || "") !== r) {
        var n = {
          fnUnit: s.options.fnUnit,
          label: "Change FnUnit Properties",
          path: l,
          value: r
        },
            a = new t.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(s, n);
        s.executeCommand(a);
      }
    };

    return "expression" === o ? s.createCodeMirror(r, {
      placeholder: "Expression",
      width: "100%"
    }, !0, c) : "variable" === o ? s.createCodeMirror(r, {
      placeholder: "Enter Variable",
      width: "100%"
    }, !1, c) : void 0;
  }, o.prototype.createCodeMirror = function (e, o, r, n) {
    var a,
        i = _.merge({}, {
      mode: "brtc-control",
      scrollbarStyle: "null",
      lineWrapping: !1,
      matchBrackets: !1,
      extraKeys: {
        "Ctrl-Space": "autocomplete",
        Tab: !1,
        "Shift-Tab": !1
      },
      showTrailingSpace: !0
    }, o),
        s = CodeMirror.fromTextArea(e[0], i),
        l = (a = s, {
      setValue: function setValue(t) {
        var e = function (t) {
          var e = _.isUndefined(t) ? "${=}" : t;
          return _.startsWith(e, "${=") && _.endsWith(e, "}") || (e = "${=" + e + "}"), e.substring(3, e.length - 1);
        }(t);

        a.setValue(e);
      },
      getValue: function getValue() {
        return "${=" + a.getValue() + "}";
      },
      refresh: function refresh() {
        a.refresh();
      }
    });

    return t.VA.Core.Utils.WidgetUtils.changeCodeMirrorLineToSingle(s), s.on("blur", function () {
      n(l.getValue());
    }), l;
  }, t.VA.Core.Functions.Library.if.propertiesPanel = o;
}.call(this), function (t) {
  "use strict";

  var e = t.Brightics;

  function o() {
    e.VA.Core.Validator.SingleInputValidator.call(this);
  }

  o.prototype = Object.create(e.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    e.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addConditionRule();
  }, o.prototype.addLinkRule = function () {}, o.prototype.addInTableRule = function () {}, o.prototype.addConditionRule = function () {
    var t = this,
        e = function e(t, _e) {
      return {
        errorCode: "BR-0033",
        param: t.join("_"),
        messageParam: [_e]
      };
    };

    this.addRule(function (o) {
      var r = o.param;
      return [].concat(function (r) {
        if (t.isEmptyExpression(r)) return t.problemFactory.createProblem(e(["if"], "If"), o);
      }(r.if.expression)).concat(_.chain(r.elseif).map("expression").map(function (r, n) {
        if (t.isEmptyExpression(r)) return t.problemFactory.createProblem(e(["elseif", n], "Else If"), o);
      }).compact().value());
    });
  }, o.prototype.isEmptyExpression = function (t) {
    var e = t.substring(3, t.length - 1);
    return !_.trim(e);
  }, e.VA.Core.Functions.Library.if.validator = o;
}(this, Brightics), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.whileLoop = {
    category: "control",
    defaultFnUnit: {
      func: "whileLoop",
      name: "WhileLoop",
      inData: [],
      outData: [],
      param: {
        mid: "",
        type: "while",
        prop: {
          expression: "",
          "index-variable": ""
        }
      },
      display: {
        label: "While Loop",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Functions that perform iterations while satisfying the condition",
    tags: ["while", "loop", "condition"],
    "in-range": {
      min: 1,
      max: 10
    },
    "out-range": {
      min: 0,
      max: 10
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = this.__module__.ObjectUtils.get;

  function o(e, o) {
    this.tempIdArray = [], t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.call(this, e, o);
  }

  o.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype), o.prototype.constructor = o, o.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, o.prototype.createIntableControl = function () {
    var t = this;

    if (void 0 !== this.options.fnUnit[IN_DATA]) {
      var e = this.getFunctionDef()["in-range"].min || 1;
      this.$intableControl = $('<div class="brtc-va-editors-sheet-controls-property-in-table-control-columnlist"/>'), this.addPropertyInTableControl("In Table", function (o) {
        o.append(t.$intableControl);
        var r = {
          fnUnit: t.options.fnUnit,
          editor: t.options.modelEditor,
          minRow: e
        };
        e > 1 && (r.rowHeaderType = "number"), this._intableControlOption && $.extend(!0, r, this._intableControlOption), t._intableControl = t.createInTableList(t.$intableControl, r);
      });
    }
  }, o.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.InnerPropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationArea = {
      while: {}
    }, this.template = [{
      label: "While",
      paramValue: "while",
      controls: [{
        label: "Expression",
        paramKey: "expression",
        type: "expression",
        mandatory: !0
      }, {
        label: "Index Variable",
        paramKey: "index-variable",
        type: "variable",
        mandatory: !1
      }]
    }], this.prvVal = {}, this.createLoopControls(), this.renderLoopControls(this.options.fnUnit.param.type);
  }, o.prototype.renderOperationValues = function (t) {
    this.renderLoopControls(this.options.fnUnit.param.type);
  }, o.prototype.createLoopControls = function () {
    var t = this.template,
        e = this;

    _.forEach(t, function (t) {
      _.forEach(t.controls, function (o) {
        o.$el = e.addPropertyControl(o.label, function (r) {
          var n = $(crel("textarea"));
          r.append(n), o.$input = e.getInputByType(o.type, n, o.paramKey), e.validationArea[t.paramValue][o.paramKey] = r;
        }, {
          mandatory: o.mandatory
        }), o.$el.hide();
      });
    });
  }, o.prototype.getInputByType = function (o, r, n) {
    var a = this,
        i = ["param", "prop", n],
        s = function s(o) {
      var r = o || "";

      if ((e(a.options.fnUnit, i) || "") !== r) {
        var n = {
          fnUnit: a.options.fnUnit,
          label: "Change FnUnit Properties",
          path: i,
          value: r
        },
            s = new t.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(a, n);
        a.executeCommand(s);
      }
    };

    return "expression" === o ? a.createCodeMirror(r, {
      placeholder: "Expression",
      width: "100%"
    }, !0, s) : "variable" === o ? a.createCodeMirror(r, {
      placeholder: "Enter Variable",
      width: "100%"
    }, !1, s) : void 0;
  }, o.prototype.renderLoopControls = function (t) {
    var e = this;
    this.prvVal = {};

    var o = _.findIndex(this.template, function (e) {
      return e.paramValue === t;
    });

    if (-1 === o) return !1;

    _.forEach(this.template, function (t) {
      _.forEach(t.controls, function (t) {
        return t.$el.hide();
      });
    });

    var r = this.template[o].controls;

    _.forEach(r, function (t) {
      t.$el.show(), t.$input.setValue(e.options.fnUnit.param.prop[t.paramKey]);
    });
  }, o.prototype.bindRemoveButtonClickListener = function (e, o, r) {
    var n = this;
    e.click(function (e) {
      var a = {
        fnUnit: n.options.fnUnit,
        label: "Change FnUnit Properties",
        path: o instanceof Array ? o : o()
      },
          i = new t.VA.Core.Editors.Diagram.Commands.RemoveOperationCommand(n, a);
      n.executeCommand(i), r && r();
    });
  }, o.prototype.bindAddButtonClickListener = function (e, o, r, n) {
    var a = this;
    e.click(function (e) {
      var i = {
        fnUnit: a.options.fnUnit,
        label: "Change FnUnit Properties",
        path: o instanceof Array ? o : o(),
        value: r
      },
          s = new t.VA.Core.Editors.Diagram.Commands.AddOperationCommand(a, i);
      a.executeCommand(s), n && n();
    });
  }, o.prototype.fillControlValues = function () {}, o.prototype.createCodeMirror = function (e, o, r, n) {
    var a,
        i,
        s = _.merge({}, {
      mode: "brtc-control",
      scrollbarStyle: "null",
      lineWrapping: !1,
      matchBrackets: !1,
      extraKeys: {
        "Ctrl-Space": "autocomplete",
        Tab: !1,
        "Shift-Tab": !1
      },
      showTrailingSpace: !0
    }, o),
        l = CodeMirror.fromTextArea(e[0], s),
        c = this,
        p = (a = r, i = l, {
      setValue: function setValue(t) {
        var e = function (t, e) {
          var o = _.isUndefined(t) ? "" : t;
          return e && c.test(o) ? o.substring(3, o.length - 1) : o;
        }(t, a);

        i.setValue(e);
      },
      getValue: function getValue() {
        var t = i.getValue();
        return a ? "${=" + t + "}" : t;
      },
      refresh: function refresh() {
        i.refresh();
      }
    });

    return t.VA.Core.Utils.WidgetUtils.changeCodeMirrorLineToSingle(l), l.on("blur", function (t, e) {
      t.state.focused && n(p.getValue());
    }), p;
  }, o.prototype.test = function (t) {
    return _.startsWith(t, "${=") && _.endsWith(t, "}");
  }, o.prototype.renderValidation = function () {
    var t = this;

    _.forEach(this.problems, function (e) {
      if (e.param.indexOf("/") > -1) {
        var o = e.param.split("/"),
            r = t.getValidationArea(o[0], o[1]);
        t.createValidationContent(r, e);
      }
    });
  }, o.prototype.getValidationArea = function (t, e) {
    return this.validationArea[t][e];
  }, t.VA.Core.Functions.Library.whileLoop.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = {
    while: [{
      prop: "expression",
      type: "expression",
      msg: "Expression"
    }]
  };

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addWhileLoopRule();
  }, o.prototype.addLinkRule = function () {}, o.prototype.checkLinkIsConnected = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    };
    if (!this._hasPrevious(t)) return this.problemFactory.createProblem(e, t);
  }, o.prototype.addWhileLoopRule = function () {
    var t = this;
    this.addRule(function (o) {
      var r = o.param,
          n = e[r.type];
      return _.chain(n).map(function (e) {
        if (t.isEmpty(r, e)) return t.problemFactory.createProblem(function (t, e) {
          return {
            errorCode: "BR-0033",
            param: t.join("/"),
            messageParam: [e]
          };
        }([r.type, e.prop], e.msg), o);
      }).compact().value();
    });
  }, o.prototype.isEmpty = function (t, e) {
    var o = t.prop[e.prop];
    return "expression" === e.type ? this.isEmptyExpression(o) : this.isEmptyVariable(o);
  }, o.prototype.isEmptyVariable = function (t) {
    return !_.trim(t);
  }, o.prototype.isEmptyExpression = function (t) {
    var e = t.substring(3, t.length - 1);
    return !_.trim(e);
  }, t.VA.Core.Functions.Library.whileLoop.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.dataFlow = {
    category: "dataFlow",
    defaultFnUnit: {
      func: "dataFlow",
      name: "DataFlow",
      param: {
        mid: "",
        pid: "",
        args: {}
      },
      display: {
        label: "DataFlow",
        description: "This is a unit of dataflow."
      }
    },
    description: "This function is Control Flow"
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.cnnPredict = {
    category: "deeplearning",
    defaultFnUnit: {
      func: "cnnPredict",
      name: "DL",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "show-tb": "true",
        "dl-func": "cnn_predict",
        "shape-image-x": "28",
        "shape-image-y": "28",
        "shape-image-z": "1"
      },
      display: {
        label: "CNN Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The idea behind CNNs (Convolution Neural Network) Predict is to make use of Matrix of Image information and TrainModel information.",
    tags: ["deep", "learning", "DL", "Deep Learning", "DeepLearning", "cnn", "predict", "cnnPredict", "CNN Predict"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addShapeImageXRule(), this.addShapeImageYRule(), this.addShapeImageZRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addShapeImageXRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["shape-image-x"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "shape-image-x",
        messageParam: ["Shape Image X"]
      }, e)), o;
    });
  }, e.prototype.addShapeImageYRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["shape-image-y"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "shape-image-y",
        messageParam: ["Shape Image Y"]
      }, e)), o;
    });
  }, e.prototype.addShapeImageZRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["shape-image-z"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "shape-image-z",
        messageParam: ["Shape Image Z"]
      }, e)), o;
    });
  }, t.VA.Core.Functions.Library.cnnPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.cnnTrain = {
    category: "deeplearning",
    defaultFnUnit: {
      func: "cnnTrain",
      name: "DL",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "show-tb": "true",
        "dl-func": "cnn",
        "shape-image-x": "28",
        "shape-image-y": "28",
        "shape-image-z": "1",
        "number-train": "100",
        "learning-rate": "0.001",
        "size-batch": "128",
        "size-test": "256",
        "shape-w": "3,3,1,32",
        "shape-w2": "3,3,32,64",
        "shape-w3": "3,3,64,128",
        "shape-w4": "2048,625",
        "shape-wo": "625,10"
      },
      display: {
        label: "CNN Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The idea behind CNNs (Convolution Neural Network) is to make use of Matrix of Image information.",
    tags: ["deep", "learning", "DL", "Deep Learning", "DeepLearning", "cnn", "train", "cnnTrain", "CNN Train"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addShapeImageXRule(), this.addShapeImageYRule(), this.addShapeImageZRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addShapeImageXRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["shape-image-x"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "shape-image-x",
        messageParam: ["Shape Image X"]
      }, e)), o;
    });
  }, e.prototype.addShapeImageYRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["shape-image-y"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "shape-image-y",
        messageParam: ["Shape Image Y"]
      }, e)), o;
    });
  }, e.prototype.addShapeImageZRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["shape-image-z"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "shape-image-z",
        messageParam: ["Shape Image Z"]
      }, e)), o;
    });
  }, t.VA.Core.Functions.Library.cnnTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.dlPredict = {
    category: "deeplearning",
    defaultFnUnit: {
      func: "dlPredict",
      name: "DLPredict",
      inData: [],
      outData: [],
      param: {
        checkpointPath: "",
        inputDataPath: "",
        batch_size: "32"
      },
      display: {
        label: "DL Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates DeepLearning prediction.",
    tags: ["deep", "learning", "DL", "Deep Learning", "DeepLearning", "mlp", "predict", "mlp predict", "DL Predict", "dlpredict"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      checkpointPath: this.renderCheckpointPath,
      inputDataPath: this.renderInputDataPath,
      batch_size: this.renderBatchSize
    }, this.createInputDataPathControl(), this.createCheckpointControl(), this.createBatchSizeControl();
  }, e.prototype.createInputDataPathControl = function () {
    var t = this;
    this.$inputDataPathControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), this.addPropertyControl("Input Data Path", function (e) {
      e.append(t.$inputDataPathControl);
      t.createInput(t.$inputDataPathControl, {
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$inputDataPathControl.on("change", function (e) {
        t.isInputValueChanged("inputDataPath", $(this).val()) && t.createInputCommand("inputDataPath", $(this).val());
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createCheckpointControl = function () {
    var e = this;
    this.$checkpointControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), this.addPropertyControl("Checkpoint", function (t) {
      t.append(e.$checkpointControl);
      e.createInput(e.$checkpointControl, {
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-12"), e.$checkpointControl.on("change", function (t) {
        e.isInputValueChanged("checkpointPath", $(this).val()) && e.createInputCommand("checkpointPath", $(this).val());
      });
    }, {
      mandatory: !0
    }), this.$checkpointControl.click(function () {
      new t.VA.Core.Dialogs.CheckpointBrowserDialog(this.$mainControl, {
        checkpointPath: e.options.fnUnit.param.checkpointPath,
        close: function close(t) {
          t.OK && e.$checkpointControl.val(t.checkpointPath);
        },
        title: "Select Checkpoint"
      });
    });
  }, e.prototype.createBatchSizeControl = function () {
    var t = this;
    this.$batchSize = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Batch Size", function (e) {
      e.append(this.$batchSize);
      t.batchSize = t.createNumericInput(t.$batchSize, {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: "Default: 32"
      }), t.batchSize.onChange(function () {
        t.createInputCommand("batch_size", this.getValue());
      });
    });
  }, e.prototype.fillControlValues = function (t) {}, e.prototype.renderCheckpointPath = function () {
    var t = this.options.fnUnit.param.checkpointPath;
    this.$checkpointControl.val(t);
  }, e.prototype.renderInputDataPath = function () {
    this.$inputDataPathControl.val(this.options.fnUnit.param.inputDataPath);
  }, e.prototype.renderBatchSize = function () {
    this.batchSize.setValue(this.options.fnUnit.param.batch_size);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "checkpointPath" === this.problems[t].param && this.createValidationContent(this.$checkpointControl.closest(".brtc-va-editors-sheet-controls-propertycontrol-contents"), this.problems[t]), "inputDataPath" === this.problems[t].param && this.createValidationContent(this.$inputDataPathControl.closest(".brtc-va-editors-sheet-controls-propertycontrol-contents"), this.problems[t]);
    }
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCheckpointCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e = e || "";
    o.ref.param.checkpointPath = e;
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
    this.executeCommand(r);
  }, t.VA.Core.Functions.Library.dlPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_INPUT_DATA_PATH = "inputDataPath", this.PARAM_CHECKPOINT_PATH = "checkpointPath", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputDataPathRule(), this.addCheckPointPathRule();
  }, e.prototype.addInputDataPathRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: t.PARAM_INPUT_DATA_PATH,
        messageParam: ["Input Data Path"]
      }, e, e.param[t.PARAM_INPUT_DATA_PATH]);
    });
  }, e.prototype.addCheckPointPathRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: t.PARAM_CHECKPOINT_PATH,
        messageParam: ["Checkpoint"]
      }, e, e.param[t.PARAM_CHECKPOINT_PATH]);
    });
  }, t.VA.Core.Functions.Library.dlPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.mlpPredict = {
    category: "deeplearning",
    defaultFnUnit: {
      func: "mlpPredict",
      name: "DL",
      inData: [],
      outData: [],
      param: {
        "data-columns": [[]],
        "show-tb": "true",
        "dl-func": "mlp_predict"
      },
      display: {
        label: "MLP Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predict output for given data using MLP Train model.",
    tags: ["deep", "learning", "DL", "Deep Learning", "DeepLearning", "mlp", "predict", "mlp predict"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.getPrimaryOperation = function () {
    return "MLPPredict";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_DATA_COLUMNS = "data-columns", this.render = {
      "show-tb": this.renderShowTb,
      "dl-func": this.renderDlFunc,
      "data-columns": this.renderDataColumns
    }, this.createDataColumnsControl();
  }, e.prototype.createDataColumnsControl = function (t) {
    var e = this;
    this.$dataColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Data Columns", function (t) {
      t.append(e.$dataColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          var r = e.columnListCommand(e.PARAM_DATA_COLUMNS, o.items);
          e.executeCommand(r);
        }
      };
      e.dataColumnsControl = e.createColumnList(e.$dataColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function (t) {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.dataColumnsControl.setItems(this.numberColumnArray);
  }, e.prototype.renderDataColumns = function () {
    var t = this.options.fnUnit.param[this.PARAM_DATA_COLUMNS];
    this.dataColumnsControl.setSelectedItems(t[0] || []);
  }, e.prototype.renderShowTb = function () {}, e.prototype.renderDlFunc = function () {}, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_DATA_COLUMNS && this.createValidationContent(this.$dataColumns, this.problems[t]);
    }
  }, e.prototype.columnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, t.VA.Core.Functions.Library.mlpPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_DATA_COLUMNS = "data-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addDataColumnsRule();
  }, e.prototype.addDataColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_DATA_COLUMNS, e.param["data-columns"], "Data Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_DATA_COLUMNS, e.param["data-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_DATA_COLUMNS, e.param[t.PARAM_DATA_COLUMNS], "number");
    });
  }, t.VA.Core.Functions.Library.mlpPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.mlpTrain = {
    category: "deeplearning",
    defaultFnUnit: {
      func: "mlpTrain",
      name: "DL",
      inData: [],
      outData: [],
      param: {
        "label-columns": [[]],
        "data-columns": [[]],
        "show-tb": "true",
        "dl-func": "mlp",
        objective: "regression",
        "num-classes": "10",
        "training-iteration": "",
        "loss-function": "mean-squared",
        optimizer: "gradient-descent",
        "learning-rate": "",
        layers: [[]]
      },
      display: {
        label: "MLP Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to train a Multilayer Perceptron(MLP) based model for given data.",
    tags: ["deep", "learning", "DL", "Deep Learning", "DeepLearning", "mlp", "train", "mlp train"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.getPrimaryOperation = function () {
    return "MLPTrain";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_LABEL_COLUMNS = "label-columns", this.PARAM_DATA_COLUMNS = "data-columns", this.PARAM_OBJECTIVE = "objective", this.PARAM_TRAINING_ITERATION = "training-iteration", this.PARAM_LOSS_FUNCTION = "loss-function", this.PARAM_LEARNING_RATE = "learning-rate", this.PARAM_OPTIMIZER = "optimizer", this.PARAM_LAYERS = "layers", this.lossFunctionSource = [{
      label: "absolute-difference",
      value: "absolute-difference"
    }, {
      label: "hinge-loss",
      value: "hinge-loss"
    }, {
      label: "log-loss",
      value: "log-loss"
    }, {
      label: "mean-pairwise-squared",
      value: "mean-pairwise-squared"
    }, {
      label: "mean-squared",
      value: "mean-squared"
    }, {
      label: "sigmoid-cross-entropy",
      value: "sigmoid-cross-entropy"
    }, {
      label: "softmax-cross-entropy",
      value: "softmax-cross-entropy"
    }], this.optimizerSource = [{
      label: "gradient-descent",
      value: "gradient-descent"
    }, {
      label: "adadelta",
      value: "adadelta"
    }, {
      label: "adagrad",
      value: "adagrad"
    }, {
      label: "adam",
      value: "adam"
    }, {
      label: "rmsprop",
      value: "rmsprop"
    }], this.layerSource = [{
      label: "dense",
      value: "dense"
    }, {
      label: "dropout",
      value: "dropout"
    }, {
      label: "rnn-basic",
      value: "rnn-basic"
    }, {
      label: "rnn-lstm",
      value: "rnn-lstm"
    }, {
      label: "rnn-gru",
      value: "rnn-gru"
    }], this.activationSource = [{
      label: "linear",
      value: "linear"
    }, {
      label: "softmax",
      value: "softmax"
    }, {
      label: "sigmoid",
      value: "sigmoid"
    }, {
      label: "tanh",
      value: "tanh"
    }, {
      label: "relu",
      value: "relu"
    }], this.innerActivationSource = [{
      label: "softmax",
      value: "softmax"
    }, {
      label: "sigmoid",
      value: "sigmoid"
    }, {
      label: "tanh",
      value: "tanh"
    }, {
      label: "relu",
      value: "relu"
    }], this.render = {
      "show-tb": this.renderShowTb,
      "dl-func": this.renderDlFunc,
      "label-columns": this.renderLabelColumns,
      "data-columns": this.renderDataColumns,
      objective: this.renderObjective,
      "training-iteration": this.renderTrainingIteration,
      "loss-function": this.renderLossFunction,
      "learning-rate": this.renderLearningRate,
      optimizer: this.renderOptimizer,
      layers: this.renderLayers
    }, this.propertyControlArray = [], this.createLabelColumnsControl(), this.createDataColumnsControl(), this.createObjectiveControl(), this.createTrainingIterationControl(), this.createLossFunctionControl(), this.createLearningRateControl(), this.createOptimizerControl(), this.createLayerControl();
  }, e.prototype.createLabelColumnsControl = function (t) {
    var e = this;
    this.$labelColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Label Columns", function (t) {
      t.append(e.$labelColumns);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.columnListCommand(e.PARAM_LABEL_COLUMNS, o.items);
          e.executeCommand(r);
        }
      };
      e.labelColumnsControl = e.createColumnList(e.$labelColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createDataColumnsControl = function (t) {
    var e = this;
    this.$dataColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Data Columns", function (t) {
      t.append(e.$dataColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          var r = e.columnListCommand(e.PARAM_DATA_COLUMNS, o.items);
          e.executeCommand(r);
        }
      };
      e.dataColumnsControl = e.createColumnList(e.$dataColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createObjectiveControl = function (t) {
    var e = this;
    this.$regressionControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Regression</div>'), this.$classificationControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Classification</div>'), this.addPropertyControl("Objective", function (t) {
      t.append(this.$regressionControl).append(this.$classificationControl), e.createRadioButton(e.$regressionControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$classificationControl, {
        width: "80",
        groupName: "Group"
      }), e.$regressionControl.on("checked", function (t) {
        var o = e.createCommonCommand(e.PARAM_OBJECTIVE, "regression");
        e.executeCommand(o), e.fillControlValues(!0);
      }), e.$classificationControl.on("checked", function (t) {
        var o = e.createCommonCommand(e.PARAM_OBJECTIVE, "classification");
        e.executeCommand(o), e.fillControlValues(!0);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createTrainingIterationControl = function (t) {
    var e = this;
    this.$trainingIteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-Input"/>'), this.addPropertyControl("Training Iteration", function (t) {
      t.append(e.$trainingIteration);
      var o = {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1
      };
      e.$trainingIterationControl = e.createNumericInput(e.$trainingIteration, o), e.$trainingIterationControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_TRAINING_ITERATION, t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createLossFunctionControl = function (t) {
    var e = this;
    this.$lossFunction = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.addPropertyControl("Loss Function", function (t) {
      e.createDropDownList(this.$lossFunction, {
        placeHolder: "please choose",
        source: this.lossFunctionSource
      }), t.append(this.$lossFunction.parent()), e.$lossFunction.on("change", function () {
        var t = e.$lossFunction.jqxDropDownList("getSelectedItem").value,
            o = e.createCommonCommand(e.PARAM_LOSS_FUNCTION, t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createLearningRateControl = function (t) {
    var e = this;
    this.$learningRate = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-Input"/>'), this.addPropertyControl("Learning Rate", function (t) {
      t.append(e.$learningRate);
      e.$learningRateControl = e.createNumericInput(e.$learningRate, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1
      }), e.$learningRateControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_LEARNING_RATE, t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createOptimizerControl = function (t) {
    var e = this;
    this.$optimizer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.addPropertyControl("Optimizer", function (t) {
      e.createDropDownList(this.$optimizer, {
        placeHolder: "please choose",
        source: this.optimizerSource
      }), t.append(this.$optimizer.parent()), e.$optimizer.on("change", function () {
        var t = e.$optimizer.jqxDropDownList("getSelectedItem").value,
            o = e.createCommonCommand(e.PARAM_OPTIMIZER, t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createLayerControl = function () {
    this.createControlExpander(), this.createAddButton();
  }, e.prototype.createControlExpander = function () {
    var t = this;
    this.$layersArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-layers-area" style="width:100%"></div>'), this.addPropertyControl("Layers", function (e) {
      e.append(t.$layersArea);
    }, {
      mandatory: !0
    }), this.$contents = this.$layersArea.parent(".brtc-va-editors-sheet-controls-propertycontrol-contents");
  }, e.prototype.createAddButton = function () {
    var e = this;
    if (this.$contents.find(".brtc-va-editors-sheet-controls-propertycontrol-addbutton").length > 0) return !1;
    this.$addButton = $('<input type="button" class= "brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Layers"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.$addButton.detach(), e.createLayersControl(), e.$addButton.appendTo(e.$contents);
      var t = e.createLayersCommand();
      e.executeCommand(t);
    });
  }, e.prototype.createLayersControl = function (t) {
    var e = this,
        o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>'),
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-and"></div>'),
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-wrapper"/>'),
        a = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'),
        i = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'),
        s = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'),
        l = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-Input"/>'),
        c = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-Input"/>');
    n.append(a), n.append(i), n.append(s), n.append(l), n.append(c), this.propertyControlArray.push([a, i, s, l, c]);
    var p = {
      numberType: "int",
      min: 1,
      max: void 0,
      minus: !1,
      placeholder: "Enter unit"
    };
    this.createDropDownList(a, {
      placeHolder: "Layers : ",
      source: this.layerSource
    }), this.createDropDownList(i, {
      placeHolder: "Activation : ",
      source: this.activationSource
    }), this.createDropDownList(s, {
      placeHolder: "Inner Activation : ",
      source: this.innerActivationSource
    });
    var u = this.createNumericInput(l, p);
    l.data("unitControl", u);
    var m = this.createNumberInput(c, {
      numberType: "double",
      min: 0,
      max: 1,
      minus: !1,
      placeholder: "Enter rate"
    });
    c.data("rateControl", m);
    var d = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
    o.append(r), o.append(d), o.append(n), this.$layersArea.append(o), this.$layersArea.children() && ($(this.$layersArea.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text(""), $(this.$layersArea.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-deck-remove").css("display", "none")), a.on("change", function () {
      var t = a.jqxDropDownList("getSelectedItem").value;
      "dense" === t ? (s.jqxDropDownList("selectIndex", -1), s.jqxDropDownList({
        disabled: !0
      }), $($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[1]).data("rateControl").setValue(""), $($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[1]).data("rateControl").setDisabled(!0), i.jqxDropDownList({
        disabled: !1
      }), i.jqxDropDownList("selectItem", "linear"), $($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[0]).data("unitControl").setDisabled(!1)) : "dropout" === t ? (i.jqxDropDownList("selectIndex", -1), i.jqxDropDownList({
        disabled: !0
      }), s.jqxDropDownList("selectIndex", -1), s.jqxDropDownList({
        disabled: !0
      }), $($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[0]).data("unitControl").setValue(""), $($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[0]).data("unitControl").setDisabled(!0), $($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[1]).data("rateControl").setDisabled(!1)) : ($($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[1]).data("rateControl").setValue(""), $($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[1]).data("rateControl").setDisabled(!0), i.jqxDropDownList({
        disabled: !1
      }), i.jqxDropDownList("selectItem", "linear"), s.jqxDropDownList({
        disabled: !1
      }), s.jqxDropDownList("selectItem", "tanh"), $($(this).parent().parent().find(".brtc-va-editors-sheet-controls-propertycontrol-Input")[0]).data("unitControl").setDisabled(!1));
      var o = e.createLayersCommand();
      e.executeCommand(o);
    }), i.on("change", function () {
      var t = e.createLayersCommand();
      e.executeCommand(t);
    }), s.on("change", function () {
      var t = e.createLayersCommand();
      e.executeCommand(t);
    }), l.on("change", function (t) {
      var o = e.createLayersCommand();
      e.executeCommand(o);
    }), c.on("change", function (t) {
      var o = e.createLayersCommand();
      e.executeCommand(o);
    }), d.click(function (t) {
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;
      o > -1 && e.propertyControlArray.splice(o, 1), $(this).parent().remove(), e.$layersArea.children() && $(e.$layersArea.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text("");
      var r = e.createLayersCommand();
      e.executeCommand(r), t.stopPropagation();
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "string" === t.type;
    }), this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), "regression" === this.options.fnUnit.param[this.PARAM_OBJECTIVE] ? this.labelColumnsControl.setItems(this.numberColumnArray) : this.labelColumnsControl.setItems(this.stringColumnArray), this.dataColumnsControl.setItems(this.numberColumnArray);
  }, e.prototype.renderLabelColumns = function () {
    var t = this.options.fnUnit.param[this.PARAM_LABEL_COLUMNS];
    this.labelColumnsControl.setSelectedItems(t[0] || []);
  }, e.prototype.renderDataColumns = function () {
    var t = this.options.fnUnit.param[this.PARAM_DATA_COLUMNS];
    this.dataColumnsControl.setSelectedItems(t[0] || []);
  }, e.prototype.renderObjective = function () {
    var t = this.options.fnUnit.param[this.PARAM_OBJECTIVE];
    t ? "regression" === t ? this.$regressionControl.jqxRadioButton("check") : this.$classificationControl.jqxRadioButton("check") : this.$regressionControl.jqxRadioButton("check");
  }, e.prototype.renderTrainingIteration = function () {
    var t = this.options.fnUnit.param[this.PARAM_TRAINING_ITERATION];
    t && this.$trainingIterationControl.setValue(t);
  }, e.prototype.renderLossFunction = function () {
    var t = this.options.fnUnit.param[this.PARAM_LOSS_FUNCTION];
    this.$lossFunction.jqxDropDownList("selectItem", t || "mean-squared");
  }, e.prototype.renderLearningRate = function () {
    var t = this.options.fnUnit.param[this.PARAM_LEARNING_RATE];
    t && this.$learningRateControl.setValue(t);
  }, e.prototype.renderOptimizer = function () {
    var t = this.options.fnUnit.param[this.PARAM_OPTIMIZER];
    this.$optimizer.jqxDropDownList("selectItem", t || "gradient-descent");
  }, e.prototype.renderLayers = function () {
    this.propertyControlArray = [], this.$layersArea.empty();
    var t = this.options.fnUnit.param[this.PARAM_LAYERS];

    if (t && t.length > 0) {
      this.$addButton.detach();

      for (var e = 0; e < t.length; e++) {
        this.createLayersControl();
      }

      if (t.length > 0) for (var o = 0; o < this.propertyControlArray.length; o++) {
        for (var r = 0; r < this.propertyControlArray[o].length; r++) {
          r < 3 ? $(this.propertyControlArray[o][r]).jqxDropDownList("selectItem", t[o][r]) : $(this.propertyControlArray[o][r].children()).val(t[o][r]);
        }
      }
      if (t.length < this.propertyControlArray.length) for (var n = this.propertyControlArray.length - 1; n == t.length; n--) {
        $(this.propertyControlArray[n].parents(".brtc-va-editors-sheet-controls-propertycontrol-deck")).remove();
      }
      this.$addButton.appendTo(this.$layersArea);
    } else this.createLayersControl();
  }, e.prototype.renderShowTb = function () {}, e.prototype.renderDlFunc = function () {}, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if (this.problems[t].param === this.PARAM_LABEL_COLUMNS && this.createValidationContent(this.$labelColumns, this.problems[t]), this.problems[t].param === this.PARAM_DATA_COLUMNS && this.createValidationContent(this.$dataColumns, this.problems[t]), this.problems[t].param === this.PARAM_OBJECTIVE && this.createValidationContent(this.$labelColumns, this.problems[t]), this.problems[t].param === this.PARAM_TRAINING_ITERATION && this.createValidationContent(this.$trainingIteration, this.problems[t]), this.problems[t].param === this.PARAM_LOSS_FUNCTION && this.createValidationContent(this.$lossFunction.parent(), this.problems[t]), this.problems[t].param === this.PARAM_LEARNING_RATE && this.createValidationContent(this.$learningRate, this.problems[t]), this.problems[t].param === this.PARAM_OPTIMIZER && this.createValidationContent(this.$optimizer.parent(), this.problems[t]), this.problems[t].param === this.PARAM_LAYERS) {
        var e = parseInt(this.problems[t].paramIndex[0]),
            o = parseInt(this.problems[t].paramIndex[1]);
        this.createValidationContent(this.propertyControlArray[e][o], this.problems[t]);
      }
    }
  }, e.prototype.columnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o || "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createLayersCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param[this.PARAM_LAYERS] = [], this.propertyControlArray) {
      var r = [];

      for (var n in this.propertyControlArray[o]) {
        if (0 == n) {
          var a = this.propertyControlArray[o][n].jqxDropDownList("getSelectedItem") ? this.propertyControlArray[o][n].jqxDropDownList("getSelectedItem").value : "";
          r.push(a);
        } else if (1 == n) {
          var i = this.propertyControlArray[o][n].jqxDropDownList("getSelectedItem") ? this.propertyControlArray[o][n].jqxDropDownList("getSelectedItem").value : "";
          r.push(i);
        } else if (2 == n) {
          var s = this.propertyControlArray[o][n].jqxDropDownList("getSelectedItem") ? this.propertyControlArray[o][n].jqxDropDownList("getSelectedItem").value : "";
          r.push(s);
        } else if (3 == n) {
          var l = this.propertyControlArray[o][n].children()[0].value;
          r.push(l);
        } else if (4 == n) {
          var c = this.propertyControlArray[o][n].children()[0].value;
          r.push(c);
        }
      }

      e.ref.param[this.PARAM_LAYERS].push(r);
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.mlpTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_LABEL_COLUMNS = "label-columns", this.PARAM_DATA_COLUMNS = "data-columns", this.PARAM_OBJECTIVE = "objective", this.PARAM_TRAINING_ITERATION = "training-iteration", this.PARAM_LOSS_FUNCTION = "loss-function", this.PARAM_LEARNING_RATE = "learning-rate", this.PARAM_OPTIMIZER = "optimizer", this.PARAM_LAYERS = "layers", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addLabelColumnsRule(), this.addDataColumnsRule(), this.addObjectiveRule(), this.addTrainingIterationRule(), this.addLossFunctionRule(), this.addLearningRateRule(), this.addRule(this.LearningRateRangeRule), this.addOptimizerRule(), this.addLayersRule();
  }, e.prototype.addLabelColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_LABEL_COLUMNS, e.param["label-columns"], "Label Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_LABEL_COLUMNS, e.param["label-columns"]);
    });
  }, e.prototype.addDataColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_DATA_COLUMNS, e.param["data-columns"], "Data Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_DATA_COLUMNS, e.param["data-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_DATA_COLUMNS, e.param[t.PARAM_DATA_COLUMNS], "number");
    });
  }, e.prototype.addObjectiveRule = function () {
    var t = this;
    this.addRule(function (e) {
      return "linear" == e.param[this.PARAM_OBJECTIVE] ? t.checkColumnType(e, t.PARAM_LABEL_COLUMNS, e.param[t.PARAM_LABEL_COLUMNS], "number") : "classification" == e.param[this.PARAM_OBJECTIVE] ? t.checkColumnType(e, t.PARAM_LABEL_COLUMNS, e.param[t.PARAM_LABEL_COLUMNS], "string") : void 0;
    });
  }, e.prototype.addTrainingIterationRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_TRAINING_ITERATION,
          messageParam: ["Training Iteration"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_TRAINING_ITERATION]);
      }
    });
  }, e.prototype.addLossFunctionRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_LOSS_FUNCTION,
          messageParam: ["Loss Function"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_LOSS_FUNCTION]);
      }
    });
  }, e.prototype.addLearningRateRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_LEARNING_RATE,
          messageParam: ["Learning Rate"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_LEARNING_RATE]);
      }
    });
  }, e.prototype.LearningRateRangeRule = function (t) {
    var e = [];
    return "0" == t.param[this.PARAM_LEARNING_RATE] ? (e.push(this.problemFactory.createProblem({
      errorCode: "BR-0008",
      param: this.PARAM_LEARNING_RATE,
      messageParam: ["Learning Rate", "0"]
    }, t)), e) : "1" == t.param[this.PARAM_LEARNING_RATE] ? (e.push(this.problemFactory.createProblem({
      errorCode: "BR-0012",
      param: this.PARAM_LEARNING_RATE,
      messageParam: ["Learning Rate", "1"]
    }, t)), e) : void 0;
  }, e.prototype.addOptimizerRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_OPTIMIZER,
          messageParam: ["Optimizer"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_OPTIMIZER]);
      }
    });
  }, e.prototype.addLayersRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        for (var o = [], r = 0; r < e.param[this.PARAM_LAYERS].length; r++) {
          for (var n = e.param[this.PARAM_LAYERS][r], a = 0; a < n.length; a++) {
            var i = n[a],
                s = {
              errorCode: "BR-0033",
              param: t.PARAM_LAYERS
            };
            if (0 == a) s.messageParam = ["Layer Option"], (l = t._checkStringIsEmpty(s, e, i)) && (l.paramIndex = [r, a], o.push(l));else if (1 == a) {
              if ("dropout" != n[0] || "" == n[0]) s.messageParam = ["Activation"], (l = t._checkStringIsEmpty(s, e, i)) && (l.paramIndex = [r, a], o.push(l));
            } else if (2 == a) {
              if ("rnn-basic" == n[0] || "rnn-lstm" == n[0] || "rnn-gru" == n[0] || "" == n[0]) s.messageParam = ["Inner Activation"], (l = t._checkStringIsEmpty(s, e, i)) && (l.paramIndex = [r, a], o.push(l));
            } else if (3 == a) {
              if ("dropout" != n[0] || "" == n[0]) s.messageParam = ["Unit"], (l = t._checkStringIsEmpty(s, e, i)) && (l.paramIndex = [r, a], o.push(l));
            } else if (4 == a) {
              var l;
              if ("dropout" == n[0] || "" == n[0]) s.messageParam = ["Rate"], (l = t._checkStringIsEmpty(s, e, i)) && (l.paramIndex = [r, a], o.push(l));
            }
          }
        }

        if (0 === e.param[this.PARAM_LAYERS][0].length) {
          s = {
            errorCode: "BR-0033",
            param: t.PARAM_LAYERS,
            messageParam: ["Layer Option"],
            paramIndex: [0, 0]
          };
          o.push(t.problemFactory.createProblem(s, e)), s.messageParam = ["Activation"], s.paramIndex = [0, 1], o.push(t.problemFactory.createProblem(s, e)), s.messageParam = ["Inner Activation"], s.paramIndex = [0, 2], o.push(t.problemFactory.createProblem(s, e)), s.messageParam = ["Unit"], s.paramIndex = [0, 3], o.push(t.problemFactory.createProblem(s, e)), s.messageParam = ["Rate"], s.paramIndex = [0, 4], o.push(t.problemFactory.createProblem(s, e));
        }

        return o;
      }
    });
  }, t.VA.Core.Functions.Library.mlpTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.rnnPredict = {
    category: "deeplearning",
    defaultFnUnit: {
      func: "rnnPredict",
      name: "DL",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "show-tb": "true",
        "dl-func": "rnn_predict"
      },
      display: {
        label: "RNN Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The idea behind RNNs is to make use of sequential voice information. In here, use sequential training data set consists of the index column and the data column to learn. RNN is implemented using tensorflow and uses LSTM layer.",
    tags: ["deep", "learning", "DL", "Deep Learning", "DeepLearning", "rnn", "predict", "rnnPredict", "RNN Predict"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addNHidden1Rule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["n-hidden-1"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "n-hidden-1",
        messageParam: ["N-Hidden-1"]
      }, e)), o;
    });
  }, e.prototype.addNHidden2RnnRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["n-hidden-2-rnn"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "n-hidden-2-rnn",
        messageParam: ["N-Hidden-2-Rnn"]
      }, e)), o;
    });
  }, e.prototype.addNHidden3Rule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["n-hidden-3"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "n-hidden-3",
        messageParam: ["N-Hidden-3"]
      }, e)), o;
    });
  }, e.prototype.addWidthRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param.width && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "width",
        messageParam: ["Width"]
      }, e)), o;
    });
  }, e.prototype.addHeightRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param.height && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "height",
        messageParam: ["Height"]
      }, e)), o;
    });
  }, e = e, t.VA.Core.Functions.Library.rnnPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.rnnTrain = {
    category: "deeplearning",
    defaultFnUnit: {
      func: "rnnTrain",
      name: "DL",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "show-tb": "true",
        "dl-func": "rnn",
        "number-train": "1000",
        "learning-rate": "0.001",
        language: "ko",
        "n-hidden-1": "1024",
        "n-hidden-2-rnn": "512",
        "n-hidden-3": "1024",
        width: "120",
        height: "15",
        stride: "1"
      },
      display: {
        label: "RNN Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The idea behind RNNs is to make use of sequential voice information. In here, use sequential training data set consists of the index column and the data column to learn. RNN is implemented using tensorflow and uses LSTM layer.",
    tags: ["deep", "learning", "DL", "Deep Learning", "DeepLearning", "rnn", "train", "rnnTrain", "RNN Train"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addNHidden1Rule(), this.addNHidden2RnnRule(), this.addNHidden3Rule(), this.addWidthRule(), this.addHeightRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addNHidden1Rule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["n-hidden-1"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "n-hidden-1",
        messageParam: ["N-Hidden-1"]
      }, e)), o;
    });
  }, e.prototype.addNHidden2RnnRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["n-hidden-2-rnn"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "n-hidden-2-rnn",
        messageParam: ["N-Hidden-2-Rnn"]
      }, e)), o;
    });
  }, e.prototype.addNHidden3Rule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param["n-hidden-3"] && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "n-hidden-3",
        messageParam: ["N-Hidden-3"]
      }, e)), o;
    });
  }, e.prototype.addWidthRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param.width && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "width",
        messageParam: ["Width"]
      }, e)), o;
    });
  }, e.prototype.addHeightRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param.height && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "height",
        messageParam: ["Height"]
      }, e)), o;
    });
  }, e = e, t.VA.Core.Functions.Library.rnnTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.binaryClassificationEvaluation = {
    category: "evaluation",
    defaultFnUnit: {
      func: "binaryClassificationEvaluation",
      name: "EvaluateBinaryClassification",
      inData: [],
      outData: [],
      param: {
        "predict-column": "",
        "label-column": "",
        "evaluation-measure": ["recall"],
        beta: "",
        "down-sampling-number": "",
        groupby: []
      },
      display: {
        label: "Evaluate Binary Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Evaluate binary classification models. (recall, precision, f-score, roc-curve. etc)",
    tags: ["Evaluate Binary Classification", "EvaluateBinaryClassification", "Binary", "Classification", "Evaluation", "Summary", "logistic regression"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "predict-column": this.renderPredictColumn,
      "label-column": this.renderLabelColumn,
      "evaluation-measure": this.renderEvaluationMeasure,
      beta: this.renderBeta,
      "down-sampling-number": this.renderDownSamplingNumber
    }, this.createPredictColumnControl(), this.createLabelColumnControl(), this.createEvaluationMeasureControl(), this.createBetaControl(), this.createDownSamplingNumberControl();
  }, e.prototype.createPredictColumnControl = function () {
    var t = this;
    this.$predictColumnElement = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Predict Column", function (e) {
      e.append(t.$predictColumnElement);
      t.predictColumnControl = t.createColumnList(t.$predictColumnElement, {
        rowCount: 1,
        multiple: !1,
        removable: !0
      }), t.predictColumnControl.onChange(function () {
        var e = t.createPredictColumnCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createLabelColumnControl = function () {
    var t = this;
    this.$labelColumnElement = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Label Column", function (e) {
      e.append(t.$labelColumnElement);
      t.labelColumnControl = t.createColumnList(t.$labelColumnElement, {
        rowCount: 1,
        multiple: !1,
        removable: !0
      }), t.labelColumnControl.onChange(function () {
        var e = t.createLabelColumnCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createEvaluationMeasureControl = function () {
    this.evaluationMeasureArray = [{
      label: "Recall",
      value: "recall"
    }, {
      label: "Precision",
      value: "precision"
    }, {
      label: "F-score",
      value: "fscore"
    }, {
      label: "ROC",
      value: "roc"
    }, {
      label: "PR (Precision-Recall)",
      value: "pr"
    }, {
      label: "AUC-ROC",
      value: "auc_roc"
    }, {
      label: "AUC-PR",
      value: "auc_pr"
    }];
    var t = this;

    for (var e in this.$evaluationMeasureCheckboxContainer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>'), this.$selectAllButton = $('<input type="button" value="Select All"/>'), this.$clearAllButton = $('<input type="button" value="Unselect All"/>'), this.$checkBoxes = [], this.evaluationMeasureArray) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>');
      this.$evaluationMeasureCheckboxContainer.append(o), o.text(this.evaluationMeasureArray[e].label), o.data("evaluationMeasure", this.evaluationMeasureArray[e].value), this.$checkBoxes[e] = o;
    }

    this.addPropertyControl("Evaluation Measure", function (e) {
      e.append(t.$evaluationMeasureCheckboxContainer), t.$evaluationMeasureCheckboxContainer.append(t.$selectAllButton), t.$evaluationMeasureCheckboxContainer.append(t.$clearAllButton), t.createButton(t.$selectAllButton, {
        width: "99%",
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), t.createButton(t.$clearAllButton, {
        width: "99%",
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var o = function o() {
        $(window).trigger("mousedown");
        var e = t.createEvaluationMeasureCommand();
        t.executeCommand(e);
      };

      for (var r in t.$selectAllButton.on("click", function (e) {
        for (var r in t.$checkBoxes) {
          t.$checkBoxes[r].off("change", o), t.$checkBoxes[r].jqxCheckBox({
            checked: !0
          }), t.$checkBoxes[r].on("change", o);
        }

        var n = t.createEvaluationMeasureCommand();
        t.executeCommand(n);
      }), t.$clearAllButton.on("click", function (e) {
        for (var r in t.$checkBoxes) {
          t.$checkBoxes[r].off("change", o), t.$checkBoxes[r].jqxCheckBox({
            checked: !1
          }), t.$checkBoxes[r].on("change", o);
        }

        var n = t.createEvaluationMeasureCommand();
        t.executeCommand(n);
      }), t.$checkBoxes) {
        t.$evaluationMeasureCheckboxContainer.append(t.$checkBoxes[r]), t.createCheckBox(t.$checkBoxes[r], {}, "brtc-va-editors-sheet-controls-width-12"), t.$checkBoxes[r].on("change", o);
      }
    }, {
      mandatory: !0
    });
  }, e.prototype.createBetaControl = function () {
    var e = this;
    this.$betaElement = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-number-input"/>');
    var o = this.addPropertyControl("F-score Beta", function (o) {
      o.append(e.$betaElement);
      var r = {
        numberType: "double",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 <= value)")
      };
      e.betaControl = this.createNumericInput(e.$betaElement, r), e.betaControl.onChange(function () {
        var t = e.createBetaCommand();
        e.executeCommand(t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "beta", "F score Beta");
  }, e.prototype.createDownSamplingNumberControl = function () {
    var e = this;
    this.$downSamplingNumberElement = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-number-input"/>');
    var o = this.addPropertyControl("Down Sampling Number", function (o) {
      o.append(e.$downSamplingNumberElement);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0 (0 <= value)")
      };
      e.downSamplingNumberControl = this.createNumericInput(e.$downSamplingNumberElement, r), e.downSamplingNumberControl.onChange(function () {
        var t = e.createDownSamplingNumberCommand();
        e.executeCommand(t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "down-sampling-number", "Down Sampling Number");
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.predictColumnControl.setItems(this.numberColumnArray), this.labelColumnControl.setItems(this.numberColumnArray);
  }, e.prototype.renderPredictColumn = function () {
    var t = this.options.fnUnit.param["predict-column"];
    this.predictColumnControl.setSelectedItems(t ? [t] : []);
  }, e.prototype.renderLabelColumn = function () {
    var t = this.options.fnUnit.param["label-column"];
    this.labelColumnControl.setSelectedItems(t ? [t] : []);
  }, e.prototype.renderEvaluationMeasure = function () {
    var t = this.options.fnUnit.param["evaluation-measure"];
    if (void 0 !== t) for (var e in this.$checkBoxes) {
      $.inArray(this.$checkBoxes[e].data("evaluationMeasure"), t) > -1 ? this.$checkBoxes[e].jqxCheckBox({
        checked: !0
      }) : this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    } else for (var e in this.$checkBoxes) {
      this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.renderBeta = function () {
    var t = this.options.fnUnit.param.beta;
    this.betaControl.setValue(t || "");
  }, e.prototype.renderDownSamplingNumber = function () {
    var t = this.options.fnUnit.param["down-sampling-number"];
    this.downSamplingNumberControl.setValue(t || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "predict-column" === this.problems[t].param && this.createValidationContent(this.$predictColumnElement.parent(), this.problems[t]), "label-column" === this.problems[t].param && this.createValidationContent(this.$labelColumnElement.parent(), this.problems[t]), "evaluation-measure" === this.problems[t].param && this.createValidationContent(this.$evaluationMeasureCheckboxContainer.parent(), this.problems[t]), "beta" === this.problems[t].param && this.createValidationContent(this.$betaElement.parent(), this.problems[t]), "down-sampling-number" === this.problems[t].param && this.createValidationContent(this.$downSamplingNumberElement.parent(), this.problems[t]);
    }
  }, e.prototype.createPredictColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.predictColumnControl.getSelectedItems();
    return e.ref.param["predict-column"] = o[0] ? o[0] : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createLabelColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.labelColumnControl.getSelectedItems();
    return e.ref.param["label-column"] = o[0] ? o[0] : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createEvaluationMeasureCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["evaluation-measure"] = [], this.$checkBoxes) {
      !0 === this.$checkBoxes[o].val() && e.ref.param["evaluation-measure"].push(this.$checkBoxes[o].data("evaluationMeasure"));
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.checkEvaluationMeasure = function () {
    for (var t in this.$checkBoxes) {
      if (!0 === this.$checkBoxes[t].jqxCheckBox("checked")) return !0;
    }

    return !1;
  }, e.prototype.createBetaCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.beta = "";
    var o = this.betaControl.getValue();
    return o && (e.ref.param.beta = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createDownSamplingNumberCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["down-sampling-number"] = "";
    var o = this.downSamplingNumberControl.getValue();
    return o && (e.ref.param["down-sampling-number"] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.binaryClassificationEvaluation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_PREDICT_COLUMN = "predict-column", this.PARAM_LABEL_COLUMN = "label-column", this.PARAM_EVALUATION_MEASURE = "evaluation-measure", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addPredictColumnRule(), this.addLabelColumnRule(), this.addEvaluationMeasureRule();
  }, e.prototype.addPredictColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_PREDICT_COLUMN,
          messageParam: ["Predict Column"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_PREDICT_COLUMN]);
      }
    });
  }, e.prototype.addLabelColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_LABEL_COLUMN,
          messageParam: ["Label Column"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_LABEL_COLUMN]);
      }
    });
  }, e.prototype.addEvaluationMeasureRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: t.PARAM_EVALUATION_MEASURE,
        messageParam: ["Evaluation Measure"]
      };
      return t._checkArrayIsEmpty(o, e, e.param[t.PARAM_EVALUATION_MEASURE]);
    });
  }, t.VA.Core.Functions.Library.binaryClassificationEvaluation.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.calib = {
    category: "evaluation",
    defaultFnUnit: {
      func: "calib",
      name: "Calib",
      inData: [],
      outData: [],
      param: {
        pastweekperiod: "8"
      },
      display: {
        label: "Calib",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Calib",
    tags: ["calib"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      pastweekperiod: this.renderPastWeekPeriod
    }, this.createPastWeekPeriod();
  }, e.prototype.createPastWeekPeriod = function (t) {
    var e = this;
    this.$pastWeekPeriod = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Past Week Period", function (t) {
      t.append(this.$pastWeekPeriod);
      e.pastWeekPeriodControl = e.createNumericInput(e.$pastWeekPeriod, {
        numberType: "int",
        min: 1,
        minus: !1
      }), e.pastWeekPeriodControl.onChange(function () {
        e.createNumericInputCommand("pastweekperiod", this.getValue());
      });
    });
  }, e.prototype.renderPastWeekPeriod = function () {
    this.pastWeekPeriodControl.setValue(this.options.fnUnit.param.pastweekperiod || "");
  }, e.prototype.renderValidation = function () {}, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.calib.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.csp = {
    category: "evaluation",
    defaultFnUnit: {
      func: "csp",
      name: "CSP",
      inData: [],
      outData: [],
      param: {
        "csp-maxiter": "",
        "csp-ou": "",
        "csp-uo": "",
        "csp-oo": "",
        "csp-type": "",
        "csp-breakiter": "",
        "csp-nsolution": ""
      },
      display: {
        label: "CSP",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "CSP",
    tags: ["csp"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "csp-maxiter": this.renderCspMaxiter,
      "csp-ou": this.renderCspOu,
      "csp-uo": this.renderCspUo,
      "csp-oo": this.renderCspOo,
      "csp-type": this.renderCspType,
      "csp-breakiter": this.renderCspBreakiter,
      "csp-nsolution": this.renderCspNSolution
    }, this.createCspType(), this.createCspMaxiter(), this.createCspBreakiter(), this.createCspNSolution(), this.createCspOu(), this.createCspUo(), this.createCspOo();
  }, e.prototype.createCspType = function (t) {
    var e = this;
    this.$cspType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Csp-Type", function (t) {
      t.append(this.$cspType);
      e.cspTypeControl = e.createNumericInput(e.$cspType, {
        numberType: "int",
        max: 1,
        minus: !1
      }), e.cspTypeControl.onChange(function () {
        e.createNumericInputCommand("csp-type", this.getValue());
      });
    });
  }, e.prototype.createCspBreakiter = function (t) {
    var e = this;
    this.$cspBreakiter = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Csp-Breakiter", function (t) {
      t.append(this.$cspBreakiter);
      e.cspBreakiterControl = e.createNumericInput(e.$cspBreakiter, {
        numberType: "int",
        max: 1,
        minus: !1
      }), e.cspBreakiterControl.onChange(function () {
        e.createNumericInputCommand("csp-breakiter", this.getValue());
      });
    });
  }, e.prototype.createCspNSolution = function (t) {
    var e = this;
    this.$cspNSolution = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Csp-NSolution", function (t) {
      t.append(this.$cspNSolution);
      e.cspNSolutionControl = e.createNumericInput(e.$cspNSolution, {
        numberType: "int",
        max: 1,
        minus: !1
      }), e.cspNSolutionControl.onChange(function () {
        e.createNumericInputCommand("csp-nsolution", this.getValue());
      });
    });
  }, e.prototype.createCspMaxiter = function (t) {
    var e = this;
    this.$cspMaxiter = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Csp-Maxiter", function (t) {
      t.append(this.$cspMaxiter);
      e.cspMaxiterControl = e.createNumericInput(e.$cspMaxiter, {
        numberType: "int",
        max: 1,
        minus: !1
      }), e.cspMaxiterControl.onChange(function () {
        e.createNumericInputCommand("csp-maxiter", this.getValue());
      });
    });
  }, e.prototype.createCspOu = function (t) {
    var e = this;
    this.$cspOu = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Csp-Ou", function (t) {
      t.append(this.$cspOu);
      e.cspOuControl = e.createNumericInput(e.$cspOu, {
        numberType: "int",
        max: 1,
        minus: !1
      }), e.cspOuControl.onChange(function () {
        e.createNumericInputCommand("csp-ou", this.getValue());
      });
    });
  }, e.prototype.createCspUo = function (t) {
    var e = this;
    this.$cspUo = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Csp-Uo", function (t) {
      t.append(this.$cspUo);
      e.cspUoControl = e.createNumericInput(e.$cspUo, {
        numberType: "int",
        max: 1,
        minus: !1
      }), e.cspUoControl.onChange(function () {
        e.createNumericInputCommand("csp-uo", this.getValue());
      });
    });
  }, e.prototype.createCspOo = function (t) {
    var e = this;
    this.$cspOo = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Csp-Oo", function (t) {
      t.append(this.$cspOo);
      e.cspOoControl = e.createNumericInput(e.$cspOo, {
        numberType: "int",
        max: 1,
        minus: !1
      }), e.cspOoControl.onChange(function () {
        e.createNumericInputCommand("csp-oo", this.getValue());
      });
    });
  }, e.prototype.renderCspType = function () {
    this.options.fnUnit.param["csp-type"] && this.cspTypeControl.setValue(this.options.fnUnit.param["csp-type"]);
  }, e.prototype.renderCspBreakiter = function () {
    this.options.fnUnit.param["csp-breakiter"] && this.cspBreakiterControl.setValue(this.options.fnUnit.param["csp-breakiter"]);
  }, e.prototype.renderCspNSolution = function () {
    this.options.fnUnit.param["csp-nsolution"] && this.cspNSolutionControl.setValue(this.options.fnUnit.param["csp-nsolution"]);
  }, e.prototype.renderCspMaxiter = function () {
    this.options.fnUnit.param["csp-maxiter"] && this.cspMaxiterControl.setValue(this.options.fnUnit.param["csp-maxiter"]);
  }, e.prototype.renderCspOu = function () {
    this.options.fnUnit.param["csp-ou"] && this.cspOuControl.setValue(this.options.fnUnit.param["csp-ou"]);
  }, e.prototype.renderCspUo = function () {
    this.options.fnUnit.param["csp-uo"] && this.cspUoControl.setValue(this.options.fnUnit.param["csp-uo"]);
  }, e.prototype.renderCspOo = function () {
    this.options.fnUnit.param["csp-oo"] && this.cspOoControl.setValue(this.options.fnUnit.param["csp-oo"]);
  }, e.prototype.renderValidation = function () {}, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.csp.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.evaluateRankingAlgorithm = {
    category: "evaluation",
    defaultFnUnit: {
      func: "evaluateRankingAlgorithm",
      name: "EvaluateRankingAlgorithm",
      inData: [],
      outData: [],
      param: {
        "user-column": [],
        "item-column": [],
        "rating-column": [],
        "rating-edge": "",
        "k-values": [],
        "evaluation-measure": []
      },
      display: {
        label: "Evaluate Ranking Algorithm",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Evaluate ranking algorithms. (topN recommend result etc) Compute relevance score for the recommendation.",
    tags: ["EvaluateRankingAlgorithm", "Evaluate Ranking Algorithm", "Evaluate Ranking Algorithm"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationControls = {}, this.kValuesControlArray = [], this.PARAM_USER_COLUMN = "user-column", this.PARAM_ITEM_COLUMN = "item-column", this.PARAM_RATING_COLUMN = "rating-column", this.PARAM_RATING_EDGE = "rating-edge", this.PARAM_EVALUATION_MEASURE = "evaluation-measure", this.PARAM_K_VALUES = "k-values", this.createUserColumnControl(), this.createItemColumnControl(), this.createRatingColumnControl(), this.createEvaluationMeasureControl(), this.createKValuesControl(), this.render = {
      "user-column": this.renderUserColumnValue,
      "item-column": this.renderItemColumnValue,
      "rating-column": this.renderRatingColumnValue,
      "rating-edge": this.renderRatingEdgeValue,
      "evaluation-measure": this.renderEvaluationMeasureValue,
      "k-values": this.renderKValuesValue
    }, this.validation = {
      "user-column": this.renderUserColumnValidation,
      "item-column": this.renderItemColumnValidation,
      "rating-column": this.renderRatingColumnValidation,
      "rating-edge": this.renderRatingEdgeValidation,
      "evaluation-measure": this.renderEvaluationMeasureValidation,
      "k-values": this.renderKValuesValidation
    }, this.renderValidation();
  }, e.prototype.createUserColumnControl = function () {
    var t = this;
    this.addPropertyControl("User Column", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
      e.append(o), t.$userColumnControl = t.createColumnList(o, {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var e = t.createCommand(t.PARAM_USER_COLUMN, t.$userColumnControl.getSelectedItems());
          t.executeCommand(e);
        }
      }), t.validationControls[t.PARAM_USER_COLUMN] = e;
    }, {
      mandatory: !0
    });
  }, e.prototype.createItemColumnControl = function () {
    var t = this;
    this.addPropertyControl("Item Column", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
      e.append(o), t.$itemColumnControl = t.createColumnList(o, {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var e = t.createCommand(t.PARAM_ITEM_COLUMN, t.$itemColumnControl.getSelectedItems());
          t.executeCommand(e);
        }
      }), t.validationControls[t.PARAM_ITEM_COLUMN] = e;
    }, {
      mandatory: !0
    });
  }, e.prototype.createRatingColumnControl = function () {
    var t = this;
    this.addPropertyControl("Rating Column & Edge", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
      e.append(o);
      var r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(r), t.$ratingColumnControl = t.createColumnList(o, {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var e = t.createCommand(t.PARAM_RATING_COLUMN, t.$ratingColumnControl.getSelectedItems());
          t.executeCommand(e);
        }
      }, "brtc-va-editors-sheet-controls-propertycontrol-input-wrapper"), t.$ratingEdgeControl = t.createNumberInput(r, {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: "Enter value"
      }), t.$ratingEdgeControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_RATING_EDGE] != e) {
          var o = t.createCommand(t.PARAM_RATING_EDGE, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_RATING_EDGE] = r, t.validationControls[t.PARAM_RATING_COLUMN] = o;
    }, {
      mandatory: !1
    });
  }, e.prototype.createEvaluationMeasureControl = function () {
    var t = this,
        e = [{
      label: "Precision",
      value: "precisionAt"
    }, {
      label: "NDCG",
      value: "ndcgAt"
    }, {
      label: "MAP",
      value: "map"
    }];
    this.addPropertyControl("Evaluation Measure", function (o) {
      for (var r in e) {
        var n = e[r],
            a = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-row">   <div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox" param-value="' + n.value + '" /></div>'),
            i = a.find(".brtc-va-editors-sheet-controls-propertycontrol-checkbox");
        i.text(n.label), o.append(a), t.createCheckBox(i, {}, "brtc-va-editors-sheet-controls-width-5"), i.on("change", function (e) {
          $(window).trigger("mousedown");
          var o = [];

          if ($.each(t.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol-checkbox"), function (t, e) {
            $(e).jqxCheckBox("checked") && o.push($(e).attr("param-value"));
          }), JSON.stringify(t.options.fnUnit.param[t.PARAM_EVALUATION_MEASURE]) != JSON.stringify(o)) {
            var r = t.createCommand(t.PARAM_EVALUATION_MEASURE, o);
            t.executeCommand(r);
          }
        });
      }

      t.validationControls[t.PARAM_EVALUATION_MEASURE] = o;
    }, {
      mandatory: !0
    });
  }, e.prototype.createKValuesControl = function () {
    var t = this;
    this.$kValuesArea = $("<div><div/>");
    var e = this.addPropertyControl("K-Values", function (e) {
      e.append(t.$kValuesArea), t.validationControls[t.PARAM_K_VALUES] = e;
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, this.PARAM_K_VALUES, "K Values");
  }, e.prototype.createKValuesRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-evaluate-ranking-algorithm-property brtc-va-editors-sheet-controls-propertycontrol-k-values-row"></div>'),
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'),
        a = $('<div class="brtc-va-evaluate-ranking-algorithm-property brtc-va-editors-sheet-controls-propertycontrol-add-button"></div>'),
        i = $('<div class="brtc-va-evaluate-ranking-algorithm-property brtc-va-editors-sheet-controls-propertycontrol-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.$kValuesArea.append(r);
    var s = this.createNumericInput(n, {
      numberType: "int",
      min: 0,
      minus: !1,
      placeholder: "Enter value"
    }, "", {
      width: "90%",
      float: "left"
    });
    this.kValuesControlArray.push(s), e || s.$mainControl.focus(), s.onChange(function (t) {
      var e = [];

      for (var r in o.kValuesControlArray) {
        e.push(o.kValuesControlArray[r].getValue());
      }

      if (JSON.stringify(o.options.fnUnit.param[o.PARAM_K_VALUES]) != JSON.stringify(e)) {
        var n = o.createKValuesCommand();
        o.executeCommand(n);
      }
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-sheet-controls-propertycontrol-k-values-row"),
          e = t.prevAll().length;
      o.kValuesControlArray.splice(e, 1), t.remove();
      var r = o.createKValuesCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createKValuesRow(!1, !1);
      var t = o.createKValuesCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.createCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createKValuesCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["k-values"] = [], this.kValuesControlArray) {
      e.ref.param["k-values"].push(this.kValuesControlArray[o].getValue());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.fillControlValues = function () {
    var t = this.options.fnUnit[IN_DATA][0];
    t && this.dataMap[t] ? this.fillLeftColumnControlValues(this.dataMap[t].columns) : this.fillLeftColumnControlValues([]);
  }, e.prototype.fillLeftColumnControlValues = function (t) {
    this.leftTableColumns = t, this.$userColumnControl.setItems(this.leftTableColumns), this.$itemColumnControl.setItems(this.leftTableColumns), this.numberColumnArray = $.grep(this.leftTableColumns, function (t) {
      return "number" === t.type;
    }), this.$ratingColumnControl.setItems(this.numberColumnArray);
  }, e.prototype.renderUserColumnValue = function () {
    this.$userColumnControl.setSelectedItems(this.options.fnUnit.param["user-column"]);
  }, e.prototype.renderItemColumnValue = function () {
    this.$itemColumnControl.setSelectedItems(this.options.fnUnit.param["item-column"]);
  }, e.prototype.renderRatingColumnValue = function () {
    this.$ratingColumnControl.setSelectedItems(this.options.fnUnit.param["rating-column"]);
  }, e.prototype.renderRatingEdgeValue = function () {
    this.$ratingEdgeControl.setValue(this.options.fnUnit.param["rating-edge"]);
  }, e.prototype.renderEvaluationMeasureValue = function () {
    var t = this.options.fnUnit.param["evaluation-measure"],
        e = ["precisionAt", "ndcgAt", "map"];

    for (var o in e) {
      if (-1 === $.inArray(e[o], t)) this.$mainControl.find('.brtc-va-editors-sheet-controls-propertycontrol-checkbox[param-value="' + e[o] + '"]').jqxCheckBox({
        checked: !1
      });else this.$mainControl.find('.brtc-va-editors-sheet-controls-propertycontrol-checkbox[param-value="' + e[o] + '"]').jqxCheckBox({
        checked: !0
      });
    }
  }, e.prototype.renderKValuesValue = function () {
    var t = this.options.fnUnit.param["k-values"];
    this.kValuesControlArray = [], this.$kValuesArea.empty(), this.createKValuesRow(!0, !0);

    for (var e = 0; e < t.length; e++) {
      e >= 1 && this.createKValuesRow(!1, !0), this.kValuesControlArray[e].setValue(t[e]);
    }
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.validation[e] && this.validation[e].call(this, this.problems[t]);
    }
  }, e.prototype.renderUserColumnValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_USER_COLUMN], t);
  }, e.prototype.renderItemColumnValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_ITEM_COLUMN], t);
  }, e.prototype.renderRatingColumnValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_RATING_COLUMN], t);
  }, e.prototype.renderRatingEdgeValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_RATING_EDGE], t);
  }, e.prototype.renderEvaluationMeasureValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_EVALUATION_MEASURE], t);
  }, e.prototype.renderKValuesValidation = function (t) {
    var e = $(this.$kValuesArea.find(".brtc-va-editors-sheet-controls-propertycontrol-k-values-row")[t.paramIndex]);
    this.createValidationContent(e, t);
  }, t.VA.Core.Functions.Library.evaluateRankingAlgorithm.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_USER_COLUMN = "user-column", this.PARAM_ITEM_COLUMN = "item-column", this.PARAM_RATING_COLUMN = "rating-column", this.PARAM_RATING_EDGE = "rating-edge", this.PARAM_EVALUATION_MEASURE = "evaluation-measure", this.PARAM_K_VALUES = "k-values", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addUserColumnRule(), this.addItemColumnRule(), this.addRatingColumnRule(), this.addEvaluationMeasureRule(), this.addKValuesRule();
  }, e.prototype.addUserColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_USER_COLUMN, e.param[t.PARAM_USER_COLUMN], "User Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_USER_COLUMN, e.param[t.PARAM_USER_COLUMN], 0);
    });
  }, e.prototype.addItemColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ITEM_COLUMN, e.param[t.PARAM_ITEM_COLUMN], "Item Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ITEM_COLUMN, e.param[t.PARAM_ITEM_COLUMN], 0);
    });
  }, e.prototype.addRatingColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t.needToCheckRating(e)) return t.checkColumnIsEmpty(e, t.PARAM_RATING_COLUMN, e.param[t.PARAM_RATING_COLUMN], "Rating Column");
    }), this.addRule(function (e) {
      if (t.needToCheckRating(e)) return t.checkColumnExists(e, t.PARAM_RATING_COLUMN, e.param[t.PARAM_RATING_COLUMN], 0);
    }), this.addRule(function (e) {
      if (t.needToCheckRating(e)) return t.checkColumnType(e, t.PARAM_RATING_COLUMN, e.param[t.PARAM_RATING_COLUMN], "number", 0);
    });
  }, e.prototype.addEvaluationMeasureRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._getSchema(e, 0)) return t._checkArrayIsEmpty({
        errorCode: "BR-0033",
        param: t.PARAM_EVALUATION_MEASURE,
        messageParam: ["Evaluation Measure"]
      }, e, e.param[t.PARAM_EVALUATION_MEASURE]);
    });
  }, e.prototype.addKValuesRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._getSchema(e, 0) && t.needToCheckKValues(e)) {
        var o = [],
            r = e.param[t.PARAM_K_VALUES];

        for (var n in r) {
          "" === r[n] && o.push(t.problemFactory.createProblem({
            errorCode: "BR-0033",
            param: t.PARAM_K_VALUES,
            paramIndex: n,
            messageParam: ["K-Values"]
          }, e));
        }

        return o;
      }
    });
  }, e.prototype.needToCheckRating = function (t) {
    return !this._isEmptyString(t.param[this.PARAM_RATING_EDGE]) || !this._isEmptyArray(t.param[this.PARAM_RATING_COLUMN]);
  }, e.prototype.needToCheckKValues = function (t) {
    var e = !1;

    for (var o in t.param[this.PARAM_EVALUATION_MEASURE]) {
      var r = t.param[this.PARAM_EVALUATION_MEASURE][o];

      if ("Precision" == r || "NDCG" == r) {
        e = !0;
        break;
      }
    }

    return e;
  }, t.VA.Core.Functions.Library.evaluateRankingAlgorithm.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.evaluateTimeSeries = {
    category: "evaluation",
    defaultFnUnit: {
      func: "evaluateTimeSeries",
      name: "EvaluateTimeSeries",
      inData: [],
      outData: [],
      param: {
        "answer-col": "",
        "prediction-col": "",
        "filter-zeros": "false"
      },
      display: {
        label: "Evaluate Time Series",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Evaluate time series data using MAPE(mean absolute percentage error), MAD(mean absolute deviation), and MSD(mean squared deviation).",
    mandatory: [],
    tags: ["evaluate time series", "mape", "mad", "msd", "mean average percentage error", "error"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "answer-col": this.renderAnswerColControl,
      "prediction-col": this.renderPredictionColControl,
      "filter-zeros": this.renderFilterZerosControl
    }, this.$elements = {}, this.controls = {}, this.createAnswerColControl(), this.createPredictionColControl(), this.createFilterZerosControl();
  }, e.prototype.createAnswerColControl = function (t) {
    var e = this;
    e.$elements["answer-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Actual Column", function (t) {
      t.append(e.$elements["answer-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("answer-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["answer-col"] = e.createColumnList(e.$elements["answer-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderAnswerColControl = function (t) {
    var e = this.options.fnUnit.param["answer-col"];
    this.controls["answer-col"].setSelectedItems([e]);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Predict Column", function (t) {
      t.append(e.$elements["prediction-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("prediction-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["prediction-col"] = e.createColumnList(e.$elements["prediction-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.controls["prediction-col"].setSelectedItems([e]);
  }, e.prototype.createFilterZerosControl = function (t) {
    var e = this;
    e.$elements["filter-zeros.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["filter-zeros.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = e.addPropertyControl("Filter Zeros", function (t) {
      t.append(e.$elements["filter-zeros.true"]), e.controls["filter-zeros.true"] = e.createRadioButton(e.$elements["filter-zeros.true"], {
        width: "undefined",
        groupName: "filter-zeros"
      }), e.$elements["filter-zeros.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("filter-zeros", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["filter-zeros.false"]), e.controls["filter-zeros.false"] = e.createRadioButton(e.$elements["filter-zeros.false"], {
        width: "undefined",
        groupName: "filter-zeros",
        checked: !0
      }), e.$elements["filter-zeros.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("filter-zeros", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "filter-zeros", "Filter Zeros");
  }, e.prototype.renderFilterZerosControl = function (t) {
    var e = "filter-zeros." + this.options.fnUnit.param["filter-zeros"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["answer-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls["prediction-col"].setItems(t);
  }, t.VA.Core.Functions.Library.evaluateTimeSeries.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addAnswerColRule(), this.addPredictionColRule();
  }, o.prototype.addAnswerColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "answer-col", e.param["answer-col"], "Actual Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "answer-col", e.param["answer-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "answer-col", e.param["answer-col"], ["number"]);
    });
  }, o.prototype.addPredictionColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "prediction-col", e.param["prediction-col"], "Predict Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "prediction-col", e.param["prediction-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "prediction-col", e.param["prediction-col"], ["number"]);
    });
  }, t.VA.Core.Functions.Library.evaluateTimeSeries.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.featureEncoding = {
    category: "evaluation",
    defaultFnUnit: {
      func: "featureEncoding",
      name: "FeatureEncoding",
      inData: [],
      outData: [],
      param: {
        response: [[]],
        reward: [[]],
        "hold-columns": [[]],
        features: [[]]
      },
      display: {
        label: "Feature Encoding",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Make context data from raw data to use for input of functions such as LinearUCB, Q-Learning, Sarsa etc.",
    tags: ["featureEncoding", "FeatureEncoding", "feature encoding", "Feature Encoding", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_RESPONSE = "response", this.PARAM_REWARD = "reward", this.PARAM_HOLD_COLUMNS = "hold-columns", this.PARAM_FEATURES = "features", this.render = {
      response: this.renderResponseControl,
      reward: this.renderRewardControl,
      "hold-columns": this.renderHoldColumnsControl,
      features: this.renderFeaturesControl
    }, this.propertyControlArray = [], this.createResponseControl(), this.createRewardControl(), this.createHoldColumnsControl(), this.createFeatureControl();
  }, e.prototype.createResponseControl = function () {
    var t = this;
    this.$responseColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-response-column"/>'), this.addPropertyControl("Response", function (e) {
      e.append(t.$responseColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var e = t.createResponseCommand();
          t.executeCommand(e);
        }
      };
      t.responseColumnControl = t.createColumnList(t.$responseColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRewardControl = function () {
    var t = this;
    this.$rewardColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-reward-column"/>'), this.addPropertyControl("Reward", function (e) {
      e.append(t.$rewardColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var e = t.createRewardCommand();
          t.executeCommand(e);
        }
      };
      t.rewardColumnControl = t.createColumnList(t.$rewardColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-hold-columns"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(t.$holdColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed() {
          var e = t.createHoldColumnsCommand();
          t.executeCommand(e);
        }
      };
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, o);
    });
  }, e.prototype.createFeatureControl = function () {
    this.createControlExpander(), this.createAddButton();
  }, e.prototype.createControlExpander = function () {
    var t = this;
    this.$featureArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-feature-area" style="width:100%"></div>'), this.addPropertyControl("Features", function (e) {
      e.append(t.$featureArea);
    }, {
      mandatory: !0
    }), this.$contents = this.$featureArea.parent(".brtc-va-editors-sheet-controls-propertycontrol-contents");
  }, e.prototype.createAddButton = function () {
    var e = this;
    if (this.$contents.find(".brtc-va-editors-sheet-controls-propertycontrol-addbutton").length > 0) return !1;
    this.$addButton = $('<input type="button" class= "brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Feature"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.renderFlag = !0, e.$addButton.detach(), e.createFeaturesControl(), e.$addButton.appendTo(e.$contents), e.renderFlag = !1;
      var t = e.createFeaturesCommand();
      e.executeCommand(t);
    });
  }, e.prototype.createFeaturesControl = function (t) {
    var e = this,
        o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>'),
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-and">Feature</div>'),
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-wrapper"/>'),
        a = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-intercept"/>'),
        i = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-intercept-label">Intercept</div>'),
        s = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-intercept">True</div>'),
        l = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-intercept">False</div>'),
        c = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'),
        p = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-mode"/>'),
        u = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-mode-label">Type</div>'),
        m = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-mode">Range</div>'),
        d = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-mode">Value</div>'),
        h = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        C = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-new-value-area"/>'),
        y = $('<input class="add-value-button" type="button" value="+ Add Value"/>');
    n.append(a), n.append(c), n.append(p), n.append(h), n.append(C), n.append(y), a.append(i), a.append(s), a.append(l), p.append(u), p.append(m), p.append(d), this.propertyControlArray.push([a, c, p, h]), this.createRadioButton(s), this.createRadioButton(l);
    this.columnsControl = this.createColumnList(c, {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending"
    }), this.columnsControl.onChange(function (t, o) {
      if (1 != e.renderFlag) {
        var r = e.createFeaturesCommand();
        e.executeCommand(r);
      }
    }), this.columnsControl.setItems(this.columnNameArray), c.data("columnList", this.columnsControl), this.createRadioButton(m), this.createRadioButton(d), this.createInput(h, {}), this.createButton(y, {
      height: 25
    }, "brtc-va-editors-sheet-controls-width-12", {
      "margin-top": "3px"
    });
    var f = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
    o.append(r), o.append(f), o.append(n), this.$featureArea.append(o), this.$featureArea.children() && ($(this.$featureArea.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text(""), $(this.$featureArea.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-deck-remove").css("display", "none"));
    var v = o.prevAll().length + 100;
    s.jqxRadioButton({
      groupName: v
    }), l.jqxRadioButton({
      groupName: v
    });
    var b = o.prevAll().length;
    m.jqxRadioButton({
      groupName: b
    }), d.jqxRadioButton({
      groupName: b
    }), s.on("checked", function (t) {
      if (1 != e.renderFlag) {
        var o = e.createFeaturesCommand();
        e.executeCommand(o);
      }
    }), l.on("checked", function (t) {
      if (1 != e.renderFlag) {
        var o = e.createFeaturesCommand();
        e.executeCommand(o);
      }
    }), m.on("checked", function (t) {
      if (1 != e.renderFlag) {
        var o = e.createFeaturesCommand();
        e.executeCommand(o);
      }
    }), d.on("checked", function (t) {
      if (1 != e.renderFlag) {
        var o = e.createFeaturesCommand();
        e.executeCommand(o);
      }
    }), s.attr("value", "true"), l.attr("value", "false"), l.jqxRadioButton("check"), l.jqxRadioButton("val", !0), m.attr("value", "range"), d.attr("value", "value"), m.jqxRadioButton("check"), m.jqxRadioButton("val", !0), h.on("change", function (t) {
      if (1 != e.renderFlag) {
        if (!e.isInputValueChanged("features", e.getFeaturesValue())) return;
        var o = e.createFeaturesCommand();
        e.executeCommand(o);
      }
    }), f.click(function (t) {
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;
      o > -1 && e.propertyControlArray.splice(o, 1), $(this).parent().remove(), e.$featureArea.children() && $(e.$featureArea.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text("");
      var r = e.createFeaturesCommand();
      e.executeCommand(r);
    }), y.click(function () {
      if (e.createNewValueControl(C), 1 != e.renderFlag) {
        var t = e.createFeaturesCommand();
        e.executeCommand(t);
      }
    });
  }, e.prototype.createNewValueControl = function (t) {
    var e = this,
        o = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    t.append(o);
    var r = t.parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;
    r > -1 && this.propertyControlArray[r].splice(this.propertyControlArray[r].length, 0, o);
    var n = "",
        a = t.prevAll(".brtc-va-editors-sheet-controls-propertycontrol-mode").children().children();
    $.each(a, function (t, e) {
      $(e).jqxRadioButton("checked") && (n = $(e).attr("value"));
    });
    e.createInput(o, {}, "brtc-va-editors-sheet-controls-width-12", {
      "margin-bottom": "3px"
    }), o.on("change", function (t) {
      if (1 != e.renderFlag) {
        if (!e.isInputValueChanged("features", e.getFeaturesValue())) return;
        var o = e.createFeaturesCommand();
        e.executeCommand(o);
      }
    });
    var i = $('<div class="remove-value-button"></div>');
    o.parent(".brtc-va-editors-sheet-controls-wrapper").prepend(i), i.click(function (t) {
      var o = $(this).parent(".brtc-va-editors-sheet-controls-wrapper"),
          n = o.prevAll(".brtc-va-editors-sheet-controls-wrapper").length + 4;
      r > -1 && e.propertyControlArray[r].splice(n, 1), o.remove();
      var a = e.createFeaturesCommand();
      e.executeCommand(a), t.stopPropagation();
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.doubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "double" === t.internalType.toLowerCase() || "float" === t.internalType.toLowerCase() || "decimal" === t.internalType.toLowerCase();
    }), this.responseColumnControl.setItems(this.stringColumnArray), this.rewardColumnControl.setItems(this.doubleColumnArray), this.holdColumnsControl.setItems(this.columnNameArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if (this.problems[t].param === this.PARAM_RESPONSE && this.createValidationContent(this.$responseColumn, this.problems[t]), this.problems[t].param === this.PARAM_REWARD && this.createValidationContent(this.$rewardColumn, this.problems[t]), this.problems[t].param === this.PARAM_FEATURES) {
        var e = parseInt(this.problems[t].paramIndex[0]),
            o = parseInt(this.problems[t].paramIndex[1]);
        this.createValidationContent(this.propertyControlArray[e][o].parent(), this.problems[t]);
      }
    }
  }, e.prototype.renderResponseControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RESPONSE];
    this.responseColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderRewardControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REWARD];
    this.rewardColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_HOLD_COLUMNS];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderFeaturesControl = function () {
    this.propertyControlArray = [], this.$featureArea.empty();
    var t = this.options.fnUnit.param[this.PARAM_FEATURES];

    if (t && t.length > 0) {
      this.renderFlag = !0, this.$addButton.detach();

      for (var e = 0; e < t.length; e++) {
        this.createFeaturesControl();

        for (var o = 0; o < t[e].length - 4; o++) {
          this.createNewValueControl(this.propertyControlArray[e][0].siblings(".brtc-va-editors-sheet-controls-propertycontrol-new-value-area"));
        }
      }

      if (t.length > 0) for (var r = 0; r < this.propertyControlArray.length; r++) {
        for (var n = 0; n < this.propertyControlArray[r].length; n++) {
          0 == n ? "true" == t[r][n] ? $(this.propertyControlArray[r][n].children().children()[0]).jqxRadioButton("check") : (t[r][n], $(this.propertyControlArray[r][n].children().children()[1]).jqxRadioButton("check")) : 1 == n && null != t[r][n] ? this.propertyControlArray[r][n].data("columnList").setSelectedItems([t[r][n]]) : 2 == n ? "range" == t[r][n] ? $(this.propertyControlArray[r][n].children().children()[0]).jqxRadioButton("check") : "value" == t[r][n] ? $(this.propertyControlArray[r][n].children().children()[1]).jqxRadioButton("check") : $(this.propertyControlArray[r][n].children().children()[0]).jqxRadioButton("check") : this.propertyControlArray[r][n].val(t[r][n]);
        }
      }
      if (t.length < this.propertyControlArray.length) for (var a = this.propertyControlArray.length - 1; a == t.length; a--) {
        $(this.propertyControlArray[a].parents(".brtc-va-editors-sheet-controls-propertycontrol-deck")).remove();
      }
      this.$addButton.appendTo(this.$featureArea), this.renderFlag = !1;
    } else this.createFeaturesControl();
  }, e.prototype.getResponseColumnValue = function () {
    var t = [],
        e = [];
    return $.each(this.responseColumnControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createResponseCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_RESPONSE] = this.getResponseColumnValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.getRewardColumnValue = function () {
    var t = [],
        e = [];
    return $.each(this.rewardColumnControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createRewardCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_REWARD] = this.getRewardColumnValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.getHoldColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.holdColumnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createHoldColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_HOLD_COLUMNS] = this.getHoldColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createAddFeaturesCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.getFeaturesValue();
    return o.push(["false", "", "range", ""]), e.ref.param[this.PARAM_FEATURES] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createFeaturesCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_FEATURES] = [[]], e.ref.param[this.PARAM_FEATURES] = this.getFeaturesValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.getFeaturesValue = function () {
    var t = [];

    for (var e in this.propertyControlArray) {
      var o = [];

      for (var r in this.propertyControlArray[e]) {
        if (0 == r) {
          var n = "",
              a = this.propertyControlArray[e][r].children().children();
          $.each(a, function (t, e) {
            $(e).jqxRadioButton("val") && (n = $(e).attr("value"));
          }), o.push(n);
        } else if (1 == r) o.push(this.propertyControlArray[e][r].data("columnList").getSelectedItems()[0]);else if (2 == r) {
          var i = "",
              s = this.propertyControlArray[e][r].children().children();
          $.each(s, function (t, e) {
            $(e).jqxRadioButton("val") && (i = $(e).attr("value"));
          }), o.push(i);
        } else o.push(this.propertyControlArray[e][r].val().replace(/ /gi, ""));
      }

      t.push(o);
    }

    return t;
  }, t.VA.Core.Functions.Library.featureEncoding.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_RESPONSE = "response", this.PARAM_REWARD = "reward", this.PARAM_HOLD_COLUMNS = "hold-columns", this.PARAM_FEATURES = "features", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addResponseColumnRule(), this.addRewardColumnRule(), this.addFeaturesRule();
  }, e.prototype.addResponseColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_RESPONSE, e.param[t.PARAM_RESPONSE][0], "Response Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_RESPONSE, e.param[t.PARAM_RESPONSE][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_RESPONSE, e.param[t.PARAM_RESPONSE][0], "string");
    });
  }, e.prototype.addRewardColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_REWARD, e.param[t.PARAM_REWARD][0], "Reward Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_REWARD, e.param[t.PARAM_REWARD][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_REWARD, e.param[t.PARAM_REWARD][0], "number");
    });
  }, e.prototype.addFeaturesRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];

      if (t._getSchema(e)) {
        for (var r = 0; r < e.param[this.PARAM_FEATURES].length; r++) {
          for (var n = e.param[this.PARAM_FEATURES][r], a = 0; a < n.length; a++) {
            var i = n[a],
                s = {
              errorCode: "BR-0033",
              param: t.PARAM_FEATURES,
              messageParam: ["Feature"]
            };
            0 == a || (1 == a ? s.messageParam = ["Column"] : 2 == a || a >= 3 && ("range" == n[2] ? s.messageParam = ["Range"] : "value" == n[2] && (s.messageParam = ["Value"])));

            var l = t._checkStringIsEmpty(s, e, i);

            l ? (l.paramIndex = [r, a], o.push(l)) : (l = t.checkColumnIsEmpty(e, t.PARAM_FEATURES, i)) && (l.paramIndex = [r, a], o.push(l));
          }
        }

        if (0 === e.param[this.PARAM_FEATURES][0].length) (s = {
          errorCode: "BR-0033",
          param: t.PARAM_FEATURES,
          messageParam: ["Feature"]
        }).messageParam = ["Column"], s.paramIndex = [0, 1], o.push(t.problemFactory.createProblem(s, e)), s.messageParam = ["Range"], s.paramIndex = [0, 3], o.push(t.problemFactory.createProblem(s, e));
        return o;
      }
    });
  }, e = e, t.VA.Core.Functions.Library.featureEncoding.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.linearUCBPrescribe = {
    category: "evaluation",
    defaultFnUnit: {
      func: "linearUCBPrescribe",
      name: "LinearUCBPrescribe",
      inData: [],
      outData: [],
      param: {
        "id-column": [[]],
        "context-column": [[]],
        alpha: "",
        "tiebreaker-threshold": "",
        "num-arms-in-prescription": ""
      },
      display: {
        label: "Linear UCB Prescribe",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to prescribe actions/arms based on a given trained Linear UCB model(output from a Linear UCB Train).",
    tags: ["Linear UCB Prescribe", "LinearUCBPrescribe", "linearucbprescribe", "linear", "ucb", "prescribe", "linear ucb", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_ID_COLUMN = "id-column", this.PARAM_CONTEXT_COLUMN = "context-column", this.PARAM_ALPHA = "alpha", this.PARAM_TIEBREAKER_THRESHOLD = "tiebreaker-threshold", this.PARAM_NUM_ARMS_IN_PRESCRIPTION = "num-arms-in-prescription", this.render = {
      "id-column": this.renderIdColumnControl,
      "context-column": this.renderContextColumnControl,
      alpha: this.renderAlphaControl,
      "tiebreaker-threshold": this.renderTiebreakerThresholdControl,
      "num-arms-in-prescription": this.renderNumArmsInPrescriptionControl
    }, this.createIdColumnControl(), this.createContextColumnControl(), this.createAlphaControl(), this.createTiebreakerThresholdControl(), this.createNumArmsInPrescriptionControl();
  }, e.prototype.createIdColumnControl = function (t) {
    var e = this;
    this.$idColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-id-column"/>'), this.addPropertyControl("Id Column", function (t) {
      t.append(e.$idColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var t = e.createIdColumnCommand();
          e.executeCommand(t);
        }
      };
      e.idColumnControl = e.createColumnList(e.$idColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createContextColumnControl = function (t) {
    var e = this;
    this.$contextColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-context-column"/>'), this.addPropertyControl("Context Column", function (t) {
      t.append(e.$contextColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var t = e.createContextColumnCommand();
          e.executeCommand(t);
        }
      };
      e.contextColumnControl = e.createColumnList(e.$contextColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    this.$alphaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-alphaInput"/>'), this.addPropertyControl("Alpha", function (t) {
      t.append(e.$alphaInputControl);
      e.$alphaControl = e.createNumericInput(e.$alphaInputControl, {
        numberType: "double",
        min: 0,
        max: 10,
        minus: !1,
        placeholder: "Enter value"
      }), e.$alphaControl.onChange(function (t) {
        var o = e.createAlphaCommand(t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createTiebreakerThresholdControl = function (t) {
    var e = this;
    this.$tiebreakerThresholdInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-tiebreakerThresholdInput"/>'), this.addPropertyControl("Tiebreaker Threshold", function (t) {
      t.append(e.$tiebreakerThresholdInputControl);
      e.$tiebreakerThresholdControl = e.createNumericInput(e.$tiebreakerThresholdInputControl, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1,
        placeholder: "Enter value"
      }), e.$tiebreakerThresholdControl.onChange(function (t) {
        var o = e.createTiebreakerThresholdCommand(t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createNumArmsInPrescriptionControl = function (t) {
    var e = this;
    this.$numArmsInPrescriptionInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numArmsInPrescriptionInput"/>'), this.addPropertyControl("Num Arms In Prescription", function (t) {
      t.append(e.$numArmsInPrescriptionInputControl);
      var o = {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$numArmsInPrescriptionControl = e.createNumericInput(e.$numArmsInPrescriptionInputControl, o), e.$numArmsInPrescriptionControl.onChange(function (t) {
        var o = e.createNumArmsInPrescriptionCommand(t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.idColumnControl.setItems(this.stringColumnArray), this.contextColumnControl.setItems(this.arrayDoubleColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_ID_COLUMN && this.createValidationContent(this.$idColumn, this.problems[t]), this.problems[t].param === this.PARAM_CONTEXT_COLUMN && this.createValidationContent(this.$contextColumn, this.problems[t]), this.problems[t].param === this.PARAM_ALPHA && this.createValidationContent(this.$alphaInputControl, this.problems[t]), this.problems[t].param === this.PARAM_TIEBREAKER_THRESHOLD && this.createValidationContent(this.$tiebreakerThresholdInputControl, this.problems[t]), this.problems[t].param === this.PARAM_NUM_ARMS_IN_PRESCRIPTION && this.createValidationContent(this.$numArmsInPrescriptionInputControl, this.problems[t]);
    }
  }, e.prototype.renderIdColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ID_COLUMN];
    this.idColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderContextColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CONTEXT_COLUMN];
    this.contextColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderAlphaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ALPHA];
    this.$alphaControl.setValue(t);
  }, e.prototype.renderTiebreakerThresholdControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TIEBREAKER_THRESHOLD];
    this.$tiebreakerThresholdControl.setValue(t);
  }, e.prototype.renderNumArmsInPrescriptionControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUM_ARMS_IN_PRESCRIPTION];
    this.$numArmsInPrescriptionControl.setValue(t);
  }, e.prototype.getIdColumnValue = function () {
    var t = [],
        e = [];
    return $.each(this.idColumnControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createIdColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_ID_COLUMN] = this.getIdColumnValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.getContextColumnValue = function () {
    var t = [],
        e = [];
    return $.each(this.contextColumnControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createContextColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_CONTEXT_COLUMN] = this.getContextColumnValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createAlphaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_ALPHA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createTiebreakerThresholdCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_TIEBREAKER_THRESHOLD] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createNumArmsInPrescriptionCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_NUM_ARMS_IN_PRESCRIPTION] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.linearUCBPrescribe.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_ID_COLUMN = "id-column", this.PARAM_CONTEXT_COLUMN = "context-column", this.PARAM_ALPHA = "alpha", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_TIEBREAKER_THRESHOLD = "tiebreaker-threshold", this.PARAM_NUM_ARMS_IN_PRESCRIPTION = "num-arms-in-prescription", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addIdColumnRule(), this.addContextColumnRule(), this.addAlphaRule(), this.addRule(this.minAlphaValueRule), this.addTiebreakerThresholdRule(), this.addNumArmsInPrescriptionRule();
  }, e.prototype.addIdColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "Id Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "string");
    });
  }, e.prototype.addContextColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0], "Context Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0], "number[]");
    });
  }, e.prototype.addAlphaRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_ALPHA,
          messageParam: ["Alpha"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_ALPHA]);
      }
    });
  }, e.prototype.minAlphaValueRule = function (t) {
    if (this._hasSchema(t)) {
      var e = [];
      return "0" == t.param[this.PARAM_ALPHA] ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0008",
        param: this.PARAM_ALPHA,
        messageParam: ["Alpha value", "0"]
      }, t)), e) : void 0;
    }
  }, e.prototype.addTiebreakerThresholdRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_TIEBREAKER_THRESHOLD,
          messageParam: ["Tiebreaker Threshold"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_TIEBREAKER_THRESHOLD]);
      }
    });
  }, e.prototype.addNumArmsInPrescriptionRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_NUM_ARMS_IN_PRESCRIPTION,
          messageParam: ["Num Arms In Prescription"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_NUM_ARMS_IN_PRESCRIPTION]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.linearUCBPrescribe.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.linearUCBTrain = {
    category: "evaluation",
    defaultFnUnit: {
      func: "linearUCBTrain",
      name: "LinearUCBTrain",
      inData: [],
      outData: [],
      param: {
        "context-column": [[]],
        "arm-column": [[]],
        "reward-column": [[]],
        "arms-list": "",
        dimensionality: "",
        "shared-dimensionality": ""
      },
      display: {
        label: "Linear UCB Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to train a Linear UCB algorithm based model for given data.",
    tags: ["Linear UCB Train", "LinearUCBTrain", "linearucbtrain", "linear", "ucb", "train", "linear ucb", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_CONTEXT_COLUMN = "context-column", this.PARAM_ARM_COLUMN = "arm-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_ARMS_LIST = "arms-list", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_SHARED_DIMENSIONALITY = "shared-dimensionality", this.render = {
      "context-column": this.renderContextColumnControl,
      "arm-column": this.renderArmColumnControl,
      "reward-column": this.renderRewardColumnControl,
      "arms-list": this.renderArmsListControl,
      dimensionality: this.renderDimensionalityControl,
      "shared-dimensionality": this.renderSharedDimensionalityControl
    }, this.createContextColumnControl(), this.createArmColumnControl(), this.createRewardColumnControl(), this.createArmsListControl(), this.createDimensionalityControl(), this.createSharedDimensionalityControl();
  }, e.prototype.createContextColumnControl = function (t) {
    var e = this;
    this.$contextColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-context-column"/>'), this.addPropertyControl("Context Column", function (t) {
      t.append(e.$contextColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var t = e.createContextColumnCommand();
          e.executeCommand(t);
        }
      };
      e.contextColumnControl = e.createColumnList(e.$contextColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createArmColumnControl = function (t) {
    var e = this;
    this.$armColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-arm-column"/>'), this.addPropertyControl("Arm Column", function (t) {
      t.append(e.$armColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var t = e.createArmColumnCommand();
          e.executeCommand(t);
        }
      };
      e.armColumnControl = e.createColumnList(e.$armColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRewardColumnControl = function (t) {
    var e = this;
    this.$rewardColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-reward-column"/>'), this.addPropertyControl("Reward Column", function (t) {
      t.append(e.$rewardColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var t = e.createRewardColumnCommand();
          e.executeCommand(t);
        }
      };
      e.rewardColumnControl = e.createColumnList(e.$rewardColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createArmsListControl = function (t) {
    var e = this;
    this.$armsListControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Arms List", function (t) {
      t.append(e.$armsListControl), e.createTextArea(e.$armsListControl, {
        placeHolder: "Enter value by new line",
        height: "150px"
      }), e.$armsListControl.on("change", function (t) {
        var o = e.createArmsListCommand();
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createDimensionalityControl = function () {
    var t = this;
    this.$dimensionalityInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-dimensionalityInput"/>'), this.addPropertyControl("Dimensionality", function (e) {
      e.append(t.$dimensionalityInputControl);
      var o = {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$dimensionalityControl = t.createNumericInput(t.$dimensionalityInputControl, o), t.$dimensionalityControl.onChange(function (e) {
        var o = t.createDimensionalityCommand(e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createSharedDimensionalityControl = function () {
    var t = this;
    this.$sharedDimensionalityInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-shareddimensionalityInput"/>'), this.addPropertyControl("Shared Dimensionality", function (e) {
      e.append(t.$sharedDimensionalityInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$sharedDimensionalityControl = t.createNumericInput(t.$sharedDimensionalityInputControl, o), t.$sharedDimensionalityControl.onChange(function (e) {
        var o = t.createSharedDimensionalityCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.doubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double" === t.internalType || "Float" === t.internalType || "Decimal" === t.internalType;
    }), this.contextColumnControl.setItems(this.arrayDoubleColumnArray), this.armColumnControl.setItems(this.stringColumnArray), this.rewardColumnControl.setItems(this.doubleColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_CONTEXT_COLUMN && this.createValidationContent(this.$contextColumn, this.problems[t]), this.problems[t].param === this.PARAM_ARM_COLUMN && this.createValidationContent(this.$armColumn, this.problems[t]), this.problems[t].param === this.PARAM_REWARD_COLUMN && this.createValidationContent(this.$rewardColumn, this.problems[t]), this.problems[t].param === this.PARAM_ARMS_LIST && this.createValidationContent(this.$armsListControl.parent(), this.problems[t]), this.problems[t].param === this.PARAM_DIMENSIONALITY && this.createValidationContent(this.$dimensionalityInputControl, this.problems[t]), this.problems[t].param === this.PARAM_SHARED_DIMENSIONALITY && this.createValidationContent(this.$sharedDimensionalityInputControl, this.problems[t]);
    }
  }, e.prototype.renderContextColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CONTEXT_COLUMN];
    this.contextColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderArmColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ARM_COLUMN];
    this.armColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderRewardColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REWARD_COLUMN];
    this.rewardColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderArmsListControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ARMS_LIST],
        e = "";
    if (t) for (var o = 0; o < t.length; o++) {
      e += t[o] || "", o < t.length - 1 && (e += "\n");
    }
    this.$armsListControl.jqxTextArea("val", e);
  }, e.prototype.renderDimensionalityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DIMENSIONALITY];
    this.$dimensionalityControl.setValue(t);
  }, e.prototype.renderSharedDimensionalityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_SHARED_DIMENSIONALITY];
    this.$sharedDimensionalityControl.setValue(t);
  }, e.prototype.getContextColumnValue = function () {
    var t = [],
        e = [];
    return $.each(this.contextColumnControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createContextColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_CONTEXT_COLUMN] = this.getContextColumnValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.getArmColumnValue = function () {
    var t = [],
        e = [];
    return $.each(this.armColumnControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createArmColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_ARM_COLUMN] = this.getArmColumnValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.getRewardColumnValue = function () {
    var t = [],
        e = [];
    return $.each(this.rewardColumnControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createRewardColumnCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_REWARD_COLUMN] = this.getRewardColumnValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createArmsListCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.$armsListControl.jqxTextArea("val").split("\n"),
        r = [];
    return $.each(o, function (t, e) {
      var o = e.trim();
      "" != o && r.push(o);
    }), e.ref.param[this.PARAM_ARMS_LIST] = r, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createDimensionalityCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DIMENSIONALITY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createSharedDimensionalityCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_SHARED_DIMENSIONALITY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.linearUCBTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_CONTEXT_COLUMN = "context-column", this.PARAM_ARM_COLUMN = "arm-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_SHARED_DIMENSIONALITY = "shared-dimensionality", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_ARMS_LIST = "arms-list", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addContextColumnRule(), this.addArmColumnRule(), this.addDimensionalityRule(), this.addRewardColumnRule(), this.addRule(this.emptyArmsList), this.addSharedDimensionalityRule();
  }, e.prototype.addContextColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0], "Context Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0], "number[]");
    });
  }, e.prototype.addArmColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ARM_COLUMN, e.param[t.PARAM_ARM_COLUMN][0], "Arm Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ARM_COLUMN, e.param[t.PARAM_ARM_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ARM_COLUMN, e.param[t.PARAM_ARM_COLUMN][0], "string");
    });
  }, e.prototype.addDimensionalityRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_DIMENSIONALITY,
          messageParam: ["Dimensionality"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_DIMENSIONALITY]);
      }
    });
  }, e.prototype.addRewardColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "Reward Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "number");
    });
  }, e.prototype.emptyArmsList = function (t) {
    if (this._hasSchema(t)) {
      var e = [];
      return void 0 === t.param[this.PARAM_ARMS_LIST] ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ARMS_LIST,
        messageParam: ["Arms List"]
      }, t)), e) : this.isEmptyForArray(t.param[this.PARAM_ARMS_LIST]) ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ARMS_LIST,
        messageParam: ["Arms List"]
      }, t)), e) : void 0;
    }
  }, e.prototype.addSharedDimensionalityRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];

      if (t._hasSchema(e)) {
        var r = {
          errorCode: "BR-0012",
          param: t.PARAM_SHARED_DIMENSIONALITY,
          messageParam: ["Shared Dimensionality", "Dimensionality"]
        };
        return "" != e.param[this.PARAM_SHARED_DIMENSIONALITY] && Number(e.param[this.PARAM_SHARED_DIMENSIONALITY]) >= Number(e.param[this.PARAM_DIMENSIONALITY]) && o.push(t.problemFactory.createProblem(r, e)), o;
      }
    });
  }, e = e, t.VA.Core.Functions.Library.linearUCBTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.multiclassClassificationEvaluation = {
    category: "evaluation",
    defaultFnUnit: {
      func: "multiclassClassificationEvaluation",
      name: "EvaluateMulticlassClassification",
      inData: [],
      outData: [],
      param: {
        "predict-column": "",
        "label-column": "",
        "evaluation-measure": ["recall_overall"],
        "confusion-matrix": "true",
        "by-labels": [],
        beta: "",
        groupby: []
      },
      display: {
        label: "Evaluate Multiclass Classification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Evaluate multi-class classification models.(recall, precision, f-score, confusion matrix. etc)",
    tags: ["Evaluate Multiclass Classification", "EvaluateMulticlassClassification", "Multiclass", "Classification", "Evaluation", "Summary", "logistic regression"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "predict-column": this.renderPredictColumn,
      "label-column": this.renderLabelColumn,
      "confusion-matrix": this.renderConfusionMatrix,
      "evaluation-measure": this.renderEvaluationMeasure,
      beta: this.renderBeta,
      "by-labels": this.renderByLabels,
      groupby: this.renderGroupBy
    }, this.byLabelsControlArray = [], this.createPredictColumnControl(), this.createLabelColumnControl(), this.createEvaluationMeasureControl(), this.createBetaControl(), this.createByLabelsControl(), this.createGroupByControl();
  }, e.prototype.createPredictColumnControl = function () {
    var t = this;
    this.$predictColumnElement = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Predict Column", function (e) {
      e.append(t.$predictColumnElement);
      t.predictColumnControl = t.createColumnList(t.$predictColumnElement, {
        rowCount: 1,
        multiple: !1,
        removable: !0
      }), t.predictColumnControl.onChange(function () {
        var e = t.createPredictColumnCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createLabelColumnControl = function () {
    var t = this;
    this.$labelColumnElement = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Label Column", function (e) {
      e.append(t.$labelColumnElement);
      t.labelColumnControl = t.createColumnList(t.$labelColumnElement, {
        rowCount: 1,
        multiple: !1,
        removable: !0
      }), t.labelColumnControl.onChange(function () {
        var e = t.createLabelColumnCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createEvaluationMeasureControl = function () {
    this.evaluationMeasureArray = [{
      label: "Recall Overall",
      value: "recall_overall"
    }, {
      label: "Recall Weighted",
      value: "recall_weighted"
    }, {
      label: "Recall By",
      value: "recall_by"
    }, {
      label: "Precision Overall",
      value: "precision_overall"
    }, {
      label: "Precision Weighted",
      value: "precision_weighted"
    }, {
      label: "Precision By",
      value: "precision_by"
    }, {
      label: "F-score Overall",
      value: "fscore_overall"
    }, {
      label: "F-score Weighted",
      value: "fscore_weighted"
    }, {
      label: "F-score By",
      value: "fscore_by"
    }];
    var t = this;

    for (var e in this.$evaluationMeasureCheckboxContainer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>'), this.$selectAllButton = $('<input type="button" value="Select All"/>'), this.$clearAllButton = $('<input type="button" value="Unselect All"/>'), this.$checkBoxes = [], this.evaluationMeasureArray) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>');
      this.$evaluationMeasureCheckboxContainer.append(o), o.text(this.evaluationMeasureArray[e].label), o.data("evaluationMeasure", this.evaluationMeasureArray[e].value), this.$checkBoxes[e] = o;
    }

    this.addPropertyControl("Evaluation Measure", function (e) {
      e.append(t.$evaluationMeasureCheckboxContainer), t.$evaluationMeasureCheckboxContainer.append(t.$selectAllButton), t.$evaluationMeasureCheckboxContainer.append(t.$clearAllButton), t.createButton(t.$selectAllButton, {
        width: "99%",
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), t.createButton(t.$clearAllButton, {
        width: "99%",
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var o = function o() {
        $(window).trigger("mousedown");
        var e = t.createEvaluationMeasureCommand();
        t.executeCommand(e);
      };

      for (var r in t.$selectAllButton.on("click", function (e) {
        for (var r in t.$checkBoxes) {
          t.$checkBoxes[r].off("change", o), t.$checkBoxes[r].jqxCheckBox({
            checked: !0
          }), t.$checkBoxes[r].on("change", o);
        }

        var n = t.createEvaluationMeasureCommand();
        t.executeCommand(n);
      }), t.$clearAllButton.on("click", function (e) {
        for (var r in t.$checkBoxes) {
          t.$checkBoxes[r].off("change", o), t.$checkBoxes[r].jqxCheckBox({
            checked: !1
          }), t.$checkBoxes[r].on("change", o);
        }

        var n = t.createEvaluationMeasureCommand();
        t.executeCommand(n);
      }), t.$checkBoxes) {
        t.$evaluationMeasureCheckboxContainer.append(t.$checkBoxes[r]), t.createCheckBox(t.$checkBoxes[r], {}, "brtc-va-editors-sheet-controls-width-12"), t.$checkBoxes[r].on("change", o);
      }
    });
  }, e.prototype.createBetaControl = function () {
    var e = this;
    this.$betaElement = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-number-input"/>');
    var o = this.addPropertyControl("F-score Beta", function (o) {
      o.append(e.$betaElement);
      var r = {
        numberType: "double",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 <= value)")
      };
      e.betaControl = this.createNumericInput(e.$betaElement, r), e.betaControl.onChange(function () {
        var t = e.createBetaCommand();
        e.executeCommand(t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "beta", "F score Beta");
  }, e.prototype.createByLabelsControl = function () {
    var t = this;
    this.$byLabelsArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input"></div>');
    var e = this.addPropertyControl("By Labels", function (e) {
      e.append(t.$byLabelsArea);
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "by-labels", "By Labels");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createByLabelsRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-multiclass-classification-evaluation-property brtc-va-editors-sheet-controls-propertycontrol-by-labels-row"></div>'),
        n = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        a = $('<div class="brtc-va-multiclass-classification-evaluation-property brtc-va-editors-sheet-controls-propertycontrol-add-button"></div>'),
        i = $('<div class="brtc-va-multiclass-classification-evaluation-property brtc-va-editors-sheet-controls-propertycontrol-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.byLabelsControlArray.push(n), this.$byLabelsArea.append(r), this.createInput(n, {
      placeHolder: "Enter value"
    }, "", {
      width: "90%",
      float: "left"
    }), e || n.jqxInput("focus"), n.on("change", function (t) {
      var e = o.createByLabelsCommand();
      o.isInputValueChanged("by-labels", e.options.ref.param["by-labels"]) && o.executeCommand(e);
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-sheet-controls-propertycontrol-by-labels-row"),
          e = t.prevAll().length;
      o.byLabelsControlArray.splice(e, 1), t.remove();
      var r = o.createByLabelsCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createByLabelsRow(!1, !1);
      var t = o.createByLabelsCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.predictColumnControl.setItems(this.columnNameArray), this.labelColumnControl.setItems(this.columnNameArray), this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderPredictColumn = function () {
    var t = this.options.fnUnit.param["predict-column"];
    this.predictColumnControl.setSelectedItems(t ? [t] : []);
  }, e.prototype.renderLabelColumn = function () {
    var t = this.options.fnUnit.param["label-column"];
    this.labelColumnControl.setSelectedItems(t ? [t] : []);
  }, e.prototype.renderConfusionMatrix = function () {}, e.prototype.renderEvaluationMeasure = function () {
    var t = this.options.fnUnit.param["evaluation-measure"];
    if (void 0 !== t) for (var e in this.$checkBoxes) {
      $.inArray(this.$checkBoxes[e].data("evaluationMeasure"), t) > -1 ? this.$checkBoxes[e].jqxCheckBox({
        checked: !0
      }) : this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    } else for (var e in this.$checkBoxes) {
      this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.renderBeta = function () {
    var t = this.options.fnUnit.param.beta;
    this.betaControl.setValue(t);
  }, e.prototype.renderByLabels = function () {
    var t = this.options.fnUnit.param["by-labels"];
    this.byLabelsControlArray = [], this.$byLabelsArea.empty(), this.createByLabelsRow(!0, !0);

    for (var e = 0; e < t.length; e++) {
      e >= 1 && this.createByLabelsRow(!1, !0), this.byLabelsControlArray[e].val(t[e]);
    }
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "predict-column" === this.problems[t].param && this.createValidationContent(this.$predictColumnElement.parent(), this.problems[t]), "label-column" === this.problems[t].param && this.createValidationContent(this.$labelColumnElement.parent(), this.problems[t]), "evaluation-measure" === this.problems[t].param && this.createValidationContent(this.$evaluationMeasureCheckboxContainer.parent(), this.problems[t]), "beta" === this.problems[t].param && this.createValidationContent(this.$betaElement.parent(), this.problems[t]), "by-labels" === this.problems[t].param && this.createValidationContent(this.$byLabelsArea.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createPredictColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.predictColumnControl.getSelectedItems();
    return e.ref.param["predict-column"] = o[0] ? o[0] : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createLabelColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.labelColumnControl.getSelectedItems();
    return e.ref.param["label-column"] = o[0] ? o[0] : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createConfusionMatrixCommand = function () {
    return this.createOutTableCommand();
  }, e.prototype.createEvaluationMeasureCommand = function () {
    return this.createOutTableCommand();
  }, e.prototype.createOutTableCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["confusion-matrix"] = "true", e.ref.param["evaluation-measure"] = [], this.$checkBoxes) {
      !0 === this.$checkBoxes[o].val() && e.ref.param["evaluation-measure"].push(this.$checkBoxes[o].data("evaluationMeasure"));
    }

    var r = new t.VA.Core.CompoundCommand(!0),
        n = $.extend(!0, [], this.options.fnUnit[OUT_DATA]);
    return 0 == e.ref.param["evaluation-measure"].length ? (n.splice(n.length - 1, 1), e.ref[OUT_DATA] = n, r.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, e))) : 1 == e.ref.param["evaluation-measure"].length && 1 == n.length && (n.push(t.VA.Core.Utils.IDGenerator.table.id()), e.ref[OUT_DATA] = n, r.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, e))), r.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e)), r;
  }, e.prototype.checkEvaluationMeasure = function () {
    for (var t in this.$checkBoxes) {
      if (!0 === this.$checkBoxes[t].jqxCheckBox("checked")) return !0;
    }

    return !1;
  }, e.prototype.createBetaCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.beta = "";
    var o = this.betaControl.getValue();
    return o && (e.ref.param.beta = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createByLabelsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["by-labels"] = [], this.byLabelsControlArray) {
      e.ref.param["by-labels"].push(this.byLabelsControlArray[o].val());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.multiclassClassificationEvaluation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_PREDICT_COLUMN = "predict-column", this.PARAM_LABEL_COLUMN = "label-column", this.PARAM_EVALUATION_MEASURE = "evaluation-measure", this.PARAM_CONFUSION_MATRIX = "confusion-matrix", this.PARAM_BY_LABELS = "by-labels", this.PARAM_BETA = "beta", this.PARAM_ALTER_CHARACTER = "alter-character", this.PARAM_GROUP_BY = "groupby", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addPredictColumnRule(), this.addLabelColumnRule(), this.addGroupByRule();
  }, e.prototype.addPredictColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_PREDICT_COLUMN, [e.param[t.PARAM_PREDICT_COLUMN]]);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_PREDICT_COLUMN,
          messageParam: ["Predict Column"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_PREDICT_COLUMN]);
      }
    });
  }, e.prototype.addLabelColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_LABEL_COLUMN, [e.param[t.PARAM_LABEL_COLUMN]]);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_LABEL_COLUMN,
          messageParam: ["Label Column"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_LABEL_COLUMN]);
      }
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = t.getArrayConflicted([e.param[t.PARAM_LABEL_COLUMN]], [e.param[t.PARAM_PREDICT_COLUMN]]);
        return t.createProblemForConflicted(o, t.PARAM_LABEL_COLUMN, "Predict Column", e);
      }
    });
  }, e.prototype.addEvaluationMeasureRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: t.PARAM_EVALUATION_MEASURE,
        messageParam: ["Evaluation Measure"]
      };
      return t._checkArrayIsEmpty(o, e, e.param[t.PARAM_EVALUATION_MEASURE]);
    });
  }, e.prototype.addGroupByRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_GROUP_BY, e.param[t.PARAM_GROUP_BY]);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = t.getArrayConflicted(e.param[t.PARAM_GROUP_BY], [e.param[t.PARAM_PREDICT_COLUMN]], [e.param[t.PARAM_LABEL_COLUMN]]);
        return t.createProblemForConflicted(o, t.PARAM_GROUP_BY, "Predict Column or Label Column", e);
      }
    });
  }, t.VA.Core.Functions.Library.multiclassClassificationEvaluation.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.outDet = {
    category: "evaluation",
    defaultFnUnit: {
      func: "outDet",
      name: "OutDet",
      inData: [],
      outData: [],
      param: {
        alpha: "0.5",
        decay: "0.0",
        visiblehistory: "26"
      },
      display: {
        label: "OutDet",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "OutDet",
    tags: ["OutDet", "out", "det"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      alpha: this.renderAlpha,
      decay: this.renderDecay,
      visiblehistory: this.renderVisibleHistory
    }, this.createAlpha(), this.createDecay(), this.createVisibleHistory();
  }, e.prototype.createAlpha = function (t) {
    var e = this;
    this.$alpha = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Alpha", function (t) {
      t.append(this.$alpha);
      e.alphaControl = e.createNumericInput(e.$alpha, {
        numberType: "double",
        min: 0,
        minus: !1
      }), e.alphaControl.onChange(function () {
        e.createNumericInputCommand("alpha", this.getValue());
      });
    });
  }, e.prototype.createDecay = function (t) {
    var e = this;
    this.$decay = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Decay", function (t) {
      t.append(this.$decay);
      e.decayControl = e.createNumericInput(e.$decay, {
        numberType: "double",
        min: 0,
        minus: !1
      }), e.decayControl.onChange(function () {
        e.createNumericInputCommand("decay", this.getValue());
      });
    });
  }, e.prototype.createVisibleHistory = function (t) {
    var e = this;
    this.$visibleHistory = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Visible History", function (t) {
      t.append(this.$visibleHistory);
      e.visibleHistoryControl = e.createNumericInput(e.$visibleHistory, {
        numberType: "int",
        min: 0,
        minus: !1
      }), e.visibleHistoryControl.onChange(function () {
        e.createNumericInputCommand("visiblehistory", this.getValue());
      });
    });
  }, e.prototype.renderAlpha = function () {
    this.alphaControl.setValue(this.options.fnUnit.param.alpha || "");
  }, e.prototype.renderDecay = function () {
    this.decayControl.setValue(this.options.fnUnit.param.decay || "");
  }, e.prototype.renderVisibleHistory = function () {
    this.visibleHistoryControl.setValue(this.options.fnUnit.param.visiblehistory || "");
  }, e.prototype.renderValidation = function () {}, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.outDet.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.qLearningPrescribe = {
    category: "evaluation",
    defaultFnUnit: {
      func: "qLearningPrescribe",
      name: "QLearningPrescribe",
      inData: [],
      outData: [],
      param: {
        "id-column": [[]],
        "state-column": [[]],
        "runtime-strategy": "BestAction",
        "best-action-tie-breaker-threshold": "",
        "epsilon-greedy-probability": "",
        "epsilon-greedy-tie-breaker-threshold": "",
        "soft-max-temperature": ""
      },
      display: {
        label: "QLearning Prescribe",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function prescribes action based on a QLearning/Sarsa (TemporalDifference) trained model.",
    tags: ["qLearningPrescribe", "QLearningPrescribe", "q learning Prescribe", "QLearning Prescribe", "q", "Q", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_ID_COLUMN = "id-column", this.PARAM_STATE_COLUMN = "state-column", this.PARAM_RUNTIME_STRATEGY = "runtime-strategy", this.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD = "best-action-tie-breaker-threshold", this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY = "epsilon-greedy-probability", this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD = "epsilon-greedy-tie-breaker-threshold", this.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE = "soft-max-temperature", this.render = {
      "id-column": this.renderIdColumnControl,
      "state-column": this.renderStateColumnControl,
      "runtime-strategy": this.renderRuntimeStrategyControl,
      "best-action-tie-breaker-threshold": this.renderRuntimeStrategyBestActionTieBreakerThresholdControl,
      "epsilon-greedy-probability": this.renderRuntimeStrategyEpsilonGreedyProbabilityControl,
      "epsilon-greedy-tie-breaker-threshold": this.renderRuntimeStrategyEpsilonGreedyTieBreakerThresholdControl,
      "soft-max-temperature": this.renderRuntimeStrategySoftMaxTemperatureControl
    }, this.createIdColumnControl(), this.createStateColumnControl(), this.createRuntimeStrategyControl(), this.createBestActionArea(e), this.createEpsilonGreedyArea(e), this.createSoftMaxArea(e);
  }, e.prototype.createIdColumnControl = function (t) {
    var e = this;
    this.$idColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-id-column"/>'), this.addPropertyControl("Id Column", function (t) {
      t.append(e.$idColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_ID_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.idColumnControl = e.createColumnList(e.$idColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createStateColumnControl = function (t) {
    var e = this;
    this.$stateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-state-column"/>'), this.addPropertyControl("State Column", function (t) {
      t.append(e.$stateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.stateColumnControl = e.createColumnList(e.$stateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRuntimeStrategyControl = function () {
    var t = this;
    this.$strategyType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.strategyTypeSource = [{
      label: "BestAction",
      value: "BestAction"
    }, {
      label: "EpsilonGreedy",
      value: "EpsilonGreedy"
    }, {
      label: "SoftMax",
      value: "SoftMax"
    }], this.addPropertyControl("Runtime Strategy", function (e) {
      t.createDropDownList(this.$strategyType, {
        source: this.strategyTypeSource
      }), e.append(t.$strategyType.parent()), t.$strategyType.on("change", function () {
        var e = t.$strategyType.jqxDropDownList("getSelectedItem") ? t.$strategyType.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand(t.PARAM_RUNTIME_STRATEGY, e);
        t.executeCommand(o);
        var r = t.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol-subarea");
        $.each(r, function (t, o) {
          $(o).attr("strategyType") === e ? $(o).css("display", "block") : $(o).css("display", "none");
        });
      });
    });
  }, e.prototype.createBestActionArea = function (t) {
    this.$bestActionArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" strategyType="BestAction" />'), t.append(this.$bestActionArea), this.createBestActionTieBreakerThresholdControl(this.$bestActionArea), this.$bestActionArea.css("display", "none");
  }, e.prototype.createBestActionTieBreakerThresholdControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$bestActionArea
    };
    this.$bestActionTieBreakerThreshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Best Action Tie Breaker Threshold", function (t) {
      t.append(e.$bestActionTieBreakerThreshold);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$bestActionTieBreakerThresholdControl = e.createNumericInput(e.$bestActionTieBreakerThreshold, o), e.$bestActionTieBreakerThresholdControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createEpsilonGreedyArea = function (t) {
    this.$epsilonGreedyArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" strategyType="EpsilonGreedy" />'), t.append(this.$epsilonGreedyArea), this.createEpsilonGreedyProbabilityControl(this.$epsilonGreedyArea), this.createEpsilonGreedyTieBreakerThresholdControl(this.$epsilonGreedyArea), this.$epsilonGreedyArea.css("display", "none");
  }, e.prototype.createEpsilonGreedyProbabilityControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$epsilonGreedyArea
    };
    this.$epsilonGreedyProbability = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Epsilon Greedy Probability", function (t) {
      t.append(e.$epsilonGreedyProbability);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$epsilonGreedyProbabilityControl = e.createNumericInput(e.$epsilonGreedyProbability, o), e.$epsilonGreedyProbabilityControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createEpsilonGreedyTieBreakerThresholdControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$epsilonGreedyArea
    };
    this.$epsilonGreedyTieBreakerThreshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Epsilon Greedy Tie Breaker Threshold", function (t) {
      t.append(e.$epsilonGreedyTieBreakerThreshold);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$epsilonGreedyTieBreakerThresholdControl = e.createNumericInput(e.$epsilonGreedyTieBreakerThreshold, o), e.$epsilonGreedyTieBreakerThresholdControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createSoftMaxArea = function (t) {
    this.$softMaxArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" strategyType="SoftMax" />'), t.append(this.$softMaxArea), this.createSoftMaxTemperatureControl(this.$softMaxArea), this.$softMaxArea.css("display", "none");
  }, e.prototype.createSoftMaxTemperatureControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$softMaxArea
    };
    this.$softMaxTemperature = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Soft Max Temperature", function (t) {
      t.append(e.$softMaxTemperature);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$softMaxTemperatureControl = e.createNumericInput(e.$softMaxTemperature, o), e.$softMaxTemperatureControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.idColumnControl.setItems(this.stringColumnArray), this.stateColumnControl.setItems(this.arrayDoubleColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_ID_COLUMN && this.createValidationContent(this.$idColumn, this.problems[t]), this.problems[t].param === this.PARAM_STATE_COLUMN && this.createValidationContent(this.$stateColumn, this.problems[t]), this.problems[t].param === this.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD && this.createValidationContent(this.$bestActionTieBreakerThreshold, this.problems[t]), this.problems[t].param === this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY && this.createValidationContent(this.$epsilonGreedyProbability, this.problems[t]), this.problems[t].param === this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD && this.createValidationContent(this.$epsilonGreedyTieBreakerThreshold, this.problems[t]), this.problems[t].param === this.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE && this.createValidationContent(this.$softMaxTemperature, this.problems[t]);
    }
  }, e.prototype.renderIdColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ID_COLUMN];
    this.idColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_STATE_COLUMN];
    this.stateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderRuntimeStrategyControl = function () {
    var t = this.options.fnUnit.param;
    void 0 === t[this.PARAM_RUNTIME_STRATEGY] || "" === t[this.PARAM_RUNTIME_STRATEGY] ? this.$strategyType.jqxDropDownList({
      selectedIndex: 0
    }) : this.$strategyType.jqxDropDownList("selectItem", t[this.PARAM_RUNTIME_STRATEGY]);
  }, e.prototype.renderRuntimeStrategyBestActionTieBreakerThresholdControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD];
    this.$bestActionTieBreakerThresholdControl.setValue(t);
  }, e.prototype.renderRuntimeStrategyEpsilonGreedyProbabilityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY];
    this.$epsilonGreedyProbabilityControl.setValue(t);
  }, e.prototype.renderRuntimeStrategyEpsilonGreedyTieBreakerThresholdControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD];
    this.$epsilonGreedyTieBreakerThresholdControl.setValue(t);
  }, e.prototype.renderRuntimeStrategySoftMaxTemperatureControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE];
    this.$softMaxTemperatureControl.setValue(t);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.qLearningPrescribe.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_ID_COLUMN = "id-column", this.PARAM_STATE_COLUMN = "state-column", this.PARAM_RUNTIME_STRATEGY = "runtime-strategy", this.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD = "best-action-tie-breaker-threshold", this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY = "epsilon-greedy-probability", this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD = "epsilon-greedy-tie-breaker-threshold", this.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE = "soft-max-temperature", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addIdColumnRule(), this.addStateColumnRule();
  }, e.prototype.addIdColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "Id Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "string");
    });
  }, e.prototype.addStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "number[]");
    });
  }, e = e, t.VA.Core.Functions.Library.qLearningPrescribe.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.qLearningTrain = {
    category: "evaluation",
    defaultFnUnit: {
      func: "qLearningTrain",
      name: "QLearningTrain",
      inData: [],
      outData: [],
      param: {
        "correlation-id-column": [[]],
        "state-column": [[]],
        "action-column": [[]],
        "reward-column": [[]],
        "next-state-column": [[]],
        "timestamp-column": [[]],
        "terminal-state-flag-column": [[]],
        dimensionality: "",
        "action-list": [],
        "max-learning-iterations": "",
        "convergence-delta": "",
        "alpha-decay": "true",
        alpha: "",
        gamma: "",
        "function-approximator-type": "DecisionTree",
        "decision-tree-max-bins": "",
        "decision-tree-max-depth": "",
        "random-forest-feature-subset-strategy": "auto",
        "random-forest-max-bins": "",
        "random-forest-max-depth": "",
        "random-forest-num-trees": "",
        "gradient-boosted-tree-num-iterations": "",
        "gradient-boosted-tree-max-depth": ""
      },
      display: {
        label: "QLearning Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Learn a prescriptive model from the given training data.",
    tags: ["qLearningTrain", "QLearningTrain", "q learning train", "QLearning Train", "q", "Q", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_CORRELATION_ID_COLUMN = "correlation-id-column", this.PARAM_STATE_COLUMN = "state-column", this.PARAM_ACTION_COLUMN = "action-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_NEXT_STATE_COLUMN = "next-state-column", this.PARAM_TIMESTAMP_COLUMN = "timestamp-column", this.PARAM_TERMINAL_STATE_FLAG_COLUMN = "terminal-state-flag-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_ACTION_LIST = "action-list", this.PARAM_MAX_LEARNING_ITERATIONS = "max-learning-iterations", this.PARAM_CONVERGENCE_DELTA = "convergence-delta", this.PARAM_ALPHA_DECAY = "alpha-decay", this.PARAM_ALPHA = "alpha", this.PARAM_GAMMA = "gamma", this.PARAM_FUNCTION_APPROXIMATOR_TYPE = "function-approximator-type", this.PARAM_DECISION_TREE_MAX_BINS = "decision-tree-max-bins", this.PARAM_DECISION_TREE_MAX_DEPTH = "decision-tree-max-depth", this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY = "random-forest-feature-subset-strategy", this.PARAM_RANDOM_FOREST_MAX_BINS = "random-forest-max-bins", this.PARAM_RANDOM_FOREST_MAX_DEPTH = "random-forest-max-depth", this.PARAM_RANDOM_FOREST_NUM_TREES = "random-forest-num-trees", this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS = "gradient-boosted-tree-num-iterations", this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH = "gradient-boosted-tree-max-depth", this.render = {
      "context-column": this.renderCorrelationIdColumnControl,
      "state-column": this.renderStateColumnControl,
      "action-column": this.renderActionColumnControl,
      "reward-column": this.renderRewardColumnControl,
      "next-state-column": this.renderNextStateColumnControl,
      "timestamp-column": this.renderTimestampColumnControl,
      "terminal-state-flag-column": this.renderTerminalStateFlagColumnControl,
      dimensionality: this.renderDimensionalityControl,
      "action-list": this.renderActionsListControl,
      "max-learning-iterations": this.renderMaxLearningIterationsControl,
      "convergence-delta": this.renderConvergenceDeltaControl,
      "alpha-decay": this.renderAlphaDecayControl,
      alpha: this.renderAlphaControl,
      gamma: this.renderGammaControl,
      "function-approximator-type": this.renderFunctionApproximatorTypeControl,
      "decision-tree-max-bins": this.renderDecisionTreeMaxBinsControl,
      "decision-tree-max-depth": this.renderDecisionTreeMaxDepthControl,
      "random-forest-feature-subset-strategy": this.renderRandomForestFeatureSubsetStrategyControl,
      "random-forest-max-bins": this.renderRandomForestMaxBinsControl,
      "random-forest-max-depth": this.renderRandomForestMaxDepthControl,
      "random-forest-num-trees": this.renderRandomForestNumTreesControl,
      "gradient-boosted-tree-num-iterations": this.renderGradientBoostedTreeNumIterationsControl,
      "gradient-boosted-tree-max-depth": this.renderGradientBoostedTreeMaxDepthControl
    }, this.createCorrelationIdColumnControl(), this.createStateColumnControl(), this.createActionColumnControl(), this.createRewardColumnControl(), this.createNextStateColumnControl(), this.createTimestampColumnControl(), this.createTerminalStateFlagColumnControl(), this.createDimensionalityControl(), this.createActionListControl(), this.createMaxLearningIterationsControl(), this.createConvergenceDeltaControl(), this.createAlphaDecayControl(), this.createAlphaControl(), this.createGammaControl(), this.createFunctionApproximatorTypeControl(), this.createDecisionTreeArea(e), this.createRandomForestArea(e), this.createGradientBoostedTreeArea(e);
  }, e.prototype.createCorrelationIdColumnControl = function (t) {
    var e = this;
    this.$correlationColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-correlation-column"/>'), this.addPropertyControl("Correlation Id Column", function (t) {
      t.append(e.$correlationColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_CORRELATION_ID_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.correlationColumnControl = e.createColumnList(e.$correlationColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createStateColumnControl = function (t) {
    var e = this;
    this.$stateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-state-column"/>'), this.addPropertyControl("State Column", function (t) {
      t.append(e.$stateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.stateColumnControl = e.createColumnList(e.$stateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createActionColumnControl = function (t) {
    var e = this;
    this.$actionColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-action-column"/>'), this.addPropertyControl("Action Column", function (t) {
      t.append(e.$actionColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_ACTION_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.actionColumnControl = e.createColumnList(e.$actionColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRewardColumnControl = function (t) {
    var e = this;
    this.$rewardColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-reward-column"/>'), this.addPropertyControl("Reward Column", function (t) {
      t.append(e.$rewardColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_REWARD_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.rewardColumnControl = e.createColumnList(e.$rewardColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createNextStateColumnControl = function (t) {
    var e = this;
    this.$nextStateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-next-state-column"/>'), this.addPropertyControl("Next State Column", function (t) {
      t.append(e.$nextStateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_NEXT_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.nextStateColumnControl = e.createColumnList(e.$nextStateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTimestampColumnControl = function () {
    var t = this;
    this.$timestampColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-timestamp-column"/>'), this.addPropertyControl("Timestamp Column", function (e) {
      e.append(t.$timestampColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(e, o) {
          var r = t.createColumnCommand(t.PARAM_TIMESTAMP_COLUMN, o.items);
          t.executeCommand(r);
        }
      };
      t.timestampColumnControl = t.createColumnList(t.$timestampColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTerminalStateFlagColumnControl = function () {
    var t = this;
    this.$terminalStateFlagColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-terminal-state-flag-column"/>'), this.addPropertyControl("Terminal State Flag Column", function (e) {
      e.append(t.$terminalStateFlagColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(e, o) {
          var r = t.createColumnCommand(t.PARAM_TERMINAL_STATE_FLAG_COLUMN, o.items);
          t.executeCommand(r);
        }
      };
      t.terminalStateFlagColumnControl = t.createColumnList(t.$terminalStateFlagColumn, o);
    });
  }, e.prototype.createDimensionalityControl = function () {
    var t = this;
    this.$dimensionalityInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-dimensionality-input"/>'), this.addPropertyControl("Dimensionality", function (e) {
      e.append(t.$dimensionalityInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      t.$dimensionalityControl = t.createNumericInput(t.$dimensionalityInputControl, o), t.$dimensionalityControl.onChange(function (e) {
        var o = t.createDimensionalityCommand(e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createActionListControl = function () {
    var t = this;
    this.$actionListControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Action List", function (e) {
      e.append(t.$actionListControl), t.createTextArea(t.$actionListControl, {
        placeHolder: "Enter value by new line",
        height: "100px"
      }), t.$actionListControl.on("change", function (e) {
        var o = t.createActionListCommand();
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createMaxLearningIterationsControl = function () {
    var t = this;
    this.$maxLearningIterationsInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-max-learning-iterations-input"/>'), this.addPropertyControl("Max Learning Iterations", function (e) {
      e.append(t.$maxLearningIterationsInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      t.$maxLearningIterationsControl = t.createNumericInput(t.$maxLearningIterationsInputControl, o), t.$maxLearningIterationsControl.onChange(function (e) {
        var o = t.createMaxLearningIterationsCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createConvergenceDeltaControl = function () {
    var t = this;
    this.$convergenceDeltaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-convergence-delta-input"/>'), this.addPropertyControl("Convergence Delta", function (e) {
      e.append(t.$convergenceDeltaInputControl);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1
      };
      t.$convergenceDeltaControl = t.createNumericInput(t.$convergenceDeltaInputControl, o), t.$convergenceDeltaControl.onChange(function (e) {
        var o = t.createConvergenceDeltaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createAlphaDecayControl = function () {
    var t = this;
    this.$alphaDecayTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$alphaDecayFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), this.addPropertyControl("Alpha Decay", function (e) {
      e.append(this.$alphaDecayTrueControl).append(this.$alphaDecayFalseControl), t.createRadioButton(t.$alphaDecayTrueControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$alphaDecayFalseControl, {
        width: "80",
        groupName: "Group"
      }), t.$alphaDecayTrueControl.on("checked", function () {
        var e = t.createRadioButtonCommand("true");
        t.executeCommand(e);
      }), t.$alphaDecayFalseControl.on("checked", function () {
        var e = t.createRadioButtonCommand("false");
        t.executeCommand(e);
      });
    });
  }, e.prototype.createAlphaControl = function () {
    var t = this;
    this.$alphaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-alpha-input"/>'), this.addPropertyControl("Alpha", function (e) {
      e.append(t.$alphaInputControl);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1
      };
      t.$alphaControl = t.createNumericInput(t.$alphaInputControl, o), t.$alphaControl.onChange(function (e) {
        var o = t.createAlphaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createGammaControl = function () {
    var t = this;
    this.$gammaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-gamma-input"/>'), this.addPropertyControl("Gamma", function (e) {
      e.append(t.$gammaInputControl);
      t.$gammaControl = t.createNumericInput(t.$gammaInputControl, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1
      }), t.$gammaControl.onChange(function (e) {
        var o = t.createGammaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createFunctionApproximatorTypeControl = function () {
    var t = this;
    this.$functionType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.functionTypeSource = [{
      label: "DecisionTree",
      value: "DecisionTree"
    }, {
      label: "RandomForest",
      value: "RandomForest"
    }, {
      label: "GradientBoostedTree",
      value: "GradientBoostedTree"
    }], this.addPropertyControl("Function Approximator Type", function (e) {
      t.createDropDownList(this.$functionType, {
        source: this.functionTypeSource
      }), e.append(t.$functionType.parent()), t.$functionType.on("change", function () {
        var e = t.$functionType.jqxDropDownList("getSelectedItem") ? t.$functionType.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand(t.PARAM_FUNCTION_APPROXIMATOR_TYPE, e);
        t.executeCommand(o);
        var r = t.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol-subarea");
        $.each(r, function (t, o) {
          $(o).attr("functionType") === e ? $(o).css("display", "block") : $(o).css("display", "none");
        });
      });
    });
  }, e.prototype.createDecisionTreeArea = function (t) {
    this.$decisionTreeArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" functionType="DecisionTree" />'), t.append(this.$decisionTreeArea), this.createDecisionTreeMaxBinsControl(this.$decisionTreeArea), this.createDecisionTreeMaxDepthControl(this.$decisionTreeArea), this.$decisionTreeArea.css("display", "none");
  }, e.prototype.createDecisionTreeMaxBinsControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$decisionTreeArea
    };
    this.$decisionTreeMaxBins = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Decision Tree Max Bins", function (t) {
      t.append(e.$decisionTreeMaxBins);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$decisionTreeMaxBinsControl = e.createNumericInput(e.$decisionTreeMaxBins, o), e.$decisionTreeMaxBinsControl.onChange(function (t) {
        var o = e.createDecisionTreeMaxBinsCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createDecisionTreeMaxDepthControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$decisionTreeArea
    };
    this.$decisionTreeMaxDepth = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Decision Tree Max Depth", function (t) {
      t.append(e.$decisionTreeMaxDepth);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$decisionTreeMaxDepthControl = e.createNumericInput(e.$decisionTreeMaxDepth, o), e.$decisionTreeMaxDepthControl.onChange(function (t) {
        var o = e.createDecisionTreeMaxDepthCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createRandomForestArea = function (t) {
    this.$randomForestArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" functionType="RandomForest" />'), t.append(this.$randomForestArea), this.createRandomForestFeatureSubsetStrategyControl(this.$randomForestArea), this.createRandomForestMaxBinsControl(this.$randomForestArea), this.createRandomForestMaxDepthControl(this.$randomForestArea), this.createRandomForestNumTreesControl(this.$randomForestArea), this.$randomForestArea.css("display", "none");
  }, e.prototype.createRandomForestFeatureSubsetStrategyControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$randomForestArea
    },
        r = ["auto", "all", "sqrt", "log2", "onethird"];
    this.$randomForestFeatureSubsetStrategy = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.addPropertyControl("Random Forest Feature Subset Strategy", function (t) {
      e.createDropDownList(this.$randomForestFeatureSubsetStrategy, {
        source: r
      }), t.append(e.$randomForestFeatureSubsetStrategy.parent()), e.$randomForestFeatureSubsetStrategy.on("change", function () {
        var t = e.$randomForestFeatureSubsetStrategy.jqxDropDownList("getSelectedItem") ? e.$randomForestFeatureSubsetStrategy.jqxDropDownList("getSelectedItem").value : "",
            o = e.createCommonCommand(e.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createRandomForestMaxBinsControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$randomForestArea
    };
    this.$randomForestMaxBins = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Random Forest Max Bins", function (t) {
      t.append(e.$randomForestMaxBins);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$randomForestMaxBinsControl = e.createNumericInput(e.$randomForestMaxBins, o), e.$randomForestMaxBinsControl.onChange(function (t) {
        var o = e.createRandomForestMaxBinsCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createRandomForestMaxDepthControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$randomForestArea
    };
    this.$randomForestMaxDepth = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Random Forest Max Depth", function (t) {
      t.append(e.$randomForestMaxDepth);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$randomForestMaxDepthControl = e.createNumericInput(e.$randomForestMaxDepth, o), e.$randomForestMaxDepthControl.onChange(function (t) {
        var o = e.createRandomForestMaxDepthCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createRandomForestNumTreesControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$randomForestArea
    };
    this.$randomForestNumTrees = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Random Forest Num Trees", function (t) {
      t.append(e.$randomForestNumTrees);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$randomForestNumTreesControl = e.createNumericInput(e.$randomForestNumTrees, o), e.$randomForestNumTreesControl.onChange(function (t) {
        var o = e.createRandomForestNumTreesCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createGradientBoostedTreeArea = function (t) {
    this.$gradientBoostedTreeArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" functionType="GradientBoostedTree" />'), t.append(this.$gradientBoostedTreeArea), this.createGradientBoostedTreeNumIterationsControl(this.$gradientBoostedTreeArea), this.createGradientBoostedTreeMaxDepthControl(this.$gradientBoostedTreeArea), this.$gradientBoostedTreeArea.css("display", "none");
  }, e.prototype.createGradientBoostedTreeNumIterationsControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$gradientBoostedTreeArea
    };
    this.$gradientBoostedTreeNumIterations = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Gradient Boosted Tree Num Iterations", function (t) {
      t.append(e.$gradientBoostedTreeNumIterations);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$gradientBoostedTreeNumIterationsControl = e.createNumericInput(e.$gradientBoostedTreeNumIterations, o), e.$gradientBoostedTreeNumIterationsControl.onChange(function (t) {
        var o = e.createGradientBoostedTreeNumIterationsCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createGradientBoostedTreeMaxDepthControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$gradientBoostedTreeArea
    };
    this.$gradientBoostedTreeMaxDepth = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Gradient Boosted Tree Max Depth", function (t) {
      t.append(e.$gradientBoostedTreeMaxDepth);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$gradientBoostedTreeMaxDepthControl = e.createNumericInput(e.$gradientBoostedTreeMaxDepth, o), e.$gradientBoostedTreeMaxDepthControl.onChange(function (t) {
        var o = e.createGradientBoostedTreeMaxDepthCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.doubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double" === t.internalType || "Float" === t.internalType || "Decimal" === t.internalType;
    }), this.longColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Long" === t.internalType;
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.booleanColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Boolean" === t.internalType;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.correlationColumnControl.setItems(this.stringColumnArray), this.stateColumnControl.setItems(this.arrayDoubleColumnArray), this.actionColumnControl.setItems(this.stringColumnArray), this.rewardColumnControl.setItems(this.doubleColumnArray), this.nextStateColumnControl.setItems(this.arrayDoubleColumnArray), this.timestampColumnControl.setItems(this.longColumnArray), this.terminalStateFlagColumnControl.setItems(this.booleanColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_CORRELATION_ID_COLUMN && this.createValidationContent(this.$correlationColumn, this.problems[t]), this.problems[t].param === this.PARAM_STATE_COLUMN && this.createValidationContent(this.$stateColumn, this.problems[t]), this.problems[t].param === this.PARAM_ACTION_COLUMN && this.createValidationContent(this.$actionColumn, this.problems[t]), this.problems[t].param === this.PARAM_REWARD_COLUMN && this.createValidationContent(this.$rewardColumn, this.problems[t]), this.problems[t].param === this.PARAM_NEXT_STATE_COLUMN && this.createValidationContent(this.$nextStateColumn, this.problems[t]), this.problems[t].param === this.PARAM_TIMESTAMP_COLUMN && this.createValidationContent(this.$timestampColumn, this.problems[t]), this.problems[t].param === this.PARAM_DIMENSIONALITY && this.createValidationContent(this.$dimensionalityInputControl, this.problems[t]), this.problems[t].param === this.PARAM_ACTION_LIST && this.createValidationContent(this.$actionListControl.parent(), this.problems[t]), this.problems[t].param, this.PARAM_FUNCTION_APPROXIMATOR_TYPE, this.problems[t].param === this.PARAM_DECISION_TREE_MAX_BINS && this.createValidationContent(this.$decisionTreeMaxBins, this.problems[t]), this.problems[t].param === this.PARAM_DECISION_TREE_MAX_DEPTH && this.createValidationContent(this.$decisionTreeMaxDepth, this.problems[t]), this.problems[t].param === this.PARAM_RANDOM_FOREST_MAX_BINS && this.createValidationContent(this.$randomForestMaxBins, this.problems[t]), this.problems[t].param === this.PARAM_RANDOM_FOREST_MAX_DEPTH && this.createValidationContent(this.$randomForestMaxDepth, this.problems[t]), this.problems[t].param === this.PARAM_RANDOM_FOREST_NUM_TREES && this.createValidationContent(this.$randomForestNumTrees, this.problems[t]), this.problems[t].param === this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS && this.createValidationContent(this.$gradientBoostedTreeNumIterations, this.problems[t]), this.problems[t].param === this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH && this.createValidationContent(this.$gradientBoostedTreeMaxDepth, this.problems[t]);
    }
  }, e.prototype.renderCorrelationIdColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CORRELATION_ID_COLUMN];
    this.correlationColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_STATE_COLUMN];
    this.stateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderActionColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ACTION_COLUMN];
    this.actionColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderRewardColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REWARD_COLUMN];
    this.rewardColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderNextStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NEXT_STATE_COLUMN];
    this.nextStateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderTimestampColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TIMESTAMP_COLUMN];
    this.timestampColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderTerminalStateFlagColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TERMINAL_STATE_FLAG_COLUMN];
    this.terminalStateFlagColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderDimensionalityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DIMENSIONALITY];
    this.$dimensionalityControl.setValue(t);
  }, e.prototype.renderActionsListControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ACTION_LIST],
        e = "";
    if (t) for (var o = 0; o < t.length; o++) {
      e += t[o] || "", o < t.length - 1 && (e += "\n");
    }
    this.$actionListControl.jqxTextArea("val", e);
  }, e.prototype.renderMaxLearningIterationsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_LEARNING_ITERATIONS];
    this.$maxLearningIterationsControl.setValue(t);
  }, e.prototype.renderConvergenceDeltaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CONVERGENCE_DELTA];
    this.$convergenceDeltaControl.setValue(t);
  }, e.prototype.renderAlphaDecayControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ALPHA_DECAY];
    t ? "true" === t ? this.$alphaDecayTrueControl.jqxRadioButton("check") : this.$alphaDecayFalseControl.jqxRadioButton("check") : this.$alphaDecayTrueControl.jqxRadioButton("check");
  }, e.prototype.renderAlphaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ALPHA];
    this.$alphaControl.setValue(t);
  }, e.prototype.renderGammaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GAMMA];
    this.$gammaControl.setValue(t);
  }, e.prototype.renderFunctionApproximatorTypeControl = function () {
    var t = this.options.fnUnit.param;
    void 0 === t[this.PARAM_FUNCTION_APPROXIMATOR_TYPE] || "" === t[this.PARAM_FUNCTION_APPROXIMATOR_TYPE] ? this.$functionType.jqxDropDownList({
      selectedIndex: 0
    }) : this.$functionType.jqxDropDownList("selectItem", t[this.PARAM_FUNCTION_APPROXIMATOR_TYPE]);
  }, e.prototype.renderDecisionTreeMaxBinsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DECISION_TREE_MAX_BINS];
    this.$decisionTreeMaxBinsControl.setValue(t);
  }, e.prototype.renderDecisionTreeMaxDepthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DECISION_TREE_MAX_DEPTH];
    this.$decisionTreeMaxDepthControl.setValue(t);
  }, e.prototype.renderRandomForestFeatureSubsetStrategyControl = function () {
    var t = this.options.fnUnit.param;
    void 0 === t[this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY] || "" === t[this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY] ? this.$randomForestFeatureSubsetStrategy.jqxDropDownList({
      selectedIndex: 0
    }) : this.$randomForestFeatureSubsetStrategy.jqxDropDownList("selectItem", t[this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY]);
  }, e.prototype.renderRandomForestMaxBinsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RANDOM_FOREST_MAX_BINS];
    this.$randomForestMaxBinsControl.setValue(t);
  }, e.prototype.renderRandomForestMaxDepthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RANDOM_FOREST_MAX_DEPTH];
    this.$randomForestMaxDepthControl.setValue(t);
  }, e.prototype.renderRandomForestNumTreesControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RANDOM_FOREST_NUM_TREES];
    this.$randomForestNumTreesControl.setValue(t);
  }, e.prototype.renderGradientBoostedTreeNumIterationsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS];
    this.$gradientBoostedTreeNumIterationsControl.setValue(t);
  }, e.prototype.renderGradientBoostedTreeMaxDepthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH];
    this.$gradientBoostedTreeMaxDepthControl.setValue(t);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createDimensionalityCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DIMENSIONALITY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createActionListCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.$actionListControl.jqxTextArea("val").split("\n"),
        r = [];
    return $.each(o, function (t, e) {
      var o = e.trim();
      "" != o && r.push(o);
    }), e.ref.param[this.PARAM_ACTION_LIST] = r, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createMaxLearningIterationsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_MAX_LEARNING_ITERATIONS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createConvergenceDeltaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_CONVERGENCE_DELTA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRadioButtonCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_ALPHA_DECAY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createAlphaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_ALPHA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGammaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_GAMMA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createDecisionTreeMaxBinsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DECISION_TREE_MAX_BINS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createDecisionTreeMaxDepthCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DECISION_TREE_MAX_DEPTH] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRandomForestMaxBinsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_RANDOM_FOREST_MAX_BINS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRandomForestMaxDepthCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_RANDOM_FOREST_MAX_DEPTH] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRandomForestNumTreesCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_RANDOM_FOREST_NUM_TREES] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGradientBoostedTreeNumIterationsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGradientBoostedTreeMaxDepthCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.qLearningTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_CORRELATION_ID_COLUMN = "correlation-id-column", this.PARAM_STATE_COLUMN = "state-column", this.PARAM_ACTION_COLUMN = "action-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_NEXT_STATE_COLUMN = "next-state-column", this.PARAM_TIMESTAMP_COLUMN = "timestamp-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_ACTION_LIST = "action-list", this.PARAM_FUNCTION_APPROXIMATOR_TYPE = "function-approximator-type", this.PARAM_DECISION_TREE_MAX_BINS = "decision-tree-max-bins", this.PARAM_DECISION_TREE_MAX_DEPTH = "decision-tree-max-depth", this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY = "random-forest-feature-subset-strategy", this.PARAM_RANDOM_FOREST_MAX_BINS = "random-forest-max-bins", this.PARAM_RANDOM_FOREST_MAX_DEPTH = "random-forest-max-depth", this.PARAM_RANDOM_FOREST_NUM_TREES = "random-forest-num-trees", this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS = "gradient-boosted-tree-num-iterations", this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH = "gradient-boosted-tree-max-depth", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addCorrelationIdColumnRule(), this.addStateColumnRule(), this.addActionColumnRule(), this.addRewardColumnRule(), this.addNextStateColumnRule(), this.addTimestampColumnRule(), this.addDimensionalityRule(), this.addRule(this.emptyActionList);
  }, e.prototype.addCorrelationIdColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_CORRELATION_ID_COLUMN, e.param[t.PARAM_CORRELATION_ID_COLUMN][0], "Correlation Id Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_CORRELATION_ID_COLUMN, e.param[t.PARAM_CORRELATION_ID_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_CORRELATION_ID_COLUMN, e.param[t.PARAM_CORRELATION_ID_COLUMN][0], "string");
    });
  }, e.prototype.addStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "number[]");
    });
  }, e.prototype.addActionColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0], "Action Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0], "string");
    });
  }, e.prototype.addRewardColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "Reward Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "number");
    });
  }, e.prototype.addNextStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0], "Next State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0], "number[]");
    });
  }, e.prototype.addTimestampColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_TIMESTAMP_COLUMN, e.param[t.PARAM_TIMESTAMP_COLUMN][0], "Timestamp Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_TIMESTAMP_COLUMN, e.param[t.PARAM_TIMESTAMP_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_TIMESTAMP_COLUMN, e.param[t.PARAM_TIMESTAMP_COLUMN][0], "number");
    });
  }, e.prototype.addDimensionalityRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_DIMENSIONALITY,
          messageParam: ["Dimensionality"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_DIMENSIONALITY]);
      }
    });
  }, e.prototype.emptyActionList = function (t) {
    if (this._hasSchema(t)) {
      var e = [];
      return void 0 === t.param[this.PARAM_ACTION_LIST] ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ACTION_LIST,
        messageParam: ["Action List"]
      }, t)), e) : this.isEmptyForArray(t.param[this.PARAM_ACTION_LIST]) ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ACTION_LIST,
        messageParam: ["Action List"]
      }, t)), e) : void 0;
    }
  }, e = e, t.VA.Core.Functions.Library.qLearningTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.regressionEvaluation = {
    category: "evaluation",
    defaultFnUnit: {
      func: "regressionEvaluation",
      name: "EvaluateRegression",
      inData: [],
      outData: [],
      param: {
        "predict-column": [[]],
        "value-column": [[]]
      },
      display: {
        label: "Evaluate Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Regression analysis is used when predicting a continuous output variable from a number of independent variables.",
    tags: ["Evaluate Regression", "EvaluateRegression", "Regression", "Evaluation", "Summary", "verification"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.numericTypes = ["smallint", "integer", "bigint", "decimal", "numeric", "real", "double", "float", "number", "int"], this.PARAM_PREDICT_COLUMN = "predict-column", this.PARAM_VALUE_COLUMN = "value-column", this.render = {
      "predict-column": this.renderPredictColumnControl,
      "value-column": this.renderValueColumnControl
    }, this.createPredictColumnsControl(), this.createValueColumnsControl();
  }, e.prototype.createPredictColumnsControl = function () {
    var t = this;
    this.$predictColumnWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Prediction Column", function (e) {
      e.append(t.$predictColumnWidget);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var e = t.createColumnCommand(t.PARAM_PREDICT_COLUMN);
          t.executeCommand(e);
        }
      };
      t.$predictColumnControl = t.createColumnList(t.$predictColumnWidget, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createValueColumnsControl = function () {
    var t = this;
    this.$valueColumnWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Value Column", function (e) {
      e.append(t.$valueColumnWidget);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var e = t.createColumnCommand(t.PARAM_VALUE_COLUMN);
          t.executeCommand(e);
        }
      };
      t.$valueColumnControl = t.createColumnList(t.$valueColumnWidget, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.$predictColumnControl.setItems(this.getFilteredData()), this.$valueColumnControl.setItems(this.getFilteredData());
  }, e.prototype.renderPredictColumnControl = function () {
    this.$predictColumnControl.setSelectedItems(this.options.fnUnit.param[this.PARAM_PREDICT_COLUMN][0]);
  }, e.prototype.renderValueColumnControl = function () {
    this.$valueColumnControl.setSelectedItems(this.options.fnUnit.param[this.PARAM_VALUE_COLUMN][0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_PREDICT_COLUMN && this.showValidation(this.$predictColumnWidget, this.problems[t]), this.problems[t].param === this.PARAM_VALUE_COLUMN && this.showValidation(this.$valueColumnWidget, this.problems[t]);
    }
  }, e.prototype.getFilteredData = function () {
    var t = [],
        e = this,
        o = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    return $.each(o, function (o, r) {
      -1 !== $.inArray(r.type.toLowerCase(), e.numericTypes) && t.push(r);
    }), t;
  }, e.prototype.createColumnCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[e] = this.getColumnsValue(e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.getColumnsValue = function (t) {
    var e,
        o = [],
        r = [];
    return e = t === this.PARAM_PREDICT_COLUMN ? this.$predictColumnControl : this.$valueColumnControl, $.each(e.getSelectedItems(), function (t, e) {
      o.push(e);
    }), r.push(o), r;
  }, t.VA.Core.Functions.Library.regressionEvaluation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_PREDICT_COLUMN = "predict-column", this.PARAM_VALUE_COLUMN = "value-column", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addPredictColumnsRule(), this.addValueColumnsRule();
  }, e.prototype.addPredictColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_PREDICT_COLUMN, e.param[t.PARAM_PREDICT_COLUMN][0], "Prediction Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_PREDICT_COLUMN, e.param[t.PARAM_PREDICT_COLUMN][0]);
    });
  }, e.prototype.addValueColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_VALUE_COLUMN, e.param[t.PARAM_VALUE_COLUMN][0], "Value Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_VALUE_COLUMN, e.param[t.PARAM_VALUE_COLUMN][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.regressionEvaluation.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.sarsaPrescribe = {
    category: "evaluation",
    defaultFnUnit: {
      func: "sarsaPrescribe",
      name: "SarsaPrescribe",
      inData: [],
      outData: [],
      param: {
        "id-column": [[]],
        "state-column": [[]],
        "runtime-strategy": "BestAction",
        "best-action-tie-breaker-threshold": "",
        "epsilon-greedy-probability": "",
        "epsilon-greedy-tie-breaker-threshold": "",
        "soft-max-temperature": ""
      },
      display: {
        label: "Sarsa Prescribe",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function prescribes action based on a QLearning/Sarsa (TemporalDifference) trained model.",
    tags: ["sarsaPrescribe", "SarsaPrescribe", "sarsa prescribe", "Sarsa Prescribe", "sarsa", "Sarsa", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_ID_COLUMN = "id-column", this.PARAM_STATE_COLUMN = "state-column", this.PARAM_RUNTIME_STRATEGY = "runtime-strategy", this.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD = "best-action-tie-breaker-threshold", this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY = "epsilon-greedy-probability", this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD = "epsilon-greedy-tie-breaker-threshold", this.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE = "soft-max-temperature", this.render = {
      "id-column": this.renderIdColumnControl,
      "state-column": this.renderStateColumnControl,
      "runtime-strategy": this.renderRuntimeStrategyControl,
      "best-action-tie-breaker-threshold": this.renderRuntimeStrategyBestActionTieBreakerThresholdControl,
      "epsilon-greedy-probability": this.renderRuntimeStrategyEpsilonGreedyProbabilityControl,
      "epsilon-greedy-tie-breaker-threshold": this.renderRuntimeStrategyEpsilonGreedyTieBreakerThresholdControl,
      "soft-max-temperature": this.renderRuntimeStrategySoftMaxTemperatureControl
    }, this.createIdColumnControl(), this.createStateColumnControl(), this.createRuntimeStrategyControl(), this.createBestActionArea(e), this.createEpsilonGreedyArea(e), this.createSoftMaxArea(e);
  }, e.prototype.createIdColumnControl = function (t) {
    var e = this;
    this.$idColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-id-column"/>'), this.addPropertyControl("Id Column", function (t) {
      t.append(e.$idColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_ID_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.idColumnControl = e.createColumnList(e.$idColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createStateColumnControl = function (t) {
    var e = this;
    this.$stateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-state-column"/>'), this.addPropertyControl("State Column", function (t) {
      t.append(e.$stateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.stateColumnControl = e.createColumnList(e.$stateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRuntimeStrategyControl = function () {
    var t = this;
    this.$strategyType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.strategyTypeSource = [{
      label: "BestAction",
      value: "BestAction"
    }, {
      label: "EpsilonGreedy",
      value: "EpsilonGreedy"
    }, {
      label: "SoftMax",
      value: "SoftMax"
    }], this.addPropertyControl("Runtime Strategy", function (e) {
      t.createDropDownList(this.$strategyType, {
        source: this.strategyTypeSource
      }), e.append(t.$strategyType.parent()), t.$strategyType.on("change", function () {
        var e = t.$strategyType.jqxDropDownList("getSelectedItem") ? t.$strategyType.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand(t.PARAM_RUNTIME_STRATEGY, e);
        t.executeCommand(o);
        var r = t.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol-subarea");
        $.each(r, function (t, o) {
          $(o).attr("strategyType") === e ? $(o).css("display", "block") : $(o).css("display", "none");
        });
      });
    });
  }, e.prototype.createBestActionArea = function (t) {
    this.$bestActionArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" strategyType="BestAction" />'), t.append(this.$bestActionArea), this.createBestActionTieBreakerThresholdControl(this.$bestActionArea), this.$bestActionArea.css("display", "none");
  }, e.prototype.createBestActionTieBreakerThresholdControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$bestActionArea
    };
    this.$bestActionTieBreakerThreshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Best Action Tie Breaker Threshold", function (t) {
      t.append(e.$bestActionTieBreakerThreshold);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$bestActionTieBreakerThresholdControl = e.createNumericInput(e.$bestActionTieBreakerThreshold, o), e.$bestActionTieBreakerThresholdControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createEpsilonGreedyArea = function (t) {
    this.$epsilonGreedyArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" strategyType="EpsilonGreedy" />'), t.append(this.$epsilonGreedyArea), this.createEpsilonGreedyProbabilityControl(this.$epsilonGreedyArea), this.createEpsilonGreedyTieBreakerThresholdControl(this.$epsilonGreedyArea), this.$epsilonGreedyArea.css("display", "none");
  }, e.prototype.createEpsilonGreedyProbabilityControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$epsilonGreedyArea
    };
    this.$epsilonGreedyProbability = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Epsilon Greedy Probability", function (t) {
      t.append(e.$epsilonGreedyProbability);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$epsilonGreedyProbabilityControl = e.createNumericInput(e.$epsilonGreedyProbability, o), e.$epsilonGreedyProbabilityControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createEpsilonGreedyTieBreakerThresholdControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$epsilonGreedyArea
    };
    this.$epsilonGreedyTieBreakerThreshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Epsilon Greedy Tie Breaker Threshold", function (t) {
      t.append(e.$epsilonGreedyTieBreakerThreshold);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$epsilonGreedyTieBreakerThresholdControl = e.createNumericInput(e.$epsilonGreedyTieBreakerThreshold, o), e.$epsilonGreedyTieBreakerThresholdControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createSoftMaxArea = function (t) {
    this.$softMaxArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" strategyType="SoftMax" />'), t.append(this.$softMaxArea), this.createSoftMaxTemperatureControl(this.$softMaxArea), this.$softMaxArea.css("display", "none");
  }, e.prototype.createSoftMaxTemperatureControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$softMaxArea
    };
    this.$softMaxTemperature = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Soft Max Temperature", function (t) {
      t.append(e.$softMaxTemperature);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$softMaxTemperatureControl = e.createNumericInput(e.$softMaxTemperature, o), e.$softMaxTemperatureControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.idColumnControl.setItems(this.stringColumnArray), this.stateColumnControl.setItems(this.arrayDoubleColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_ID_COLUMN && this.createValidationContent(this.$idColumn, this.problems[t]), this.problems[t].param === this.PARAM_STATE_COLUMN && this.createValidationContent(this.$stateColumn, this.problems[t]), this.problems[t].param === this.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD && this.createValidationContent(this.$bestActionTieBreakerThreshold, this.problems[t]), this.problems[t].param === this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY && this.createValidationContent(this.$epsilonGreedyProbability, this.problems[t]), this.problems[t].param === this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD && this.createValidationContent(this.$epsilonGreedyTieBreakerThreshold, this.problems[t]), this.problems[t].param === this.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE && this.createValidationContent(this.$softMaxTemperature, this.problems[t]);
    }
  }, e.prototype.renderIdColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ID_COLUMN];
    this.idColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_STATE_COLUMN];
    this.stateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderRuntimeStrategyControl = function () {
    var t = this.options.fnUnit.param;
    void 0 === t[this.PARAM_RUNTIME_STRATEGY] || "" === t[this.PARAM_RUNTIME_STRATEGY] ? this.$strategyType.jqxDropDownList({
      selectedIndex: 0
    }) : this.$strategyType.jqxDropDownList("selectItem", t[this.PARAM_RUNTIME_STRATEGY]);
  }, e.prototype.renderRuntimeStrategyBestActionTieBreakerThresholdControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD];
    this.$bestActionTieBreakerThresholdControl.setValue(t);
  }, e.prototype.renderRuntimeStrategyEpsilonGreedyProbabilityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY];
    this.$epsilonGreedyProbabilityControl.setValue(t);
  }, e.prototype.renderRuntimeStrategyEpsilonGreedyTieBreakerThresholdControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD];
    this.$epsilonGreedyTieBreakerThresholdControl.setValue(t);
  }, e.prototype.renderRuntimeStrategySoftMaxTemperatureControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE];
    this.$softMaxTemperatureControl.setValue(t);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.sarsaPrescribe.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_ID_COLUMN = "id-column", this.PARAM_STATE_COLUMN = "state-column", this.PARAM_RUNTIME_STRATEGY = "runtime-strategy", this.PARAM_RUNTIME_STRATEGY_BEST_ACTION_TIE_BREAKER_THRESHOLD = "best-action-tie-breaker-threshold", this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_PROBABILITY = "epsilon-greedy-probability", this.PARAM_RUNTIME_STRATEGY_EPSILON_GREEDY_TIE_BREAKER_THRESHOLD = "epsilon-greedy-tie-breaker-threshold", this.PARAM_RUNTIME_STRATEGY_SOFT_MAX_TEMPERATURE = "soft-max-temperature", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addIdColumnRule(), this.addStateColumnRule();
  }, e.prototype.addIdColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "Id Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "string");
    });
  }, e.prototype.addStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "number[]");
    });
  }, e = e, t.VA.Core.Functions.Library.sarsaPrescribe.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.sarsaTrain = {
    category: "evaluation",
    defaultFnUnit: {
      func: "sarsaTrain",
      name: "SarsaTrain",
      inData: [],
      outData: [],
      param: {
        "correlation-id-column": [[]],
        "state-column": [[]],
        "action-column": [[]],
        "reward-column": [[]],
        "next-state-column": [[]],
        "timestamp-column": [[]],
        "terminal-state-flag-column": [[]],
        dimensionality: "",
        "action-list": [],
        "max-learning-iterations": "",
        "convergence-delta": "",
        "alpha-decay": "true",
        alpha: "",
        gamma: "",
        "function-approximator-type": "DecisionTree",
        "decision-tree-max-bins": "",
        "decision-tree-max-depth": "",
        "random-forest-feature-subset-strategy": "auto",
        "random-forest-max-bins": "",
        "random-forest-max-depth": "",
        "random-forest-num-trees": "",
        "gradient-boosted-tree-num-iterations": "",
        "gradient-boosted-tree-max-depth": ""
      },
      display: {
        label: "Sarsa Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Learn a prescriptive model from the given training data.",
    tags: ["sarsaTrain", "Sarsa Train", "sarsa train", "Sarsa Train", "sarsa", "Sarsa", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_CORRELATION_ID_COLUMN = "correlation-id-column", this.PARAM_STATE_COLUMN = "state-column", this.PARAM_ACTION_COLUMN = "action-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_NEXT_STATE_COLUMN = "next-state-column", this.PARAM_TIMESTAMP_COLUMN = "timestamp-column", this.PARAM_TERMINAL_STATE_FLAG_COLUMN = "terminal-state-flag-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_ACTION_LIST = "action-list", this.PARAM_MAX_LEARNING_ITERATIONS = "max-learning-iterations", this.PARAM_CONVERGENCE_DELTA = "convergence-delta", this.PARAM_ALPHA_DECAY = "alpha-decay", this.PARAM_ALPHA = "alpha", this.PARAM_GAMMA = "gamma", this.PARAM_FUNCTION_APPROXIMATOR_TYPE = "function-approximator-type", this.PARAM_DECISION_TREE_MAX_BINS = "decision-tree-max-bins", this.PARAM_DECISION_TREE_MAX_DEPTH = "decision-tree-max-depth", this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY = "random-forest-feature-subset-strategy", this.PARAM_RANDOM_FOREST_MAX_BINS = "random-forest-max-bins", this.PARAM_RANDOM_FOREST_MAX_DEPTH = "random-forest-max-depth", this.PARAM_RANDOM_FOREST_NUM_TREES = "random-forest-num-trees", this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS = "gradient-boosted-tree-num-iterations", this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH = "gradient-boosted-tree-max-depth", this.render = {
      "context-column": this.renderCorrelationIdColumnControl,
      "state-column": this.renderStateColumnControl,
      "action-column": this.renderActionColumnControl,
      "reward-column": this.renderRewardColumnControl,
      "next-state-column": this.renderNextStateColumnControl,
      "timestamp-column": this.renderTimestampColumnControl,
      "terminal-state-flag-column": this.renderTerminalStateFlagColumnControl,
      dimensionality: this.renderDimensionalityControl,
      "action-list": this.renderActionsListControl,
      "max-learning-iterations": this.renderMaxLearningIterationsControl,
      "convergence-delta": this.renderConvergenceDeltaControl,
      "alpha-decay": this.renderAlphaDecayControl,
      alpha: this.renderAlphaControl,
      gamma: this.renderGammaControl,
      "function-approximator-type": this.renderFunctionApproximatorTypeControl,
      "decision-tree-max-bins": this.renderDecisionTreeMaxBinsControl,
      "decision-tree-max-depth": this.renderDecisionTreeMaxDepthControl,
      "random-forest-feature-subset-strategy": this.renderRandomForestFeatureSubsetStrategyControl,
      "random-forest-max-bins": this.renderRandomForestMaxBinsControl,
      "random-forest-max-depth": this.renderRandomForestMaxDepthControl,
      "random-forest-num-trees": this.renderRandomForestNumTreesControl,
      "gradient-boosted-tree-num-iterations": this.renderGradientBoostedTreeNumIterationsControl,
      "gradient-boosted-tree-max-depth": this.renderGradientBoostedTreeMaxDepthControl
    }, this.createCorrelationIdColumnControl(), this.createStateColumnControl(), this.createActionColumnControl(), this.createRewardColumnControl(), this.createNextStateColumnControl(), this.createTimestampColumnControl(), this.createTerminalStateFlagColumnControl(), this.createDimensionalityControl(), this.createActionListControl(), this.createMaxLearningIterationsControl(), this.createConvergenceDeltaControl(), this.createAlphaDecayControl(), this.createAlphaControl(), this.createGammaControl(), this.createFunctionApproximatorTypeControl(), this.createDecisionTreeArea(e), this.createRandomForestArea(e), this.createGradientBoostedTreeArea(e);
  }, e.prototype.createCorrelationIdColumnControl = function (t) {
    var e = this;
    this.$correlationColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-correlation-column"/>'), this.addPropertyControl("Correlation Id Column", function (t) {
      t.append(e.$correlationColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_CORRELATION_ID_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.correlationColumnControl = e.createColumnList(e.$correlationColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createStateColumnControl = function (t) {
    var e = this;
    this.$stateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-state-column"/>'), this.addPropertyControl("State Column", function (t) {
      t.append(e.$stateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.stateColumnControl = e.createColumnList(e.$stateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createActionColumnControl = function (t) {
    var e = this;
    this.$actionColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-action-column"/>'), this.addPropertyControl("Action Column", function (t) {
      t.append(e.$actionColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_ACTION_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.actionColumnControl = e.createColumnList(e.$actionColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRewardColumnControl = function (t) {
    var e = this;
    this.$rewardColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-reward-column"/>'), this.addPropertyControl("Reward Column", function (t) {
      t.append(e.$rewardColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_REWARD_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.rewardColumnControl = e.createColumnList(e.$rewardColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createNextStateColumnControl = function (t) {
    var e = this;
    this.$nextStateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-next-state-column"/>'), this.addPropertyControl("Next State Column", function (t) {
      t.append(e.$nextStateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_NEXT_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.nextStateColumnControl = e.createColumnList(e.$nextStateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTimestampColumnControl = function () {
    var t = this;
    this.$timestampColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-timestamp-column"/>'), this.addPropertyControl("Timestamp Column", function (e) {
      e.append(t.$timestampColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(e, o) {
          var r = t.createColumnCommand(t.PARAM_TIMESTAMP_COLUMN, o.items);
          t.executeCommand(r);
        }
      };
      t.timestampColumnControl = t.createColumnList(t.$timestampColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTerminalStateFlagColumnControl = function () {
    var t = this;
    this.$terminalStateFlagColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-terminal-state-flag-column"/>'), this.addPropertyControl("Terminal State Flag Column", function (e) {
      e.append(t.$terminalStateFlagColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(e, o) {
          var r = t.createColumnCommand(t.PARAM_TERMINAL_STATE_FLAG_COLUMN, o.items);
          t.executeCommand(r);
        }
      };
      t.terminalStateFlagColumnControl = t.createColumnList(t.$terminalStateFlagColumn, o);
    });
  }, e.prototype.createDimensionalityControl = function () {
    var t = this;
    this.$dimensionalityInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-dimensionality-input"/>'), this.addPropertyControl("Dimensionality", function (e) {
      e.append(t.$dimensionalityInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      t.$dimensionalityControl = t.createNumericInput(t.$dimensionalityInputControl, o), t.$dimensionalityControl.onChange(function (e) {
        var o = t.createDimensionalityCommand(e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createActionListControl = function () {
    var t = this;
    this.$actionListControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Action List", function (e) {
      e.append(t.$actionListControl), t.createTextArea(t.$actionListControl, {
        placeHolder: "Enter value by new line",
        height: "100px"
      }), t.$actionListControl.on("change", function (e) {
        var o = t.createActionListCommand();
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createMaxLearningIterationsControl = function () {
    var t = this;
    this.$maxLearningIterationsInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-max-learning-iterations-input"/>'), this.addPropertyControl("Max Learning Iterations", function (e) {
      e.append(t.$maxLearningIterationsInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      t.$maxLearningIterationsControl = t.createNumericInput(t.$maxLearningIterationsInputControl, o), t.$maxLearningIterationsControl.onChange(function (e) {
        var o = t.createMaxLearningIterationsCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createConvergenceDeltaControl = function () {
    var t = this;
    this.$convergenceDeltaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-convergence-delta-input"/>'), this.addPropertyControl("Convergence Delta", function (e) {
      e.append(t.$convergenceDeltaInputControl);
      t.$convergenceDeltaControl = t.createNumericInput(t.$convergenceDeltaInputControl, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1
      }), t.$convergenceDeltaControl.onChange(function (e) {
        var o = t.createConvergenceDeltaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createAlphaDecayControl = function () {
    var t = this;
    this.$alphaDecayTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$alphaDecayFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), this.addPropertyControl("Alpha Decay", function (e) {
      e.append(this.$alphaDecayTrueControl).append(this.$alphaDecayFalseControl), t.createRadioButton(t.$alphaDecayTrueControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$alphaDecayFalseControl, {
        width: "80",
        groupName: "Group"
      }), t.$alphaDecayTrueControl.on("checked", function () {
        var e = t.createRadioButtonCommand("true");
        t.executeCommand(e);
      }), t.$alphaDecayFalseControl.on("checked", function () {
        var e = t.createRadioButtonCommand("false");
        t.executeCommand(e);
      });
    });
  }, e.prototype.createAlphaControl = function () {
    var t = this;
    this.$alphaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-alpha-input"/>'), this.addPropertyControl("Alpha", function (e) {
      e.append(t.$alphaInputControl);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1
      };
      t.$alphaControl = t.createNumericInput(t.$alphaInputControl, o), t.$alphaControl.onChange(function (e) {
        var o = t.createAlphaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createGammaControl = function () {
    var t = this;
    this.$gammaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-gamma-input"/>'), this.addPropertyControl("Gamma", function (e) {
      e.append(t.$gammaInputControl);
      t.$gammaControl = t.createNumericInput(t.$gammaInputControl, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1
      }), t.$gammaControl.onChange(function (e) {
        var o = t.createGammaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createFunctionApproximatorTypeControl = function () {
    var t = this;
    this.$functionType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.functionTypeSource = [{
      label: "DecisionTree",
      value: "DecisionTree"
    }, {
      label: "RandomForest",
      value: "RandomForest"
    }, {
      label: "GradientBoostedTree",
      value: "GradientBoostedTree"
    }], this.addPropertyControl("Function Approximator Type", function (e) {
      t.createDropDownList(this.$functionType, {
        source: this.functionTypeSource
      }), e.append(t.$functionType.parent()), t.$functionType.on("change", function () {
        var e = t.$functionType.jqxDropDownList("getSelectedItem") ? t.$functionType.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand(t.PARAM_FUNCTION_APPROXIMATOR_TYPE, e);
        t.executeCommand(o);
        var r = t.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol-subarea");
        $.each(r, function (t, o) {
          $(o).attr("functionType") === e ? $(o).css("display", "block") : $(o).css("display", "none");
        });
      });
    });
  }, e.prototype.createDecisionTreeArea = function (t) {
    this.$decisionTreeArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" functionType="DecisionTree" />'), t.append(this.$decisionTreeArea), this.createDecisionTreeMaxBinsControl(this.$decisionTreeArea), this.createDecisionTreeMaxDepthControl(this.$decisionTreeArea), this.$decisionTreeArea.css("display", "none");
  }, e.prototype.createDecisionTreeMaxBinsControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$decisionTreeArea
    };
    this.$decisionTreeMaxBins = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Decision Tree Max Bins", function (t) {
      t.append(e.$decisionTreeMaxBins);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$decisionTreeMaxBinsControl = e.createNumericInput(e.$decisionTreeMaxBins, o), e.$decisionTreeMaxBinsControl.onChange(function (t) {
        var o = e.createDecisionTreeMaxBinsCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createDecisionTreeMaxDepthControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$decisionTreeArea
    };
    this.$decisionTreeMaxDepth = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Decision Tree Max Depth", function (t) {
      t.append(e.$decisionTreeMaxDepth);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$decisionTreeMaxDepthControl = e.createNumericInput(e.$decisionTreeMaxDepth, o), e.$decisionTreeMaxDepthControl.onChange(function (t) {
        var o = e.createDecisionTreeMaxDepthCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createRandomForestArea = function (t) {
    this.$randomForestArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" functionType="RandomForest" />'), t.append(this.$randomForestArea), this.createRandomForestFeatureSubsetStrategyControl(this.$randomForestArea), this.createRandomForestMaxBinsControl(this.$randomForestArea), this.createRandomForestMaxDepthControl(this.$randomForestArea), this.createRandomForestNumTreesControl(this.$randomForestArea), this.$randomForestArea.css("display", "none");
  }, e.prototype.createRandomForestFeatureSubsetStrategyControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$randomForestArea
    },
        r = ["auto", "all", "sqrt", "log2", "onethird"];
    this.$randomForestFeatureSubsetStrategy = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.addPropertyControl("Random Forest Feature Subset Strategy", function (t) {
      e.createDropDownList(this.$randomForestFeatureSubsetStrategy, {
        source: r
      }), t.append(e.$randomForestFeatureSubsetStrategy.parent()), e.$randomForestFeatureSubsetStrategy.on("change", function () {
        var t = e.$randomForestFeatureSubsetStrategy.jqxDropDownList("getSelectedItem") ? e.$randomForestFeatureSubsetStrategy.jqxDropDownList("getSelectedItem").value : "",
            o = e.createCommonCommand(e.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createRandomForestMaxBinsControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$randomForestArea
    };
    this.$randomForestMaxBins = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Random Forest Max Bins", function (t) {
      t.append(e.$randomForestMaxBins);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$randomForestMaxBinsControl = e.createNumericInput(e.$randomForestMaxBins, o), e.$randomForestMaxBinsControl.onChange(function (t) {
        var o = e.createRandomForestMaxBinsCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createRandomForestMaxDepthControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$randomForestArea
    };
    this.$randomForestMaxDepth = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Random Forest Max Depth", function (t) {
      t.append(e.$randomForestMaxDepth);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$randomForestMaxDepthControl = e.createNumericInput(e.$randomForestMaxDepth, o), e.$randomForestMaxDepthControl.onChange(function (t) {
        var o = e.createRandomForestMaxDepthCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createRandomForestNumTreesControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$randomForestArea
    };
    this.$randomForestNumTrees = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Random Forest Num Trees", function (t) {
      t.append(e.$randomForestNumTrees);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$randomForestNumTreesControl = e.createNumericInput(e.$randomForestNumTrees, o), e.$randomForestNumTreesControl.onChange(function (t) {
        var o = e.createRandomForestNumTreesCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createGradientBoostedTreeArea = function (t) {
    this.$gradientBoostedTreeArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" functionType="GradientBoostedTree" />'), t.append(this.$gradientBoostedTreeArea), this.createGradientBoostedTreeNumIterationsControl(this.$gradientBoostedTreeArea), this.createGradientBoostedTreeMaxDepthControl(this.$gradientBoostedTreeArea), this.$gradientBoostedTreeArea.css("display", "none");
  }, e.prototype.createGradientBoostedTreeNumIterationsControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$gradientBoostedTreeArea
    };
    this.$gradientBoostedTreeNumIterations = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Gradient Boosted Tree Num Iterations", function (t) {
      t.append(e.$gradientBoostedTreeNumIterations);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$gradientBoostedTreeNumIterationsControl = e.createNumericInput(e.$gradientBoostedTreeNumIterations, o), e.$gradientBoostedTreeNumIterationsControl.onChange(function (t) {
        var o = e.createGradientBoostedTreeNumIterationsCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createGradientBoostedTreeMaxDepthControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$gradientBoostedTreeArea
    };
    this.$gradientBoostedTreeMaxDepth = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Gradient Boosted Tree Max Depth", function (t) {
      t.append(e.$gradientBoostedTreeMaxDepth);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1
      };
      e.$gradientBoostedTreeMaxDepthControl = e.createNumericInput(e.$gradientBoostedTreeMaxDepth, o), e.$gradientBoostedTreeMaxDepthControl.onChange(function (t) {
        var o = e.createGradientBoostedTreeMaxDepthCommand(t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.doubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double" === t.internalType || "Float" === t.internalType || "Decimal" === t.internalType;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.longColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Long" === t.internalType;
    }), this.booleanColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Boolean" === t.internalType;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.correlationColumnControl.setItems(this.stringColumnArray), this.stateColumnControl.setItems(this.arrayDoubleColumnArray), this.actionColumnControl.setItems(this.stringColumnArray), this.rewardColumnControl.setItems(this.doubleColumnArray), this.nextStateColumnControl.setItems(this.arrayDoubleColumnArray), this.timestampColumnControl.setItems(this.longColumnArray), this.terminalStateFlagColumnControl.setItems(this.booleanColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_CORRELATION_ID_COLUMN && this.createValidationContent(this.$correlationColumn, this.problems[t]), this.problems[t].param === this.PARAM_STATE_COLUMN && this.createValidationContent(this.$stateColumn, this.problems[t]), this.problems[t].param === this.PARAM_ACTION_COLUMN && this.createValidationContent(this.$actionColumn, this.problems[t]), this.problems[t].param === this.PARAM_REWARD_COLUMN && this.createValidationContent(this.$rewardColumn, this.problems[t]), this.problems[t].param === this.PARAM_NEXT_STATE_COLUMN && this.createValidationContent(this.$nextStateColumn, this.problems[t]), this.problems[t].param === this.PARAM_TIMESTAMP_COLUMN && this.createValidationContent(this.$timestampColumn, this.problems[t]), this.problems[t].param === this.PARAM_DIMENSIONALITY && this.createValidationContent(this.$dimensionalityInputControl, this.problems[t]), this.problems[t].param === this.PARAM_ACTION_LIST && this.createValidationContent(this.$actionListControl.parent(), this.problems[t]), this.problems[t].param, this.PARAM_FUNCTION_APPROXIMATOR_TYPE, this.problems[t].param === this.PARAM_DECISION_TREE_MAX_BINS && this.createValidationContent(this.$decisionTreeMaxBins, this.problems[t]), this.problems[t].param === this.PARAM_DECISION_TREE_MAX_DEPTH && this.createValidationContent(this.$decisionTreeMaxDepth, this.problems[t]), this.problems[t].param === this.PARAM_RANDOM_FOREST_MAX_BINS && this.createValidationContent(this.$randomForestMaxBins, this.problems[t]), this.problems[t].param === this.PARAM_RANDOM_FOREST_MAX_DEPTH && this.createValidationContent(this.$randomForestMaxDepth, this.problems[t]), this.problems[t].param === this.PARAM_RANDOM_FOREST_NUM_TREES && this.createValidationContent(this.$randomForestNumTrees, this.problems[t]), this.problems[t].param === this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS && this.createValidationContent(this.$gradientBoostedTreeNumIterations, this.problems[t]), this.problems[t].param === this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH && this.createValidationContent(this.$gradientBoostedTreeMaxDepth, this.problems[t]);
    }
  }, e.prototype.renderCorrelationIdColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CORRELATION_ID_COLUMN];
    this.correlationColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_STATE_COLUMN];
    this.stateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderActionColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ACTION_COLUMN];
    this.actionColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderRewardColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REWARD_COLUMN];
    this.rewardColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderNextStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NEXT_STATE_COLUMN];
    this.nextStateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderTimestampColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TIMESTAMP_COLUMN];
    this.timestampColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderTerminalStateFlagColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TERMINAL_STATE_FLAG_COLUMN];
    this.terminalStateFlagColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderDimensionalityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DIMENSIONALITY];
    this.$dimensionalityControl.setValue(t);
  }, e.prototype.renderActionsListControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ACTION_LIST],
        e = "";
    if (t) for (var o = 0; o < t.length; o++) {
      e += t[o] || "", o < t.length - 1 && (e += "\n");
    }
    this.$actionListControl.jqxTextArea("val", e);
  }, e.prototype.renderMaxLearningIterationsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_LEARNING_ITERATIONS];
    this.$maxLearningIterationsControl.setValue(t);
  }, e.prototype.renderConvergenceDeltaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CONVERGENCE_DELTA];
    this.$convergenceDeltaControl.setValue(t);
  }, e.prototype.renderAlphaDecayControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ALPHA_DECAY];
    t ? "true" === t ? this.$alphaDecayTrueControl.jqxRadioButton("check") : this.$alphaDecayFalseControl.jqxRadioButton("check") : this.$alphaDecayTrueControl.jqxRadioButton("check");
  }, e.prototype.renderAlphaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ALPHA];
    this.$alphaControl.setValue(t);
  }, e.prototype.renderGammaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GAMMA];
    this.$gammaControl.setValue(t);
  }, e.prototype.renderFunctionApproximatorTypeControl = function () {
    var t = this.options.fnUnit.param;
    void 0 === t[this.PARAM_FUNCTION_APPROXIMATOR_TYPE] || "" === t[this.PARAM_FUNCTION_APPROXIMATOR_TYPE] ? this.$functionType.jqxDropDownList({
      selectedIndex: 0
    }) : this.$functionType.jqxDropDownList("selectItem", t[this.PARAM_FUNCTION_APPROXIMATOR_TYPE]);
  }, e.prototype.renderDecisionTreeMaxBinsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DECISION_TREE_MAX_BINS];
    this.$decisionTreeMaxBinsControl.setValue(t);
  }, e.prototype.renderDecisionTreeMaxDepthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DECISION_TREE_MAX_DEPTH];
    this.$decisionTreeMaxDepthControl.setValue(t);
  }, e.prototype.renderRandomForestFeatureSubsetStrategyControl = function () {
    var t = this.options.fnUnit.param;
    void 0 === t[this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY] || "" === t[this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY] ? this.$randomForestFeatureSubsetStrategy.jqxDropDownList({
      selectedIndex: 0
    }) : this.$randomForestFeatureSubsetStrategy.jqxDropDownList("selectItem", t[this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY]);
  }, e.prototype.renderRandomForestMaxBinsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RANDOM_FOREST_MAX_BINS];
    this.$randomForestMaxBinsControl.setValue(t);
  }, e.prototype.renderRandomForestMaxDepthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RANDOM_FOREST_MAX_DEPTH];
    this.$randomForestMaxDepthControl.setValue(t);
  }, e.prototype.renderRandomForestNumTreesControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_RANDOM_FOREST_NUM_TREES];
    this.$randomForestNumTreesControl.setValue(t);
  }, e.prototype.renderGradientBoostedTreeNumIterationsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS];
    this.$gradientBoostedTreeNumIterationsControl.setValue(t);
  }, e.prototype.renderGradientBoostedTreeMaxDepthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH];
    this.$gradientBoostedTreeMaxDepthControl.setValue(t);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createDimensionalityCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DIMENSIONALITY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createActionListCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.$actionListControl.jqxTextArea("val").split("\n"),
        r = [];
    return $.each(o, function (t, e) {
      var o = e.trim();
      "" != o && r.push(o);
    }), e.ref.param[this.PARAM_ACTION_LIST] = r, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createMaxLearningIterationsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_MAX_LEARNING_ITERATIONS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createConvergenceDeltaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_CONVERGENCE_DELTA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRadioButtonCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_ALPHA_DECAY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createAlphaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_ALPHA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGammaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_GAMMA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createDecisionTreeMaxBinsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DECISION_TREE_MAX_BINS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createDecisionTreeMaxDepthCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DECISION_TREE_MAX_DEPTH] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRandomForestMaxBinsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_RANDOM_FOREST_MAX_BINS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRandomForestMaxDepthCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_RANDOM_FOREST_MAX_DEPTH] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRandomForestNumTreesCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_RANDOM_FOREST_NUM_TREES] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGradientBoostedTreeNumIterationsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGradientBoostedTreeMaxDepthCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.sarsaTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_CORRELATION_ID_COLUMN = "correlation-id-column", this.PARAM_STATE_COLUMN = "state-column", this.PARAM_ACTION_COLUMN = "action-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_NEXT_STATE_COLUMN = "next-state-column", this.PARAM_TIMESTAMP_COLUMN = "timestamp-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_ACTION_LIST = "action-list", this.PARAM_FUNCTION_APPROXIMATOR_TYPE = "function-approximator-type", this.PARAM_DECISION_TREE_MAX_BINS = "decision-tree-max-bins", this.PARAM_DECISION_TREE_MAX_DEPTH = "decision-tree-max-depth", this.PARAM_RANDOM_FOREST_FEATURE_SUBSET_STRATEGY = "random-forest-feature-subset-strategy", this.PARAM_RANDOM_FOREST_MAX_BINS = "random-forest-max-bins", this.PARAM_RANDOM_FOREST_MAX_DEPTH = "random-forest-max-depth", this.PARAM_RANDOM_FOREST_NUM_TREES = "random-forest-num-trees", this.PARAM_GRADIENT_BOOSTED_TREE_NUM_ITERATIONS = "gradient-boosted-tree-num-iterations", this.PARAM_GRADIENT_BOOSTED_TREE_MAX_DEPTH = "gradient-boosted-tree-max-depth", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addCorrelationIdColumnRule(), this.addStateColumnRule(), this.addActionColumnRule(), this.addRewardColumnRule(), this.addNextStateColumnRule(), this.addTimestampColumnRule(), this.addDimensionalityRule(), this.addRule(this.emptyActionList);
  }, e.prototype.addCorrelationIdColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_CORRELATION_ID_COLUMN, e.param[t.PARAM_CORRELATION_ID_COLUMN][0], "Correlation Id Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_CORRELATION_ID_COLUMN, e.param[t.PARAM_CORRELATION_ID_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_CORRELATION_ID_COLUMN, e.param[t.PARAM_CORRELATION_ID_COLUMN][0], "string");
    });
  }, e.prototype.addStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "number[]");
    });
  }, e.prototype.addActionColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0], "Action Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0], "string");
    });
  }, e.prototype.addRewardColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "Reward Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "number");
    });
  }, e.prototype.addNextStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0], "Next State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0], "number[]");
    });
  }, e.prototype.addTimestampColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_TIMESTAMP_COLUMN, e.param[t.PARAM_TIMESTAMP_COLUMN][0], "Timestamp Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_TIMESTAMP_COLUMN, e.param[t.PARAM_TIMESTAMP_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_TIMESTAMP_COLUMN, e.param[t.PARAM_TIMESTAMP_COLUMN][0], "number");
    });
  }, e.prototype.addDimensionalityRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_DIMENSIONALITY,
          messageParam: ["Dimensionality"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_DIMENSIONALITY]);
      }
    });
  }, e.prototype.emptyActionList = function (t) {
    if (this._hasSchema(t)) {
      var e = [];
      return void 0 === t.param[this.PARAM_ACTION_LIST] ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ACTION_LIST,
        messageParam: ["Action List"]
      }, t)), e) : this.isEmptyForArray(t.param[this.PARAM_ACTION_LIST]) ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ACTION_LIST,
        messageParam: ["Action List"]
      }, t)), e) : void 0;
    }
  }, e = e, t.VA.Core.Functions.Library.sarsaTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.thompsonSamplingPrescribe = {
    category: "evaluation",
    defaultFnUnit: {
      func: "thompsonSamplingPrescribe",
      name: "ThompsonSamplingPrescribe",
      inData: [],
      outData: [],
      param: {
        "context-column": [[]],
        "id-column": [[]],
        dimensionality: "",
        "num-arms-in-prescription": "",
        alpha: ""
      },
      display: {
        label: "Thompson Sampling Prescribe",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to prescribe actions/arms based on a given trained ThompsonSampling model.",
    tags: ["thompson sampling prescribe", "Thompson Sampling Prescribe", "thompson sampling", "thompsonsampling", "thompson", "Thompson", "sampling", "Sampling", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_CONTEXT_COLUMN = "context-column", this.PARAM_ID_COLUMN = "id-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_NUM_ARMS_IN_PRESCRIPTION = "num-arms-in-prescription", this.PARAM_ALPHA = "alpha", this.render = {
      "context-column": this.renderContextColumnControl,
      "id-column": this.renderIdColumnControl,
      "num-arms-in-prescription": this.renderNumArmsInPrescriptionControl,
      alpha: this.renderAlphaControl
    }, this.createContextColumnControl(), this.createIdColumnControl(), this.createNumArmsInPrescriptionControl(), this.createAlphaControl();
  }, e.prototype.createContextColumnControl = function (t) {
    var e = this;
    this.$contextColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-context-column"/>'), this.addPropertyControl("Context Column", function (t) {
      t.append(e.$contextColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_CONTEXT_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.contextColumnControl = e.createColumnList(e.$contextColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createIdColumnControl = function (t) {
    var e = this;
    this.$idColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-id-column"/>'), this.addPropertyControl("Id Column", function (t) {
      t.append(e.$idColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_ID_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.idColumnControl = e.createColumnList(e.$idColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createDimensionalityControl = function () {
    var t = this;
    this.$dimensionalityInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-dimensionalityInput"/>'), this.addPropertyControl("Dimensionality", function (e) {
      e.append(t.$dimensionalityInputControl);
      var o = {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$dimensionalityControl = t.createNumericInput(t.$dimensionalityInputControl, o), t.$dimensionalityControl.onChange(function (e) {
        var o = t.createCommonCommand(t.PARAM_DIMENSIONALITY, e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createNumArmsInPrescriptionControl = function (t) {
    var e = this;
    this.$numArmsInPrescriptionInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numArmsInPrescriptionInput"/>'), this.addPropertyControl("Num Arms In Prescription", function (t) {
      t.append(e.$numArmsInPrescriptionInputControl);
      var o = {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$numArmsInPrescriptionControl = e.createNumericInput(e.$numArmsInPrescriptionInputControl, o), e.$numArmsInPrescriptionControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_NUM_ARMS_IN_PRESCRIPTION, t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    this.$alphaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-alphaInput"/>'), this.addPropertyControl("Alpha", function (t) {
      t.append(e.$alphaInputControl);
      e.$alphaControl = e.createNumericInput(e.$alphaInputControl, {
        numberType: "double",
        min: 0,
        max: 10,
        minus: !1,
        placeholder: "Enter value"
      }), e.$alphaControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_ALPHA, t);
        e.executeCommand(o);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.contextColumnControl.setItems(this.arrayDoubleColumnArray), this.idColumnControl.setItems(this.stringColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_CONTEXT_COLUMN && this.createValidationContent(this.$contextColumn, this.problems[t]), this.problems[t].param === this.PARAM_ID_COLUMN && this.createValidationContent(this.$idColumn, this.problems[t]), this.problems[t].param === this.PARAM_NUM_ARMS_IN_PRESCRIPTION && this.createValidationContent(this.$numArmsInPrescriptionInputControl, this.problems[t]), this.problems[t].param === this.PARAM_ALPHA && this.createValidationContent(this.$alphaInputControl, this.problems[t]);
    }
  }, e.prototype.renderContextColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CONTEXT_COLUMN];
    this.contextColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderIdColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ID_COLUMN];
    this.idColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderDimensionalityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DIMENSIONALITY];
    this.$dimensionalityControl.setValue(t);
  }, e.prototype.renderNumArmsInPrescriptionControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUM_ARMS_IN_PRESCRIPTION];
    this.$numArmsInPrescriptionControl.setValue(t);
  }, e.prototype.renderAlphaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ALPHA];
    this.$alphaControl.setValue(t);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.thompsonSamplingPrescribe.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_CONTEXT_COLUMN = "context-column", this.PARAM_ID_COLUMN = "id-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_NUM_ARMS_IN_PRESCRIPTION = "num-arms-in-prescription", this.PARAM_ALPHA = "alpha", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addContextColumnRule(), this.addIdColumnRule(), this.addNumArmsInPrescriptionRule();
  }, e.prototype.addContextColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0], "Context Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0], "number[]");
    });
  }, e.prototype.addIdColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "Id Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "string");
    });
  }, e.prototype.addNumArmsInPrescriptionRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_NUM_ARMS_IN_PRESCRIPTION,
          messageParam: ["Num Arms In Prescription"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_NUM_ARMS_IN_PRESCRIPTION]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.thompsonSamplingPrescribe.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.thompsonSamplingTrain = {
    category: "evaluation",
    defaultFnUnit: {
      func: "thompsonSamplingTrain",
      name: "ThompsonSamplingTrain",
      inData: [],
      outData: [],
      param: {
        "context-column": [[]],
        "arm-column": [[]],
        "reward-column": [[]],
        "arms-list": [],
        lambda: "",
        "initial-mean": "",
        "gray-scale-to-binary-reward-mapping-threshold": "",
        "regression-algorithm": "",
        "lbfgs-convergence-tol": "",
        "sgd-initial-step-size": "",
        "sgd-iterations": ""
      },
      display: {
        label: "Thompson Sampling Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to train a ThompsonSampling algorithm based model for given data.",
    tags: ["thompson sampling train", "Thompson Sampling Train", "thompson sampling", "thompsonsampling", "thompson", "Thompson", "sampling", "Sampling", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_CONTEXT_COLUMN = "context-column", this.PARAM_ARM_COLUMN = "arm-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_ARMS_LIST = "arms-list", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_LAMBDA = "lambda", this.PARAM_INITIAL_MEAN = "initial-mean", this.PARAM_GRAY_SCALE_TO_BINARY_REWARD_MAPPING_THRESHOLD = "gray-scale-to-binary-reward-mapping-threshold", this.PARAM_REGRESSION_ALGORITHM = "regression-algorithm", this.PARAM_LBFGS_CONVERGENCE_TOL = "lbfgs-convergence-tol", this.PARAM_SGD_INITIAL_STEP_SIZE = "sgd-initial-step-size", this.PARAM_SGD_ITERATIONS = "sgd-iterations", this.render = {
      "context-column": this.renderContextColumnControl,
      "arm-column": this.renderArmColumnControl,
      "reward-column": this.renderRewardColumnControl,
      "arms-list": this.renderArmsListControl,
      dimensionality: this.renderDimensionalityControl,
      lambda: this.renderLambdaControl,
      "initial-mean": this.renderInitialMeanControl,
      "gray-scale-to-binary-reward-mapping-threshold": this.renderGrayScaleControl,
      "regression-algorithm": this.renderRegressionAlgorithmControl,
      "lbfgs-convergence-tol": this.renderLbfgsConvergenceTolControl,
      "sgd-initial-step-size": this.renderSgdInitialStepSizeControl,
      "sgd-iterations": this.renderSgdIterationsControl
    }, this.createContextColumnControl(), this.createArmColumnControl(), this.createRewardColumnControl(), this.createArmsListControl(), this.createDimensionalityControl(), this.createLambdaControl(), this.createInitialMeanControl(), this.createGrayScaleControl(), this.createRegressionAlgorithmControl(), this.createLbfgsArea(e), this.createSgdArea(e);
  }, e.prototype.createContextColumnControl = function (t) {
    var e = this;
    this.$contextColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-context-column"/>'), this.addPropertyControl("Context Column", function (t) {
      t.append(e.$contextColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_CONTEXT_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.contextColumnControl = e.createColumnList(e.$contextColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createArmColumnControl = function (t) {
    var e = this;
    this.$armColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-arm-column"/>'), this.addPropertyControl("Arm Column", function (t) {
      t.append(e.$armColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_ARM_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.armColumnControl = e.createColumnList(e.$armColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRewardColumnControl = function (t) {
    var e = this;
    this.$rewardColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-reward-column"/>'), this.addPropertyControl("Reward Column", function (t) {
      t.append(e.$rewardColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_REWARD_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.rewardColumnControl = e.createColumnList(e.$rewardColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createArmsListControl = function (t) {
    var e = this;
    this.$armsListControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Arms List", function (t) {
      t.append(e.$armsListControl), e.createTextArea(e.$armsListControl, {
        placeHolder: "Enter value by new line",
        height: "100px"
      }), e.$armsListControl.on("change", function (t) {
        var o = e.createArmsListCommand();
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createDimensionalityControl = function () {
    var t = this;
    this.$dimensionalityInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-dimensionalityInput"/>'), this.addPropertyControl("Dimensionality", function (e) {
      e.append(t.$dimensionalityInputControl);
      var o = {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$dimensionalityControl = t.createNumericInput(t.$dimensionalityInputControl, o), t.$dimensionalityControl.onChange(function (e) {
        var o = t.createDimensionalityCommand(e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createLambdaControl = function () {
    var t = this;
    this.$lambdaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-lambdaInput"/>'), this.addPropertyControl("Lambda", function (e) {
      e.append(t.$lambdaInputControl);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$lambdaControl = t.createNumericInput(t.$lambdaInputControl, o), t.$lambdaControl.onChange(function (e) {
        var o = t.createLambdaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createInitialMeanControl = function () {
    var t = this;
    this.$initialMeanInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-initialMeanInput"/>'), this.addPropertyControl("Initial Mean", function (e) {
      e.append(t.$initialMeanInputControl);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$initialMeanControl = t.createNumericInput(t.$initialMeanInputControl, o), t.$initialMeanControl.onChange(function (e) {
        var o = t.createInitialMeanCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createGrayScaleControl = function () {
    var t = this;
    this.$grayScaleInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-grayScaleInput"/>'), this.addPropertyControl("Mapping Threshold", function (e) {
      e.append(t.$grayScaleInputControl);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$grayScaleControl = t.createNumericInput(t.$grayScaleInputControl, o), t.$grayScaleControl.onChange(function (e) {
        var o = t.createGrayScaleCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createRegressionAlgorithmControl = function () {
    var t = this;
    this.$algorithmType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.algorithmTypeSource = [{
      label: "LBFGS",
      value: "LBFGS"
    }, {
      label: "SGD",
      value: "SGD"
    }], this.addPropertyControl("Regression Algorithm", function (e) {
      t.createDropDownList(this.$algorithmType, {
        source: this.algorithmTypeSource
      }), e.append(t.$algorithmType.parent()), t.$algorithmType.on("change", function () {
        var e = t.$algorithmType.jqxDropDownList("getSelectedItem") ? t.$algorithmType.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand(t.PARAM_REGRESSION_ALGORITHM, e);
        t.executeCommand(o);
        var r = t.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol-subarea");
        $.each(r, function (t, o) {
          $(o).attr("algorithmType") === e ? $(o).css("display", "block") : $(o).css("display", "none");
        });
      });
    });
  }, e.prototype.createLbfgsArea = function (t) {
    this.$LbfgsArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" algorithmType="LBFGS" />'), t.append(this.$LbfgsArea), this.createLbfgsConvergenceTolControl(this.$LbfgsArea), this.$LbfgsArea.css("display", "none");
  }, e.prototype.createLbfgsConvergenceTolControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$LbfgsArea
    };
    this.$LbfgsConvergenceTol = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("LBFGS Convergence Tol", function (t) {
      t.append(e.$LbfgsConvergenceTol);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$LbfgsConvergenceTolControl = e.createNumericInput(e.$LbfgsConvergenceTol, o), e.$LbfgsConvergenceTolControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_LBFGS_CONVERGENCE_TOL, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createSgdArea = function (t) {
    this.$sgdArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" algorithmType="SGD" />'), t.append(this.$sgdArea), this.createSgdInitialStepSizeControl(this.$sgdArea), this.createSgdIterationsControl(this.$sgdArea), this.$sgdArea.css("display", "none");
  }, e.prototype.createSgdInitialStepSizeControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$sgdArea
    };
    this.$sgdInitialStepSize = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("SGD Initial Step Size", function (t) {
      t.append(e.$sgdInitialStepSize);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$sgdInitialStepSizeControl = e.createNumericInput(e.$sgdInitialStepSize, o), e.$sgdInitialStepSizeControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_SGD_INITIAL_STEP_SIZE, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.createSgdIterationsControl = function (t) {
    var e = this,
        o = {
      propertyControlParent: e.$sgdArea
    };
    this.$sgdIterations = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("SGD Iterations", function (t) {
      t.append(e.$sgdIterations);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$sgdIterationsControl = e.createNumericInput(e.$sgdIterations, o), e.$sgdIterationsControl.onChange(function (t) {
        var o = e.createCommonCommand(e.PARAM_SGD_ITERATIONS, t);
        e.executeCommand(o);
      });
    }, o);
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.doubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "double" === t.internalType.toLowerCase() || "float" === t.internalType.toLowerCase() || "decimal" === t.internalType.toLowerCase();
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.contextColumnControl.setItems(this.arrayDoubleColumnArray), this.armColumnControl.setItems(this.stringColumnArray), this.rewardColumnControl.setItems(this.doubleColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_CONTEXT_COLUMN && this.createValidationContent(this.$contextColumn, this.problems[t]), this.problems[t].param === this.PARAM_ARM_COLUMN && this.createValidationContent(this.$armColumn, this.problems[t]), this.problems[t].param === this.PARAM_REWARD_COLUMN && this.createValidationContent(this.$rewardColumn, this.problems[t]), this.problems[t].param === this.PARAM_ARMS_LIST && this.createValidationContent(this.$armsListControl.parent(), this.problems[t]), this.problems[t].param === this.PARAM_DIMENSIONALITY && this.createValidationContent(this.$dimensionalityInputControl, this.problems[t]), this.problems[t].param === this.PARAM_LAMBDA && this.createValidationContent(this.$lambdaInputControl, this.problems[t]), this.problems[t].param === this.PARAM_INITIAL_MEAN && this.createValidationContent(this.$initialMeanInputControl, this.problems[t]), this.problems[t].param === this.PARAM_GRAY_SCALE_TO_BINARY_REWARD_MAPPING_THRESHOLD && this.createValidationContent(this.$grayScaleInputControl, this.problems[t]), this.problems[t].param === this.PARAM_LBFGS_CONVERGENCE_TOL && this.createValidationContent(this.$LbfgsConvergenceTol, this.problems[t]), this.problems[t].param === this.PARAM_SGD_INITIAL_STEP_SIZE && this.createValidationContent(this.$sgdInitialStepSize, this.problems[t]), this.problems[t].param === this.PARAM_SGD_ITERATIONS && this.createValidationContent(this.$sgdIterations, this.problems[t]);
    }
  }, e.prototype.renderContextColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CONTEXT_COLUMN];
    this.contextColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderArmColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ARM_COLUMN];
    this.armColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderRewardColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REWARD_COLUMN];
    this.rewardColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderArmsListControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ARMS_LIST],
        e = "";
    if (t) for (var o = 0; o < t.length; o++) {
      e += t[o] || "", o < t.length - 1 && (e += "\n");
    }
    this.$armsListControl.jqxTextArea("val", e);
  }, e.prototype.renderDimensionalityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DIMENSIONALITY];
    this.$dimensionalityControl.setValue(t);
  }, e.prototype.renderLambdaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_LAMBDA];
    this.$lambdaControl.setValue(t);
  }, e.prototype.renderInitialMeanControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_INITIAL_MEAN];
    this.$initialMeanControl.setValue(t);
  }, e.prototype.renderGrayScaleControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GRAY_SCALE_TO_BINARY_REWARD_MAPPING_THRESHOLD];
    this.$grayScaleControl.setValue(t);
  }, e.prototype.renderRegressionAlgorithmControl = function () {
    var t = this.options.fnUnit.param;
    void 0 === t[this.PARAM_REGRESSION_ALGORITHM] || "" === t[this.PARAM_REGRESSION_ALGORITHM] ? this.$algorithmType.jqxDropDownList({
      selectedIndex: 0
    }) : this.$algorithmType.jqxDropDownList("selectItem", t[this.PARAM_REGRESSION_ALGORITHM]);
  }, e.prototype.renderLbfgsConvergenceTolControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_LBFGS_CONVERGENCE_TOL];
    this.$LbfgsConvergenceTolControl.setValue(t);
  }, e.prototype.renderSgdInitialStepSizeControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_SGD_INITIAL_STEP_SIZE];
    this.$sgdInitialStepSizeControl.setValue(t);
  }, e.prototype.renderSgdIterationsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_SGD_ITERATIONS];
    this.$sgdIterationsControl.setValue(t);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createArmsListCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.$armsListControl.jqxTextArea("val").split("\n"),
        r = [];
    return $.each(o, function (t, e) {
      var o = e.trim();
      "" != o && r.push(o);
    }), e.ref.param[this.PARAM_ARMS_LIST] = r, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createDimensionalityCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DIMENSIONALITY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createLambdaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_LAMBDA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createInitialMeanCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_INITIAL_MEAN] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGrayScaleCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_GRAY_SCALE_TO_BINARY_REWARD_MAPPING_THRESHOLD] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.thompsonSamplingTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_CONTEXT_COLUMN = "context-column", this.PARAM_ARM_COLUMN = "arm-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_ARMS_LIST = "arms-list", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_LBFGS_CONVERGENCE_TOL = "lbfgs-convergence-tol", this.PARAM_SGD_INITIAL_STEP_SIZE = "sgd-initial-step-size", this.PARAM_SGD_ITERATIONS = "sgd-iterations", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addContextColumnRule(), this.addArmColumnRule(), this.addRewardColumnRule(), this.addRule(this.emptyArmsList), this.addDimensionalityRule();
  }, e.prototype.addContextColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0], "Context Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_CONTEXT_COLUMN, e.param[t.PARAM_CONTEXT_COLUMN][0], "number[]");
    });
  }, e.prototype.addArmColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ARM_COLUMN, e.param[t.PARAM_ARM_COLUMN][0], "Arm Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ARM_COLUMN, e.param[t.PARAM_ARM_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ARM_COLUMN, e.param[t.PARAM_ARM_COLUMN][0], "string");
    });
  }, e.prototype.addRewardColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "Reward Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "number");
    });
  }, e.prototype.emptyArmsList = function (t) {
    if (this._hasSchema(t)) {
      var e = [];
      return void 0 === t.param[this.PARAM_ARMS_LIST] ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ARMS_LIST,
        messageParam: ["Arms List"]
      }, t)), e) : this.isEmptyForArray(t.param[this.PARAM_ARMS_LIST]) ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ARMS_LIST,
        messageParam: ["Arms List"]
      }, t)), e) : void 0;
    }
  }, e.prototype.addDimensionalityRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_DIMENSIONALITY,
          messageParam: ["Dimensionality"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_DIMENSIONALITY]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.thompsonSamplingTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.valueIterationPrescribe = {
    category: "evaluation",
    defaultFnUnit: {
      func: "valueIterationPrescribe",
      name: "ValueIterationPrescribe",
      inData: [],
      outData: [],
      param: {
        "id-column": [[]],
        "state-column": [[]]
      },
      display: {
        label: "Value Iteration Prescribe",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function prescribes action based on a ValueIteration (DynamicProgramming) trained model.",
    tags: ["valueiteration prescribe", "ValueIterationPrescribe", "value iteration prescribe", "ValueIteration Prescribe", "valueiteration", "value iteration", "value", "iteration", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_ID_COLUMN = "id-column", this.PARAM_STATE_COLUMN = "state-column", this.render = {
      "id-column": this.renderIdColumnControl,
      "state-column": this.renderStateColumnControl
    }, this.createIdColumnControl(), this.createStateColumnControl();
  }, e.prototype.createIdColumnControl = function (t) {
    var e = this;
    this.$idColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-id-column"/>'), this.addPropertyControl("Id Column", function (t) {
      t.append(e.$idColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_ID_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.idColumnControl = e.createColumnList(e.$idColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createStateColumnControl = function (t) {
    var e = this;
    this.$stateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-state-column"/>'), this.addPropertyControl("State Column", function (t) {
      t.append(e.$stateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.stateColumnControl = e.createColumnList(e.$stateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.idColumnControl.setItems(this.stringColumnArray), this.stateColumnControl.setItems(this.arrayDoubleColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_ID_COLUMN && this.createValidationContent(this.$idColumn, this.problems[t]), this.problems[t].param === this.PARAM_STATE_COLUMN && this.createValidationContent(this.$stateColumn, this.problems[t]);
    }
  }, e.prototype.renderIdColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ID_COLUMN];
    this.idColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_STATE_COLUMN];
    this.stateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, t.VA.Core.Functions.Library.valueIterationPrescribe.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_ID_COLUMN = "id-column", this.PARAM_STATE_COLUMN = "state-column", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addIdColumnRule(), this.addStateColumnRule();
  }, e.prototype.addIdColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "Id Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ID_COLUMN, e.param[t.PARAM_ID_COLUMN][0], "string");
    });
  }, e.prototype.addStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "number[]");
    });
  }, e = e, t.VA.Core.Functions.Library.valueIterationPrescribe.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.valueIterationTrain = {
    category: "evaluation",
    defaultFnUnit: {
      func: "valueIterationTrain",
      name: "ValueIterationTrain",
      inData: [],
      outData: [],
      param: {
        "state-column": [[]],
        "action-column": [[]],
        "reward-column": [[]],
        "next-state-column": [[]],
        "probability-column": [[]],
        dimensionality: "",
        "action-list": [],
        "max-learning-iterations": "",
        "convergence-delta": "",
        gamma: ""
      },
      display: {
        label: "Value Iteration Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Learn the optimal policy from an MDP.",
    tags: ["valueIteration train", "ValueIterationTrain", "value iteration train", "ValueIteration Train", "valueiteration", "value iteration", "value", "iteration", "pf", "PF", "Prescriptive Analytics", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_STATE_COLUMN = "state-column", this.PARAM_ACTION_COLUMN = "action-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_NEXT_STATE_COLUMN = "next-state-column", this.PARAM_PROBABILITY_COLUMN = "probability-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_ACTION_LIST = "action-list", this.PARAM_MAX_LEARNING_ITERATIONS = "max-learning-iterations", this.PARAM_CONVERGENCE_DELTA = "convergence-delta", this.PARAM_GAMMA = "gamma", this.render = {
      "state-column": this.renderStateColumnControl,
      "action-column": this.renderActionColumnControl,
      "reward-column": this.renderRewardColumnControl,
      "next-state-column": this.renderNextStateColumnControl,
      "probability-column": this.renderProbabilityColumnControl,
      dimensionality: this.renderDimensionalityControl,
      "action-list": this.renderActionsListControl,
      "max-learning-iterations": this.renderMaxLearningIterationsControl,
      "convergence-delta": this.renderConvergenceDeltaControl,
      gamma: this.renderGammaControl
    }, this.createStateColumnControl(), this.createActionColumnControl(), this.createRewardColumnControl(), this.createNextStateColumnControl(), this.createProbabilityColumnControl(), this.createDimensionalityControl(), this.createActionListControl(), this.createMaxLearningIterationsControl(), this.createConvergenceDeltaControl(), this.createGammaControl();
  }, e.prototype.createStateColumnControl = function (t) {
    var e = this;
    this.$stateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-state-column"/>'), this.addPropertyControl("State Column", function (t) {
      t.append(e.$stateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.stateColumnControl = e.createColumnList(e.$stateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createActionColumnControl = function (t) {
    var e = this;
    this.$actionColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-action-column"/>'), this.addPropertyControl("Action Column", function (t) {
      t.append(e.$actionColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_ACTION_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.actionColumnControl = e.createColumnList(e.$actionColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRewardColumnControl = function (t) {
    var e = this;
    this.$rewardColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-reward-column"/>'), this.addPropertyControl("Reward Column", function (t) {
      t.append(e.$rewardColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_REWARD_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.rewardColumnControl = e.createColumnList(e.$rewardColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createNextStateColumnControl = function (t) {
    var e = this;
    this.$nextStateColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-next-state-column"/>'), this.addPropertyControl("Next State Column", function (t) {
      t.append(e.$nextStateColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(t, o) {
          var r = e.createColumnCommand(e.PARAM_NEXT_STATE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.nextStateColumnControl = e.createColumnList(e.$nextStateColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createProbabilityColumnControl = function () {
    var t = this;
    this.$probabilityColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-probability-column"/>'), this.addPropertyControl("Probability Column", function (e) {
      e.append(t.$probabilityColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed(e, o) {
          var r = t.createColumnCommand(t.PARAM_PROBABILITY_COLUMN, o.items);
          t.executeCommand(r);
        }
      };
      t.probabilityColumnControl = t.createColumnList(t.$probabilityColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createDimensionalityControl = function () {
    var t = this;
    this.$dimensionalityInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-dimensionality-input"/>'), this.addPropertyControl("Dimensionality", function (e) {
      e.append(t.$dimensionalityInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$dimensionalityControl = t.createNumericInput(t.$dimensionalityInputControl, o), t.$dimensionalityControl.onChange(function (e) {
        var o = t.createDimensionalityCommand(e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createActionListControl = function () {
    var t = this;
    this.$actionListControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Action List", function (e) {
      e.append(t.$actionListControl), t.createTextArea(t.$actionListControl, {
        placeHolder: "Enter value by new line",
        height: "100px"
      }), t.$actionListControl.on("change", function (e) {
        var o = t.createActionListCommand();
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createMaxLearningIterationsControl = function () {
    var t = this;
    this.$maxLearningIterationsInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-max-learning-iterations-input"/>'), this.addPropertyControl("Max Learning Iterations", function (e) {
      e.append(t.$maxLearningIterationsInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$maxLearningIterationsControl = t.createNumericInput(t.$maxLearningIterationsInputControl, o), t.$maxLearningIterationsControl.onChange(function (e) {
        var o = t.createMaxLearningIterationsCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createConvergenceDeltaControl = function () {
    var t = this;
    this.$convergenceDeltaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-convergence-delta-input"/>'), this.addPropertyControl("Convergence Delta", function (e) {
      e.append(t.$convergenceDeltaInputControl);
      t.$convergenceDeltaControl = t.createNumericInput(t.$convergenceDeltaInputControl, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1,
        placeholder: "Enter value"
      }), t.$convergenceDeltaControl.onChange(function (e) {
        var o = t.createConvergenceDeltaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createGammaControl = function () {
    var t = this;
    this.$gammaInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-gamma-input"/>'), this.addPropertyControl("Gamma", function (e) {
      e.append(t.$gammaInputControl);
      t.$gammaControl = t.createNumericInput(t.$gammaInputControl, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1,
        placeholder: "Enter value"
      }), t.$gammaControl.onChange(function (e) {
        var o = t.createGammaCommand(e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.arrayNumberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number[]" === t.type;
    }), this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "String" === t.internalType;
    }), this.arrayDoubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double[]" === t.internalType;
    }), this.doubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double" === t.internalType || "Float" === t.internalType || "Decimal" === t.internalType;
    }), this.stateColumnControl.setItems(this.arrayDoubleColumnArray), this.actionColumnControl.setItems(this.stringColumnArray), this.rewardColumnControl.setItems(this.doubleColumnArray), this.nextStateColumnControl.setItems(this.arrayDoubleColumnArray), this.probabilityColumnControl.setItems(this.doubleColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_STATE_COLUMN && this.createValidationContent(this.$stateColumn, this.problems[t]), this.problems[t].param === this.PARAM_ACTION_COLUMN && this.createValidationContent(this.$actionColumn, this.problems[t]), this.problems[t].param === this.PARAM_REWARD_COLUMN && this.createValidationContent(this.$rewardColumn, this.problems[t]), this.problems[t].param === this.PARAM_NEXT_STATE_COLUMN && this.createValidationContent(this.$nextStateColumn, this.problems[t]), this.problems[t].param === this.PARAM_PROBABILITY_COLUMN && this.createValidationContent(this.$probabilityColumn, this.problems[t]), this.problems[t].param === this.PARAM_DIMENSIONALITY && this.createValidationContent(this.$dimensionalityInputControl, this.problems[t]), this.problems[t].param === this.PARAM_ACTION_LIST && this.createValidationContent(this.$actionListControl.parent(), this.problems[t]);
    }
  }, e.prototype.renderStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_STATE_COLUMN];
    this.stateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderActionColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ACTION_COLUMN];
    this.actionColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderRewardColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REWARD_COLUMN];
    this.rewardColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderNextStateColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NEXT_STATE_COLUMN];
    this.nextStateColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderProbabilityColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_PROBABILITY_COLUMN];
    this.probabilityColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderDimensionalityControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_DIMENSIONALITY];
    this.$dimensionalityControl.setValue(t);
  }, e.prototype.renderActionsListControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ACTION_LIST],
        e = "";
    if (t) for (var o = 0; o < t.length; o++) {
      e += t[o] || "", o < t.length - 1 && (e += "\n");
    }
    this.$actionListControl.jqxTextArea("val", e);
  }, e.prototype.renderMaxLearningIterationsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_LEARNING_ITERATIONS];
    this.$maxLearningIterationsControl.setValue(t);
  }, e.prototype.renderConvergenceDeltaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CONVERGENCE_DELTA];
    this.$convergenceDeltaControl.setValue(t);
  }, e.prototype.renderGammaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GAMMA];
    this.$gammaControl.setValue(t);
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createDimensionalityCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_DIMENSIONALITY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createActionListCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.$actionListControl.jqxTextArea("val").split("\n"),
        r = [];
    return $.each(o, function (t, e) {
      var o = e.trim();
      "" != o && r.push(o);
    }), e.ref.param[this.PARAM_ACTION_LIST] = r, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createMaxLearningIterationsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_MAX_LEARNING_ITERATIONS] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createConvergenceDeltaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_CONVERGENCE_DELTA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGammaCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_GAMMA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.valueIterationTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_STATE_COLUMN = "state-column", this.PARAM_ACTION_COLUMN = "action-column", this.PARAM_REWARD_COLUMN = "reward-column", this.PARAM_NEXT_STATE_COLUMN = "next-state-column", this.PARAM_PROBABILITY_COLUMN = "probability-column", this.PARAM_DIMENSIONALITY = "dimensionality", this.PARAM_ACTION_LIST = "action-list", this.PARAM_MAX_LEARNING_ITERATIONS = "max-learning-iterations", this.PARAM_CONVERGENCE_DELTA = "convergence-delta", this.PARAM_GAMMA = "gamma", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addStateColumnRule(), this.addActionColumnRule(), this.addRewardColumnRule(), this.addNextStateColumnRule(), this.addProbabilityColumnRule(), this.addDimensionalityRule(), this.addRule(this.emptyActionList);
  }, e.prototype.addStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_STATE_COLUMN, e.param[t.PARAM_STATE_COLUMN][0], "number[]");
    });
  }, e.prototype.addActionColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0], "Action Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_ACTION_COLUMN, e.param[t.PARAM_ACTION_COLUMN][0], "string");
    });
  }, e.prototype.addRewardColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "Reward Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_REWARD_COLUMN, e.param[t.PARAM_REWARD_COLUMN][0], "number");
    });
  }, e.prototype.addNextStateColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0], "Next State Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_NEXT_STATE_COLUMN, e.param[t.PARAM_NEXT_STATE_COLUMN][0], "number[]");
    });
  }, e.prototype.addProbabilityColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_PROBABILITY_COLUMN, e.param[t.PARAM_PROBABILITY_COLUMN][0], "Probability Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_PROBABILITY_COLUMN, e.param[t.PARAM_PROBABILITY_COLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_PROBABILITY_COLUMN, e.param[t.PARAM_PROBABILITY_COLUMN][0], "number");
    });
  }, e.prototype.addDimensionalityRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_DIMENSIONALITY,
          messageParam: ["Dimensionality"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_DIMENSIONALITY]);
      }
    });
  }, e.prototype.emptyActionList = function (t) {
    if (this._hasSchema(t)) {
      var e = [];
      return void 0 === t.param[this.PARAM_ACTION_LIST] ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ACTION_LIST,
        messageParam: ["Action List"]
      }, t)), e) : this.isEmptyForArray(t.param[this.PARAM_ACTION_LIST]) ? (e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_ACTION_LIST,
        messageParam: ["Action List"]
      }, t)), e) : void 0;
    }
  }, e = e, t.VA.Core.Functions.Library.valueIterationTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.addLeadLag = {
    category: "extraction",
    defaultFnUnit: {
      func: "addLeadLag",
      name: "AddLeadLag",
      inData: [],
      outData: [],
      param: {
        method: "lead",
        "offset-list": [""],
        "null-value": "",
        columns: [[]],
        "partition-by": [[]],
        "order-by": [[]],
        ordering: "asc",
        "hold-column": "true"
      },
      display: {
        label: "Add Lead Lag",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function Add Lead Lag",
    tags: ["Extraction", "AddLeadLag", "addleadlag", "add", "lag", "lead", "Add Lead Lag", "Lead Lag"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_METHOD = "method", this.PARAM_OFFSET_LIST = "offset-list", this.PARAM_NULL_VALUE = "null-value", this.PARAM_COLUMNS = "columns", this.PARAM_PARTITION_BY = "partition-by", this.PARAM_ORDER_BY = "order-by", this.PARAM_ORDERING = "ordering", this.PARAM_HOLD_COLUMN = "hold-column", this.methodSource = [{
      label: "Lead",
      value: "lead"
    }, {
      label: "Lag",
      value: "lag"
    }], this.orderingSource = [{
      label: "Asc",
      value: "asc"
    }, {
      label: "Desc",
      value: "desc"
    }], this.holdColumnSource = [{
      label: "True",
      value: "true"
    }, {
      label: "False",
      value: "false"
    }], this.render = {
      method: this.renderMethodControl,
      "offset-list": this.renderOffsetListControl,
      "null-value": this.renderNullValueControl,
      columns: this.renderColumnControl,
      "partition-by": this.renderPartitionByControl,
      "order-by": this.renderOrderByControl,
      ordering: this.renderOrderingControl,
      "hold-column": this.renderHoldColumnControl
    }, this.createMethodControl(), this.createOffsetListControl(), this.createNullValueControl(), this.createColumnsControl(), this.createPartitionByControl(), this.createOrderByControl(), this.createOrderingControl(), this.createHoldColumnControl();
  }, e.prototype.createMethodControl = function () {
    var t = this;
    this.$methodControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.addPropertyControl("Method", function (e) {
      t.createDropDownList(this.$methodControl, {
        source: this.methodSource
      }), e.append(t.$methodControl.parent()), t.$methodControl.on("change", function () {
        var e = t.$methodControl.jqxDropDownList("getSelectedItem") ? t.$methodControl.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand(t.PARAM_METHOD, e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createOffsetListControl = function () {
    var t = this;
    this.offsetControls = [], this.$contents = $('<div class="brtc-va-editors-sheet-controls-wrapper"/>');
    var e = this.addPropertyControl("Offset", function (e) {
      e.append(t.$contents), this.createOffsetControl(!0);
    }, {
      mandatory: !0
    });
    this.createAddButton();
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "offset-list", "Offset");
  }, e.prototype.createOffsetControl = function (t) {
    var e = this,
        o = $('<div class="brtc-va-editors-sheet-panels-properties-wrapper"/>'),
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'),
        n = $('<div style="float:right; line-height: 26px"><i class="fa fa-remove"></i></div>');
    n.click(function () {
      $(this).parent().remove(), e.offsetControls = $.grep(e.offsetControls, function (t) {
        return !Object.is(t, a);
      });
      var t = e.createOffsetCommand();
      e.executeCommand(t);
    }), o.append(r), t || o.append(n), this.$contents.append(o);
    var a = e.createNumberInput(r, {
      numberType: "int",
      min: 1,
      minus: !1,
      placeholder: "Enter value"
    }, "brtc-va-editors-sheet-controls-width-7", {
      "margin-bottom": "2px",
      width: "90%"
    });
    a.onChange(function () {
      var t = [];

      for (var o in e.offsetControls) {
        t.push(e.offsetControls[o].getValue());
      }

      if (JSON.stringify(e.options.fnUnit.param[e.PARAM_OFFSET_LIST]) != JSON.stringify(t)) {
        var r = e.createOffsetCommand();
        e.executeCommand(r);
      }
    }), this.offsetControls.push(a);
  }, e.prototype.createAddButton = function () {
    var e = this;
    this.$addButton = $('<input  class="brtc-va-editors-sheet-controls-propertycontrol-new-offset" type="button" value="+ Add offset" style="margin-top: 5px"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.$addButton.detach(), e.createOffsetControl(), e.$addButton.appendTo(e.$contents);
      var t = e.createOffsetCommand();
      e.executeCommand(t);
    });
  }, e.prototype.createNullValueControl = function () {
    var t = this;
    this.$nullValue = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Null Value", function (e) {
      e.append(t.$nullValue), t.nullValueControlControl = this.createInput(t.$nullValue, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    });
    this.$nullValue.on("change", function () {
      if (t.isInputValueChanged(t.PARAM_NULL_VALUE, $(this).val())) {
        var e = t.createInputCommand(t.PARAM_NULL_VALUE, $(this).val());
        t.executeCommand(e);
      }
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "null-value", "Null Value");
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Column", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.columnsControl.getSelectedItems(),
              n = e.createColumnsCommand(e.PARAM_COLUMNS, r);
          e.executeCommand(n);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createPartitionByControl = function () {
    var t = this;
    this.$partitionBy = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Partition By", function (e) {
      e.append(t.$partitionBy);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(e, o) {
          var r = t.partitionByControl.getSelectedItems(),
              n = t.createColumnsCommand(t.PARAM_PARTITION_BY, r);
          t.executeCommand(n);
        }
      };
      t.partitionByControl = t.createColumnList(t.$partitionBy, o);
    });
  }, e.prototype.createOrderByControl = function () {
    var t = this;
    this.$orderBy = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Order By", function (e) {
      e.append(t.$orderBy);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(e, o) {
          var r = t.orderByControl.getSelectedItems(),
              n = t.createColumnsCommand(t.PARAM_ORDER_BY, r);
          t.executeCommand(n);
        }
      };
      t.orderByControl = t.createColumnList(t.$orderBy, o);
    });
  }, e.prototype.createOrderingControl = function () {
    var t = this;
    this.$orderingControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = this.addPropertyControl("Ordering", function (e) {
      t.createDropDownList(this.$orderingControl, {
        source: this.orderingSource
      }), e.append(t.$orderingControl.parent()), t.$orderingControl.on("change", function () {
        var e = t.$orderingControl.jqxDropDownList("getSelectedItem") ? t.$orderingControl.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand(t.PARAM_ORDERING, e);
        t.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "ordering", "Ordering");
  }, e.prototype.createHoldColumnControl = function () {
    var t = this;
    this.$holdColumnControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = this.addPropertyControl("Hold Column", function (e) {
      t.createDropDownList(this.$holdColumnControl, {
        source: this.holdColumnSource
      }), e.append(t.$holdColumnControl.parent()), t.$holdColumnControl.on("change", function () {
        var e = t.$holdColumnControl.jqxDropDownList("getSelectedItem") ? t.$holdColumnControl.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand(t.PARAM_HOLD_COLUMN, e);
        t.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "hold-column", "Hold Column");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnsControl.setItems(t), this.partitionByControl.setItems(t), this.orderByControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if (this.problems[t].param === this.PARAM_COLUMNS && (this.renderPropertyControlHeader(this.$columns, this.problems[t]), this.createValidationContent(this.$columns, this.problems[t])), this.problems[t].param === this.PARAM_OFFSET_LIST) {
        var e = this.problems[t].paramIndex;
        this.createValidationContent(this.offsetControls[e].$mainControl.parent().parent(), this.problems[t]);
      }
    }
  }, e.prototype.renderMethodControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_METHOD];
    void 0 === t || "" === t ? this.$methodControl.jqxDropDownList("selectIndex", -1) : this.$methodControl.jqxDropDownList("selectItem", t);
  }, e.prototype.renderOffsetListControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_OFFSET_LIST];
    if (t.length > 0) for (var e in this.$addButton.detach(), t) {
      e > this.offsetControls.length - 1 && this.createOffsetControl(), this.offsetControls[e].setValue(t[e]);
    }
    this.createAddButton();
  }, e.prototype.renderNullValueControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NULL_VALUE];
    this.$nullValue.val(t || "");
  }, e.prototype.renderColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMNS];
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderPartitionByControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_PARTITION_BY];
    this.partitionByControl.setSelectedItems(t[0]);
  }, e.prototype.renderOrderByControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ORDER_BY];
    this.orderByControl.setSelectedItems(t[0]);
  }, e.prototype.renderOrderingControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ORDERING];
    void 0 === t || "" === t ? this.$orderingControl.jqxDropDownList("selectIndex", -1) : this.$orderingControl.jqxDropDownList("selectItem", t);
  }, e.prototype.renderHoldColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_HOLD_COLUMN];
    void 0 === t || "" === t ? this.$holdColumnControl.jqxDropDownList("selectIndex", -1) : this.$holdColumnControl.jqxDropDownList("selectItem", t);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createOffsetCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param[this.PARAM_OFFSET_LIST] = [], this.offsetControls) {
      e.ref.param[this.PARAM_OFFSET_LIST].push(this.offsetControls[o].getValue());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o || "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createColumnsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [o], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, t.VA.Core.Functions.Library.addLeadLag.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_METHOD = "method", this.PARAM_OFFSET_LIST = "offset-list", this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnRule(), this.addOffsetRule();
  }, e.prototype.addOffsetRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._getSchema(e)) {
        var o = [],
            r = e.param[t.PARAM_OFFSET_LIST];

        for (var n in r) {
          var a = {
            errorCode: "BR-0033",
            param: t.PARAM_OFFSET_LIST,
            messageParam: ["Offset"],
            paramIndex: n
          };
          o.push(t._checkStringIsEmpty(a, e, r[n]));
        }

        var i = [];

        for (n = 0; n < r.length; n++) {
          if ("" !== r[n]) {
            if ($.inArray(r[n], i) > -1) {
              a = {
                errorCode: "BR-0057",
                param: t.PARAM_OFFSET_LIST,
                messageParam: ["Offset"],
                paramIndex: n
              };
              o.push(this.problemFactory.createProblem(a, e));
            }

            i.push(r[n]);
          }
        }

        return o;
      }
    });
  }, e.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.addLeadLag.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.arrayToColumns = {
    category: "extraction",
    defaultFnUnit: {
      func: "arrayToColumns",
      name: "ArrayToColumns",
      inData: [],
      outData: [],
      param: {
        flag: "false",
        columns: [[]]
      },
      display: {
        label: "Array To Columns",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Expands columns of Array[Double] or StringType(with arrays written in the format [1:2:3]) to DoubleType columns.",
    tags: ["Array To Columns", "ArrayTo Columns", "Array ToColumns", "Array"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      flag: this.renderRemainColumnControl,
      columns: this.renderColumnsControl
    }, this.createColumnsControl(), this.createRemainColumnControl();
  }, e.prototype.createRemainColumnControl = function (t) {
    var e = this;
    this.$remainColumnControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-replacemode"/>');
    var o = this.addPropertyControl("Remain Column", function (t) {
      t.append(e.$remainColumnControl), e.createRadioButtonControl(e.$remainColumnControl, "True", "flag"), e.createRadioButtonControl(e.$remainColumnControl, "False", "flag");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "flag", "Remain Column");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          n = r.createCommonCommand(o, e);
      r.executeCommand(n);
    }), n.attr("value", e), t[e] = n;
  }, e.prototype.renderRemainColumnControl = function () {
    var t = this.options.fnUnit.param.flag;
    "true" === t ? t = "True" : "false" === t && (t = "False"), t && $(this.$remainColumnControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.$columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param.columns = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.renderColumnsControl = function () {
    this.$columnsControl.setSelectedItems(this.options.fnUnit.param.columns[0]);
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" == this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.getColumnsOfInTable(0, ["Double[]"]), this.$columnsControl.setItems(this.columnNameArray);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.arrayToColumns.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns[0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns[0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, "columns", e.param.columns[0], "number");
    });
  }, t.VA.Core.Functions.Library.arrayToColumns.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.binarizer = {
    category: "extraction",
    defaultFnUnit: {
      func: "binarizer",
      name: "Binarizer",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        threshold: "",
        "out-col-name": "",
        "hold-column": "false",
        groupby: []
      },
      display: {
        label: "Binarizer",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Binarize a column of continuous features given a threshold.",
    tags: ["binarizer", "bin", "binar", "Preprocessing", "Binarizer", "thresholding", "binarization"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-column": this.renderHoldColumn,
      threshold: this.renderThreshold,
      "out-col-name": this.renderOutColumns,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createThresholdControl(), this.createHoldColumnControl(), this.createOutColumnNameControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 1,
        multiple: !1
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnControl = function () {
    var t = this;
    this.$holdColumnTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$holdColumnFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var e = this.addPropertyControl("Hold Column", function (e) {
      e.append(this.$holdColumnTrueControl).append(this.$holdColumnFalseControl), t.createRadioButton(t.$holdColumnTrueControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$holdColumnFalseControl, {
        width: "80",
        groupName: "Group"
      }), t.$holdColumnTrueControl.on("checked", function (e) {
        var o = t.createCommonCommand("hold-column", "true");
        t.executeCommand(o);
      }), t.$holdColumnFalseControl.on("checked", function (e) {
        var o = t.createCommonCommand("hold-column", "false");
        t.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "hold-column", "Hold Column");
  }, e.prototype.createThresholdControl = function () {
    var t = this;
    this.$threshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Threshold", function (e) {
      e.append(t.$threshold);
      t.thresholdControl = t.createNumericInput(t.$threshold, {
        numberType: "double",
        placeholder: "0"
      }), t.thresholdControl.onChange(function () {
        var e = t.createCommonCommand("threshold", this.getValue());
        t.executeCommand(e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "threshold", "Threshold");
  }, e.prototype.createOutColumnNameControl = function (t) {
    var e = this;
    this.$outColumnName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var o = this.addPropertyControl("Out Column Name", function (t) {
      t.append(e.$outColumnName), e.outColumnNameControl = e.createInput(e.$outColumnName, {
        height: "23px"
      }, "");
    });
    this.$outColumnName.on("change", function () {
      if (e.isInputValueChanged("out-col-name", $(this).val())) {
        var t = e.createCommonCommand("out-col-name", $(this).val());
        e.executeCommand(t);
      }
    });
    var r = o.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "out-col-name", "Out Column Name");
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];

    for (var o in e) {
      "number" == e[o].type && t.push(e[o]);
    }

    this.columnsControl.setItems(t), this.groupbyControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumn = function () {
    var t = this.options.fnUnit.param;
    t["hold-column"] ? "true" === t["hold-column"] ? this.$holdColumnTrueControl.jqxRadioButton("check") : this.$holdColumnFalseControl.jqxRadioButton("check") : this.$holdColumnTrueControl.jqxRadioButton("check");
  }, e.prototype.renderThreshold = function () {
    var t = this.options.fnUnit.param.threshold;
    this.thresholdControl.setValue(t || "");
  }, e.prototype.renderOutColumns = function () {
    var t = this.options.fnUnit.param["out-col-name"];
    this.$outColumnName.val(t || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "out-col-name" === this.problems[t].param && this.createValidationContent(this.$outColumnName.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.binarizer.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARMA_OUT_COL_NAME = "out-col-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addNewColumnNameRule(this.PARMA_OUT_COL_NAME), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "number");
    });
  }, t.VA.Core.Functions.Library.binarizer.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.bucketizer = {
    category: "extraction",
    defaultFnUnit: {
      func: "bucketizer",
      name: "Bucketizer",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        splits: "",
        "new-column-name": ""
      },
      display: {
        label: "Bucketizer",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Grouping continuous data to bucket using splits",
    tags: ["Bucketizer", "classification", "new column"],
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns,
      splits: this.renderSplits,
      "new-column-name": this.renderNewColumnName
    }, this.validationControls = {}, this.createColumnContainerControl(), this.createHoldColumnsControl(), this.createSplitsControl(), this.createNewColumnNameControl();
  }, e.prototype.createAddButton = function () {
    if (this.addedColumnControls.length < 2) {
      var e = this;
      this.$addButton = $('<input class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-add-key-condition" type="button" value="+ Add Column"/>'), this.$columnContainer.append(this.$addButton), this.$addButton.jqxButton({
        theme: t.VA.Env.Theme,
        width: "100%",
        height: 25
      }), this.$addButton.click(function () {
        e.createColumnsControl(e.$columnContainer, !1), e.executeCommand(e.createOnColumnsCommand()), $(this).hide();
      });
    }
  }, e.prototype.createColumnContainerControl = function (t) {
    this.$columnContainer = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-container"></div>'), this.addedColumnControls = [], this.validationControls.columns = [], this.addPropertyControl("Columns", function (t) {
      this.createColumnsControl(this.$columnContainer, !0), t.append(this.$columnContainer);
    }, {
      mandatory: !0
    }), this.createAddButton();
  }, e.prototype.createColumnsList = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column brtc-va-editors-sheet-panels-properties-single-column"></div>'),
        n = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-addedcolumn" style="margin-bottom: 5px;" ></div>'),
        a = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-innercontainer"></div>');

    if (r.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), r.attr("index", this.addedColumnControls.length), r.addClass(".brtc-va-editors-sheet-controls-propertycontrol-deck"), !e) {
      a.addClass("non-mandatory");
      var i = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
      i.click(function () {
        var t = o.validationControls.columns.indexOf(a);
        o.validationControls.columns.splice(t, 1), $(this).parent().remove(), o.addedColumnControls.splice(1, 1), o.executeCommand(o.createOnColumnsCommand()), o.$addButton.show();
      }), e || r.append(i);
    }

    r.append(n);
    var s = this.createColumnList(n, {
      maxRowCount: 1,
      multiple: !1,
      showOpener: "click",
      changed: function changed(t, e) {
        o.executeCommand(o.createOnColumnsCommand());
      }
    }, "brtc-va-editors-sheet-controls-width-12");
    a.append(r), t.append(a), this.addedColumnControls.push(s), this.validationControls.columns.push(a);
  }, e.prototype.createColumnsControl = function (t, e) {
    0 == this.addedColumnControls.length ? this.createColumnsList(t, !0) : 1 == this.addedColumnControls.length && (this.createColumnsList(t, !1), this.fillLastColumnControl());
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(this.$holdColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("hold-columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createSplitsControl = function (t) {
    var e = this;
    this.$splits = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), this.$splitsWrapperControl = this.addPropertyControl("Splits", function (t) {
      t.append(e.$splits), e.splitsControl = e.createInput(e.$splits, {
        height: "23px"
      }, "");
    }, {
      mandatory: !0
    }), this.$splits.on("change", function () {
      e.isInputValueChanged("splits", $(this).val()) && e.createInputCommand("splits", $(this).val());
    });
    var o = this.$splitsWrapperControl.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "splits", "Splits");
  }, e.prototype.createNewColumnNameControl = function (t) {
    var e = this;
    this.$newColumnName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var o = this.addPropertyControl("New-Column-Name", function (t) {
      t.append(e.$newColumnName), e.newColumnNameControl = e.createInput(e.$newColumnName, {
        height: "23px"
      });
    });
    this.$newColumnName.on("change", function () {
      e.isInputValueChanged("new-column-name", $(this).val()) && e.createInputCommand("new-column-name", $(this).val());
    });
    var r = o.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "new-column-name", "New Column Name");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var e = [];

    for (var o in t) {
      "number" == t[o].type && e.push(t[o]);
    }

    this.columnData1 = e;
    var r;
    r = this.dataMap && this.options.fnUnit[IN_DATA][1] ? this.dataMap[this.options.fnUnit[IN_DATA][1]].columns : [];
    var n = [];

    for (var o in r) {
      "number" == r[o].type && n.push(r[o]);
    }

    this.columnData2 = n, this.addedColumnControls[0].setItems(this.columnData1), this.holdColumnsControl.setItems(t);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.addedColumnControls.splice(1, this.addedColumnControls.length), this.validationControls.columns.splice(1, this.validationControls.columns.length), this.$columnContainer.find(".non-mandatory").remove(), t && (this.addedColumnControls[0].setSelectedItems(t[0]), 2 == t.length ? (this.createColumnsControl(this.$columnContainer), this.addedColumnControls[1].setSelectedItems(t[1]), this.$addButton.hide()) : this.$addButton.show(), this.$addButton.detach(), this.$addButton.appendTo(this.$columnContainer));
  }, e.prototype.fillLastColumnControl = function () {
    2 == this.addedColumnControls.length && this.addedColumnControls[1].setItems(this.columnData2);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderSplits = function () {
    this.options.fnUnit.param;
    2 == this.options.fnUnit.inData.length ? (this.options.fnUnit.param.splits = "", this.$splitsWrapperControl.hide()) : (this.$splits.val(this.options.fnUnit.param.splits), this.$splitsWrapperControl.show());
  }, e.prototype.renderNewColumnName = function () {
    this.options.fnUnit.param;
    this.$newColumnName.val(this.options.fnUnit.param["new-column-name"]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns0" === this.problems[t].param && this.createValidationContent(this.validationControls.columns[0].find("[index=0]"), this.problems[t]), "columns1" === this.problems[t].param && this.createValidationContent(this.validationControls.columns[1].find("[index=1]"), this.problems[t]), "new-column-name" === this.problems[t].param && this.createValidationContent(this.$newColumnName.parent(), this.problems[t]), "splits" === this.problems[t].param && this.createValidationContent(this.$splits.closest(".brtc-va-editors-sheet-controls-propertycontrol-contents"), this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns, this.problems[t]);
    }
  }, e.prototype.renderErrorColumns = function (t) {
    this.createValidationContent(this.$columns, t);
  }, e.prototype.renderErrorNumber = function (t) {
    this.createValidationContent(this.$number, t);
  }, e.prototype.renderErrorRatio = function (t) {
    this.createValidationContent(this.$ratio, t);
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.makeColumnParam = function () {
    var t = [];

    for (var e in t = [], this.addedColumnControls) {
      t.push(this.addedColumnControls[e].getSelectedItems());
    }

    return t;
  }, e.prototype.createOnColumnsCommand = function () {
    var e = this.makeColumnParam(),
        o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          columns: e
        }
      }
    };
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.bucketizer.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", this.PARAM_NEW_COLUMN_NAME = "new-column-name", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addSplitsRule(), this.addHoldColumnsRule();
  }, e.prototype.addInTableRule = function (t) {
    var e = this;
    this.addRule(function (t) {
      return e.checkInTableIsEmpty(t);
    }), this.addRule(function (t) {
      var o = {
        errorCode: "BR-0138",
        param: "inData",
        messageParam: [[]]
      },
          r = t[IN_DATA];

      for (var n in e.hasAllSchema = !0, r) {
        var a = t.parent().getPreFnUnitByCondition(t.fid, function (t) {
          return $.inArray(r[n], t[OUT_DATA]) > -1;
        });
        e._getSchema(t, n) && 0 !== e._getSchema(t, n).length || o.messageParam[0].push("[" + a.display.label + "]");
      }

      if (o.messageParam[0].length > 0) return e.hasAllSchema = !1, e.problemFactory.createProblem(o, t);
    });
  }, e.prototype.checkInTableIsEmpty = function (t) {
    var e = {
      errorCode: "BR-0138",
      messageParam: []
    },
        o = t.parent().getFnUnitById(t.parent().getPrevious(t.fid)[0]);
    if (this._hasPrevious(t)) return this._getSchema(t) && 0 !== this._getSchema(t).length ? void 0 : (e.messageParam.push(o.display.label), this.problemFactory.createProblem(e, t));
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0]);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = [];

        for (var r in e.param[t.PARAM_COLUMNS]) {
          o.push(t.checkColumnExists(e, t.PARAM_COLUMNS + r, e.param[t.PARAM_COLUMNS][r], r));
        }

        return o;
      }
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = [];
        return 1 == e.param[t.PARAM_COLUMNS].length ? void 0 === e.param[t.PARAM_COLUMNS][0][0] && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "columns0",
          messageParam: ["Columns"]
        }, e)) : 2 == e.param[t.PARAM_COLUMNS].length && (void 0 === e.param[t.PARAM_COLUMNS][0][0] && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "columns0",
          messageParam: ["Columns"]
        }, e)), 2 == e[IN_DATA].length && void 0 === e.param[t.PARAM_COLUMNS][1][0] && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "columns1",
          messageParam: ["Columns"]
        }, e))), o;
      }
    });
  }, e.prototype.addSplitsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = [];
        return 1 == e.inData.length && "" == e.param.splits && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "splits",
          messageParam: ["Splits"]
        }, e)), o;
      }
    });
  }, t.VA.Core.Functions.Library.bucketizer.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.columnsToArray = {
    category: "extraction",
    defaultFnUnit: {
      func: "columnsToArray",
      name: "ColumnsToArray",
      inData: [],
      outData: [],
      param: {
        flag: "false",
        "column-name": "",
        columns: [[]]
      },
      display: {
        label: "Columns To Array",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Zip chosen DoubleType columns into a single ArrayType[DoubleType] column and append it on the right side.",
    tags: ["Columns To Array", "ColumnsTo Array", "Columns ToArray", "Columns"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      flag: this.renderRemainColumnControl,
      "column-name": this.renderColumnNameControl,
      columns: this.renderColumnsControl
    }, this.createColumnsControl(), this.createRemainColumnControl(), this.createColumnNameControl();
  }, e.prototype.createRemainColumnControl = function (t) {
    var e = this;
    this.$remainColumnControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-replacemode"/>');
    var o = this.addPropertyControl("Remain Columns", function (t) {
      t.append(e.$remainColumnControl), e.createRadioButtonControl(e.$remainColumnControl, "True", "flag"), e.createRadioButtonControl(e.$remainColumnControl, "False", "flag");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "flag", "Remain Columns");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          n = r.createCommonCommand(o, e);
      r.executeCommand(n);
    }), n.attr("value", e), t[e] = n;
  }, e.prototype.renderRemainColumnControl = function () {
    var t = this.options.fnUnit.param.flag;
    "true" === t ? t = "True" : "false" === t && (t = "False"), t && $(this.$remainColumnControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.createColumnNameControl = function (t) {
    var e = this;
    this.$columnNameInputControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var o = this.addPropertyControl("Output Column Name", function (t) {
      t.append(e.$columnNameInputControl), e.createInput(e.$columnNameInputControl), e.$columnNameInputControl.on("change", function (t) {
        e.isInputValueChanged("column-name", $(this).val()) && e.createSetParameterValueCommand("column-name", $(this).val());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "column-name", "Output Column Name");
  }, e.prototype.renderColumnNameControl = function () {
    this.$columnNameInputControl.val(this.options.fnUnit.param["column-name"] || "");
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        expand: !0,
        multiple: !0,
        changed: function changed() {
          var t = e.createColumnsCommand();
          e.executeCommand(t);
        }
      };
      e.$columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param.columns = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createSetParameterValueCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.renderColumnsControl = function () {
    this.$columnsControl.setSelectedItems(this.options.fnUnit.param.columns[0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" == this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    this.columnNameArray = $.grep(t, function (t) {
      return "number" === t.type;
    }), this.$columnsControl.setItems(this.columnNameArray);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.columnsToArray.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns[0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns[0]);
    });
  }, t.VA.Core.Functions.Library.columnsToArray.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.conditionalDerivation = {
    category: "extraction",
    defaultFnUnit: {
      func: "conditionalDerivation",
      name: "AddColumn",
      inData: [],
      outData: [],
      param: {
        "new-column": "",
        condition: [[]]
      },
      display: {
        label: "Add Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a new column which contains data derived from conditions you entered.",
    tags: ["Add Column", "AddColumn", "Extraction", "Preprocessing", "Transform", "new column", "create", "select"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "new-column": this.renderNewColumn,
      condition: this.renderCondition
    }, this.ifPropertyControlArray = [], this.elseIfPropertyControlArray = [], this.elsePropertyControlArray = [], this.createNewColumnControl(), this.createConditionControl();
  }, e.prototype.createNewColumnControl = function () {
    var t = this;
    this.$newColumnInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type = "type1"/>'), this.addPropertyControl("New Column", function (e) {
      e.append(t.$newColumnInput);
      t.createInput(t.$newColumnInput, {}, "brtc-va-editors-sheet-controls-width-12"), t.$newColumnInput.on("change", function (e) {
        if (t.isInputValueChanged("new-column", $(this).val().replace(/ /gi, ""))) {
          var o = t.createNewColumnCommand();
          t.executeCommand(o);
        }
      });
    });
  }, e.prototype.createConditionControl = function () {
    this.TYPE_IF = "IF", this.TYPE_ELSE_IF = "ELSE_IF", this.TYPE_ELSE = "ELSE", this.createIfArea(), this.createElseIfArea(), this.createAddConditionButton(), this.createElseArea();
  }, e.prototype.createIfArea = function () {
    this.$ifArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-if-area"></div>'), this.$contentsArea.append(this.$ifArea);
  }, e.prototype.createElseIfArea = function () {
    this.$elseIfArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-else-if-area"></div>'), this.$contentsArea.append(this.$elseIfArea);
  }, e.prototype.createElseArea = function () {
    this.$elseArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-else-area"></div>'), this.$contentsArea.append(this.$elseArea);
  }, e.prototype.createAddConditionButton = function () {
    var e = this;
    this.$addConditionButton = $('<input type="button" class="brtc-va-conditional-derivation-property add-else-if-button"value="+ Add Else If"/>'), this.$contentsArea.append(this.$addConditionButton), this.$addConditionButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addConditionButton.click(function () {
      e.createNewConditionControl(e.TYPE_ELSE_IF);
      var t = e.createConditionCommand();
      e.executeCommand(t);
    });
  }, e.prototype.createNewConditionControl = function (t) {
    var e,
        o = this,
        r = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-new-condition-area"/>'),
        a = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        i = $('<div class="brtc-va-conditional-derivation-property remove-else-if-button brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>'),
        s = "";
    t === this.TYPE_IF ? (s = "If", this.ifPropertyControlArray = [r, a], e = {
      propertyControlParent: o.$ifArea,
      mandatory: !0
    }) : t === this.TYPE_ELSE_IF ? (s = "Else If", this.elseIfPropertyControlArray.push([r, a]), e = {
      propertyControlParent: o.$elseIfArea
    }) : t === this.TYPE_ELSE && (s = "Else", this.elsePropertyControlArray = [a], e = {
      propertyControlParent: o.$elseArea
    }), this.addPropertyControl(s, function (e) {
      e.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), e.addClass("brtc-va-conditional-derivation-property"), t !== o.TYPE_ELSE && (e.append(r), e.append(n), o.createAddExpressionButton(e, n, t)), e.append(a), t === o.TYPE_ELSE_IF && e.siblings(".brtc-va-editors-sheet-controls-propertycontrol-label").append(i);
      var s = {
        placeHolder: "Enter condition"
      };
      o.createInput(r, s, "brtc-va-editors-sheet-controls-width-12", {
        "margin-bottom": "5px"
      }), r.on("change", function (t) {
        var e = o.createConditionCommand();
        o.isInputValueChanged("condition", e.options.ref.param.condition) && o.executeCommand(e);
      }), s = {
        placeHolder: "Enter value"
      }, o.createInput(a, s, "brtc-va-editors-sheet-controls-width-12"), a.on("change", function (t) {
        var e = o.createConditionCommand();
        o.isInputValueChanged("condition", e.options.ref.param.condition) && o.executeCommand(e);
      }), i.click(function (t) {
        var e = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol"),
            r = e.prevAll().length;
        r > -1 && o.elseIfPropertyControlArray.splice(r, 1), e.remove();
        var n = o.createConditionCommand();
        o.executeCommand(n), t.stopPropagation();
      });
    }, e);
  }, e.prototype.createAddExpressionButton = function (t, e, o) {
    var r = this,
        n = $('<input class="add-condition-button" type="button" value="+ Add Condition"/>');
    t.append(n), r.createButton(n, {
      height: 25
    }, "brtc-va-editors-sheet-controls-width-12"), n.click(function () {
      r.createNewExpressionControl(e, o);
      var t = r.createConditionCommand();
      r.executeCommand(t);
    });
  }, e.prototype.createNewExpressionControl = function (t, e) {
    var o = this,
        r = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    t.append(r);
    var n = t.parents(".brtc-va-editors-sheet-controls-propertycontrol");
    e === this.TYPE_IF && this.ifPropertyControlArray.splice(this.ifPropertyControlArray.length - 1, 0, r);
    var a = n.prevAll().length;
    e === this.TYPE_ELSE_IF && a > -1 && this.elseIfPropertyControlArray[a].splice(this.elseIfPropertyControlArray[a].length - 1, 0, r);
    o.createInput(r, {
      placeHolder: 'Enter "AND" condition'
    }, "brtc-va-editors-sheet-controls-width-12", {
      "margin-bottom": "5px"
    }), r.on("change", function (t) {
      var e = o.createConditionCommand();
      o.isInputValueChanged("condition", e.options.ref.param.condition) && o.executeCommand(e);
    });
    var i = $('<div class="remove-condition-button"></div>');
    r.parent(".brtc-va-editors-sheet-controls-wrapper").prepend(i), i.click(function (t) {
      var r = $(this).parent(".brtc-va-editors-sheet-controls-wrapper"),
          n = r.prevAll(".brtc-va-editors-sheet-controls-wrapper").length + 1;
      e === o.TYPE_IF && o.ifPropertyControlArray.splice(n, 1), e === o.TYPE_ELSE_IF && a > -1 && o.elseIfPropertyControlArray[a].splice(n, 1), r.remove();
      var i = o.createConditionCommand();
      o.executeCommand(i), t.stopPropagation();
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    });
  }, e.prototype.renderNewColumn = function () {
    var t = this.options.fnUnit.param["new-column"];
    this.$newColumnInput.val(t || "");
  }, e.prototype.renderCondition = function () {
    var t, e;
    this.ifPropertyControlArray = [], this.elseIfPropertyControlArray = [], this.elsePropertyControlArray = [], this.$ifArea.empty(), this.$elseIfArea.empty(), this.$elseArea.empty();
    var o = this.options.fnUnit.param.condition;

    if (o.length >= 2) {
      for (this.createNewConditionControl(this.TYPE_IF), t = 1; t < o[0].length - 1; t++) {
        this.createNewExpressionControl(this.ifPropertyControlArray[0].parents(".brtc-va-editors-sheet-controls-wrapper").siblings(".brtc-va-editors-sheet-controls-propertycontrol-new-condition-area"), this.TYPE_IF);
      }

      if (o.length > 2) for (t = 1; t < o.length - 1; t++) {
        for (this.createNewConditionControl(this.TYPE_ELSE_IF), e = 1; e < o[t].length - 1; e++) {
          this.createNewExpressionControl(this.elseIfPropertyControlArray[t - 1][0].parents(".brtc-va-editors-sheet-controls-wrapper").siblings(".brtc-va-editors-sheet-controls-propertycontrol-new-condition-area"), this.TYPE_ELSE_IF);
        }
      }

      for (var r in this.createNewConditionControl(this.TYPE_ELSE), this.ifPropertyControlArray) {
        this.ifPropertyControlArray[r].val(o[0][r]);
      }

      if (o.length > 2) for (var n in this.elseIfPropertyControlArray) {
        for (var a in this.elseIfPropertyControlArray[n]) {
          this.elseIfPropertyControlArray[n][a].val(o[parseInt(n) + 1][a]);
        }
      }
      this.elsePropertyControlArray[0].val(o[o.length - 1][0]);
    } else {
      for (var r in this.createNewConditionControl(this.TYPE_IF), this.createNewConditionControl(this.TYPE_ELSE), this.ifPropertyControlArray) {
        this.ifPropertyControlArray[r].val("");
      }

      for (var n in this.elseIfPropertyControlArray) {
        for (var a in this.elseIfPropertyControlArray) {
          this.elseIfPropertyControlArray[n][a].val("");
        }
      }

      this.elsePropertyControlArray[0].val("");
    }
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if ("new-column" === this.problems[t].param && this.createValidationContent(this.$newColumnInput.parent(), this.problems[t]), "condition" === this.problems[t].param) {
        var e = parseInt(this.problems[t].paramIndex[0]),
            o = parseInt(this.problems[t].paramIndex[1]);
        0 === e ? this.createValidationContent(this.ifPropertyControlArray[o].parent(), this.problems[t]) : e === this.elseIfPropertyControlArray.length + 1 || this.createValidationContent(this.elseIfPropertyControlArray[e - 1][o].parent(), this.problems[t]);
      }
    }
  }, e.prototype.createNewColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param["new-column"] = this.$newColumnInput.val().replace(/ /gi, ""), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createConditionCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.condition = [];
    var o = [];

    for (var r in this.ifPropertyControlArray) {
      o.push(this.ifPropertyControlArray[r].val().replace(/ /gi, ""));
    }

    for (var r in e.ref.param.condition.push(o), this.elseIfPropertyControlArray) {
      var n = [];

      for (var a in this.elseIfPropertyControlArray[r]) {
        n.push(this.elseIfPropertyControlArray[r][a].val().replace(/ /gi, ""));
      }

      e.ref.param.condition.push(n);
    }

    return e.ref.param.condition.push([this.elsePropertyControlArray[0].val().replace(/ /gi, "")]), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.conditionalDerivation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_NEW_COLUMN = "new-column", this.PARAM_CONDITION = "condition", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addNewColumnRule(), this.addConditionRule();
  }, e.prototype.addNewColumnRule = function () {
    var e = this;
    this.addRule(function (o) {
      var r = [],
          n = t.VA.Core.DataQueryTemplate.getSchema(o.parent().mid, o[IN_DATA]),
          a = o.param[e.PARAM_NEW_COLUMN].toLowerCase();
      if (n) for (var i in n) {
        if (a.indexOf(n[i].name) > -1) {
          var s = {
            errorCode: "BR-0057",
            param: e.PARAM_NEW_COLUMN,
            messageParam: [o.param[e.PARAM_NEW_COLUMN], "In Table", "New Column"]
          };
          r.push(e.problemFactory.createProblem(s, o));
        }
      }
      return r;
    }), this.addRule(function (t) {
      return e.checkNewColumnName(t, e.PARAM_NEW_COLUMN, t.param[e.PARAM_NEW_COLUMN]);
    });
  }, e.prototype.addConditionRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];

      if (t._getSchema(e)) {
        for (var r in e.param.condition) {
          var n = e.param.condition[r];

          for (var a in n) {
            var i = n[a],
                s = {
              errorCode: "BR-0033",
              param: t.PARAM_CONDITION,
              messageParam: ["Condition"]
            };

            if (0 == a ? s.messageParam = ["Condition"] : 0 != a && a != n.length - 1 && (s.messageParam = ["AND Condition"]), a != n.length - 1) {
              var l = t._checkStringIsEmpty(s, e, i);

              l ? (l.paramIndex = [r, a], o.push(l)) : (l = t.checkColumnExists(e, t.PARAM_CONDITION, t.getColumnsInCondition(i))) && (l.paramIndex = [r, a], o.push(l));
            }
          }
        }

        if (0 === e.param.condition[0].length) (s = {
          errorCode: "BR-0033",
          param: t.PARAM_CONDITION,
          messageParam: ["Condition"]
        }).messageParam = ["Condition"], s.paramIndex = [0, 0], o.push(t.problemFactory.createProblem(s, e));
        return o;
      }
    });
  }, e.prototype.getColumnsInCondition = function (t) {
    var e = [],
        o = t.replace(new RegExp('"([^"]*)"', "g"), "").replace(new RegExp("^[^\\[]*|[^\\]]*$", "g"), "");
    return o.match(new RegExp("\\[|\\]", "g")) && (e = o.replace(new RegExp("^[^\\[]*\\[|\\][^\\]]*$", "g"), "").split(new RegExp("\\].*?\\[", "g"))), e;
  }, t.VA.Core.Functions.Library.conditionalDerivation.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.dataNormalization = {
    category: "extraction",
    defaultFnUnit: {
      func: "dataNormalization",
      name: "Normalization",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "normalization-type": "min_max",
        "min-max-cut": "false",
        groupby: []
      },
      display: {
        label: "Normalization",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function normalizes selected column data and the results are saved in a new column.",
    tags: ["Normalization", "Manipulation", "Preprocessing", "standardization", "scaler"],
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "normalization-type": this.renderNormalizationType,
      "min-max-cut": this.renderMinMaxCut,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createNormalizationTypeControl(), this.createMinMaxCutControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.$columnsProperties = this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createNormalizationTypeControl = function () {
    var t = this;
    this.$minMaxNormalizationRadioButton = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton"/>'), this.$zScoreNormalizationRadioButton = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton"/>'), this.$normalizationTypeProperties = this.addPropertyControl("Normalization Type", function (e) {
      e.append(t.$minMaxNormalizationRadioButton), e.append(t.$zScoreNormalizationRadioButton), t.$minMaxNormalizationRadioButton.text("Min-Max"), t.$minMaxNormalizationRadioButton.attr("normalizationtype", "min_max"), t.$minMaxNormalizationRadioButton.on("checked", function (e) {
        var o = t.createNormalizationTypeCommand();
        t.executeCommand(o);
      }), t.$minMaxNormalizationRadioButton.jqxRadioButton({
        checked: !0
      }), t.$zScoreNormalizationRadioButton.text("Z-Score"), t.$zScoreNormalizationRadioButton.attr("normalizationtype", "z_score"), t.$zScoreNormalizationRadioButton.on("checked", function (e) {
        var o = t.createNormalizationTypeCommand();
        t.executeCommand(o);
      }), t.createRadioButton(t.$minMaxNormalizationRadioButton, {
        groupName: "normalizationtype"
      }, "brtc-va-editors-sheet-controls-width-12"), t.createRadioButton(t.$zScoreNormalizationRadioButton, {
        groupName: "normalizationtype"
      }, "brtc-va-editors-sheet-controls-width-12");
    }, {
      mandatory: !0
    });
  }, e.prototype.createMinMaxCutControl = function () {
    var t = this;
    this.$trueRadioButton = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton"/>'), this.$falseRadioButton = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton"/>'), this.$minMaxCutProperties = this.addPropertyControl("Min Max Cut", function (e) {
      e.append(t.$trueRadioButton), e.append(t.$falseRadioButton), t.$trueRadioButton.text("True"), t.$trueRadioButton.attr("minmaxcut", "true"), t.$trueRadioButton.on("checked", function (e) {
        var o = t.createMinMaxCutCommand();
        t.executeCommand(o);
      }), t.$falseRadioButton.text("False"), t.$falseRadioButton.attr("minmaxcut", "false"), t.$falseRadioButton.on("checked", function (e) {
        var o = t.createMinMaxCutCommand();
        t.executeCommand(o);
      }), t.$falseRadioButton.jqxRadioButton({
        checked: !0
      }), t.createRadioButton(t.$trueRadioButton, {
        groupName: "minmaxcut"
      }, "brtc-va-editors-sheet-controls-width-12"), t.createRadioButton(t.$falseRadioButton, {
        groupName: "minmaxcut"
      }, "brtc-va-editors-sheet-controls-width-12");
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.groupbyControl.setItems(this.columnNameArray), this.options.fnUnit[IN_DATA].length > 1 ? (this.$columnsProperties.hide(), this.$normalizationTypeProperties.hide(), this.$minMaxCutProperties.show()) : (this.$columnsProperties.show(), this.$normalizationTypeProperties.show(), this.$minMaxCutProperties.hide());
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderNormalizationType = function () {
    var t = this.options.fnUnit.param["normalization-type"];
    t ? "min_max" === t ? this.$minMaxNormalizationRadioButton.jqxRadioButton({
      checked: !0
    }) : "z_score" === t && this.$zScoreNormalizationRadioButton.jqxRadioButton({
      checked: !0
    }) : this.$minMaxNormalizationRadioButton.jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderMinMaxCut = function () {
    var t = this.options.fnUnit.param["min-max-cut"];
    t ? "true" === t ? this.$trueRadioButton.jqxRadioButton({
      checked: !0
    }) : "false" === t && this.$falseRadioButton.jqxRadioButton({
      checked: !0
    }) : this.$falseRadioButton.jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "normalization-type" === this.problems[t].param && this.createValidationContent(this.$minMaxNormalizationRadioButton.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createNormalizationTypeCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param["normalization-type"] = "", this.$minMaxNormalizationRadioButton.jqxRadioButton("checked") ? e.ref.param["normalization-type"] = this.$minMaxNormalizationRadioButton.attr("normalizationtype") : this.$zScoreNormalizationRadioButton.jqxRadioButton("checked") && (e.ref.param["normalization-type"] = this.$zScoreNormalizationRadioButton.attr("normalizationtype")), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createMinMaxCutCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param["min-max-cut"] = "", this.$trueRadioButton.jqxRadioButton("checked") ? e.ref.param["min-max-cut"] = "true" : this.$falseRadioButton.jqxRadioButton("checked") && (e.ref.param["min-max-cut"] = "false"), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.dataNormalization.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.BaseValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.MultiInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.MultiInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addLinkRule = function () {
    this.addRule(function (t) {
      return this.checkLinkIsConnected(t);
    }.bind(this));
  }, e.prototype.addInTableRule = function (t) {
    var e = this;
    this.addRule(function (t) {
      return e.checkInTableIsEmpty(t);
    }), this.addRule(function (t) {
      var o = {
        errorCode: "BR-0138",
        param: "inData",
        messageParam: [[]]
      },
          r = t[IN_DATA];

      for (var n in e.hasAllSchema = !0, r) {
        var a = t.parent().getPreFnUnitByCondition(t.fid, function (t) {
          return $.inArray(r[n], t[OUT_DATA]) > -1;
        });
        e._getSchema(t, n) && 0 !== e._getSchema(t, n).length || o.messageParam[0].push("[" + a.display.label + "]");
      }

      if (o.messageParam[0].length > 0) return e.hasAllSchema = !1, e.problemFactory.createProblem(o, t);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addGroupByRule = function (e, o, r) {
    e && (r = r || "groupby", this.addRule(function (n) {
      if (1 == n[IN_DATA].length && void 0 !== t.VA.Core.DataQueryTemplate.getSchema(n.parent().mid, n[IN_DATA][0])) {
        var a,
            i = [],
            s = n.param[r];

        if (n.param[e].constructor === Array) {
          if ((a = n.param[e][0]) && a.length) for (var l in s) {
            a.indexOf(s[l]) > -1 && i.push(s[l]);
          }
        } else if (n.param[e].constructor === String && (a = n.param[e])) for (var c in s) {
          a === s[c] && i.push(s[c]);
        }

        if (i.length) {
          var p = {
            errorCode: "BR-0057",
            param: r
          };
          return 1 == i.length ? p.messageParam = [i[0], o, "Group By"] : p.messageParam = [JSON.stringify(i), o, "Group By"], this.problemFactory.createProblem(p, n);
        }
      }
    }));
  }, t.VA.Core.Functions.Library.dataNormalization.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.datetimeCalculator = {
    category: "extraction",
    defaultFnUnit: {
      func: "datetimeCalculator",
      name: "CompareDateTime",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "with-column": "true",
        "to-column": "",
        "to-date": ""
      },
      display: {
        label: "Compare Datetime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Compare two DateTime and calculate the differences - year, month, day, week, millisecond - between two DateTime. Those differences are added as derived variables.",
    tags: ["Compare Datetime", "CompareDatetime", "Timeseries", "Preprocessing", "Datetime", "datetime", "calculate the difference", "year", "month", "day", "week", "millisecond"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      "with-column": this.renderIsColumnControl,
      "to-column": this.renderToColumnControl,
      "to-date": this.renderToDateControl
    }, this.createColumnsControls(), this.createOperationControls();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommand("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createOperationControls = function () {
    var t = this;
    this.$isColumnControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-iscolumn"/>'), this.addPropertyControl("Is Column", function (e) {
      e.append(this.$isColumnControl), t.createRadioButtonControl(t.$isColumnControl, "True", "iscolumn"), t.createRadioButtonControl(t.$isColumnControl, "False", "iscolumn");
    }, {
      mandatory: !0
    }), this.$toColumnControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-singlecombobox"/>'), this.addPropertyControl("To Column", function (e) {
      e.append(this.$toColumnControl);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createCommonCommand("to-column", o.items);
        }
      };
      t.toColumnControl = t.createColumnList(t.$toColumnControl, o);
    }, {
      mandatory: !0
    }), this.$toDateControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-datetext"/>'), this.addPropertyControl("To Date", function (e) {
      e.append(this.$toDateControl);
      t.createDateTimeInput(t.$toDateControl, {
        formatString: "yyyyMMddHHmmss",
        placeHolder: "yyyyMMddHHmmss"
      }), t.$toDateControl.on("textchanged", function (e) {
        var o = $.jqx.dataFormat.formatdate(e.args.date, "yyyyMMddHHmmss");
        t.createCommonCommand("to-date", [o]);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "True" === e ? e = "true" : "False" === e && (e = "false"), "true" === e ? (r.$toDateControl.closest(".jqx-expander").css("display", "none"), r.$toColumnControl.closest(".jqx-expander").css("display", "block")) : "false" === e && (r.$toDateControl.closest(".jqx-expander").css("display", "block"), r.$toColumnControl.closest(".jqx-expander").css("display", "none")), r.createWithColumnCommand("with-column", e || this.getRadioButtonValue());
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];
    $.each(t, function (t, o) {
      "String" === o.internalType && e.push(o);
    }), this.columnsControl.setItems(e), this.toColumnControl.setItems(e);
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderIsColumnControl = function () {
    var t = this.options.fnUnit.param["with-column"];
    "true" === t ? t = "True" : "false" === t && (t = "False"), t && $(this.$isColumnControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderToColumnControl = function () {
    var t = this.options.fnUnit.param;
    this.toColumnControl.setSelectedItems([t["to-column"]]);
  }, e.prototype.renderToDateControl = function () {
    var t = this.options.fnUnit.param;
    this.$toDateControl.jqxDateTimeInput("val", t["to-date"] ? t["to-date"] : "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "to-column" === this.problems[t].param ? this.createValidationContent(this.$toColumnControl.closest(".brtc-va-editors-sheet-controls-propertycontrol-contents"), this.problems[t]) : "to-date" === this.problems[t].param && this.createValidationContent(this.$toDateControl.closest(".brtc-va-editors-sheet-controls-propertycontrol-contents"), this.problems[t]);
    }
  }, e.prototype.columnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createWithColumnCommand = function (e, o) {
    var r,
        n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    "true" === o ? (n.ref.param[e] = o, n.ref.param["to-column"] = this.getSelectedItem(this.toColumnControl), r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, n)) : "false" === o && (n.ref.param[e] = o, n.ref.param["to-date"] = this.$toDateControl.jqxDateTimeInput("val"), r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, n)), this.executeCommand(r);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o[0] ? o[0] : "";
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.getSelectedItem = function (t) {
    return t.getSelectedItems().length > 0 ? t.getSelectedItems()[0] : "";
  }, t.VA.Core.Functions.Library.datetimeCalculator.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_TO_COLUMN = "to-column", this.PARAM_TO_DATE = "to-date", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addCheckOperationRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addCheckOperationRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = e.param["with-column"];
      if ("true" === o) return e.param[t.PARAM_TO_COLUMN] ? t.checkColumnExists(e, t.PARAM_TO_COLUMN, e.param[t.PARAM_TO_COLUMN]) : t.checkColumnIsEmpty(e, t.PARAM_TO_COLUMN, e.param[t.PARAM_TO_COLUMN], "To Column");

      if ("false" === o) {
        var r = {
          errorCode: "BR-0033",
          param: this.PARAM_TO_DATE,
          messageParam: ["To Date"]
        };
        return t._checkStringIsEmpty(r, e, e.param[t.PARAM_TO_DATE]);
      }
    });
  }, t.VA.Core.Functions.Library.datetimeCalculator.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.datetimeFormatConvertor = {
    category: "extraction",
    defaultFnUnit: {
      func: "datetimeFormatConvertor",
      name: "DateTimeFormatter",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "display-mode": "replace",
        "in-format": "",
        "out-format": "",
        "in-language": "en",
        "out-language": "en"
      },
      display: {
        label: "Datetime Formatter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Change the format of DateTime.",
    tags: ["Datetime Formatter", "DatetimeFormatter", "Timeseries", "Preprocessing", "Datetime", "datetime", "format converting", "change format", "locale", "year", "month", "day", "week", "millisecond"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.formatSource = [{
      label: "yy",
      value: "yy"
    }, {
      label: "yyyy",
      value: "yyyy"
    }, {
      label: "yyyyMM",
      value: "yyyyMM"
    }, {
      label: "yyyyMMdd",
      value: "yyyyMMdd"
    }, {
      label: "yyyyMMddHHmmss",
      value: "yyyyMMddHHmmss"
    }, {
      label: "yyyy-MM-dd",
      value: "yyyy-MM-dd"
    }, {
      label: "yyyy-MM-dd HH:mm:ss",
      value: "yyyy-MM-dd HH:mm:ss"
    }, {
      label: "yyyy-MMM-dd",
      value: "yyyy-MMM-dd"
    }, {
      label: "yyyy-MMM",
      value: "yyyy-MMM"
    }, {
      label: "yyyyMMM",
      value: "yyyyMMM"
    }, {
      label: "yyyy-MM-dd H:mm",
      value: "yyyy-MM-dd H:mm"
    }, {
      label: "yy/M/dd",
      value: "yy/M/dd"
    }, {
      label: "yyyy/MM/dd",
      value: "yyyy/MM/dd"
    }, {
      label: "yyyy년M월dd일",
      value: "yyyy년M월dd일"
    }, {
      label: "yy년 MM월",
      value: "yy년 MM월"
    }, {
      label: "M월dd일",
      value: "M월dd일"
    }, {
      label: "yyyy年MM月dd日",
      value: "yyyy年MM月dd日"
    }, {
      label: "HH시 mm분 ss초",
      value: "HH시 mm분 ss초"
    }], this.languageSource = [{
      label: "En",
      value: "en"
    }, {
      label: "Fr",
      value: "fr"
    }, {
      label: "De",
      value: "de"
    }, {
      label: "It",
      value: "it"
    }, {
      label: "Ja",
      value: "ja"
    }, {
      label: "Ko",
      value: "ko"
    }, {
      label: "Zh",
      value: "zh"
    }], this.render = {
      columns: this.renderColumns,
      "display-mode": this.renderDisplayMode,
      "in-format": this.renderInFormat,
      "out-format": this.renderOutFormat,
      "in-language": this.renderInLanguage,
      "out-language": this.renderOutLanguage
    }, this.createColumnsControl(), this.createDisplayModeControl(), this.createInFormatControl(), this.createOutFormatControl(), this.createInLanguageControl(), this.createOutLanguageControl();
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderDisplayMode = function () {
    var t = this.options.fnUnit.param["display-mode"];
    "append" === t ? t = "Append" : "replace" === t && (t = "Replace"), t && $(this.$displayMode[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderInFormat = function () {
    var t = this.options.fnUnit.param;
    this.$inFormat.jqxComboBox("val", t["in-format"] || "");
  }, e.prototype.renderOutFormat = function () {
    var t = this.options.fnUnit.param;
    this.$outFormat.jqxComboBox("val", t["out-format"] || "");
  }, e.prototype.renderInLanguage = function () {
    var t = this.options.fnUnit.param;
    void 0 === t["in-language"] || "" === t["in-language"] ? this.$inLanguage.jqxDropDownList("selectIndex", -1) : this.$inLanguage.jqxDropDownList("selectItem", t["in-language"]);
  }, e.prototype.renderOutLanguage = function () {
    var t = this.options.fnUnit.param;
    void 0 === t["out-language"] || "" === t["out-language"] ? this.$outLanguage.jqxDropDownList("selectIndex", -1) : this.$outLanguage.jqxDropDownList("selectItem", t["out-language"]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "in-format" === this.problems[t].param ? this.createValidationContent(this.$inFormat.parent(), this.problems[t]) : "out-format" === this.problems[t].param && this.createValidationContent(this.$outFormat.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createDisplayModeControl = function (t) {
    var e = this;
    this.$displayMode = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>');
    var o = this.addPropertyControl("Display Mode", function (t) {
      t.append(e.$displayMode), e.createRadioButtonControl(e.$displayMode, "Append", "display-mode"), e.createRadioButtonControl(e.$displayMode, "Replace", "display-mode");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "display-mode", "Display Mode");
  }, e.prototype.createInFormatControl = function () {
    var t = this;
    this.$inFormat = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = this.addPropertyControl("In Format", function (e) {
      t.createComboBox(this.$inFormat, {
        source: this.formatSource,
        placeHolder: "Enter value"
      }, t.$inFormat.parent()), e.append(this.$inFormat.parent()), t.$inFormat.on("change", function () {
        var e;
        e = t.$inFormat.val(), t.createCommonCommand("in-format", e);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "in-format", "In Format");
  }, e.prototype.createOutFormatControl = function () {
    var t = this;
    this.$outFormat = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = this.addPropertyControl("Out Format", function (e) {
      t.createComboBox(this.$outFormat, {
        source: this.formatSource,
        placeHolder: "Enter value"
      }, this.$outFormat.parent()), e.append(this.$outFormat.parent()), t.$outFormat.on("change", function () {
        var e;
        e = t.$outFormat.val(), t.createCommonCommand("out-format", e);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "out-format", "Out Format");
  }, e.prototype.createInLanguageControl = function () {
    var t = this;
    this.$inLanguage = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = this.addPropertyControl("In Language", function (e) {
      t.createDropDownList(this.$inLanguage, {
        source: this.languageSource
      }), e.append(this.$inLanguage.parent()), t.$inLanguage.on("change", function () {
        var e = t.$inLanguage.jqxDropDownList("getSelectedItem") ? t.$inLanguage.jqxDropDownList("getSelectedItem").value : "";
        t.createCommonCommand("in-language", e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "in-language", "In Language");
  }, e.prototype.createOutLanguageControl = function () {
    var t = this;
    this.$outLanguage = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = this.addPropertyControl("Out Language", function (e) {
      t.createDropDownList(this.$outLanguage, {
        source: this.languageSource
      }), e.append(t.$outLanguage.parent()), t.$outLanguage.on("change", function () {
        var e = t.$outLanguage.jqxDropDownList("getSelectedItem") ? t.$outLanguage.jqxDropDownList("getSelectedItem").value : "";
        t.createCommonCommand("out-language", e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "out-language", "Out Language");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          n = r.createCommonCommand(o, e);
      r.executeCommand(n);
    }), n.attr("value", e), t[e] = n;
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    "Append" === o ? o = "append" : "Replace" === o && (o = "replace"), r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];
    $.each(t, function (t, o) {
      "String" === o.internalType && e.push(o);
    }), this.columnsControl.setItems(e);
  }, t.VA.Core.Functions.Library.datetimeFormatConvertor.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_IN_FORMAT = "in-format", this.PARAM_OUT_FORMAT = "out-format", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addInFormatRule(), this.addOutFormatRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addInFormatRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_IN_FORMAT,
          messageParam: ["In Format"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_IN_FORMAT]);
      }
    });
  }, e.prototype.addOutFormatRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_OUT_FORMAT,
          messageParam: ["Out Format"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_OUT_FORMAT]);
      }
    });
  }, t.VA.Core.Functions.Library.datetimeFormatConvertor.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.ewma = {
    category: "extraction",
    defaultFnUnit: {
      func: "ewma",
      name: "EWMA",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        number: "",
        ratio: "",
        wilder: "false",
        "message-column-name": ""
      },
      display: {
        label: "EWMA",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Compute exponentially weighted moving average(EWMA) values for selected columns.",
    tags: ["EWMA", "Trend", "Timeseries", "Transform", "exponential weight moving average", "moving average"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns,
      number: this.renderNumber,
      ratio: this.renderRatio,
      wilder: this.renderWilder,
      "message-column-name": this.renderMessageColumnNameControl
    }, this.renderError = {
      columns: this.renderErrorColumns,
      number: this.renderErrorNumber,
      ratio: this.renderErrorRatio
    }, this.createColumnsControl(), this.createHoldColumnsControl(), this.createNumberControl(), this.createRatioControl(), this.createWilderControl(), this.createMessageColumnNameControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(this.$columns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(this.$holdColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("hold-columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createNumberControl = function (t) {
    var e = this;
    this.$number = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Number", function (t) {
      t.append(this.$number);
      e.numberControl = e.createNumericInput(e.$number, {
        numberType: "int",
        min: 1,
        minus: !1
      }), e.numberControl.onChange(function () {
        e.createNumericInputCommand("number", this.getValue());
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "number", "Number");
  }, e.prototype.createRatioControl = function (t) {
    var e = this;
    this.$ratio = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Ratio", function (t) {
      t.append(this.$ratio);
      e.ratioControl = e.createNumericInput(e.$ratio, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1
      }), e.ratioControl.onChange(function () {
        e.createNumericInputCommand("ratio", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "ratio", "Ratio");
  }, e.prototype.createWilderControl = function (t) {
    var e = this;
    this.$wilderTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$wilderFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = this.addPropertyControl("Wilder", function (t) {
      t.append(this.$wilderTrueControl).append(this.$wilderFalseControl), e.createRadioButton(e.$wilderTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$wilderFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$wilderTrueControl.on("checked", function (t) {
        e.createRadioButtonCommand("wilder", "true");
      }), e.$wilderFalseControl.on("checked", function (t) {
        e.createRadioButtonCommand("wilder", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "wilder", "Wilder");
  }, e.prototype.createMessageColumnNameControl = function (t) {
    var e = this;
    this.$messageColumnNameControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), this.$messageColumnNameControlWrapper = this.addPropertyControl("Message Column Name", function (t) {
      t.append(this.$messageColumnNameControl), e.createInput(e.$messageColumnNameControl), e.$messageColumnNameControl.on("change", function (t) {
        e.isInputValueChanged("message-column-name", $(this).val()) && e.createInputCommand("message-column-name", $(this).val());
      });
    });
    var o = this.$messageColumnNameControlWrapper.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "message-column-name", "Message Column Name");
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = [];

    for (var r in e) {
      "number" != e[r].type && "Double[]" != e[r].internalType || o.push(e[r]);
    }

    this.columnsControl.setItems(o), this.holdColumnsControl.setItems(e), this.$wilderFalseControl.jqxRadioButton("check");
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderNumber = function () {
    this.numberControl.setValue(this.options.fnUnit.param.number || "");
  }, e.prototype.renderRatio = function () {
    this.ratioControl.setValue(this.options.fnUnit.param.ratio || "");
  }, e.prototype.renderWilder = function () {
    var t = this.options.fnUnit.param;
    void 0 === t.wilder ? this.$wilderFalseControl.jqxRadioButton("check") : ("true" === t.wilder && this.$wilderTrueControl.jqxRadioButton("check"), "false" === t.wilder && this.$wilderFalseControl.jqxRadioButton("check"));
  }, e.prototype.renderMessageColumnNameControl = function () {
    this.$messageColumnNameControl.val(this.options.fnUnit.param["message-column-name"] || "");
  }, e.prototype.renderValidation = function () {
    if (this.problems.length > 0) for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "number" === this.problems[t].param && this.createValidationContent(this.$number, this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns, this.problems[t]);
    }
  }, e.prototype.renderErrorColumns = function (t) {
    this.createValidationContent(this.$columns, t);
  }, e.prototype.renderErrorNumber = function (t) {
    this.createValidationContent(this.$number, t);
  }, e.prototype.renderErrorRatio = function (t) {
    this.createValidationContent(this.$ratio, t);
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.ewma.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", this.PARAM_NUMBER = "number", this.PARAM_MESSAGE_COLUMN_NAME = "message-column-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addHoldColumnsRule(), this.addNumberRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0]);
    });
  }, e.prototype.addNumberRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_NUMBER,
          messageParam: ["Number"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_NUMBER]);
      }
    });
  }, t.VA.Core.Functions.Library.ewma.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.indexToLabel = {
    category: "extraction",
    defaultFnUnit: {
      func: "indexToLabel",
      name: "IndexToLabel",
      inData: [],
      outData: [],
      param: {
        "input-col": "",
        "label-type": "",
        "label-info": "",
        "output-col": "",
        "hold-cols": []
      },
      display: {
        label: "Index To Label",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "convert index to label",
    mandatory: [],
    tags: ["index. label", "indextolabelmodel", "model", "indextostring"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-col": this.renderInputColControl,
      "label-type": this.renderLabelTypeControl,
      "label-info": this.renderLabelInfoControl,
      "output-col": this.renderOutputColControl,
      "hold-cols": this.renderHoldColsControl
    }, this.$elements = {}, this.controls = {}, this.createInputColControl(), this.createLabelTypeControl(), this.createLabelInfoControl(), this.createOutputColControl(), this.createHoldColsControl();
  }, e.prototype.createInputColControl = function (t) {
    var e = this;
    e.$elements["input-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Column", function (t) {
      t.append(e.$elements["input-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["input-col"] = e.createColumnList(e.$elements["input-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColControl = function (t) {
    var e = this.options.fnUnit.param["input-col"];
    this.controls["input-col"].setSelectedItems([e]);
  }, e.prototype.createLabelTypeControl = function (t) {
    var e = this;
    e.$elements["label-type"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), e.addPropertyControl("Label Type", function (t) {
      t.append(e.$elements["label-type"]);
      e.controls["label-type"] = e.createDropDownList(e.$elements["label-type"], {
        source: [{
          label: "String",
          value: "string",
          default: !1
        }, {
          label: "Double",
          value: "double",
          default: !1
        }, {
          label: "Integer",
          value: "integer",
          default: !1
        }, {
          label: "Long",
          value: "long",
          default: !1
        }, {
          label: "Boolean",
          value: "boolean",
          default: !1
        }],
        displayMember: "label",
        valueMember: "value"
      }), e.controls["label-type"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("label-type", t.args.item.value);
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderLabelTypeControl = function (t) {
    var e = this.options.fnUnit.param["label-type"];
    this.$elements["label-type"].val(e);
  }, e.prototype.createLabelInfoControl = function (t) {
    var e = this;
    e.$elements["label-info"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Labels", function (t) {
      t.append(e.$elements["label-info"]);
      e.controls["label-info"] = e.createInput(e.$elements["label-info"], {
        placeHolder: "ex) setosa,versicolor,virginica"
      }), e.$elements["label-info"].on("change", function (t) {
        if (e.isInputValueChanged("label-info", $(this).val())) {
          var o = e.createSetParameterValueCommand("label-info", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelInfoControl = function (t) {
    var e = this.options.fnUnit.param["label-info"];
    this.$elements["label-info"].val(e || "");
  }, e.prototype.createOutputColControl = function (t) {
    var e = this;
    e.$elements["output-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Output Column", function (t) {
      t.append(e.$elements["output-col"]);
      e.controls["output-col"] = e.createInput(e.$elements["output-col"], {
        placeHolder: "output_col"
      }), e.$elements["output-col"].on("change", function (t) {
        if (e.isInputValueChanged("output-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("output-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderOutputColControl = function (t) {
    var e = this.options.fnUnit.param["output-col"];
    this.$elements["output-col"].val(e || "");
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["Double"]), this.controls["input-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.indexToLabel.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputColRule(), this.addLabelInfoRule();
  }, o.prototype.addInputColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-col", e.param["input-col"], "Input Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-col", e.param["input-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "input-col", e.param["input-col"], ["Double"]);
    });
  }, o.prototype.addLabelInfoRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "label-info",
        messageParam: ["Labels"]
      }, e, e.param["label-info"]);
    });
  }, t.VA.Core.Functions.Library.indexToLabel.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.indexToLabelModel = {
    category: "extraction",
    defaultFnUnit: {
      func: "indexToLabelModel",
      name: "IndexToLabelModel",
      inData: [],
      outData: [],
      param: {
        "input-col": "",
        "label-col-name": "",
        "output-col": "",
        "hold-cols": []
      },
      display: {
        label: "Index To Label Model",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "convert index to label using a given model",
    mandatory: [],
    tags: ["index. label", "indextolabelmodel", "model", "indextostring"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-col": this.renderInputColControl,
      "label-col-name": this.renderLabelColNameControl,
      "output-col": this.renderOutputColControl,
      "hold-cols": this.renderHoldColsControl
    }, this.$elements = {}, this.controls = {}, this.createInputColControl(), this.createLabelColNameControl(), this.createOutputColControl(), this.createHoldColsControl();
  }, e.prototype.createInputColControl = function (t) {
    var e = this;
    e.$elements["input-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Column", function (t) {
      t.append(e.$elements["input-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["input-col"] = e.createColumnList(e.$elements["input-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColControl = function (t) {
    var e = this.options.fnUnit.param["input-col"];
    this.controls["input-col"].setSelectedItems([e]);
  }, e.prototype.createLabelColNameControl = function (t) {
    var e = this;
    e.$elements["label-col-name"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Label Column", function (t) {
      t.append(e.$elements["label-col-name"]);
      e.controls["label-col-name"] = e.createInput(e.$elements["label-col-name"], {
        placeHolder: "species (one of colName)"
      }), e.$elements["label-col-name"].on("change", function (t) {
        if (e.isInputValueChanged("label-col-name", $(this).val())) {
          var o = e.createSetParameterValueCommand("label-col-name", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColNameControl = function (t) {
    var e = this.options.fnUnit.param["label-col-name"];
    this.$elements["label-col-name"].val(e || "");
  }, e.prototype.createOutputColControl = function (t) {
    var e = this;
    e.$elements["output-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Output Column", function (t) {
      t.append(e.$elements["output-col"]);
      e.controls["output-col"] = e.createInput(e.$elements["output-col"], {
        placeHolder: "output_col"
      }), e.$elements["output-col"].on("change", function (t) {
        if (e.isInputValueChanged("output-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("output-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderOutputColControl = function (t) {
    var e = this.options.fnUnit.param["output-col"];
    this.$elements["output-col"].val(e || "");
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["Double"]), this.controls["input-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.indexToLabelModel.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addInputColRule(), this.addLabelColNameRule();
  }, o.prototype.addInputColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-col", e.param["input-col"], "Input Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-col", e.param["input-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "input-col", e.param["input-col"], ["Double"]);
    });
  }, o.prototype.addLabelColNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "label-col-name",
        messageParam: ["Label Column"]
      }, e, e.param["label-col-name"]);
    });
  }, t.VA.Core.Functions.Library.indexToLabelModel.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.indexToString = {
    category: "extraction",
    defaultFnUnit: {
      func: "indexToString",
      name: "IndexToString",
      inData: [],
      outData: [],
      param: {
        columns: [[], []],
        "new-column": [],
        "string-label": [""],
        "hold-columns": [[]]
      },
      display: {
        label: "Index To String",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["string-label"],
    description: "This function maps a column of label indices to a column containing the original labels as strings.",
    tags: ["Index String", "IndexToString", "Transform", "Index", "String", "Preprocessing", "Index To String", "indices", "stringindexer"],
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.stringLabelControlArray = [], this.render = {
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns,
      "new-column": this.renderNewColumn,
      "string-label": this.renderStringLabel
    }, this.createSingleColumnsControl(), this.createStringLabelControl(), this.createMultiColumnsControl(), this.createHoldColumnsControl(), this.createNewColumnControl();
  }, e.prototype.createSingleColumnsControl = function () {
    var t = this;
    this.$column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Column", function (e) {
      e.append(this.$column);
      var o = {
        rowCount: 1,
        multiple: !1,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnsListCommand("columns");
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnControl = t.createColumnList(t.$column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createMultiColumnsControl = function () {
    var t = this;
    this.$multiColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.$multiColumnsProperties = this.addPropertyControl("Columns ", function (e) {
      e.append(this.$multiColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnsListCommand("columns");
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.multiColumnsControl = t.createColumnList(t.$multiColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(t.$holdColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommand("hold-columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, o);
    });
  }, e.prototype.createNewColumnControl = function () {
    var t = this;
    this.$newColumn = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("New Column", function (e) {
      e.append(t.$newColumn), t.newColumnNameControl = t.createInput(t.$newColumn, {
        height: "23px"
      }, "");
    });
    this.$newColumn.on("change", function () {
      if (t.isInputValueChanged("new-column", [$(this).val()])) {
        var e = [];
        e.push($(this).val()), t.createCommonCommand("new-column", e);
      }
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "new-column", "New Column");
  }, e.prototype.createStringLabelControl = function () {
    var t = this;
    this.$stringLabel = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"><div/>'), this.$stringLabelProperties = this.addPropertyControl("String Label", function (e) {
      e.append(t.$stringLabel), t.stringLabelControl = e;
    }, {
      mandatory: !0
    });
    var e = this.$stringLabelProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "string-label", "String Label");
  }, e.prototype.createStringLabelRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-property-row-container brtc-va-editors-property-row-content"></div>'),
        n = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        a = $('<div class="brtc-va-editors-property-row-content-add-button"></div>'),
        i = $('<div class="brtc-va-editors-property-row-content-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.$stringLabel.append(r), this.createInput(n, {
      height: "23px"
    }, "", {
      width: "90%",
      float: "left"
    }), this.stringLabelControlArray.push(n), e || n.jqxInput("focus"), n.on("change", function (t) {
      var e = [];

      for (var r in o.stringLabelControlArray) {
        e.push(o.stringLabelControlArray[r].val());
      }

      if (JSON.stringify(o.options.fnUnit.param["string-label"]) != JSON.stringify(e)) {
        var n = o.createStringLabelCommand();
        o.executeCommand(n);
      }
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-property-row-content"),
          e = t.prevAll().length;
      o.stringLabelControlArray.splice(e, 1), t.remove();
      var r = o.createStringLabelCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createStringLabelRow(!1, !1);
      var t = o.createStringLabelCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][1] ? this.dataMap[this.options.fnUnit[IN_DATA][1]].columns : [],
        o = [];

    for (var r in t) {
      "number" === t[r].type && o.push(t[r]);
    }

    var n = [];

    for (var r in e) {
      "number" === e[r].type && n.push(e[r]);
    }

    this.columnControl.setItems(o), this.holdColumnsControl.setItems(t), this.multiColumnsControl.setItems(e), this.options.fnUnit[IN_DATA].length > 1 ? (this.$stringLabelProperties.hide(), this.$multiColumnsProperties.show()) : (this.$stringLabelProperties.show(), this.$multiColumnsProperties.hide());
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.options.fnUnit[IN_DATA].length > 1 ? t[1] && (this.columnControl.setSelectedItems(t[0]), this.multiColumnsControl.setSelectedItems(t[1])) : this.columnControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param["hold-columns"];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderNewColumn = function () {
    this.options.fnUnit.param["new-column"];
    this.$newColumn.val(this.options.fnUnit.param["new-column"][0] || "");
  }, e.prototype.renderStringLabel = function () {
    var t = this.options.fnUnit.param["string-label"];
    this.stringLabelControlArray = [], this.$stringLabel.empty(), this.createStringLabelRow(!0, !0);

    for (var e = 0; e < t.length; e++) {
      e >= 1 && this.createStringLabelRow(!1, !0), this.stringLabelControlArray[e].val(t[e]);
    }
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if ("columns" === this.problems[t].param && (0 === this.problems[t].paramIndex ? this.createValidationContent(this.$column.parent(), this.problems[t]) : 1 === this.problems[t].paramIndex && this.createValidationContent(this.$multiColumns.parent(), this.problems[t])), "string-label" === this.problems[t].param) {
        var e = $(this.$stringLabel.find(".brtc-va-editors-property-row-content")[this.problems[t].paramIndex]);
        this.createValidationContent(e, this.problems[t]);
      }

      "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns.parent(), this.problems[t]), "new-column" === this.problems[t].param && this.createValidationContent(this.$newColumn.parent(), this.problems[t]);
    }
  }, e.prototype.columnsListCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        r = [],
        n = [],
        a = [];
    2 === this.options.fnUnit[IN_DATA].length ? (r = this.columnControl.getSelectedItems(), n = this.multiColumnsControl.getSelectedItems(), a.push(r, n)) : (r = this.columnControl.getSelectedItems(), a.push(r)), o.ref.param[e] = a;
    var i = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(i);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.columnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createStringLabelCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["string-label"] = [], this.stringLabelControlArray) {
      e.ref.param["string-label"].push(this.stringLabelControlArray[o].val());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.indexToString.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", this.PARAM_HOLDCOLUMNS = "hold-columns", this.PARAM_STRINGLABEL = "string-label", this.PARAM_NEW_COLUMN = "new-column", t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.MultiInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.MultiInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addHoldColumnsRule(), this.addNewColumnNameRule(this.PARAM_NEW_COLUMN);
  }, e.prototype.addLinkRule = function () {
    this.addRule(function (t) {
      return this.checkLinkIsConnected(t);
    }.bind(this));
  }, e.prototype.addInTableRule = function (t) {
    var e = this;
    this.addRule(function (t) {
      return e.checkInTableIsEmpty(t);
    }), this.addRule(function (t) {
      var o = {
        errorCode: "BR-0138",
        param: "inData",
        messageParam: [[]]
      },
          r = t[IN_DATA];

      for (var n in e.hasAllSchema = !0, r) {
        var a = t.parent().getPreFnUnitByCondition(t.fid, function (t) {
          return $.inArray(r[n], t[OUT_DATA]) > -1;
        });
        e._getSchema(t, n) && 0 !== e._getSchema(t, n).length || o.messageParam[0].push("[" + a.display.label + "]");
      }

      if (o.messageParam[0].length > 0) return e.hasAllSchema = !1, e.problemFactory.createProblem(o, t);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Column", 0);
    }), this.addRule(function (e) {
      var o = [];
      return void 0 !== t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], 0) && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: t.PARAM_COLUMNS,
        messageParam: e.param[t.PARAM_COLUMNS][0],
        paramIndex: 0
      }, e)), o;
    }), this.addRule(function (e) {
      if (2 === e[IN_DATA].length) return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][1], "Columns", 1);
    }), this.addRule(function (e) {
      if (2 === e[IN_DATA].length) {
        var o = [];

        for (var r in e.param[t.PARAM_COLUMNS][1]) {
          o.push([e.param[t.PARAM_COLUMNS][1][r]]);
        }

        var n = t.checkColumnExists(e, t.PARAM_COLUMNS, o, 1);
        return void 0 !== n && (n.paramIndex = 1), n;
      }
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLDCOLUMNS, e.param[t.PARAM_HOLDCOLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.indexToString.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.labelIndexer = {
    category: "extraction",
    defaultFnUnit: {
      func: "labelIndexer",
      name: "LabelIndexer",
      inData: [],
      outData: [],
      param: {
        "input-cols": [],
        suffix: "",
        "hold-cols": []
      },
      display: {
        label: "Label Indexer",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Indexing labels (string, double, int, long, boolean)",
    mandatory: [],
    tags: ["indexer", "stringindexer", "labelindexer", "label"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-cols": this.renderInputColsControl,
      suffix: this.renderSuffixControl,
      "hold-cols": this.renderHoldColsControl
    }, this.$elements = {}, this.controls = {}, this.createInputColsControl(), this.createSuffixControl(), this.createHoldColsControl();
  }, e.prototype.createInputColsControl = function (t) {
    var e = this;
    e.$elements["input-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Columns", function (t) {
      t.append(e.$elements["input-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["input-cols"] = e.createColumnList(e.$elements["input-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColsControl = function (t) {
    var e = this.options.fnUnit.param["input-cols"];
    this.controls["input-cols"].setSelectedItems(e);
  }, e.prototype.createSuffixControl = function (t) {
    var e = this;
    e.$elements.suffix = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Suffix", function (t) {
      t.append(e.$elements.suffix);
      e.controls.suffix = e.createInput(e.$elements.suffix, {
        placeHolder: "_index"
      }), e.$elements.suffix.on("change", function (t) {
        if (e.isInputValueChanged("suffix", $(this).val())) {
          var o = e.createSetParameterValueCommand("suffix", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSuffixControl = function (t) {
    var e = this.options.fnUnit.param.suffix;
    this.$elements.suffix.val(e || "");
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["input-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.labelIndexer.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputColsRule();
  }, o.prototype.addInputColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-cols", e.param["input-cols"], "Input Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-cols", e.param["input-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "input-cols", e.param["input-cols"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.labelIndexer.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.labelIndexerModel = {
    category: "extraction",
    defaultFnUnit: {
      func: "labelIndexerModel",
      name: "LabelIndexerModel",
      inData: [],
      outData: [],
      param: {
        suffix: "",
        "hold-cols": []
      },
      display: {
        label: "Label Indexer Model",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Indexing labels (string, double, int, long, boolean) using a given model",
    mandatory: [],
    tags: ["indexer", "stringindexermodel", "labelindexermodel", "label", "model"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      suffix: this.renderSuffixControl,
      "hold-cols": this.renderHoldColsControl
    }, this.$elements = {}, this.controls = {}, this.createSuffixControl(), this.createHoldColsControl();
  }, e.prototype.createSuffixControl = function (t) {
    var e = this;
    e.$elements.suffix = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Suffix", function (t) {
      t.append(e.$elements.suffix);
      e.controls.suffix = e.createInput(e.$elements.suffix, {
        placeHolder: "_index"
      }), e.$elements.suffix.on("change", function (t) {
        if (e.isInputValueChanged("suffix", $(this).val())) {
          var o = e.createSetParameterValueCommand("suffix", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSuffixControl = function (t) {
    var e = this.options.fnUnit.param.suffix;
    this.$elements.suffix.val(e || "");
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.labelIndexerModel.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.labelIndexerModel.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.mdCapitalize = {
    category: "extraction",
    defaultFnUnit: {
      func: "mdCapitalize",
      name: "Capitalize",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "capitalize-mode": "uppercase",
        "capitalize-suffix": ""
      },
      display: {
        label: "Capitalize Variable",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function change a capital or small letter for selected column.",
    tags: ["Capitalize Variable", "CapitalizeVariable", "Add Column", "Preprocessing", "Transform", "new column", "lowercase", "uppercase", "alphabet", "capital", "capitalize", "small letter"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "capitalize-mode": this.renderCapitalize,
      "capitalize-suffix": this.renderSuffix
    }, this.createColumnsControls(), this.createOperationControl();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createOperationControl = function () {
    var t = this;
    this.$replaceModeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-replacemode"/>');
    var e = this.addPropertyControl("Replace Mode", function (e) {
      e.append(this.$replaceModeControl), t.createRadioButtonControl(t.$replaceModeControl, "Uppercase", "repalcemode"), t.createRadioButtonControl(t.$replaceModeControl, "Lowercase", "repalcemode");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "capitalize-mode", "Replace Mode"), this.$capitalizeSuffixControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-suffixinputbox" valid-type="type1"/>');
    e = this.addPropertyControl("New Capitalize Column Name", function (e) {
      e.append(this.$capitalizeSuffixControl), t.createInput(t.$capitalizeSuffixControl), t.$capitalizeSuffixControl.on("change", function (e) {
        t.isInputValueChanged("capitalize-suffix", $(this).val()) && t.createCommonCommand("capitalize-suffix", t.$capitalizeSuffixControl.jqxInput("val"));
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "capitalize-suffix", "New Capitalize Column Name");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "Uppercase" === e ? e = "uppercase" : "Lowercase" === e && (e = "lowercase"), r.createCommonCommand("capitalize-mode", e || this.getRadioButtonValue());
    });
  }, e.prototype.createDescriptionText = function (e) {
    this.$logText = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-descriptiontext"/>'), e.append(this.$logText), this.$logText.css({
      theme: t.VA.Env.Theme,
      width: "212px",
      margin: "10px 0px 0px 0px"
    });
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    $.each(e, function (e, o) {
      "string" === o.type && t.push(o);
    }), this.columnsControl.setItems(t);
  }, e.prototype.getRadioButtonValue = function () {
    var t = "",
        e = this.$replaceModeControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(e, function (e, o) {
      $(o).jqxRadioButton("val") && (t = $(o).attr("value"));
    }), t;
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderCapitalize = function () {
    var t = this.options.fnUnit.param["capitalize-mode"];
    "uppercase" === t ? t = "Uppercase" : "lowercase" === t && (t = "Lowercase"), t && $(this.$replaceModeControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderSuffix = function () {
    var t = this.options.fnUnit.param;
    this.$capitalizeSuffixControl.jqxInput("val", t["capitalize-suffix"] ? t["capitalize-suffix"] : "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.mdCapitalize.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "string");
    });
  }, e = e, t.VA.Core.Functions.Library.mdCapitalize.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.mdLength = {
    category: "extraction",
    defaultFnUnit: {
      func: "mdLength",
      name: "AddStringLength",
      inData: [],
      outData: [],
      param: {
        columns: [[]]
      },
      display: {
        label: "Add String Length",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a new column which contains data derived from conditions you entered.",
    tags: ["Add String Length", "AddStringLength", "Add Column", "Preprocessing", "Transform", "String", "new column", "create", "select"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns
    }, this.createColumnsControls(), this.createDescriptionText(e);
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    $.each(e, function (e, o) {
      "string" === o.type && t.push(o);
    }), this.columnsControl.setItems(t);
  }, e.prototype.createDescriptionText = function (e) {
    this.$logText = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-descriptiontext"/>'), e.append(this.$logText), this.$logText.css({
      theme: t.VA.Env.Theme,
      width: "212px",
      margin: "10px 0px 0px 0px"
    });
  }, e.prototype.inputResultDesc = function () {
    var t = this.columnsControl.getSelectedItems(),
        e = "";
    1 === t.length ? e += "Selected Column value[" : e += "Selected Column values[", $.each(t, function (o) {
      e += this, t.length - 1 != o && (e += ", ");
    }), this.$logText.text(""), 0 !== t.length && (1 == t.length ? e += '] is change to "length"' : e += '] are change to "length"', this.$logText.text(e));
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.mdLength.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "string");
    });
  }, e = e, t.VA.Core.Functions.Library.mdLength.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.mdRemove = {
    category: "extraction",
    defaultFnUnit: {
      func: "mdRemove",
      name: "Remove",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "del-string": ""
      },
      display: {
        label: "Remove String Variable",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a new column which value of deleted select string.",
    tags: ["Remove String Variable", "RemoveStringVariable", "Add Column", "Preprocessing", "Transform", "String", "delete", "string", "erase"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "del-string": this.renderRemoveValue
    }, this.createColumnsControls(), this.createOperationControls();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createOperationControls = function () {
    var t = this;
    this.$removeInputControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-removeinputbox"/>');
    var e = this.addPropertyControl("Remove Value", function (e) {
      e.append(this.$removeInputControl);
      t.createInput(t.$removeInputControl, {
        placeHolder: "Enter value"
      }), t.$removeInputControl.on("change", function (e) {
        t.isInputValueChanged("del-string", $(this).val()) && t.createCommonCommand("del-string", t.$removeInputControl.jqxInput("val"));
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "del-string", "Remove Value");
  }, e.prototype.createDescriptionText = function (e) {
    this.$logText = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-descriptiontext"/>'), e.append(this.$logText), this.$logText.css({
      theme: t.VA.Env.Theme,
      width: "212px",
      margin: "10px 0px 0px 0px"
    });
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    $.each(e, function (e, o) {
      "string" === o.type && "String" === o.internalType && t.push(o);
    }), this.columnsControl.setItems(t);
  }, e.prototype.inputResultDesc = function () {
    var t,
        e = this.columnsControl.getSelectedItems(),
        o = "";
    1 === e.length ? o += "Selected Column value[" : o += "Selected Column values[", $.each(e, function (t) {
      o += this, e.length - 1 != t && (o += ", ");
    }), this.$logText.text(""), t = this.$removeInputControl.val(), 0 !== e.length && null !== t && "" !== t && (o += "] remove included value[" + t + "]", this.$logText.text(o));
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderRemoveValue = function () {
    var t = this.options.fnUnit.param;
    this.$removeInputControl.jqxInput("val", t["del-string"] ? t["del-string"] : "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "del-string" === this.problems[t].param && this.createValidationContent(this.$removeInputControl.closest(".brtc-va-editors-sheet-controls-propertycontrol-contents"), this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.mdRemove.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_DEL_STRING = "del-string", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addRemoveValueRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "string");
    });
  }, e.prototype.addRemoveValueRule = function (t) {
    var e = this;
    this.addRule(function (t) {
      if (e._hasSchema(t)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_DEL_STRING,
          messageParam: ["Remove Value"]
        };
        return e._checkStringIsEmpty(o, t, t.param[e.PARAM_DEL_STRING]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.mdRemove.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.mdReplaceNumber = {
    category: "extraction",
    defaultFnUnit: {
      func: "mdReplaceNumber",
      name: "ReplaceNumeric",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "target-number": "",
        "replacement-number": ""
      },
      display: {
        label: "Replace Numeric Variable",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a new column which deleted empty value for selected column.",
    tags: ["Replace Numeric Variable", "ReplaceNumericVariable", "Add Column", "Preprocessing", "Transform", "null", "NaN", "strange values", "refine", "preprocess"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      "target-number": this.renderBeforeNumberControl,
      "replacement-number": this.renderAfterNumberControl
    }, this.createColumnsControls(), this.createBeforeNumberControls(), this.createAfterNumberControls();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createBeforeNumberControls = function () {
    var t = this;
    this.$beforeInputControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>');
    var e = this.addPropertyControl("Target Number", function (e) {
      e.append(t.$beforeInputControl), t.createRadioButtonControl(t.$beforeInputControl, "Null", "beforeNumber"), t.createRadioButtonControl(t.$beforeInputControl, "NaN", "beforeNumber"), t.createRadioButtonControl(t.$beforeInputControl, "", "beforeNumber"), t.createNumberInputControl(t.$beforeInputControl, "beforeNumber");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "target-number", "Target Number");
  }, e.prototype.createAfterNumberControls = function () {
    var t = this;
    this.$afterInputControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>');
    var e = this.addPropertyControl("Replace Number", function (e) {
      e.append(t.$afterInputControl), t.createRadioButtonControl(t.$afterInputControl, "Null", "afterNumber"), t.createRadioButtonControl(t.$afterInputControl, "NaN", "afterNumber"), t.createRadioButtonControl(t.$afterInputControl, "", "afterNumber"), t.createNumberInputControl(t.$afterInputControl, "afterNumber");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "replacement-number", "Replace Number");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    var a = "";
    a = "" === e ? "brtc-va-editors-sheet-controls-width-1" : "brtc-va-editors-sheet-controls-width-12", this.createRadioButton(n, {
      groupName: o
    }, a), n.attr("value", e), t[e] = n, n.on("checked", function (e) {
      var n;
      n = "" !== $(e.target).attr("value"), r.createNumberCommand(), t[o].setDisabled(n);
    }), n.attr("value", e), t[e] = n;
  }, e.prototype.createNumberInputControl = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    t.append(r);
    var n = o.createNumericInput(r, {
      numberType: "double",
      min: void 0,
      max: void 0,
      minus: !0
    }, "brtc-va-editors-sheet-controls-width-11");
    n.onChange(function (t) {
      "beforeNumber" === e ? o.createNumberCommand() : "afterNumber" === e && o.createNumberCommand();
    }), t[e] = n;
  }, e.prototype.createDescriptionText = function (e) {
    this.$logText = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-descriptiontext"/>'), e.append(this.$logText), this.$logText.css({
      theme: t.VA.Env.Theme,
      width: "212px",
      margin: "10px 0px 0px 0px"
    });
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    $.each(e, function (e, o) {
      "number" !== o.type || "Double" !== o.internalType && "Float" !== o.internalType && "Decimal" !== o.internalType || t.push(o);
    }), this.columnsControl.setItems(t);
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.getNumberValue = function (t, e) {
    var o = "",
        r = t.find(".brtc-va-editors-sheet-controls-radiocontrol"),
        n = e;
    return $.each(r, function (t, e) {
      if ($(e).jqxRadioButton("val")) return "" !== $(e).attr("value") ? (o = $(e).attr("value"), !1) : (o = n.getValue(), !1);
    }), o;
  }, e.prototype.getFilteredData = function () {
    var t = [],
        e = this,
        o = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    return $.each(o, function (o, r) {
      -1 !== $.inArray(r.type.toLowerCase(), e.numericTypes) && t.push(r);
    }), t;
  }, e.prototype.inputResultDesc = function () {
    var t,
        e,
        o = this.columnsControl.getSelectedItems(),
        r = "";
    1 === o.length ? r += "Selected Column value[" : r += "Selected Column values[", $.each(o, function (t) {
      r += this, o.length - 1 != t && (r += ", ");
    }), this.$logText.text(""), t = this.$beforeInputControl.val(), e = this.$afterInputControl.val(), 0 !== o.length && null !== t && "" !== t && null !== e && "" !== e && (1 == o.length ? r += "] changes  [" + t + "] to  [" + e + "]" : r += "] change  [" + t + "] to  [" + e + "]", this.$logText.text(r));
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderBeforeNumberControl = function () {
    var t = this.options.fnUnit.param["target-number"],
        e = this.$beforeInputControl.beforeNumber;
    void 0 !== t ? "Null" === t || "NaN" === t ? ($(this.$beforeInputControl[t]).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!0), e.setValue("")) : ($(this.$beforeInputControl[""]).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!1), e.setValue(t)) : ($(this.$beforeInputControl.Null).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!0), e.setValue(""));
  }, e.prototype.renderAfterNumberControl = function () {
    var t = this.options.fnUnit.param["replacement-number"],
        e = this.$afterInputControl.afterNumber;
    void 0 !== t ? "Null" === t || "NaN" === t ? ($(this.$afterInputControl[t]).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!0), e.setValue("")) : ($(this.$afterInputControl[""]).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!1), e.setValue(t)) : ($(this.$afterInputControl.Null).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!0), e.setValue(""));
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "target-number" === this.problems[t].param && this.createValidationContent(this.$beforeInputControl, this.problems[t]), "replacement-number" === this.problems[t].param && this.createValidationContent(this.$afterInputControl, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumberCommand = function () {
    var e,
        o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      },
      renderParams: ["columns", "target-number", "replacement-number"]
    };
    o.ref.param.columns = this.getColumnsValue(), "Null" === this.getNumberValue(this.$beforeInputControl, this.$beforeInputControl.beforeNumber) ? "Null" === this.getNumberValue(this.$afterInputControl, this.$afterInputControl.afterNumber) ? (e = new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, o), this.executeCommand(e)) : (o.ref.param["replacement-number"] = this.getNumberValue(this.$afterInputControl, this.$afterInputControl.afterNumber), e = new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, o), this.executeCommand(e)) : "Null" === this.getNumberValue(this.$afterInputControl, this.$afterInputControl.afterNumber) ? (o.ref.param["target-number"] = this.getNumberValue(this.$beforeInputControl, this.$beforeInputControl.beforeNumber), e = new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, o), this.executeCommand(e)) : (o.ref.param["target-number"] = this.getNumberValue(this.$beforeInputControl, this.$beforeInputControl.beforeNumber), o.ref.param["replacement-number"] = this.getNumberValue(this.$afterInputControl, this.$afterInputControl.afterNumber), e = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o), this.executeCommand(e));
  }, t.VA.Core.Functions.Library.mdReplaceNumber.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "number");
    });
  }, e.prototype.beforeNumberRule = function (t) {
    if (this._hasSchema(t)) {
      return void 0 === t.param["target-number"] || "Null" === t.param["target-number"] && "NaN" === t.param["target-number"] || !this.isEmptyForString(t.param["target-number"]) ? void 0 : this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "target-number",
        messageParam: ["Target Number"]
      }, t);
    }
  }, e.prototype.afterNumberRule = function (t) {
    if (this._hasSchema(t)) {
      return void 0 === t.param["replacement-number"] || "Null" === t.param["replacement-number"] && "NaN" === t.param["replacement-number"] || !this.isEmptyForString(t.param["replacement-number"]) ? void 0 : this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "replacement-number",
        messageParam: ["Replace Number"]
      }, t);
    }
  }, e.prototype.linkRule = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    };
    return this.isConnectedWithPrev(t) ? void 0 : this.problemFactory.createProblem(e, t);
  }, e = e, t.VA.Core.Functions.Library.mdReplaceNumber.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.mdReplaceString = {
    category: "extraction",
    defaultFnUnit: {
      func: "mdReplaceString",
      name: "ReplaceString",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "target-string": "",
        "replacement-string": "",
        "replace-mode": "part"
      },
      display: {
        label: "Replace String Variable",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["target-string", "replacement-string"],
    description: "This function generates a new column which replace a value for selected condition.",
    tags: ["Replace String Variable", "ReplaceStringVariable", "Add Column", "Preprocessing", "Transform", "String", "replace", "string", "strange values", "refine", "preprocess"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      "replace-mode": this.renderReplaceModeControl,
      "target-string": this.renderBeforeStringControl,
      "replacement-string": this.renderAfterStringControl
    }, this.createColumnsControls(), this.createReplaceModeControls(), this.createBeforeStringControls(), this.createAfterStringControls(), this.createDescriptionText(e);
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createReplaceModeControls = function () {
    var t = this;
    this.$replaceModeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-replacemode"/>');
    var e = this.addPropertyControl("Replace Mode", function (e) {
      e.append(this.$replaceModeControl), t.createReplaceModeRadioButtonControl(t.$replaceModeControl, "Full", "replacemode"), t.createReplaceModeRadioButtonControl(t.$replaceModeControl, "Part", "replacemode");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "replace-mode", "Replace Mode");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    var a = "";
    a = "" === e ? "brtc-va-editors-sheet-controls-width-1" : "brtc-va-editors-sheet-controls-width-12", this.createRadioButton(n, {
      groupName: o
    }, a), n.attr("value", e), t[e] = n, n.on("checked", function (e) {
      var n;
      n = "" !== $(e.target).attr("value"), r.createStringCommand(), t[o].jqxInput("disabled", n);
    }), n.attr("value", e), t[e] = n;
  }, e.prototype.createBeforeStringControls = function () {
    var t = this;
    this.$beforeStringControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.$beforeStringInput = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol"/>');
    var e = this.addPropertyControl("Target String", function (e) {
      e.append(t.$beforeStringControl), t.createRadioButtonControl(t.$beforeStringControl, "Null", "beforeString"), t.createRadioButtonControl(t.$beforeStringControl, "", "beforeString"), t.$beforeStringControl.append(this.$beforeStringInput);
      t.createInput(t.$beforeStringInput, {
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-11"), t.$beforeStringInput.on("change", function (e) {
        t.isInputValueChanged("target-string", $(this).val()) && t.createStringCommand();
      }), t.$beforeStringControl.beforeString = t.$beforeStringInput;
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "target-string", "Target String");
  }, e.prototype.createAfterStringControls = function () {
    var t = this;
    this.$afterStringControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.$afterStringInput = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol"/>');
    var e = this.addPropertyControl("Replace String", function (e) {
      e.append(t.$afterStringControl), t.createRadioButtonControl(t.$afterStringControl, "Null", "afterString"), t.createRadioButtonControl(t.$afterStringControl, "", "afterString"), t.$afterStringControl.append(this.$afterStringInput);
      t.createInput(t.$afterStringInput, {
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-11"), t.$afterStringInput.on("change", function (e) {
        t.isInputValueChanged("replacement-string", $(this).val()) && t.createStringCommand();
      }), t.$afterStringControl.afterString = t.$afterStringInput;
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "replacement-string", "Replace String");
  }, e.prototype.createReplaceModeRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, e && this.$radioButton.jqxRadioButton("check"), this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "Full" === e || "full" === e ? e = "full" : "Part" !== e && "part" !== e || (e = "part"), r.createCommonCommand("replace-mode", e || this.getRadioButtonValue()), r.changeStringCommand(e);
    });
  }, e.prototype.changeStringCommand = function (t) {
    "part" == t ? ($(this.$beforeStringControl.Null).jqxRadioButton({
      checked: !1
    }), $(this.$beforeStringControl.Null).jqxRadioButton({
      disabled: !0
    }), $(this.$beforeStringControl[""]).jqxRadioButton({
      checked: !0
    }), $(this.$afterStringControl.Null).jqxRadioButton({
      checked: !1
    }), $(this.$afterStringControl.Null).jqxRadioButton({
      disabled: !0
    }), $(this.$afterStringControl[""]).jqxRadioButton({
      checked: !0
    })) : ($(this.$beforeStringControl.Null).jqxRadioButton({
      checked: !0
    }), $(this.$beforeStringControl.Null).jqxRadioButton({
      disabled: !1
    }), $(this.$afterStringControl.Null).jqxRadioButton({
      checked: !0
    }), $(this.$afterStringControl.Null).jqxRadioButton({
      disabled: !1
    }));
  }, e.prototype.createDescriptionText = function (e) {
    this.$logText = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-descriptiontext"/>'), e.append(this.$logText), this.$logText.css({
      theme: t.VA.Env.Theme,
      width: "212px",
      margin: "10px 0px 0px 0px"
    });
  }, e.prototype.getRadioButtonValue = function () {
    var t = "",
        e = this.$replaceModeControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(e, function (e, o) {
      $(o).jqxRadioButton("val") && (t = $(o).attr("value"));
    }), t;
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    $.each(e, function (e, o) {
      "string" === o.type && "String" === o.internalType && t.push(o);
    }), this.columnsControl.setItems(t);
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.getStringValue = function (t, e) {
    var o = "",
        r = t.find(".brtc-va-editors-sheet-controls-radiocontrol"),
        n = e;
    return $.each(r, function (t, e) {
      if ($(e).jqxRadioButton("val")) return "" !== $(e).attr("value") ? (o = $(e).attr("value"), !1) : (o = n.jqxInput("val"), !1);
    }), o;
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderBeforeStringControl = function () {
    var t = this.options.fnUnit.param["target-string"],
        e = this.$beforeStringInput;
    void 0 !== t ? "Null" === t ? ($(this.$beforeStringControl[t]).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !0), e.jqxInput("val", "")) : ($(this.$beforeStringControl[""]).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !1), e.jqxInput("val", t)) : ($(this.$beforeStringControl.Null).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !1), e.jqxInput("val", ""));
  }, e.prototype.renderAfterStringControl = function () {
    var t = this.options.fnUnit.param["replacement-string"],
        e = this.$afterStringInput;
    void 0 !== t ? "Null" === t ? ($(this.$afterStringControl[t]).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !0), e.jqxInput("val", "")) : ($(this.$afterStringControl[""]).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !1), e.jqxInput("val", t)) : ($(this.$afterStringControl.Null).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !1), e.jqxInput("val", ""));
  }, e.prototype.renderReplaceModeControl = function () {
    var t = this.options.fnUnit.param["replace-mode"];
    "full" === t ? t = "Full" : "part" === t && (t = "Part"), t && $(this.$replaceModeControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "target-string" === this.problems[t].param && this.createValidationContent(this.$beforeStringControl, this.problems[t]), "replacement-string" === this.problems[t].param && this.createValidationContent(this.$afterStringControl, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createStringCommand = function (e, o) {
    var r,
        n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      },
      renderParams: ["columns", "target-string", "replacement-string", "replace-mode"]
    };
    n.ref.param.columns = this.getColumnsValue(), n.ref.param["replace-mode"] = this.getRadioButtonValue(), "Null" === this.getStringValue(this.$beforeStringControl, this.$beforeStringInput) ? "Null" === this.getStringValue(this.$afterStringControl, this.$afterStringInput) ? (r = new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, n), this.executeCommand(r)) : (n.ref.param["replacement-string"] = this.getStringValue(this.$afterStringControl, this.$afterStringInput), r = new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, n), this.executeCommand(r)) : "Null" === this.getStringValue(this.$afterStringControl, this.$afterStringInput) ? (n.ref.param["target-string"] = this.getStringValue(this.$beforeStringControl, this.$beforeStringInput), r = new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, n), this.executeCommand(r)) : (n.ref.param["target-string"] = this.getStringValue(this.$beforeStringControl, this.$beforeStringInput), n.ref.param["replacement-string"] = this.getStringValue(this.$afterStringControl, this.$afterStringInput), r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, n), this.executeCommand(r));
  }, t.VA.Core.Functions.Library.mdReplaceString.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "string");
    });
  }, e.prototype.beforeStringRule = function (t) {
    if (void 0 !== t.param["target-string"] && "Null" !== t.param["target-string"] && this.isEmptyForString(t.param["target-string"])) return this.problemFactory.createProblem({
      errorCode: "BR-0033",
      param: "target-string",
      messageParam: ["Target String"]
    }, t);
  }, e.prototype.afterStringRule = function (t) {
    if (void 0 !== t.param["replacement-string"] && "Null" !== t.param["replacement-string"] && this.isEmptyForString(t.param["replacement-string"])) return this.problemFactory.createProblem({
      errorCode: "BR-0033",
      param: "replacement-string",
      messageParam: ["Replacement String"]
    }, t);
  }, e = e, t.VA.Core.Functions.Library.mdReplaceString.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.mdTrim = {
    category: "extraction",
    defaultFnUnit: {
      func: "mdTrim",
      name: "Trim",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "trim-mode": "both"
      },
      display: {
        label: "Trim Variable",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a new column which deleted empty value for selected column.",
    tags: ["Trim Variable", "TrimVariable", "Add Column", "Preprocessing", "Transform", "Variable", "delete", "space", "remove"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "trim-mode": this.renderReplaceMode
    }, this.createColumnsControls(), this.createOperationControls();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createOperationControls = function () {
    var t = this;
    this.$replaceModeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-replacemode"/>');
    var e = this.addPropertyControl("Replace Mode", function (e) {
      e.append(t.$replaceModeControl), t.createRadioButtonControl(t.$replaceModeControl, "Both", "trimmode"), t.createRadioButtonControl(t.$replaceModeControl, "Left", "trimmode"), t.createRadioButtonControl(t.$replaceModeControl, "Right", "trimmode");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "trim-mode", "Replace Mode");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "Both" === e ? e = "both" : "Left" === e ? e = "left" : "Right" === e && (e = "right"), r.createCommonCommand("trim-mode", e || this.getRadioButtonValue());
    });
  }, e.prototype.getRadioButtonValue = function () {
    var t = "",
        e = this.$replaceModeControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(e, function (e, o) {
      $(o).jqxRadioButton("val") && (t = $(o).attr("value"));
    }), t;
  }, e.prototype.createDescriptionText = function (e) {
    this.$logText = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-descriptiontext"/>'), e.append(this.$logText), this.$logText.css({
      theme: t.VA.Env.Theme,
      width: "212px",
      margin: "10px 0px 0px 0px"
    });
  }, e.prototype.inputResultDesc = function () {
    var t,
        e = this.columnsControl.getSelectedItems(),
        o = "";
    1 === e.length ? o += "Selected Column value[" : o += "Selected Column values[", $.each(e, function (t) {
      o += this, e.length - 1 != t && (o += ", ");
    }), this.$logText.text(""), t = this.getRadioButtonValue(), 0 !== e.length && null !== t && "" !== t && (o += '] trim "' + t + '" ', this.$logText.text(o));
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = $.grep(t, function (t) {
      return "string" === t.type && "String" === t.internalType;
    });
    this.columnsControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderReplaceMode = function () {
    var t = this.options.fnUnit.param["trim-mode"];
    "both" === t ? t = "Both" : "left" === t ? t = "Left" : "right" === t && (t = "Right"), t && $(this.$replaceModeControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.mdTrim.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "string");
    });
  }, e = e, t.VA.Core.Functions.Library.mdTrim.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.movingAverage = {
    category: "extraction",
    defaultFnUnit: {
      func: "movingAverage",
      name: "MovingAverage",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        number: "",
        "message-column-name": ""
      },
      display: {
        label: "Moving Average",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function computes moving average values for analyzing particular time series data.",
    tags: ["Moving Average", "MovingAverage", "Trend", "Timeseries", "Transform", "Manipulation", "Average", "window", "smoothen"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", this.PARAM_NUMBER = "number", this.PARAM_MESSAGE_COLUMN_NAME = "message-column-name", this.render = {
      columns: this.renderColumnsControl,
      "hold-columns": this.renderHoldColumnsControl,
      number: this.renderNumberControl,
      "message-column-name": this.renderMessageColumnNameControl
    }, this.createColumnsControl(), this.createHoldColumnsControl(), this.createNumberControl(), this.createMessageColumnNameControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 5,
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-hold-columns"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$holdColumns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createHoldColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createNumberControl = function () {
    var t = this;
    this.$numberInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberInput"/>');
    var e = this.addPropertyControl("Number", function (e) {
      e.append(t.$numberInputControl);
      var o = {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1
      };
      t.$numberControl = t.createNumericInput(t.$numberInputControl, o), t.$numberControl.onChange(function (e) {
        var o = t.createNumberCommand(e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "number", "Number");
  }, e.prototype.createMessageColumnNameControl = function (t) {
    var e = this;
    this.$messageColumnNameControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), this.$messageColumnNameControlWrapper = this.addPropertyControl("Message Column Name", function (t) {
      t.append(this.$messageColumnNameControl), e.createInput(e.$messageColumnNameControl), e.$messageColumnNameControl.on("change", function (t) {
        e.isInputValueChanged("message-column-name", $(this).val()) && e.createInputCommand("message-column-name", $(this).val());
      });
    });
    var o = this.$messageColumnNameControlWrapper.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "message-column-name", "Message Column Name");
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type || "Double[]" === t.internalType;
    }), this.columnsControl.setItems(this.numberColumnArray), this.holdColumnsControl.setItems(this.columnNameArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]), this.problems[t].param === this.PARAM_HOLD_COLUMNS && this.createValidationContent(this.$holdColumns, this.problems[t]), this.problems[t].param === this.PARAM_NUMBER && this.createValidationContent(this.$numberInputControl, this.problems[t]), this.problems[t].param === this.PARAM_MESSAGE_COLUMN_NAME && this.createValidationContent(this.$messageColumnNameControl.parent(), this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMNS];
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_HOLD_COLUMNS];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderNumberControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUMBER];
    this.$numberControl.setValue(t);
  }, e.prototype.renderMessageColumnNameControl = function () {
    this.options.fnUnit.param["message-column-name"] ? this.$messageColumnNameControl.val(this.options.fnUnit.param["message-column-name"]) : this.$messageColumnNameControl.val("");
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.getHoldColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.holdColumnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createHoldColumnsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_HOLD_COLUMNS] = this.getHoldColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createNumberCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_NUMBER] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.movingAverage.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", this.PARAM_NUMBER = "number", this.PARAM_MESSAGE_COLUMN_NAME = "message-column-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addHoldColumnsRule(), this.addNumberRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0]);
    });
  }, e.prototype.addNumberRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_NUMBER,
          messageParam: ["Number"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_NUMBER]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.movingAverage.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.multiColumnExtraction = {
    category: "extraction",
    defaultFnUnit: {
      func: "multiColumnExtraction",
      name: "MultiColumnExtraction",
      inData: [],
      outData: [],
      param: {
        "target-type": "",
        columns: [[]],
        expression: "",
        prefix: "",
        postfix: ""
      },
      display: {
        label: "Multi Column Extraction",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Multi column extraction",
    mandatory: [],
    tags: ["MultiColumn", "Multi Column", "MultiColumnExtraction", "Column", "Multi", "Extraction", "Multi Extraction", "Multi Column Extraction"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.numericalVariableDerivation = {
    category: "extraction",
    defaultFnUnit: {
      func: "numericalVariableDerivation",
      name: "Subflow",
      inData: [],
      outData: [],
      param: {
        functions: [{
          fid: "",
          func: "numericalVariableDerivation",
          name: "AddFunctionColumn",
          inData: [],
          outData: [],
          param: {
            "new-column": "",
            formula: ""
          }
        }],
        links: []
      },
      display: {
        label: "Add Function Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a new column based on the calculation formula you entered.",
    tags: ["Add Function Column", "AddFunctionColumn", "Add Column", "Extraction", "Preprocessing", "Transform", "new column", "create", "select"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.getPrimaryOperation = function () {
    return "AddFunctionColumn";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "new-column": this.renderSubflowControl,
      formula: this.renderSubflowControl
    }, this.functionsArray = [], this.linksArray = [], this.newColumnPropertyControlArray = [], this.formulaPropertyControlArray = [], this.createOperatorArray(), this.createControlArea(), this.createAddButton();
  }, e.prototype.renderValues = function (t) {
    this.renderSubflowControl();
  }, e.prototype.createControlArea = function () {
    var e;
    this.$newFunctionArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-new-function-area"></div>'), this.$contentsArea.append(this.$newFunctionArea);
    var o = this.options.fnUnit.param;

    if (0 === o.links.length && "" === o.functions[0].fid) {
      var r = o.functions[0];
      r.fid = t.VA.Core.Utils.IDGenerator.func.id(), r[IN_DATA] = this.options.fnUnit[IN_DATA], r[OUT_DATA] = this.options.fnUnit[OUT_DATA];
    }

    for (this.functionsArray = $.extend(!0, [], o.functions), this.linksArray = $.extend(!0, [], o.links), this.newColumnPropertyControlArray = [], this.formulaPropertyControlArray = [], this.createFunctionControl(!0), e = 1; e < this.functionsArray.length; e++) {
      this.createFunctionControl();
    }
  }, e.prototype.createFunctionControl = function (e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-new-function-controls-box" style="width:100%;"></div>');
    this.$newFunctionArea.append(r), this.$newColumnInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), this.newColumnPropertyControlArray.push(this.$newColumnInput), this.$formulaInput = $('<textarea class="brtc-va-editors-sheet-controls-textarea"></textarea>'), this.formulaPropertyControlArray.push(this.$formulaInput), this.addPropertyControl("New Column", function (r) {
      r.addClass("brtc-va-numerical-variable-derivation-property"), r.append(o.$newColumnInput), o.createInput(o.$newColumnInput, {}, "brtc-va-editors-sheet-controls-width-12"), o.$newColumnInput.on("change", function (t) {
        var e = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-new-function-controls-box").prevAll().length;
        o.functionsArray[e].param["new-column"] = $(this).val(), o.updateCodeMirrorHint();
        var r = o.createSubflowCommand();
        o.isInputValueChanged(r) && o.executeCommand(r);
      });
      var n = $('<div class="brtc-va-numerical-variable-derivation-property formula-label"><div class="point-icon"></div><span>Formula</span><span style="color:#ee7379;line-height:5px;margin-top:3px;margin-left:3px;font-family: Arial, Dotum, Tahoma, sans-serif;">*</span></div>');
      r.append(n), r.append(o.$formulaInput);
      var a = new t.VA.Core.Verifier.NumericalFormulaVerifier(),
          i = o.createTextAreaControl(o.$formulaInput, {
        verifier: a,
        placeholder: "Enter formula",
        hintOptions: {
          list: []
        },
        matchBrackets: !1
      });

      if (o.$formulaInput.data("codeMirror", i), i.onChange(function (t, e) {
        var r = i.getControl().parents(".brtc-va-editors-sheet-controls-propertycontrol-new-function-controls-box").prevAll().length;
        o.functionsArray[r].param.formula = i.getValue();
        var n = o.createSubflowCommand();
        o.executeCommand(n);
      }), !e) {
        var s = $('<div class="brtc-va-numerical-variable-derivation-property remove-button brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
        r.siblings(".brtc-va-editors-sheet-controls-propertycontrol-label").append(s), s.click(function (t) {
          var e = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-new-function-controls-box"),
              r = e.prevAll().length;
          o.newColumnPropertyControlArray.splice(r, 1), o.formulaPropertyControlArray.splice(r, 1), r == o.functionsArray.length - 1 ? (o.functionsArray.splice(r, 1), o.linksArray.splice(r - 1, 1)) : (o.functionsArray.splice(r, 1), o.linksArray[r][SOURCE_FID] = o.functionsArray[r - 1].fid, o.linksArray.splice(r - 1, 1)), e.remove(), o.updateCodeMirrorHint();
          var n = o.createSubflowCommand();
          o.executeCommand(n), t.stopPropagation();
        });
      }
    }, {
      propertyControlParent: r
    });
  }, e.prototype.createAddButton = function () {
    var e = this;
    this.$addNewColumnButton = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-new-function-controls-add-new-derivation" type="button" value="+ Add New Column" style="margin-top:-15px;"/>'), this.$contentsArea.append(this.$addNewColumnButton), this.$addNewColumnButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addNewColumnButton.click(function () {
      e.createFunctionControl(), e.createNewSubFunctionParam(), e.updateCodeMirrorHint();
      var t = e.createSubflowCommand();
      e.executeCommand(t);
    });
  }, e.prototype.createNewSubFunctionParam = function () {
    var t = this.functionsArray[this.functionsArray.length - 1],
        e = this.options.fnUnit.parent().newFnUnit("numericalVariableDerivation");
    e[FUNCTION_NAME] = "AddFunctionColumn", e[IN_DATA] = t[OUT_DATA], e[OUT_DATA] = t[OUT_DATA], e.param = {
      "new-column": "",
      formula: ""
    }, delete e.display, this.functionsArray.push(e), this.createNewLinkParam(t.fid, e.fid);
  }, e.prototype.createNewLinkParam = function (e, o) {
    var r = {
      kid: t.VA.Core.Utils.IDGenerator.link.id(),
      sourceFid: e,
      targetFid: o
    };
    this.linksArray.push(r);
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.updateCodeMirrorHint();
  }, e.prototype.renderSubflowControl = function () {
    var e,
        o = this.options.fnUnit.param;

    if (0 === o.links.length && "" === o.functions[0].fid) {
      var r = o.functions[0];
      r.fid = t.VA.Core.Utils.IDGenerator.func.id(), r[IN_DATA] = this.options.fnUnit[IN_DATA], r[OUT_DATA] = this.options.fnUnit[OUT_DATA];
    }

    this.functionsArray = $.extend(!0, [], o.functions), this.linksArray = $.extend(!0, [], o.links);
    var n = this.functionsArray.length,
        a = this.newColumnPropertyControlArray.length;
    if (n >= a) for (e = a; e < n; e++) {
      this.createFunctionControl();
    } else {
      var i = this.$newFunctionArea.find(".brtc-va-editors-sheet-controls-propertycontrol-new-function-controls-box");

      for (e = n; e < a; e++) {
        this.newColumnPropertyControlArray.splice(e, 1), this.formulaPropertyControlArray.splice(e, 1), i[e].remove();
      }
    }

    for (e = 0; e < n; e++) {
      this.newColumnPropertyControlArray[e].val(this.functionsArray[0].param && this.functionsArray[e].param["new-column"] ? this.functionsArray[e].param["new-column"] : ""), this.formulaPropertyControlArray[e].data("codeMirror").setValue(this.functionsArray[0].param && this.functionsArray[e].param.formula ? this.functionsArray[e].param.formula : "");
    }

    this.updateCodeMirrorHint();
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if ("new-column" === this.problems[t].param) {
        var e = this.problems[t].paramIndex;
        this.createValidationContent(this.newColumnPropertyControlArray[e].parent(), this.problems[t]);
      }

      if ("formula" === this.problems[t].param) {
        e = this.problems[t].paramIndex;
        this.createValidationContent(this.formulaPropertyControlArray[e].parent(), this.problems[t]);
      }
    }
  }, e.prototype.createSubflowCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          functions: $.extend(!0, [], this.functionsArray),
          links: $.extend(!0, [], this.linksArray)
        }
      }
    };
    return e.ref.param.functions && e.ref.param.functions.length > 0 && (e.ref.param.entries = [e.ref.param.functions[0].fid]), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.updateCodeMirrorHint = function () {
    for (var t = $.map(this.numberColumnArray, function (t, e) {
      return "[" + t.name + "]";
    }), e = $.map(this.binaryOperator, function (t, e) {
      return t.label;
    }), o = $.map(this.unaryOperator, function (t, e) {
      return t.label;
    }), r = this.functionsArray, n = 0; n < r.length; n++) {
      this.formulaPropertyControlArray[n].data("codeMirror").codeMirror.options.hintOptions.list = [].concat(t, e, o), t.push("[" + r[n].param["new-column"] + "]");
    }
  }, e.prototype.createOperatorArray = function () {
    this.binaryOperator = [{
      label: "+",
      value: "+",
      group: "Binary Operator"
    }, {
      label: "-",
      value: "-",
      group: "Binary Operator"
    }, {
      label: "*",
      value: "*",
      group: "Binary Operator"
    }, {
      label: "/",
      value: "/",
      group: "Binary Operator"
    }, {
      label: "^",
      value: "^",
      group: "Binary Operator"
    }, {
      label: "%",
      value: "%",
      group: "Binary Operator"
    }], this.unaryOperator = [{
      label: "exp",
      value: "exp",
      group: "Unary Operator"
    }, {
      label: "log10",
      value: "log10",
      group: "Unary Operator"
    }, {
      label: "log2",
      value: "log2",
      group: "Unary Operator"
    }, {
      label: "ln",
      value: "ln",
      group: "Unary Operator"
    }, {
      label: "sin",
      value: "sin",
      group: "Unary Operator"
    }, {
      label: "cos",
      value: "cos",
      group: "Unary Operator"
    }, {
      label: "tan",
      value: "tan",
      group: "Unary Operator"
    }, {
      label: "asin",
      value: "asin",
      group: "Unary Operator"
    }, {
      label: "acos",
      value: "acos",
      group: "Unary Operator"
    }, {
      label: "atan",
      value: "atan",
      group: "Unary Operator"
    }, {
      label: "degrees",
      value: "degrees",
      group: "Unary Operator"
    }, {
      label: "radians",
      value: "radians",
      group: "Unary Operator"
    }, {
      label: "round",
      value: "round",
      group: "Unary Operator"
    }, {
      label: "floor",
      value: "floor",
      group: "Unary Operator"
    }, {
      label: "ceil",
      value: "ceil",
      group: "Unary Operator"
    }, {
      label: "sqrt",
      value: "sqrt",
      group: "Unary Operator"
    }, {
      label: "abs",
      value: "abs",
      group: "Unary Operator"
    }], this.totalOperator = [].concat(this.binaryOperator, this.unaryOperator);
  }, e.prototype.isInputValueChanged = function (t) {
    var e = this.options.fnUnit.param.functions,
        o = t.options.ref.param.functions;
    return JSON.stringify(e) !== JSON.stringify(o);
  }, t.VA.Core.Functions.Library.numericalVariableDerivation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addRule(this.checkNewColumn), this.addRule(this.checkFormula);
  }, e.prototype.checkNewColumn = function (t) {
    if (this._hasSchema(t)) {
      var e = [],
          o = this._getSchema(t),
          r = [];

      for (var n in o) {
        r.push(o[n].name);
      }

      var a = t.param.functions;

      for (var i in a) {
        a[i].param ? ($.inArray(a[i].param["new-column"], r) > -1 && e.push({
          level: "error",
          mid: t.parent().mid,
          fid: t.fid,
          code: "BR-0033",
          message: "This column already exists",
          param: "new-column",
          paramIndex: i
        }), "" !== a[i].param["new-column"] && r.push(a[i].param["new-column"])) : e.push(this.problemFactory.createProblem({
          errorCode: "BR-0033",
          messageParam: ["Column"],
          param: "new-column",
          paramIndex: i
        }, t));
      }

      return e;
    }
  }, e.prototype.checkFormula = function (t) {
    if (this._hasSchema(t)) {
      var e = [],
          o = this._getSchema(t),
          r = [],
          n = t.param.functions;

      for (var a in n) {
        if (n[a].param) {
          this.isEmptyFormula(n[a].param.formula) && e.push(this.problemFactory.createProblem({
            errorCode: "BR-0033",
            messageParam: ["Formula"],
            param: "formula",
            paramIndex: a
          }, t));
          var i = this.isInvalidColumnName(n[a].param.formula, o, r);

          if (i) {
            var s = "There is no such column";

            for (var l in i) {
              s += " [" + i[l] + "]";
            }

            e.push({
              level: "error",
              mid: t.parent().mid,
              fid: t.fid,
              code: "BR-0033",
              message: s,
              param: "formula",
              paramIndex: a
            });
          } else {
            var c = this.isNotNumberTypeColumn(n[a].param.formula, o, r);

            if (c) {
              s = "The type of column ";

              for (var l in c) {
                s += " [" + c[l] + "]";
              }

              s += " is not number", e.push({
                level: "error",
                mid: t.parent().mid,
                fid: t.fid,
                code: "BR-0033",
                message: s,
                param: "formula",
                paramIndex: a
              });
            }
          }

          r.push(n[a].param["new-column"]);
        } else e.push(this.problemFactory.createProblem({
          errorCode: "BR-0033",
          messageParam: ["Formula"],
          param: "formula",
          paramIndex: a
        }, t));
      }

      return e;
    }
  }, e.prototype.isEmptyFormula = function (t) {
    return null == t || "" === t.trim();
  }, e.prototype.isInvalidColumnName = function (t, e, o) {
    var r = [],
        n = t.replace(new RegExp('"([^"]*)"', "g"), "").replace(new RegExp("^[^\\[]*|[^\\]]*$", "g"), ""),
        a = [],
        i = [];

    for (var s in n.match(new RegExp("\\[|\\]", "g")) && (a = n.replace(new RegExp("^[^\\[]*\\[|\\][^\\]]*$", "g"), "").split(new RegExp("\\].*?\\[", "g"))), e) {
      i.push(e[s].name);
    }

    for (var l in a) {
      $.inArray(a[l], i) < 0 && $.inArray(a[l], o) < 0 && r.push(a[l]);
    }

    return !!r.length && r;
  }, e.prototype.isNotNumberTypeColumn = function (t, e, o) {
    var r = [],
        n = t.replace(new RegExp('"([^"]*)"', "g"), "").replace(new RegExp("^[^\\[]*|[^\\]]*$", "g"), ""),
        a = [],
        i = [];

    for (var s in n.match(new RegExp("\\[|\\]", "g")) && (a = n.replace(new RegExp("^[^\\[]*\\[|\\][^\\]]*$", "g"), "").split(new RegExp("\\].*?\\[", "g"))), e) {
      "number" === e[s].type && i.push(e[s].name);
    }

    for (var l in a) {
      $.inArray(a[l], i) < 0 && $.inArray(a[l], o) < 0 && r.push(a[l]);
    }

    return !!r.length && r;
  }, t.VA.Core.Functions.Library.numericalVariableDerivation.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.oneHotEncoder = {
    category: "extraction",
    defaultFnUnit: {
      func: "oneHotEncoder",
      name: "OneHotEncoder",
      inData: [],
      outData: [],
      param: {
        "input-cols": [],
        "hold-cols": [],
        "drop-last": "true",
        "output-type": "columns",
        "postfix-type": "index",
        "array-col": "",
        groupby: []
      },
      display: {
        label: "One Hot Encoder",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function encodes columns having categorical values to columns having binary numbers.",
    mandatory: [],
    tags: ["One Hot Encoder", "One Hot", "OneHot", "onehotencoder"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-cols": this.renderInputColsControl,
      "hold-cols": this.renderHoldColsControl,
      "drop-last": this.renderDropLastControl,
      "output-type": this.renderOutputTypeControl,
      "postfix-type": this.renderPostfixTypeControl,
      "array-col": this.renderArrayColControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createInputColsControl(), this.createHoldColsControl(), this.createDropLastControl(), this.createOutputTypeControl(), this.createPostfixTypeControl(), this.createArrayColControl(), this.createGroupbyControl();
  }, e.prototype.createInputColsControl = function (t) {
    var e = this;
    e.$elements["input-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Columns", function (t) {
      t.append(e.$elements["input-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["input-cols"] = e.createColumnList(e.$elements["input-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColsControl = function (t) {
    var e = this.options.fnUnit.param["input-cols"];
    this.controls["input-cols"].setSelectedItems(e);
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createDropLastControl = function (t) {
    var e = this;
    e.$elements["drop-last.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["drop-last.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = e.addPropertyControl("Drop Last", function (t) {
      t.append(e.$elements["drop-last.true"]), e.controls["drop-last.true"] = e.createRadioButton(e.$elements["drop-last.true"], {
        width: "undefined",
        groupName: "drop-last",
        checked: !0
      }), e.$elements["drop-last.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("drop-last", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["drop-last.false"]), e.controls["drop-last.false"] = e.createRadioButton(e.$elements["drop-last.false"], {
        width: "undefined",
        groupName: "drop-last"
      }), e.$elements["drop-last.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("drop-last", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "drop-last", "Drop Last");
  }, e.prototype.renderDropLastControl = function (t) {
    var e = "drop-last." + this.options.fnUnit.param["drop-last"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createOutputTypeControl = function (t) {
    var e = this;
    e.$elements["output-type.columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Columns</div>'), e.$elements["output-type.array"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Array</div>');
    var o = e.addPropertyControl("Output Type", function (t) {
      t.append(e.$elements["output-type.columns"]), e.controls["output-type.columns"] = e.createRadioButton(e.$elements["output-type.columns"], {
        width: "undefined",
        groupName: "output-type",
        checked: !0
      }), e.$elements["output-type.columns"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("output-type", "columns");
        e.executeCommand(o);
      }), t.append(e.$elements["output-type.array"]), e.controls["output-type.array"] = e.createRadioButton(e.$elements["output-type.array"], {
        width: "undefined",
        groupName: "output-type"
      }), e.$elements["output-type.array"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("output-type", "array");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "output-type", "Output Type");
  }, e.prototype.renderOutputTypeControl = function (t) {
    var e = "output-type." + this.options.fnUnit.param["output-type"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createPostfixTypeControl = function (t) {
    var e = this;
    e.$elements["postfix-type.index"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Index</div>'), e.$elements["postfix-type.label"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Label</div>');
    var o = e.addPropertyControl("Postfix Type", function (t) {
      t.append(e.$elements["postfix-type.index"]), e.controls["postfix-type.index"] = e.createRadioButton(e.$elements["postfix-type.index"], {
        width: "undefined",
        groupName: "postfix-type",
        checked: !0
      }), e.$elements["postfix-type.index"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("postfix-type", "index");
        e.executeCommand(o);
      }), t.append(e.$elements["postfix-type.label"]), e.controls["postfix-type.label"] = e.createRadioButton(e.$elements["postfix-type.label"], {
        width: "undefined",
        groupName: "postfix-type"
      }), e.$elements["postfix-type.label"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("postfix-type", "label");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "postfix-type", "Postfix Type");
  }, e.prototype.renderPostfixTypeControl = function (t) {
    var e = "postfix-type." + this.options.fnUnit.param["postfix-type"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createArrayColControl = function (t) {
    var e = this;
    e.$elements["array-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Array Column", function (t) {
      t.append(e.$elements["array-col"]);
      e.controls["array-col"] = e.createInput(e.$elements["array-col"], {
        placeHolder: "encoded"
      }), e.$elements["array-col"].on("change", function (t) {
        if (e.isInputValueChanged("array-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("array-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "array-col", "Array Column");
  }, e.prototype.renderArrayColControl = function (t) {
    var e = this.options.fnUnit.param["array-col"];
    this.$elements["array-col"].val(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["input-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["hold-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.oneHotEncoder.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputColsRule(), this.addHoldColumnsRule(), this.addBaseGroupByRule("input-cols", "Input Columns"), this.addBaseGroupByRule("hold-cols", "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addInputColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-cols", e.param["input-cols"], "Input Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-cols", e.param["input-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "input-cols", e.param["input-cols"], ["number", "string"]);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-cols", e.param["hold-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-cols", e.param["hold-cols"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.oneHotEncoder.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.oneHotEncoderModel = {
    category: "extraction",
    defaultFnUnit: {
      func: "oneHotEncoderModel",
      name: "OneHotEncoderModel",
      inData: [],
      outData: [],
      param: {
        "hold-cols": [],
        "output-type": "columns",
        "postfix-type": "index",
        "array-col": "",
        groupby: []
      },
      display: {
        label: "One Hot Encoder Model",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function encodes categorical columns using the model created from another OneHotEncoder function. ",
    mandatory: [],
    tags: ["One Hot Encoder Model", "One", "One Hot", "OneHot", "onehotencoder", "onehotencodermodel"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-cols": this.renderHoldColsControl,
      "output-type": this.renderOutputTypeControl,
      "postfix-type": this.renderPostfixTypeControl,
      "array-col": this.renderArrayColControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColsControl(), this.createOutputTypeControl(), this.createPostfixTypeControl(), this.createArrayColControl(), this.createGroupbyControl();
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createOutputTypeControl = function (t) {
    var e = this;
    e.$elements["output-type.columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Columns</div>'), e.$elements["output-type.array"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Array</div>');
    var o = e.addPropertyControl("Output Type", function (t) {
      t.append(e.$elements["output-type.columns"]), e.controls["output-type.columns"] = e.createRadioButton(e.$elements["output-type.columns"], {
        width: "undefined",
        groupName: "output-type",
        checked: !0
      }), e.$elements["output-type.columns"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("output-type", "columns");
        e.executeCommand(o);
      }), t.append(e.$elements["output-type.array"]), e.controls["output-type.array"] = e.createRadioButton(e.$elements["output-type.array"], {
        width: "undefined",
        groupName: "output-type"
      }), e.$elements["output-type.array"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("output-type", "array");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "output-type", "Output Type");
  }, e.prototype.renderOutputTypeControl = function (t) {
    var e = "output-type." + this.options.fnUnit.param["output-type"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createPostfixTypeControl = function (t) {
    var e = this;
    e.$elements["postfix-type.index"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Index</div>'), e.$elements["postfix-type.label"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Label</div>');
    var o = e.addPropertyControl("Postfix Type", function (t) {
      t.append(e.$elements["postfix-type.index"]), e.controls["postfix-type.index"] = e.createRadioButton(e.$elements["postfix-type.index"], {
        width: "undefined",
        groupName: "postfix-type",
        checked: !0
      }), e.$elements["postfix-type.index"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("postfix-type", "index");
        e.executeCommand(o);
      }), t.append(e.$elements["postfix-type.label"]), e.controls["postfix-type.label"] = e.createRadioButton(e.$elements["postfix-type.label"], {
        width: "undefined",
        groupName: "postfix-type"
      }), e.$elements["postfix-type.label"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("postfix-type", "label");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "postfix-type", "Postfix Type");
  }, e.prototype.renderPostfixTypeControl = function (t) {
    var e = "postfix-type." + this.options.fnUnit.param["postfix-type"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createArrayColControl = function (t) {
    var e = this;
    e.$elements["array-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Array Column", function (t) {
      t.append(e.$elements["array-col"]);
      e.controls["array-col"] = e.createInput(e.$elements["array-col"], {
        placeHolder: "encoded"
      }), e.$elements["array-col"].on("change", function (t) {
        if (e.isInputValueChanged("array-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("array-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "array-col", "Array Column");
  }, e.prototype.renderArrayColControl = function (t) {
    var e = this.options.fnUnit.param["array-col"];
    this.$elements["array-col"].val(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["hold-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.oneHotEncoderModel.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addHoldColumnsRule(), this.addBaseGroupByRule("hold-cols", "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-cols", e.param["hold-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-cols", e.param["hold-cols"], ["number", "String"]);
    });
  }, t.VA.Core.Functions.Library.oneHotEncoderModel.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.polynomialExpansion = {
    category: "extraction",
    defaultFnUnit: {
      func: "polynomialExpansion",
      name: "PolynomialExpansion",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        groupby: []
      },
      display: {
        label: "Polynomial Expansion",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs polynomial expansion in a polynomial space.",
    tags: ["Polynomial", "Expansion", "polynomial", "expansion", "Polynomial Expansion", "calculation", "degree", "distribute", "terms"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", this.render = {
      columns: this.renderColumnsControl,
      "hold-columns": this.renderHoldColumns,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createHoldColumnsControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed() {
          var e = t.createColumnsCommand();
          t.executeCommand(e);
        }
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(this.$holdColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.createColumnListCommand("hold-columns", o.items);
        }
      };
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, o);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var e = [];

    for (var o in t) {
      "number" == t[o].type && e.push(t[o]);
    }

    this.columnsControl.setItems(e), this.holdColumnsControl.setItems(t), this.groupbyControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMNS];
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param[this.PARAM_HOLD_COLUMNS];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = [this.columnsControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.polynomialExpansion.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "number");
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0], "Hold Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.polynomialExpansion.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.quantileDiscretizer = {
    category: "extraction",
    defaultFnUnit: {
      func: "quantileDiscretizer",
      name: "DiscretizeQuantile",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "bucket-number": "",
        "out-col-name": "",
        groupby: []
      },
      display: {
        label: "Discretize Quantile",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Discretize the column values into the bucket-number intervals in ascending order. The out-table is created with the result interval values added into the input-table as a derived new column.",
    tags: ["Discretize Quantile", "DiscretizeQuantile", "Statistics", "Discretizer", "bucket", "interval"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_BUCKET_NUMBER = "bucket-number", this.PARAM_OUT_COL_NAME = "out-col-name", this.render = {
      columns: this.renderColumnsControl,
      "bucket-number": this.renderBucketNumberControl,
      "out-col-name": this.renderOutColNameControl,
      groupby: this.renderGroupByControl
    }, this.createColumnsControl(), this.createBucketNumberControl(), this.createOutColNameControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Column", function (t) {
      t.append(e.$column);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed() {
          var t = e.createColumnCommand();
          e.executeCommand(t);
        }
      };
      e.columnsControl = e.createColumnList(e.$column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.columnChanged = function () {
    var t = this.createColumnCommand();
    this.executeCommand(t);
  }, e.prototype.createBucketNumberControl = function () {
    var t = this;
    this.$numberInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberInput"/>');
    var e = this.addPropertyControl("Bucket Number", function (e) {
      e.append(t.$numberInputControl);
      var o = {
        numberType: "int",
        min: 2,
        max: void 0,
        placeholder: "2",
        minus: !1
      };
      t.$numberControl = t.createNumericInput(t.$numberInputControl, o), t.$numberControl.onChange(function (e) {
        var o = t.createBucketNumberCommand(e);
        t.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "bucket-number", "Bucket Number");
  }, e.prototype.createOutColNameControl = function () {
    var t = this;
    this.$outColNameInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("Out Column Name", function (e) {
      e.append(t.$outColNameInput);
      t.createInput(t.$outColNameInput, {
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$outColNameInput.on("change", function (e) {
        if (t.isInputValueChanged(t.PARAM_OUT_COL_NAME, $(this).val())) {
          var o = t.createOutColNameCommand();
          t.executeCommand(o);
        }
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "out-col-name", "Out Column Name");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double" === t.internalType;
    }), this.columnsControl.setItems(this.numberColumnArray), this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$column, this.problems[t]), this.problems[t].param === this.PARAM_BUCKET_NUMBER && this.createValidationContent(this.$numberInputControl, this.problems[t]), this.problems[t].param === this.PARAM_OUT_COL_NAME && this.createValidationContent(this.$outColNameInput.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMNS];
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderBucketNumberControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_BUCKET_NUMBER];
    this.$numberControl.setValue(t || "");
  }, e.prototype.renderOutColNameControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_OUT_COL_NAME];
    this.$outColNameInput.val(t || "");
  }, e.prototype.renderGroupByControl = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createBucketNumberCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_BUCKET_NUMBER] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createOutColNameCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_OUT_COL_NAME] = this.$outColNameInput.val(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.quantileDiscretizer.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", this.PARAM_BUCKET_NUMBER = "bucket-number", this.PARAM_OUT_COL_NAME = "out-col-name", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addNewColumnNameRule(this.PARAM_OUT_COL_NAME), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "number");
    });
  }, e = e, t.VA.Core.Functions.Library.quantileDiscretizer.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.rowIndexDerivation = {
    category: "extraction",
    defaultFnUnit: {
      func: "rowIndexDerivation",
      name: "AddRowNumber",
      inData: [],
      outData: [],
      param: {
        "new-column": "",
        groupby: []
      },
      display: {
        label: "Add Row Number",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a column to show row index for data.",
    tags: ["Add Row Number", "AddRowNumber", "Extraction", "Preprocessing", "Transform", "index", "row number", "create", "select"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "new-column": this.renderNewColumn,
      groupby: this.renderGroupBy
    }, this.createNewColumnControl(), this.createGroupByControl();
  }, e.prototype.createNewColumnControl = function () {
    var t = this;
    this.$newColumnInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("New Column", function (e) {
      e.append(t.$newColumnInput);
      t.createInput(t.$newColumnInput, {}, "brtc-va-editors-sheet-controls-width-12"), t.$newColumnInput.on("change", function (e) {
        if (t.isInputValueChanged("new-column", $(this).val())) {
          var o = t.createNewColumnCommand();
          t.executeCommand(o);
        }
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "new-column", "New Column");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderNewColumn = function () {
    this.$newColumnInput.val(this.options.fnUnit.param["new-column"] ? this.options.fnUnit.param["new-column"] : "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "new-column" === this.problems[t].param && this.createValidationContent(this.$newColumnInput.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createNewColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param["new-column"] = this.$newColumnInput.val(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.rowIndexDerivation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.PARAM_NEW_COLUMN = "new-column", t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
    var e = this;
    this.addRule(this.checkNewColumn), this.addRule(function (t) {
      if (this._hasSchema(t)) {
        var o = t.param[e.PARAM_NEW_COLUMN];
        if ($.isNumeric(o.slice(0, 1))) return e.problemFactory.createProblem({
          errorCode: "BR-0045",
          param: e.PARAM_NEW_COLUMN,
          messageParam: [o]
        }, t);
      }
    }), this.addBaseGroupByRule(this.PARAM_NEW_COLUMN, "Columns");
    e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.checkNewColumn = function (t) {
    if (this._hasSchema(t)) {
      var e = [],
          o = this._getSchema(t);

      return this.isAlreadyExistNewColumn(t.param["new-column"], o) && e.push({
        level: "error",
        mid: t.parent().mid,
        fid: t.fid,
        code: "BR-0033",
        message: "This column already exists",
        param: "new-column"
      }), e;
    }
  }, e.prototype.isAlreadyExistNewColumn = function (t, e) {
    var o = !1,
        r = $.map(e, function (t) {
      return t.name;
    });
    return $.inArray(t, r) > -1 && (o = !0), o;
  }, e = e, t.VA.Core.Functions.Library.rowIndexDerivation.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.stringIndexer = {
    category: "extraction",
    defaultFnUnit: {
      func: "stringIndexer",
      name: "StringIndexer",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: []
      },
      display: {
        label: "String Indexer",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides string indexers for selected columns.",
    tags: ["String Indexer", "StringIndexer", "index to string"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.render = {
      columns: this.renderColumnsControl,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          e.columnsChanged(t, o);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.columnsChanged = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param.columns = [[]];
    var n = this.columnsControl.getSelectedItems();
    n && (r.ref.param.columns[0] = n);
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(a);
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];
    $.each(t, function (t, o) {
      "String" === o.internalType && e.push(o);
    }), this.columnsControl.setItems(e), this.groupbyControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.createColumnsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_COLUMNS] = [], o.ref.param[this.PARAM_COLUMNS].push(e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.stringIndexer.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    });
  }, e = e, t.VA.Core.Functions.Library.stringIndexer.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.stringSplit = {
    category: "extraction",
    defaultFnUnit: {
      func: "stringSplit",
      name: "StringSplit",
      inData: [],
      outData: [],
      param: {
        column: [[]],
        "hold-columns": [[]],
        delimiter: "",
        "out-col-name": "",
        "out-col-number": "",
        "out-col-type": "String",
        "array-start-size": "",
        "array-end-size": ""
      },
      display: {
        label: "String Split",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: 'This function splits each string into array. It splits a string using "delimiter" given by the user and convert its type if user specified.',
    tags: ["Extraction", "preprocessing", "derivation", "String Split", "Preprocessing", "Derivation", "stringSplit", "Split", "array"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    this.OUTCOLUMNTYPES = [{
      label: "String",
      value: "String"
    }, {
      label: "Double",
      value: "Double"
    }, {
      label: "Integer",
      value: "Integer"
    }, {
      label: "Int",
      value: "Int"
    }, {
      label: "Long",
      value: "Long"
    }, {
      label: "Double[]",
      value: "Array(Double)"
    }, {
      label: "String[]",
      value: "Array(String)"
    }], t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      column: this.renderColumns,
      "hold-columns": this.renderHoldColumns,
      delimiter: this.renderDelimiter,
      "out-col-name": this.renderOutColumnName,
      "out-col-number": this.renderOutColumnCount,
      "out-col-type": this.renderOutColumnType,
      "array-start-size": this.renderArrayStartSize,
      "array-end-size": this.renderArrayEndSize
    }, this.createColumnsControl(), this.createHoldColumnsControl(), this.createDelimiterControl(), this.createOutColumnNameControl(), this.createOutColumnCountControl(), this.createOutColumnTypeControl(), this.createArrayStartSizeControl(), this.createArrayEndSizeControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.columnsControl = {};
    var e = {
      maxRowCount: 1,
      multiple: !1,
      changed: function changed(e, o) {
        var r = t.createColumnsCommand("column", t.columnsControl);
        t.executeCommand(r);
      }
    };
    this.$columns = this.createCommonColumnsControl("columnsControl", "Column", e);
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.holdColumnsControl = {};
    var e = {
      maxRowCount: 3,
      multiple: !0,
      changed: function changed(e, o) {
        var r = t.createColumnsCommand("hold-columns", t.holdColumnsControl);
        t.executeCommand(r);
      }
    };
    this.$holdColumns = this.createCommonColumnsControl("holdColumnsControl", "Hold Columns", e);
  }, e.prototype.createDelimiterControl = function () {
    var t = this;
    this.$delimiter = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" type="text"/>');
    var e = this.addPropertyControl("Delimiter", function (e) {
      e.append(t.$delimiter), t.delimiterControl = t.createInput(t.$delimiter, {
        height: "23px"
      }, "");
    }, {
      mandatory: !0
    });
    this.$delimiter.on("change", function () {
      if (t.isInputValueChanged("delimiter", $(this).val())) {
        var e = t.createCommonCommand("delimiter", $(this).val());
        t.executeCommand(e);
      }
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "delimiter", "Delimiter");
  }, e.prototype.createOutColumnNameControl = function () {
    var t = this;
    this.$outputName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("Output Column Name", function (e) {
      e.append(t.$outputName), t.outputNameControl = t.createInput(t.$outputName, {
        height: "23px"
      }, "");
    }, {
      mandatory: !0
    });
    this.$outputName.on("change", function () {
      if (t.isInputValueChanged("out-col-name", $(this).val())) {
        var e = t.createCommonCommand("out-col-name", $(this).val());
        t.executeCommand(e);
      }
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "out-col-name", "Output Column Name");
  }, e.prototype.createOutColumnCountControl = function () {
    var e = this;
    this.$outColumnnumber = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Output Column Count", function (o) {
      o.append(e.$outColumnnumber);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (1 <= value <= 1000)")
      };
      e.ouptColumnCountControl = e.createNumericInput(e.$outColumnnumber, r), e.ouptColumnCountControl.onChange(function () {
        var t = e.createCommonCommand("out-col-number", this.getValue());
        e.executeCommand(t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "out-col-number", "Output Column Count");
  }, e.prototype.createOutColumnTypeControl = function () {
    var t = this;
    this.$outColumnTypeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = this.addPropertyControl("Output Column Type", function (e) {
      t.createDropDownList(t.$outColumnTypeControl, {
        source: t.OUTCOLUMNTYPES,
        placeHolder: "Enter value",
        displayMember: "label",
        valueMember: "value"
      }), e.append(this.$outColumnTypeControl.parent()), t.$outColumnTypeControl.on("change", function () {
        var e = t.$outColumnTypeControl.jqxDropDownList("getSelectedItem") ? t.$outColumnTypeControl.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand("out-col-type", e);
        t.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "out-col-type", "Output Column Type");
  }, e.prototype.createArrayStartSizeControl = function () {
    var e = this;
    this.$arrayStartSize = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Ignore Start Position", function (o) {
      o.append(e.$arrayStartSize);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0 (0 <= value)")
      };
      e.arrayStartSizeControl = e.createNumericInput(e.$arrayStartSize, r), e.arrayStartSizeControl.onChange(function () {
        var t = e.createCommonCommand("array-start-size", this.getValue());
        e.executeCommand(t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "array-start-size", "Ignore Start Position");
  }, e.prototype.createArrayEndSizeControl = function () {
    var e = this;
    this.$arrayEndSize = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Ignore End Position", function (o) {
      o.append(e.$arrayEndSize);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0 (0 <= value)")
      };
      e.arrayEndSizeControl = e.createNumericInput(e.$arrayEndSize, r), e.arrayEndSizeControl.onChange(function () {
        var t = e.createCommonCommand("array-end-size", this.getValue());
        e.executeCommand(t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "array-end-size", "Ignore End Position");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var e = $.grep(t, function (t) {
      return "string" === t.type && "String" === t.internalType;
    });
    this.columnsControl.setItems(e), this.holdColumnsControl.setItems(t), this.$outColumnTypeControl.jqxDropDownList("selectIndex", 0), this.ouptColumnCountControl.setValue(3), this.arrayStartSizeControl.setValue(0), this.arrayEndSizeControl.setValue(0);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.column[0] || "");
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderDelimiter = function () {
    this.$delimiter.val(this.options.fnUnit.param.delimiter || "");
  }, e.prototype.renderOutColumnName = function () {
    this.$outputName.val(this.options.fnUnit.param["out-col-name"] || "");
  }, e.prototype.renderOutColumnCount = function () {
    this.ouptColumnCountControl.setValue(this.options.fnUnit.param["out-col-number"] || "");
  }, e.prototype.renderOutColumnType = function () {
    var t = this.options.fnUnit.param;

    if (void 0 !== t["out-col-type"]) {
      for (var e = 0, o = 0; o < this.OUTCOLUMNTYPES.length; o++) {
        this.OUTCOLUMNTYPES[o].value === t["out-col-type"] && (e = o);
      }

      this.$outColumnTypeControl.jqxDropDownList("selectedIndex", e);
    } else this.$outColumnTypeControl.jqxDropDownList("selectedIndex", -1);
  }, e.prototype.renderArrayStartSize = function () {
    this.arrayStartSizeControl.setValue(this.options.fnUnit.param["array-start-size"] || "");
  }, e.prototype.renderArrayEndSize = function () {
    this.arrayEndSizeControl.setValue(this.options.fnUnit.param["array-end-size"] || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "column" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "hold-columns" === this.problems[t].param ? this.createValidationContent(this.$holdColumns, this.problems[t]) : "delimiter" === this.problems[t].param ? this.createValidationContent(this.$delimiter.parent(), this.problems[t]) : "out-col-name" === this.problems[t].param && this.createValidationContent(this.$outputName.parent(), this.problems[t]);
    }
  }, e.prototype.createCommonColumnsControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(n);
      r[t] = r.createColumnList(n, o || {
        maxRowCount: 1,
        multiple: !1
      });
    }, "Column" == e ? {
      mandatory: !0
    } : {}), n;
  }, e.prototype.createColumnsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]];
    var n = o.getSelectedItems();
    if (n) for (var a in n) {
      r.ref.param[e][0].push(n[a]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.stringSplit.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMN = "column", this.PARAM_HOLD_COLUMN = "hold-columns", this.PARAM_DELIMITER = "delimiter", this.PARAM_OUTPUT_COLUMN_NAME = "out-col-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addHoldColumnsRule(), this.addDelimiterRule(), this.addOutputColumnNameRule(), this.addNewColumnNameRule(this.PARAM_OUTPUT_COLUMN_NAME);
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMN, e.param[t.PARAM_COLUMN][0], "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMN, e.param[t.PARAM_COLUMN][0]);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMN, e.param[t.PARAM_HOLD_COLUMN][0]);
    });
  }, e.prototype.addDelimiterRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_DELIMITER,
          messageParam: ["Delimiter"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_DELIMITER]);
      }
    });
  }, e.prototype.addOutputColumnNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_OUTPUT_COLUMN_NAME,
          messageParam: ["Output Column Name"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_OUTPUT_COLUMN_NAME]);
      }
    });
  }, t.VA.Core.Functions.Library.stringSplit.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.timeShift = {
    category: "extraction",
    defaultFnUnit: {
      func: "timeShift",
      name: "ShiftDateTime",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "shift-unit": "year",
        interval: ""
      },
      display: {
        label: "Shift Datetime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Shift DateTime using the entered interval and unit.",
    tags: ["Shift Datetime", "ShiftDatetime", "Timeseries", "Preprocessing", "Datetime", "datetime", "interval", "year", "month", "day", "hour", "minute"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "shift-unit": this.renderShiftUnit,
      interval: this.renderInterval
    }, this.createColumnsControls(), this.createShiftUnitControls(), this.createIntervalControls();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createShiftUnitControls = function () {
    var t = this;
    this.$shiftUnit = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = [{
      label: "Year",
      value: "year"
    }, {
      label: "Month",
      value: "month"
    }, {
      label: "Day",
      value: "day"
    }, {
      label: "Hour",
      value: "hour"
    }, {
      label: "Minute",
      value: "minute"
    }, {
      label: "Second",
      value: "second"
    }],
        o = this.addPropertyControl("Shift Unit", function (o) {
      t.createDropDownList(this.$shiftUnit, {
        source: e
      }), o.append(this.$shiftUnit.parent()), t.$shiftUnit.on("change", function () {
        var e = t.$shiftUnit.jqxDropDownList("getSelectedItem") ? t.$shiftUnit.jqxDropDownList("getSelectedItem").value : "";
        t.createCommonCommand("shift-unit", e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "shift-unit", "Shift Unit");
  }, e.prototype.createIntervalControls = function () {
    var t = this;
    this.$interval = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Interval", function (e) {
      e.append(t.$interval);
      t.intervalControl = t.createNumericInput(t.$interval, {
        numberType: "int",
        minus: !0
      }), t.intervalControl.onChange(function () {
        t.createCommonCommand("interval", this.getValue());
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "interval", "interval");
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];
    $.each(t, function (t, o) {
      "String" === o.internalType && e.push(o);
    }), this.columnsControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderShiftUnit = function () {
    var t = this.options.fnUnit.param;
    void 0 === t["shift-unit"] || "" === t["shift-unit"] ? this.$shiftUnit.jqxDropDownList("selectIndex", -1) : this.$shiftUnit.jqxDropDownList("selectItem", t["shift-unit"]);
  }, e.prototype.renderInterval = function () {
    var t = this.options.fnUnit.param;
    this.intervalControl.setValue(t.interval ? t.interval : "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "interval" === this.problems[t].param && this.createValidationContent(this.$interval, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.timeShift.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_INTERVAL = "interval", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addIntervalRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addIntervalRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_INTERVAL,
          messageParam: ["Interval"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_INTERVAL]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.timeShift.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.vectorIndexer = {
    category: "extraction",
    defaultFnUnit: {
      func: "vectorIndexer",
      name: "VectorIndexer",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "max-categories": "",
        "out-col-name": "",
        "hold-column": "false"
      },
      display: {
        label: "Vector Indexer",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "VectorIndexer converts categorical feature columns into a vector and give index to each element(feature column) in the vector.",
    tags: ["Vector Indexer", "VectorIndexer", "categorical features", "max categories", "indexing"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_MAX_CATEGORIES = "max-categories", this.PARAM_OUT_COL_NAME = "out-col-name", this.PARAM_HOLD_COLUMN = "hold-column", this.render = {
      columns: this.renderColumnsControl,
      "max-categories": this.renderMaxCategoriesControl,
      "out-col-name": this.renderOutColNameControl,
      "hold-column": this.renderHoldColumnControl
    }, this.createColumnsControl(), this.createMaxCategoriesControl(), this.createOutColNameControl(), this.createHoldColumnControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          e.columnsChanged(t, o);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.columnsChanged = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param.columns = [[]];
    var n = this.columnsControl.getSelectedItems();
    n && (r.ref.param.columns[0] = n);
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(a);
  }, e.prototype.createMaxCategoriesControl = function (e) {
    var o = this;
    this.$maxCategoriesInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Max Categories", function (e) {
      e.append(o.$maxCategoriesInputControl);
      var r = {
        numberType: "int",
        min: 2,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2 (2 <= value)")
      };
      o.$maxCategoriesControl = o.createNumericInput(o.$maxCategoriesInputControl, r), o.$maxCategoriesControl.onChange(function (t) {
        var e = o.createMaxCategoriesCommand(t);
        o.executeCommand(e);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "max-categories", "Max Categories");
  }, e.prototype.createOutColNameControl = function (t) {
    var e = this;
    this.$outColNameInputControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-inputbox" valid-type="type1"/>');
    var o = this.addPropertyControl("Out Col Name", function (t) {
      t.append(e.$outColNameInputControl), e.createInput(this.$outColNameInputControl, {
        height: "23px",
        placeHolder: "Enter value"
      }), e.$outColNameInputControl.on("change", function (t) {
        if (e.isInputValueChanged("out-col-name", $(this).val())) {
          var o = e.createOutColNameCommand(e.$outColNameInputControl.jqxInput("val"));
          e.executeCommand(o);
        }
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "out-col-name", "Out Col Name");
  }, e.prototype.createHoldColumnControl = function (t) {
    var e = this;
    this.$holdColumnControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>');
    var o = this.addPropertyControl("Hold Column", function (t) {
      t.append(e.$holdColumnControl), e.createRadioButtonControl(e.$holdColumnControl, "True", e.PARAM_HOLD_COLUMN), e.createRadioButtonControl(e.$holdColumnControl, "False", e.PARAM_HOLD_COLUMN);
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "hold-column", "Hold Column");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "True" === e ? e = "true" : "False" === e && (e = "false");
      var o = r.createHoldColumnCommand(e);
      r.executeCommand(o);
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]), this.problems[t].param === this.PARAM_MAX_CATEGORIES && this.createValidationContent(this.$maxCategoriesInputControl, this.problems[t]), this.problems[t].param === this.PARAM_OUT_COL_NAME && this.createValidationContent(this.$outColNameInputControl.parent(), this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderMaxCategoriesControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MAX_CATEGORIES];
    this.$maxCategoriesControl.setValue(t);
  }, e.prototype.renderOutColNameControl = function () {
    var t = this.options.fnUnit.param;
    this.$outColNameInputControl.jqxInput("val", t["out-col-name"] ? t["out-col-name"] : "");
  }, e.prototype.renderHoldColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_HOLD_COLUMN];
    "true" === t ? t = "True" : "false" === t && (t = "False"), $(this.$holdColumnControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.createColumnsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_COLUMNS] = [], o.ref.param[this.PARAM_COLUMNS].push(e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createMaxCategoriesCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_MAX_CATEGORIES] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createOutColNameCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_OUT_COL_NAME] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createHoldColumnCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_HOLD_COLUMN] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, t.VA.Core.Functions.Library.vectorIndexer.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_MAX_CATEGORIES = "max-categories", this.PARAM_OUT_COLUMN_NAME = "out-col-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addMaxCategoriesRule(), this.addNewColumnNameRule(this.PARAM_OUT_COLUMN_NAME);
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkSingleNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addMaxCategoriesRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_MAX_CATEGORIES,
          messageParam: ["Max Categories"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_MAX_CATEGORIES]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.vectorIndexer.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.ymdhwFromDatetime = {
    category: "extraction",
    defaultFnUnit: {
      func: "ymdhwFromDatetime",
      name: "DecomposeDateTime",
      inData: [],
      outData: [],
      param: {
        columns: [[]]
      },
      display: {
        label: "Decompose Datetime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Decompse Datetime and extract year, month, day, hour and week. Those values are added as derived variables.",
    tags: ["Decompose Datetime", "DecomposeDatetime", "Timeseries", "Preprocessing", "Datetime", "datetime", "extract data", "year", "month", "day", "hour", "week"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl
    }, this.createColumnsControls();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];
    $.each(t, function (t, o) {
      "String" === o.internalType && e.push(o);
    }), this.columnsControl.setItems(e);
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.ymdhwFromDatetime.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.ymdhwFromDatetime.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.cassandraLoad = {
    category: "io",
    defaultFnUnit: {
      func: "cassandraLoad",
      name: "CassandraLoad",
      outData: [],
      param: {
        cluster: "",
        keyspace: "",
        "table-name": "",
        host: "",
        port: "",
        username: "",
        password: ""
      },
      display: {
        label: "Cassandra Load",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["keyspace", "table-name", "host", "port", "username", "password"],
    description: "Load data from Cassandra(ScyllaDB).",
    tags: ["Cassandra", "Cassandra Load", "load"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.renderValues(), this.options.studio.doValidate(this.options.fnUnit.parent()), this.options.isRendered = !0;
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      cluster: this.renderCluster,
      keyspace: this.renderKeyspace,
      "table-name": this.renderTableName
    }, this.createClusterControl(), this.createKeyspaceControl(), this.createTableNameControl();
  }, e.prototype.createClusterControl = function () {
    var t = this;
    this.$clusterInput = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Cluster", function (e) {
      e.append(t.$clusterInput);
      t.createInput(t.$clusterInput, {}, "brtc-va-editors-sheet-controls-width-12");
    }), t.$clusterInput.on("change", function () {
      var e = $(this).val();
      t.isInputValueChanged("cluster", e) && t.createCommonCommand("cluster", e);
    });
  }, e.prototype.createKeyspaceControl = function () {
    var t = this;
    this.$keyspaceInput = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Keyspace", function (e) {
      e.append(t.$keyspaceInput);
      t.createInput(t.$keyspaceInput, {
        placeHolder: "Keyspace"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$keyspaceInput.on("change", function () {
        var e = $(this).val();
        t.isInputValueChanged("keyspace", e) && t.createCommonCommand("keyspace", e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createTableNameControl = function () {
    var t = this;
    this.$tableNameInput = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Table Name", function (e) {
      e.append(t.$tableNameInput);
      t.createInput(t.$tableNameInput, {
        placeHolder: "Table Name"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$tableNameInput.on("change", function () {
        var e = $(this).val();
        t.isInputValueChanged("table-name", e) && t.createCommonCommand("table-name", e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderCluster = function () {
    var t = this.options.fnUnit.param;
    this.$clusterInput.val(t.cluster ? t.cluster : "");
  }, e.prototype.renderKeyspace = function () {
    var t = this.options.fnUnit.param.keyspace;
    this.$keyspaceInput.jqxInput("val", t);
  }, e.prototype.renderTableName = function () {
    var t = this.options.fnUnit.param;
    this.$tableNameInput.val(t["table-name"] ? t["table-name"] : "");
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "keyspace" === this.problems[t].param && this.createValidationContent(this.$keyspaceInput, this.problems[t]), "table-name" === this.problems[t].param && this.createValidationContent(this.$tableNameInput, this.problems[t]);
    }
  }, e.prototype.isInputValueChanged = function (t, e) {
    return this.options.fnUnit.param[t] !== e;
  }, t.VA.Core.Functions.Library.cassandraLoad.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_KEY_SPACE = "keyspace", this.PARAM_TABLE_NAME = "table-name", t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addRule(this.keySpaceRule), this.addRule(this.tableNameRule);
  }, e.prototype.keySpaceRule = function (t) {
    var e = {
      errorCode: "BR-0033",
      param: this.PARAM_KEY_SPACE,
      messageParam: ["Keyspace"]
    };
    if (!t.param || this.isEmptyForString(t.param[this.PARAM_KEY_SPACE])) return this.problemFactory.createProblem(e, t);
  }, e.prototype.tableNameRule = function (t) {
    var e = {
      errorCode: "BR-0033",
      param: this.PARAM_TABLE_NAME,
      messageParam: ["Table Name"]
    };
    if (!t.param || this.isEmptyForString(t.param[this.PARAM_TABLE_NAME])) return this.problemFactory.createProblem(e, t);
  }, e = e, t.VA.Core.Functions.Library.cassandraLoad.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.cassandraUnload = {
    category: "io",
    defaultFnUnit: {
      func: "cassandraUnload",
      name: "CassandraUnload",
      inData: [],
      outData: [],
      param: {
        cluster: "",
        keyspace: "",
        "table-name": "",
        host: "",
        port: "",
        username: "",
        password: "",
        "save-mode": "",
        "partition-key-columns": [[]],
        "clustering-key-columns": [[]]
      },
      display: {
        label: "Cassandra Unload",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["keyspace", "table-name", "host", "port", "username", "password"],
    description: "Unload Cassandra(ScyllaDB) data to DB.",
    tags: ["Cassandra", "Cassandra Unload", "Unload"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.renderValues(), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      cluster: this.renderCluster,
      keyspace: this.renderKeyspace,
      "table-name": this.renderTableName,
      "save-mode": this.renderSaveMode,
      "partition-key-columns": this.renderPartitionKeyCol,
      "clustering-key-columns": this.renderClusteringKeyCol
    }, this.createClusterControl(), this.createKeyspaceControl(), this.createTableNameControl(), this.createSaveModeControl(), this.createPartitionKeyControl(), this.createClusteringKeyControl();
  }, e.prototype.createClusterControl = function () {
    var t = this;
    this.$clusterInput = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Cluster", function (e) {
      e.append(t.$clusterInput);
      t.createInput(t.$clusterInput, {}, "brtc-va-editors-sheet-controls-width-12"), this.$clusterInput.on("change", function () {
        var e = $(this).val();
        t.isInputValueChanged("cluster", e) && t.createCommonCommand("cluster", e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.createKeyspaceControl = function () {
    var t = this;
    this.$keyspaceInput = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Keyspace", function (e) {
      e.append(t.$keyspaceInput);
      t.createInput(t.$keyspaceInput, {
        placeHolder: "Keyspace"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$keyspaceInput.on("change", function () {
        var e = $(this).val();
        t.isInputValueChanged("keyspace", e) && t.createCommonCommand("keyspace", e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createTableNameControl = function () {
    var t = this;
    this.$tableNameInput = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Table Name", function (e) {
      e.append(t.$tableNameInput);
      t.createInput(t.$tableNameInput, {
        placeHolder: "Table Name"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$tableNameInput.on("change", function () {
        var e = $(this).val();
        t.isInputValueChanged("table-name", e) && t.createCommonCommand("table-name", e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createSaveModeControl = function () {
    var t = this;
    this.$appendModeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton"></div>'), this.$overwriteModeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton"></div>'), this.addPropertyControl("Save Mode", function (e) {
      e.append(this.$appendModeControl).append(this.$overwriteModeControl), t.createRadioButtonControl(t.$appendModeControl, "Append", "save-mode"), t.createRadioButtonControl(t.$overwriteModeControl, "Overwrite", "save-mode");
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          o = r.createRadioCommand(e.toLocaleLowerCase());
      r.executeCommand(o);
    }), this.$radioButton.attr("value", e), this.$parent[e] = this.$radioButton;
  }, e.prototype.createPartitionKeyControl = function () {
    var t = this;
    this.$partitionKeyColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Partition Key Columns", function (e) {
      e.append(this.$partitionKeyColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(e, o) {
          var r = t.createColumnListCommand("partition-key-columns", o.items);
          t.executeCommand(r);
        }
      };
      t.partitionKeyColumnsControl = t.createColumnList(t.$partitionKeyColumns, o);
    });
  }, e.prototype.createClusteringKeyControl = function () {
    var t = this;
    this.$clusteringKeyColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Clustering Key Columns", function (e) {
      e.append(t.$clusteringKeyColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(e, o) {
          var r = t.createColumnListCommand("clustering-key-columns", o.items);
          t.executeCommand(r);
        }
      };
      t.clusteringKeyControl = t.createColumnList(t.$clusteringKeyColumns, o);
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.clusteringKeyControl.setItems(e), this.partitionKeyColumnsControl.setItems(e);
  }, e.prototype.renderCluster = function () {
    var t = this.options.fnUnit.param;
    this.$clusterInput.val(t.cluster ? t.cluster : "");
  }, e.prototype.renderKeyspace = function () {
    var t = this.options.fnUnit.param;
    this.$keyspaceInput.val(t.keyspace ? t.keyspace : "");
  }, e.prototype.renderTableName = function () {
    var t = this.options.fnUnit.param;
    this.$tableNameInput.val(t["table-name"] ? t["table-name"] : "");
  }, e.prototype.renderSaveMode = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t["save-mode"] && ("" == t["save-mode"] ? this.$appendModeControl.Append.jqxRadioButton("check") : "Append" == t["save-mode"] ? this.$appendModeControl.Append.jqxRadioButton("check") : this.$overwriteModeControl.Overwrite.jqxRadioButton("check"));
  }, e.prototype.renderPartitionKeyCol = function () {
    var t = this.options.fnUnit.param["partition-key-columns"];
    this.partitionKeyColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderClusteringKeyCol = function () {
    var t = this.options.fnUnit.param["clustering-key-columns"];
    this.clusteringKeyControl.setSelectedItems(t[0]);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param["save-mode"] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "keyspace" === this.problems[t].param && this.createValidationContent(this.$keyspaceInput, this.problems[t]), "table-name" === this.problems[t].param && this.createValidationContent(this.$tableNameInput, this.problems[t]);
    }
  }, e.prototype.isInputValueChanged = function (t, e) {
    return this.options.fnUnit.param[t] !== e;
  }, t.VA.Core.Functions.Library.cassandraUnload.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_KEY_SPACE = "keyspace", this.PARAM_TABLE_NAME = "table-name", t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addRule(this.keySpaceRule), this.addRule(this.tableNameRule);
  }, e.prototype.keySpaceRule = function (t) {
    var e = {
      errorCode: "BR-0033",
      param: this.PARAM_KEY_SPACE,
      messageParam: ["Keyspace"]
    };
    if (!t.param || this.isEmptyForString(t.param[this.PARAM_KEY_SPACE])) return this.problemFactory.createProblem(e, t);
  }, e.prototype.tableNameRule = function (t) {
    var e = {
      errorCode: "BR-0033",
      param: this.PARAM_TABLE_NAME,
      messageParam: ["Table Name"]
    };
    if (!t.param || this.isEmptyForString(t.param[this.PARAM_TABLE_NAME])) return this.problemFactory.createProblem(e, t);
  }, e = e, t.VA.Core.Functions.Library.cassandraUnload.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.createTable = {
    category: "io",
    defaultFnUnit: {
      func: "createTable",
      name: "CreateTable",
      outData: [],
      param: {
        "data-array": [[]],
        "column-types": [],
        "column-names": []
      },
      display: {
        label: "Create Table",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["data-array", "column-types", "column-names"],
    description: "This function creates a dataframe with the given input.",
    tags: ["Create Table", "CreateTable", "Create", "Table"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), Studio.getInstance().doValidate(this.options.fnUnit.parent()), this.options.isRendered = !0, this.renderValues();
  }, e.prototype.setContentsEditable = function (t) {}, e.prototype.getPrimaryOperation = function () {
    return "CreateTable";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMN_NAMES = "column-names", this.PARAM_TYPE_ARRAY = "column-types", this.PARAM_DATA_ARRAY = "data-array", this.COLUMN_TYPE_DOUBLE = "double", this.COLUMN_TYPE_INTEGER = "int", this.COLUMN_TYPE_STRING = "string", this.COLUMN_TYPE_LABEL = {}, this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_DOUBLE] = "Double", this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_INTEGER] = "Integer", this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_STRING] = "String", this.COLUMNS_SOURCE = [{
      label: this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_DOUBLE],
      value: this.COLUMN_TYPE_DOUBLE
    }, {
      label: this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_INTEGER],
      value: this.COLUMN_TYPE_INTEGER
    }, {
      label: this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_STRING],
      value: this.COLUMN_TYPE_STRING
    }], this.createOpenEditorButton(), this.createColumnsView();
  }, e.prototype.renderValues = function (t) {
    this.renderColumnsView();
  }, e.prototype.createOpenEditorButton = function () {
    var e = this;
    this.$editorButtonArea = $('<div class="brtc-va-editors-sheet-editor-button-area"/>'), this.addPropertyControl("Edit", function (o) {
      o.append(e.$editorButtonArea);
      var r = $('<input class="brtc-va-editors-sheet-panels-properties-button" type="button" value="Open Editor"/>');
      e.$editorButtonArea.append(r), r.jqxButton({
        theme: t.VA.Env.Theme,
        width: "100%",
        height: 25
      }), r.click(function (o) {
        new t.VA.Core.Dialogs.InputDataFrameEditorDialog($(o.target), {
          width: 1400,
          height: 700,
          maxWidth: 1400,
          maxHeight: 700,
          title: "Create Table",
          fnUnit: e.options.fnUnit,
          close: function close(t) {
            if (t.OK) {
              var o = $.extend(!0, [], t[e.PARAM_COLUMN_NAMES]),
                  r = $.extend(!0, [], t[e.PARAM_DATA_ARRAY]);
              e.generateColumnType(o, r), e.executeCommonCommand([e.PARAM_COLUMN_NAMES, e.PARAM_DATA_ARRAY, e.PARAM_TYPE_ARRAY], [o, r, e.typeArray]), e.renderColumnsView();
            }
          }
        });
      });
    });
  }, e.prototype.createColumnsView = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-columns-view brtc-va-editors-sheet-controls-wrapper">   <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table">       <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-header-area">           <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-header">               <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-header-column">Name</div>               <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-header-column">Type</div>           </div>       </div>       <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-row-area-wrapper">           <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-row-area"></div>       </div>   </div></div>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns), t.$rowAreaScrollbarWrapper = t.$columns.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row-area-wrapper"), t.$rowArea = t.$columns.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row-area"), t.$rowAreaScrollbarWrapper.perfectScrollbar();
    }, {
      mandatory: !0
    });
  }, e.prototype._createColumnsRow = function (t, e) {
    var o = this,
        r = this.$rowArea,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-row">   <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-column"><input class="brtc-va-editors-sheet-columns-table-input"/></div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-column"><div class="brtc-va-editors-sheet-columns-table-dropdownlist"></div></div></div>');
    r.append(n);
    var a = this.createInput(n.find(".brtc-va-editors-sheet-columns-table-input"), {
      disabled: !0
    }),
        i = this.createDropDownList(n.find(".brtc-va-editors-sheet-columns-table-dropdownlist"), {
      source: this.COLUMNS_SOURCE,
      displayMember: "label",
      valueMember: "value"
    });
    i.on("change", function (t) {
      if (o.controlsRendered && "none" !== t.args.type) {
        var e = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").prevAll().length,
            r = $.extend(!0, [], o.options.fnUnit.param[o.PARAM_TYPE_ARRAY]);
        r[e] = t.args.item.value, o.executeCommonCommand(o.PARAM_TYPE_ARRAY, r);
      }
    }), a.val(t), i.val(e);
  }, e.prototype.executeCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    if ($.isArray(e) && $.isArray(o) && e.length === o.length) for (var n = 0; n < e.length; n++) {
      r.ref.param[e[n]] = o[n];
    } else r.ref.param[e] = o;
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(a);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMN_NAMES && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.renderColumnsView = function () {
    this.controlsRendered = !1;
    var t,
        e = this.options.fnUnit.param[this.PARAM_COLUMN_NAMES],
        o = this.options.fnUnit.param[this.PARAM_TYPE_ARRAY];

    for (t = 0; t < e.length; t++) {
      this._renderColumnsRow(t, e[t], o[t]);
    }

    for (var r = this.$rowArea.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").length - 1; r >= t; r--) {
      var n = this.$rowArea.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").eq(r);
      n.length && n.remove();
    }

    this.$rowAreaScrollbarWrapper.perfectScrollbar("update"), this.controlsRendered = !0;
  }, e.prototype._renderColumnsRow = function (t, e, o) {
    if (this.$rowArea.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").eq(t).length) {
      var r = this.$rowArea.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").eq(t),
          n = r.find(".brtc-va-editors-sheet-columns-table-input"),
          a = r.find(".brtc-va-editors-sheet-columns-table-dropdownlist");
      n.val() != e && n.val(e), a.val() != o && a.val(o);
    } else this._createColumnsRow(e, o);
  }, e.prototype.generateColumnType = function (t, e) {
    this.typeArray = [];
    var o = this.options.fnUnit.param[this.PARAM_TYPE_ARRAY];

    for (var r in t) {
      if (o[r]) this.typeArray.push(o[r]);else {
        var n = !1,
            a = !1,
            i = !1;

        for (var s in e) {
          var l = e[s][r];
          if ("" !== l) if (/^[0-9.]+$/.test(l) && 2 == l.split(".").length) n = !0;else {
            if (!/^[0-9]+$/.test(l)) {
              i = !0;
              break;
            }

            a = !0;
          }
        }

        var c = this.COLUMN_TYPE_STRING;
        i ? this.typeArray.push(this.COLUMN_TYPE_STRING) : n ? this.typeArray.push(this.COLUMN_TYPE_DOUBLE) : a ? this.typeArray.push(this.COLUMN_TYPE_INTEGER) : this.typeArray.push(c);
      }
    }
  }, t.VA.Core.Functions.Library.createTable.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_DATA_ARRAY = "data-array", this.PARAM_TYPE_ARRAY = "column-types", this.PARAM_COLUMN_NAMES = "column-names", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addDataArrayRule(), this.addTypeArrayRule(), this.addColumnNamesRule();
  }, e.prototype.addDataArrayRule = function () {
    this.addRule(function (t) {});
  }, e.prototype.addTypeArrayRule = function () {
    this.addRule(function (t) {});
  }, e.prototype.addColumnNamesRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: this.PARAM_COLUMN_NAMES,
        messageParam: ["Columns"]
      };
      if (t.isEmptyForArray(e.param[this.PARAM_COLUMN_NAMES])) return t.problemFactory.createProblem(o, e);
    });
  }, t.VA.Core.Functions.Library.createTable.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.dbReader = {
    category: "io",
    defaultFnUnit: {
      func: "dbReader",
      name: "Subflow",
      outData: [],
      param: {
        functions: [{
          fid: "",
          func: "dbReader",
          name: "InOutData",
          outData: [],
          param: {
            "io-mode": "read",
            "fs-type": "rdb",
            "datasource-name": [""],
            "df-names": [],
            sql: ["SELECT "],
            "fetch-size": ""
          }
        }],
        links: []
      },
      display: {
        label: "DB Reader",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Read data from database.",
    mandatory: ["fs-paths"],
    tags: ["Load", "DB Reader", "DB", "Reader", "unload", "hdfs"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.setContentsEditable(!1);
  }, e.prototype.getPrimaryOperation = function () {
    return "DBReader";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      PARAM_DATA_SOURCE: this.renderDataSource,
      PARAM_QUERY_STATEMENT: this.renderQueryStatement,
      PARAM_FETCH_SIZE: this.renderFetchSize
    }, this.createDataSourceControl(), this.createQueryStatementControl(), this.createFetchSizeControl();
  }, e.prototype.createDataSourceControl = function () {
    var t = this,
        e = new $.jqx.dataAdapter({
      datatype: "json",
      datafields: [{
        name: "datasourceName",
        type: "string"
      }, {
        name: "datasourceType",
        type: "string"
      }],
      url: "api/va/v2/datasources?type=RDB"
    }),
        o = this.addPropertyControl("Data Source", function (o) {
      t.$dataSourceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), o.append(t.$dataSourceControl), t.$dataSourceControl.on("bindingComplete", function (e) {
        t.setContentsEditable(!0);
      }), t.createDropDownList(t.$dataSourceControl, {
        source: e,
        displayMember: "datasourceName",
        valueMember: "datasourceName",
        placeHolder: "Select DataSource"
      }), t.$dataSourceControl.on("change", function (e) {
        var o = t.createSubflowCommand();
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "datasource-name", "DataSource", {
      type: "string",
      index: 0
    });
  }, e.prototype.createQueryStatementControl = function () {
    var e = this;
    this.addPropertyControl("Query Statement", function (o) {
      var r = $('<textarea class="brtc-va-editors-sheet-controls-sqlcontrol"></textarea>');
      o.append(r), e.sqlEditViewer = e.createTextAreaControl(r, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: "text/x-sql",
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), e.sqlEditViewer.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        new t.VA.Core.Dialogs.DBReaderSqlEditorDialog(e.$mainControl, {
          mode: "text/x-sql",
          additionalHint: e.hintList,
          fnUnit: e.options.fnUnit,
          statement: e.sqlEditViewer.codeMirror.getValue(),
          scriptType: "SQL Editor",
          scriptOnly: !0,
          close: function close(t) {
            if (t.OK) {
              e.redrawQueryStatement(t.queryStatement);
              var o = e.createSubflowCommand();
              e.executeCommand(o);
            }
          },
          title: "Query Statement"
        });
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.redrawQueryStatement = function (t) {
    this.sqlEditViewer.setValue(t), this.selectMarker = this.sqlEditViewer.codeMirror.markText({
      line: 0,
      ch: 0
    }, {
      line: 0,
      ch: 7
    }, {
      readOnly: !0,
      inclusiveLeft: !0,
      atomic: !0
    }), this.sqlEditViewer.codeMirror.setSize("100%", "300px");
  }, e.prototype.createResultSchemaControl = function () {
    var t = this;
    this.addPropertyControl("Result Schema", function (e) {
      t.$resultSchemaContainer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-container"></div>'), e.append(t.$resultSchemaContainer), t.$refreshSchemaButton = $('<input type="button" value="Refresh" style="width: 80px; margin-left: calc(100% - 80px)"/>'), t.$resultSchemaContainer.append(t.$refreshSchemaButton), t.createButton(t.$refreshSchemaButton, {
        height: 23
      }), t.$resultSchemaControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-grid"/>'), t.$resultSchemaContainer.append(t.$resultSchemaControl);
      var o = new $.jqx.dataAdapter({
        datatype: "json",
        datafields: [{
          name: "name"
        }, {
          name: "type"
        }]
      });
      t.createGrid(t.$resultSchemaControl, {
        height: 151,
        source: o,
        columns: [{
          text: "Name",
          datafield: "name",
          width: "50%"
        }, {
          text: "Type",
          datafield: "type",
          width: "50%"
        }]
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createFetchSizeControl = function () {
    var e = this;
    this.$fetchSizeControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>'), this.addPropertyControl("Fetch Size", function (o) {
      o.append(e.$fetchSizeControl), e.$fetchSize = e.createNumericInput(e.$fetchSizeControl, {
        numberType: "int",
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(10 <= value <= 50000)")
      }), e.$fetchSize.onChange(function () {
        var t = e.createSetParameterValueCommand("fetch-size", this.getValue());
        e.executeCommand(t);
      });
    });
  }, e.prototype.renderFetchSize = function () {
    var t = this.options.fnUnit.param["fetch-size"];
    this.$fetchSize.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderDataSource = function () {
    var t = this.options.fnUnit.param.functions[0].param["datasource-name"][0];
    t && this.$dataSourceControl.jqxDropDownList("val", t);
  }, e.prototype.renderQueryStatement = function () {
    var t = this.options.fnUnit.param.functions[0].param.sql[0];
    this.redrawQueryStatement(t);
  }, e.prototype.createSubflowCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          functions: [],
          links: [],
          entries: []
        }
      }
    };
    return e.ref.param.functions = $.extend(!0, [], this.options.fnUnit.param.functions), e.ref.param.functions[0].param["datasource-name"][0] = this.$dataSourceControl.jqxDropDownList("val"), e.ref.param.functions[0].param.sql[0] = this.sqlEditViewer.codeMirror.getValue(), e.ref.param.links = $.extend(!0, [], this.options.fnUnit.param.links), e.ref.param.functions && e.ref.param.functions.length > 0 && (e.ref.param.entries = [e.ref.param.functions[0].fid]), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.renderValidation = function () {}, t.VA.Core.Functions.Library.dbReader.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.defect = {
    category: "io",
    defaultFnUnit: {
      func: "defect",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "DEFECT",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "DEFECT",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "DEFECT load to make a model.",
    mandatory: [],
    tags: ["DEFECT"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.defectChip = {
    category: "io",
    defaultFnUnit: {
      func: "defectChip",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "DEFECT CHIP",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "DEFECT CHIP",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "DEFECT CHIP load to make a model.",
    mandatory: [],
    tags: ["DEFECT CHIP"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.edsChipBin = {
    category: "io",
    defaultFnUnit: {
      func: "edsChipBin",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "EDS CHIP BIN",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "EDS CHIP BIN",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "EDS Chip Bin load to make a model.",
    mandatory: [],
    tags: ["EDS Chip Bin", "eds chip bin", "EDS", "CHIP", "BIN", "edschipbin"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.edsChipMeasure = {
    category: "io",
    defaultFnUnit: {
      func: "edsChipMeasure",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "EDS CHIP MEASURE",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "EDS CHIP MEASURE",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "EDS Chip Measure load to make a model.",
    mandatory: [],
    tags: ["EDS CHIP MEASURE", "eds chip measure", "EDS", "CHIP", "MEASURE", "edschipmeasrue"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.edsWafer = {
    category: "io",
    defaultFnUnit: {
      func: "edsWafer",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "EDS WAFER",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "EDS WAFER",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "EDS Wafer load to make a model.",
    mandatory: [],
    tags: ["EDS WAFER", "eds wafer", "EDS", "WAFER", "wafer", "edswafer"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.edsWaferMsr = {
    category: "io",
    defaultFnUnit: {
      func: "edsWaferMsr",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "EDS WAFER MSR",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "EDS Wafer MSR",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "EDSWaferMSR load to make a model.",
    mandatory: [],
    tags: ["EDS", "Wafer", "MSR", "EDSWaferMSR", "EDS Wafer MSR"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.edsWaferQiBin = {
    category: "io",
    defaultFnUnit: {
      func: "edsWaferQiBin",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "EDS WAFER QI BIN",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "EDS Wafer QI BIN",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "EDSWaferQIBIN load to make a model.",
    mandatory: [],
    tags: ["EDS", "Wafer", "QI", "BIN", "EDSWaferQIBIN", "EDS Wafer QI BIN"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.edsZoneBin = {
    category: "io",
    defaultFnUnit: {
      func: "edsZoneBin",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "EDS ZONE BIN",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "EDS Zone BIN",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "EDSZoneBIN load to make a model.",
    mandatory: [],
    tags: ["EDS", "Zone", "BIN", "EDSZoneBIN", "EDS Zone BIN"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.ept = {
    category: "io",
    defaultFnUnit: {
      func: "ept",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "EPT",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "EPT",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "EPTData load to make a model.",
    mandatory: [],
    tags: ["EPT DATA", "EPT", "EPTDATA"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.erdTSum = {
    category: "io",
    defaultFnUnit: {
      func: "erdTSum",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "ERDTSUM",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "ERDTSUM",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "ERDTSUMData load to make a model.",
    mandatory: [],
    tags: ["ERDTSUM DATA", "ERDTSUM", "ERDTSUMDATA"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.exportColumn = {
    category: "io",
    defaultFnUnit: {
      func: "exportColumn",
      name: "ExportColumn",
      inData: [],
      outData: [],
      param: {
        key: "",
        column: ""
      },
      display: {
        label: "Use Column In Controlflow",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function creates a variable with column of the input data to allow controlflow to access data generated from dataflow.",
    mandatory: [],
    tags: ["controlflow", "Use Column In Controlflow"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      key: this.renderKeyControl,
      column: this.renderColumnControl
    }, this.$elements = {}, this.controls = {}, this.createKeyControl(), this.createColumnControl();
  }, e.prototype.createKeyControl = function (t) {
    var e = this;
    e.$elements.key = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Variable Name", function (t) {
      t.append(e.$elements.key);
      e.controls.key = e.createInput(e.$elements.key, {}), e.$elements.key.on("change", function (t) {
        var o = e.createSetParameterValueCommand("key", $(this).val());
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderKeyControl = function (t) {
    var e = this.options.fnUnit.param.key;
    this.$elements.key.val(e || "");
  }, e.prototype.createColumnControl = function (t) {
    var e = this;
    e.$elements.column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Column Name", function (t) {
      t.append(e.$elements.column);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("column", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls.column = e.createColumnList(e.$elements.column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnControl = function (t) {
    var e = this.options.fnUnit.param.column;
    this.controls.column.setSelectedItems([e]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["Integer", "Double", "String"]), this.controls.column.setItems(t);
  }, t.VA.Core.Functions.Library.exportColumn.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addKeyRule(), this.addColumnRule();
  }, o.prototype.addKeyRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "key",
        messageParam: ["Variable Name"]
      }, e, e.param.key);
    });
  }, o.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "column", e.param.column, "Column Name");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "column", e.param.column);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "column", e.param.column, ["Integer", "Double", "String"]);
    });
  }, t.VA.Core.Functions.Library.exportColumn.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.exportData = {
    category: "io",
    defaultFnUnit: {
      func: "exportData",
      name: "ExportData",
      param: {
        "copy-to": "alluxio",
        "is-delete": "true",
        "input-path": "",
        "output-path": ""
      },
      display: {
        label: "Export Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        }
      }
    },
    description: "This function is export csv file.",
    tags: ["Export Data", "Export", "Dowunload"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 0,
      max: 0
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.fabData = {
    category: "io",
    defaultFnUnit: {
      func: "fabData",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "FAB",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "FAB Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "FABData load to make a model.",
    mandatory: [],
    tags: ["FAB DATA", "FAB", "FABDATA"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.fabDcop = {
    category: "io",
    defaultFnUnit: {
      func: "fabDcop",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "FABDCOP",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "FAB Dcop",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "FABDcop load to make a model.",
    mandatory: [],
    tags: ["FAB DCOP", "DCOP", "FABDCOP", "LOT"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.fabmsr = {
    category: "io",
    defaultFnUnit: {
      func: "fabmsr",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "FABMSR",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "FABMSR",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "FABMSR load to make a model.",
    mandatory: [],
    tags: ["FAB MSR", "FAB", "FABMSR"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.fabmsrOverayShot = {
    category: "io",
    defaultFnUnit: {
      func: "fabmsrOverayShot",
      name: "DistributedJdbcLoader",
      outData: [],
      param: {
        sql: "",
        site: "",
        datasource: "FABMSR OVERRAY SHOT",
        by: ""
      },
      etlparam: {
        site: "",
        line: [],
        condition: {},
        from: moment().add(-1, "months").format("YYYY-MM-DD HH:mm:ss"),
        to: moment().format("YYYY-MM-DD HH:mm:ss")
      },
      display: {
        label: "FABMSR Overay Shot",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "FABMSROverayShot load to make a model.",
    mandatory: [],
    tags: ["FABMSR OVERAY SHOT", "OVERAY SHOT", "FABMSROVERAYSHOT"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.load = {
    category: "io",
    defaultFnUnit: {
      func: "load",
      name: "Subflow",
      outData: [],
      param: {
        functions: [{
          fid: "",
          func: "load",
          name: "InOutData",
          outData: [],
          param: {
            "io-mode": "read",
            "fs-type": "alluxiocsv",
            "df-names": [],
            "fs-paths": []
          }
        }],
        links: []
      },
      display: {
        label: "Load",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Load data from repository.",
    mandatory: ["fs-paths"],
    tags: ["Load", "unload", "hdfs"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    },
    "acceptable-functions": ["import"]
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;
  var e = {
    "array-delimiter": "",
    "key-value-delimiter": "",
    "array-start-string": "[",
    "array-end-string": "]",
    "map-start-string": "{",
    "map-end-string": "}"
  };

  function o(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  o.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), o.prototype.constructor = o, o.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.renderFlag = !0, this.fillFilePathList(), Studio.getInstance().doValidate(this.options.fnUnit.parent()), this.options.isRendered = !0;
  }, o.prototype.setContentsEditable = function (t) {}, o.prototype.getPrimaryOperation = function () {
    return "Load";
  }, o.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e);
    var o = t.VA.Core.Utils.IDGenerator.func.id();
    this.functionsArray = [], this.linksArray = [], this.numberColumnsArray = [], this.stringColumnsArray = [], this.loadFunction = $.extend(!0, {}, this.options.fnUnit.param.functions[0]), this.functionsArray[0] = this.loadFunction, this.loadFunction.fid = "" != this.options.fnUnit.param.functions[0].fid ? this.options.fnUnit.param.functions[0].fid : o, this.loadFunction[OUT_DATA] = this.options.fnUnit[OUT_DATA], this.loadFunction.param["df-names"] = this.options.fnUnit[OUT_DATA], this.numericTypes = ["smallint", "integer", "bigint", "decimal", "numeric", "real", "double", "float", "number", "int"], this.stringTypes = ["character", "char", "text", "string", "varchar"], this.PARAM_RANDOM_SAMPLING = {
      method: "fraction",
      value: "1",
      replacement: "false"
    }, this.PARAM_REMOVE_LINE = {
      columns: [[]],
      "abnormal-string": "",
      "abnormal-number": "Null"
    }, this.PARAM_NUMBER_TYPE_FILL_COLUMN = {
      columns: [[]],
      "abnormal-number": "Null",
      "fill-method": "to",
      "fill-number": "0"
    }, this.PARAM_STRING_TYPE_FILL_COLUMN = {
      columns: [[]],
      "abnormal-string": "",
      "fill-string": ""
    }, this.FUNC_LOAD = "load", this.FUNC_RANDOM_SAMPLING = "randomSampling", this.FUNC_REMOVE_LINE = "imputeRemoveLine", this.FUNC_STRING_TYPE_FILL_COLUMN = "imputeStringTypeFillColumn", this.FUNC_NUMBER_TYPE_FILL_COLUMN = "imputeNumberTypeFillColumn", this.PARAM_FS_PATHS = "fs-paths", this.PARAM_ARRAY_DELIMITER = "array-delimiter", this.PARAM_KEY_VALUE_DELIMITER = "key-value-delimiter", this.PARAM_ABNORMAL_NUMBER = "abnormal-number", this.PARAM_ABNORMAL_STRING = "abnormal-string", this.PARAM_FILL_NUMBER = "fill-number", this.PARAM_FILL_STRING = "fill-string", this.PARAM_REPLACEMENT = "replacement", this.createInputControl(), this.createAdvancedButtonControl(), this.createRandomSamplingControl(), this.createImputeNumberControl(), this.createImputeStringControl();
  }, o.prototype.renderValues = function (t) {
    if (this.renderFlag = !0, t) {
      t.old.param.functions[0].param[this.PARAM_FS_PATHS][0];
      this.options.fnUnit.param.functions[0].param && this.options.fnUnit.param.functions[0].param[this.PARAM_FS_PATHS].length ? this.renderInput(this.options.fnUnit.param.functions[0].param[this.PARAM_FS_PATHS]) : (this.$dropDownListControl.val(""), this.$gridControl && this.$gridControl.remove(), this.renderSubflow()), this.options.fnUnit.param.functions[0].param && void 0 !== this.options.fnUnit.param.functions[0].param[this.PARAM_ARRAY_DELIMITER] && this.renderArrayDelimiter(this.options.fnUnit.param.functions[0].param[this.PARAM_ARRAY_DELIMITER]), this.options.fnUnit.param.functions[0].param && void 0 !== this.options.fnUnit.param.functions[0].param[this.PARAM_KEY_VALUE_DELIMITER] && this.renderKeyValueDelimiter(this.options.fnUnit.param.functions[0].param[this.PARAM_KEY_VALUE_DELIMITER]);
    }
  }, o.prototype.fillFilePathList = function () {
    this.options.fnUnit.param.functions[0].param && this.options.fnUnit.param.functions[0].param[this.PARAM_FS_PATHS].length ? this.renderInput(this.options.fnUnit.param.functions[0].param[this.PARAM_FS_PATHS]) : this.renderSubflow();
  }, o.prototype.fillDelimiterControls = function () {}, o.prototype.createInputControl = function () {
    var e = this,
        o = this.addPropertyControl("Input Path", function (o) {
      e.$dropDownListControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input-readonly"/>'), e.createInput(this.$dropDownListControl, {
        placeHolder: "+ Setting Input Path"
      }, "brtc-va-editors-sheet-controls-margin-bottom"), this.$dropDownListControl.prop("readonly", !0), o.append(this.$dropDownListControl.parent()), e.$dropDownListControl.click(function () {
        new t.VA.Core.Dialogs.RepositoryBrowserDialog(e.$mainControl, {
          filePath: e.$dropDownListControl.val(),
          open: function open() {
            $(".ui-dialog-titlebar.ui-widget-header", $(this).parent()).css("margin-left", "30px !important");
          },
          close: function close(t) {
            t.OK && t.selectedFile && e.renderInput([t.selectedFile]);
          },
          resizable: !1,
          title: "Setting Input Path"
        });
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "fs-paths", "Input Path", {
      type: "array",
      index: 0
    });
  }, o.prototype.setAdvancedButtonStyle = function (t) {
    var o = !1,
        r = t;

    for (var n in r) {
      if (void 0 === r[n]) {
        o = !1;
        break;
      }

      if ("" != r[n] && r[n] != e[n]) {
        o = !0;
        break;
      }
    }

    o ? (this.$advancedSettingButton.addClass("modified"), this.$advancedSettingButton.val("Modified Settings")) : (this.$advancedSettingButton.removeClass("modified"), this.$advancedSettingButton.val("Default Settings"));
  }, o.prototype.createAdvancedButtonControl = function () {
    var o = this,
        r = this.addPropertyControl("Advanced Setting", function (r) {
      o.$advancedSettingButton = $('<input class="brtc-va-editors-sheet-panels-properties-button" type="button" value="Default Settings"/>'), r.append(o.$advancedSettingButton), o.$advancedSettingButton.jqxButton({
        theme: t.VA.Env.Theme,
        width: "100%",
        height: 25
      }), o.$advancedSettingButton.click(function () {
        var r = $.extend(!0, {}, o.options.fnUnit.param.functions[0].param);
        new t.VA.Core.Dialogs.AdvancedLoadSettingDialog(o.$mainControl, {
          delimiters: r,
          defaultDelimiter: e,
          close: function close(t) {
            if (t.OK && t.delimiters) {
              o.setAdvancedButtonStyle(t.delimiters);
              var e = o.createAdvancedSettingCommand(t.delimiters);
              o.executeCommand(e);
            }
          },
          title: "Advanced Load Setting"
        });
      });
    }),
        n = this.options.fnUnit.param.functions[0].param,
        a = {
      "array-delimiter": n["array-delimiter"],
      "array-end-string": n["array-end-string"],
      "array-start-string": n["array-start-string"],
      "key-value-delimiter": n["key-value-delimiter"],
      "map-end-string": n["map-end-string"],
      "map-start-string": n["map-start-string"]
    };
    this.setAdvancedButtonStyle(a), r.css("display", "none");
  }, o.prototype.createRandomSamplingControl = function () {
    var t = this;
    this.addPropertyControl("Random Sampling", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol-percent"/>');
      e.append(o);
      t.$numberInput = this.createNumericInput(o, {
        numberType: "double",
        minus: !1,
        placeholder: "Enter value",
        min: .01,
        max: 100,
        mandatory: !0
      }, "brtc-va-editors-sheet-controls-propertycontrol-filter-number-input"), this.$numberInput.setValue(100), t.$numberInput.onChange(function (e) {
        if (!t.renderFlag) {
          t.setReplacementControlShowHide(t.$numberInput.getValue());
          var o = t.createRandomSamplingCommand();
          t.executeCommand(o);
        }
      }), this.$replacementControl = $('<div class="brtc-va-editors-sheet-controls-radio-group" style="margin-top: 8px">Replacement</div>'), o.append(t.$replacementControl), t.createRadioButtonControl(t.$replacementControl, "True", t.PARAM_REPLACEMENT), t.createRadioButtonControl(t.$replacementControl, "False", t.PARAM_REPLACEMENT), t.setReplacementControlShowHide(t.$numberInput.getValue());
    });
  }, o.prototype.createImputeNumberControl = function () {
    var t = this;
    this.$imputeNumberControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.$numberColumnsWidget = $('<div class="brtc-va-editors-sheet-controls-columnlist"/>'), this.addPropertyControl("Impute for Number", function (e) {
      e.append(t.$numberColumnsWidget);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed() {
          if (!t.renderFlag) {
            var e = t.createImputeCommand();
            t.executeCommand(e);
          }
        }
      };
      t.$numberColumnsControl = t.createColumnList(t.$numberColumnsWidget, o), e.append(t.$imputeNumberControl), t.createRadioButtonControl(t.$imputeNumberControl, "Delete row that has null", "imputeNumber"), t.createRadioButtonControl(t.$imputeNumberControl, "", "imputeNumber"), t.createNumberInputControl(t.$imputeNumberControl, "imputeNumber");
    });
  }, o.prototype.createImputeStringControl = function () {
    var t = this;
    this.$imputeStringControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.$stringColumnsWidget = $('<div class="brtc-va-editors-sheet-controls-columnlist"/>'), this.addPropertyControl("Impute for String", function (e) {
      e.append(t.$stringColumnsWidget);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed() {
          if (!t.renderFlag) {
            var e = t.createImputeCommand();
            t.executeCommand(e);
          }
        }
      };
      t.$stringColumnsControl = t.createColumnList(t.$stringColumnsWidget, o), e.append(t.$imputeStringControl), t.createRadioButtonControl(t.$imputeStringControl, "Delete row that is empty", "imputeString"), t.createRadioButtonControl(t.$imputeStringControl, "", "imputeString"), t.createStringInputControl(t.$imputeStringControl, "imputeString");
    });
  }, o.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    var a = "";
    a = "" === e ? "brtc-va-editors-sheet-controls-width-1" : "brtc-va-editors-sheet-controls-width-12", this.createRadioButton(n, {
      groupName: o
    }, a), n.attr("value", e), t[e] = n, "Delete row that has null" != e && "Delete row that is empty" != e || n.jqxRadioButton("check"), o == this.PARAM_REPLACEMENT && "False" == e && n.jqxRadioButton("check"), n.on("checked", function (e) {
      var n,
          a = $(e.target).attr("value"),
          i = !1;
      "imputeNumber" === o ? (i = "" !== a, r.renderFlag || (n = r.createImputeCommand()), t[o].setDisabled(i)) : "imputeString" === o ? (i = "" !== a, r.renderFlag || (n = r.createImputeCommand()), t[o].jqxInput({
        disabled: i
      })) : o === r.PARAM_REPLACEMENT && (r.renderFlag || (n = r.createReplacementCommand())), r.renderFlag || r.executeCommand(n);
    });
  }, o.prototype.createNumberInputControl = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol-wrapper"><div style="font-family: Calibri; font-size: 13px; float: left; margin-left: 5px; margin-right: 5px; line-height: 25px">Replace</div><div class="brtc-va-editors-sheet-controls-numberinputcontrol"/><div style="font-family: Calibri; font-size: 13px; float: left; margin-left: 5px; line-height: 25px">that is null</div></div>'),
        n = r.find(".brtc-va-editors-sheet-controls-numberinputcontrol");
    t.append(r);
    var a = "";
    "imputeNumber" === e && (a = "brtc-va-editors-sheet-controls-width-5");
    var i = o.createNumericInput(n, {
      numberType: "double",
      min: void 0,
      max: void 0,
      minus: !0,
      placeholder: "Enter value"
    }, a);
    1 == $(this.$imputeNumberControl["Delete row that has null"]).jqxRadioButton("checked") && i.setDisabled(!0), i.onChange(function (t) {
      var r;
      "imputeNumber" === e && (o.renderFlag || (r = o.createImputeCommand())), o.renderFlag || o.executeCommand(r);
    }), t[e] = i;
  }, o.prototype.createStringInputControl = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-stringinputcontrol-wrapper"><div style="font-family: Calibri; font-size: 13px; float: left; margin-left: 5px; margin-right: 5px; line-height: 25px">Replace</div><input type="text" class="brtc-va-editors-sheet-controls-stringinputcontrol"/><div style="font-family: Calibri; font-size: 13px; float: left; margin-left: 5px; line-height: 25px">that is empty</div></div>'),
        n = r.find(".brtc-va-editors-sheet-controls-stringinputcontrol");
    t.append(r);
    var a = "";
    "imputeString" === e && (a = "brtc-va-editors-sheet-controls-width-5"), o.createInput(n, {
      height: "23px",
      placeHolder: "Enter value"
    }, a), 1 == $(this.$imputeStringControl["Delete row that is empty"]).jqxRadioButton("checked") && (n[0].disabled = !0), n.on("change", function (t) {
      var r,
          a = !0;

      if ("imputeString" === e) {
        n.val();
        o.renderFlag || (r = o.createImputeCommand()), r && (a = o.isInputValueChanged($(this).val()));
      }

      !o.renderFlag && a && o.executeCommand(r);
    }), t[e] = n;
  }, o.prototype.isInputValueChanged = function (t) {
    var e = !0,
        o = {};

    for (var r in this.options.fnUnit.param.functions) {
      if ("imputeStringTypeFillColumn" === this.options.fnUnit.param.functions[r].func) {
        o = this.options.fnUnit.param.functions[r];
        break;
      }
    }

    return o.param["fill-string"] === t && (e = !1), e;
  }, o.prototype.createGridControl = function (t) {
    this.$gridControl && this.$gridControl.remove(), this.$gridControl = $('<div class="brtc-va-editors-sheet-controls-margin-bottom" style="margin: 2px">Columns</div>'), this.$grid = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-grid"></div>'), this.$gridControl.append(this.$grid), t.append(this.$gridControl);
    var e = {
      datatype: "json",
      datafields: [{
        name: "name"
      }, {
        name: "internalType"
      }],
      localdata: this.columns.map(function (t) {
        return Object.assign({}, t, {
          name: _.escape(t.name)
        });
      })
    },
        o = new $.jqx.dataAdapter(e);
    this.createGrid(this.$grid, {
      height: 151,
      source: o,
      columns: [{
        text: "name",
        datafield: "name",
        width: "50%"
      }, {
        text: "type",
        datafield: "internalType",
        width: "50%"
      }]
    }), this.columns.length < 5 && this.$grid.jqxGrid({
      autoheight: !0
    });
  }, o.prototype.renderSubflow = function () {
    this.renderFlag = !0;
    var t;

    if (this.options.fnUnit.param.functions[0].param) {
      var e, o, r;

      for (t in this.functionsArray = $.extend(!0, [], this.options.fnUnit.param.functions), this.linksArray = $.extend(!0, [], this.options.fnUnit.param.links), this.functionsArray) {
        this.functionsArray[t].func == this.FUNC_RANDOM_SAMPLING && (e = !0), this.functionsArray[t].func == this.FUNC_NUMBER_TYPE_FILL_COLUMN && (o = !0), this.functionsArray[t].func == this.FUNC_STRING_TYPE_FILL_COLUMN && (r = !0), this.functionsArray[t].func == this.FUNC_REMOVE_LINE && (o = !0, r = !0);
      }

      for (t in e || this.renderRandomSamplingControl(100), o || this.renderImputeNumberColumnsControl([]), r || this.renderImputeStringColumnsControl([]), this.functionsArray) {
        if (this.functionsArray[t].func == this.FUNC_RANDOM_SAMPLING) {
          var n = this.getDecimalLength();
          this.renderRandomSamplingControl(Number((100 * this.functionsArray[t].param.value).toFixed(n))), this.renderReplacementControl(this.functionsArray[t].param[this.PARAM_REPLACEMENT]);
        }

        if (this.functionsArray[t].func == this.FUNC_REMOVE_LINE) {
          var a,
              i,
              s = [],
              l = [];
          a = this.functionsArray[t].param.columns[0] || [], this.PARAM_REMOVE_LINE.columns[0] = a, i = $.map(this.numberColumnsArray, function (t) {
            for (var e = 0; e < a.length; e++) {
              if (t.name == a[e]) return t.name;
            }
          }), s = $.map(this.stringColumnsArray, function (t) {
            for (var e = 0; e < a.length; e++) {
              if (t.name == a[e]) return t.name;
            }
          }), i.length && (this.renderImputeNumberColumnsControl(i), this.renderImputeStringColumnsControl(s), this.renderImputeNumberControl("", !0)), s.length && (this.renderImputeStringColumnsControl(s), this.renderImputeNumberColumnsControl(i), this.renderImputeStringControl("", !0)), i.length + s.length != a.length && (l = $.map(a, function (t) {
            if (-1 == s.indexOf(t)) return t;
          }), this.renderImputeNumberColumnsControl(l), this.renderImputeStringColumnsControl(s));
        }

        this.functionsArray[t].func == this.FUNC_NUMBER_TYPE_FILL_COLUMN && (this.renderImputeNumberColumnsControl(this.functionsArray[t].param.columns[0]), this.renderImputeNumberControl(this.functionsArray[t].param[this.PARAM_FILL_NUMBER], !1), this.PARAM_NUMBER_TYPE_FILL_COLUMN.columns[0] = this.functionsArray[t].param.columns[0]), this.functionsArray[t].func == this.FUNC_STRING_TYPE_FILL_COLUMN && (this.renderImputeStringColumnsControl(this.functionsArray[t].param.columns[0]), this.renderImputeStringControl(this.functionsArray[t].param[this.PARAM_FILL_STRING], !1), this.PARAM_STRING_TYPE_FILL_COLUMN.columns[0] = this.functionsArray[t].param.columns[0]);
      }
    }

    this.renderFlag = !1;
  }, o.prototype.renderInput = function (t) {
    if (t.length > 0) {
      if (this.$dropDownListControl.val(t[0]), this.$dropDownListControl.attr("title", t[0]), this.loadFunction.param["fs-paths"] = t, this.renderInputSchema(t[0]), this.renderSubflow(), !this.renderFlag) {
        var e = this.createInputCommand();
        this.executeCommand(e);
      }
    } else this.$dropDownListControl.val("");
  }, o.prototype.renderArrayDelimiter = function (t) {
    t === UNICODE_2 ? this.$arrayDelimiterControl.val("") : this.$arrayDelimiterControl.val(t);
  }, o.prototype.renderKeyValueDelimiter = function (t) {
    t === UNICODE_3 ? this.$keyValueDelimiterControl.val("") : this.$keyValueDelimiterControl.val(t);
  }, o.prototype.renderInputSchema = function (e) {
    var o = this;
    this._showProgress(), t.VA.RepositoryQueryTemplate.schema(e).done(function (t) {
      o.columns = t.columns, $.each(o.columns, function (t, e) {
        void 0 === e.type ? e.type = e.internalType : e.type = e.type;
      }), o.setColumns(o.columns), o.createGridControl(o.$dropDownListControl.parent().parent()), o.renderSubflow(), o._hideProgress();
    }).fail(function (t) {
      o._hideProgress(), o.columns = [], o.setColumns(o.columns), o.createGridControl(o.$dropDownListControl.parent().parent()), o.renderSubflow(), o._hideProgress();
    });
  }, o.prototype.renderRandomSamplingControl = function (t) {
    this.$numberInput.setValue(t), this.PARAM_RANDOM_SAMPLING.value = t / 100;
  }, o.prototype.renderReplacementControl = function (t) {
    var e;
    e = "true" === t ? "True" : "False", $(this.$replacementControl[e]).jqxRadioButton({
      checked: !0
    }), this.setReplacementControlShowHide(this.$numberInput.getValue());
  }, o.prototype.renderImputeNumberControl = function (t, e) {
    var o = this.$imputeNumberControl.imputeNumber;
    e ? ($(this.$imputeNumberControl["Delete row that has null"]).jqxRadioButton({
      checked: !0
    }), o.setDisabled(!0)) : ($(this.$imputeNumberControl[""]).jqxRadioButton({
      checked: !0
    }), o.setDisabled(!1), o.setValue(t), this.PARAM_NUMBER_TYPE_FILL_COLUMN["fill-number"] = t);
  }, o.prototype.renderImputeStringControl = function (t, e) {
    var o = this.$imputeStringControl.imputeString;
    e ? ($(this.$imputeStringControl["Delete row that is empty"]).jqxRadioButton({
      checked: !0
    }), o.jqxInput({
      disabled: !0
    })) : ($(this.$imputeStringControl[""]).jqxRadioButton({
      checked: !0
    }), o.jqxInput({
      disabled: !1
    }), o.val(t), this.PARAM_STRING_TYPE_FILL_COLUMN["fill-string"] = t);
  }, o.prototype.renderImputeNumberColumnsControl = function (t) {
    this.$numberColumnsControl.setSelectedItems(t);
  }, o.prototype.renderImputeStringColumnsControl = function (t) {
    this.$stringColumnsControl.setSelectedItems(t);
  }, o.prototype.createNewSubFunctionParam = function () {
    if (!this.renderFlag) {
      this.functionsArray = [], this.functionsArray[0] = this.loadFunction, this.linksArray = [];
      var t = this.getImputeMethod();

      for (var e in t) {
        "randomSampling" == t[e] ? this.createRandomSampling() : "removeLine" == t[e] ? this.createRemoveLine() : "deleteString" == t[e] ? this.createRemoveLine() : "deleteNumber" == t[e] ? this.createRemoveLine() : "replaceString" == t[e] ? this.createImputeString() : "replaceNumber" == t[e] && this.createImputeNumber();
      }
    }
  }, o.prototype.getImputeMethod = function () {
    var t, e, o, r, n, a, i, s;

    if (this.renderFlag) {
      var l = this.options.fnUnit.param.functions;

      for (var c in l) {
        l[c].func == this.FUNC_REMOVE_LINE && (t = l[c].param.columns[0], e = $.map(this.numberColumnsArray, function (e) {
          for (var o = 0; o < t.length; o++) {
            if (e.name == t[o]) return e.name;
          }
        }), o = $.map(this.stringColumnsArray, function (e) {
          for (var o = 0; o < t.length; o++) {
            if (e.name == t[o]) return e.name;
          }
        }), (r = e.length) && (a = !0), (n = o.length) && (i = !0)), this.functionsArray[c].func == this.FUNC_NUMBER_TYPE_FILL_COLUMN && (r = (e = l[c].param.columns[0]).length, a = !1), this.functionsArray[c].func == this.FUNC_STRING_TYPE_FILL_COLUMN && (n = (o = l[c].param.columns[0]).length, i = !1), this.functionsArray[c].func == this.FUNC_RANDOM_SAMPLING && (s = !0);
      }
    } else e = this.$numberColumnsControl.getSelectedItems(), o = this.$stringColumnsControl.getSelectedItems(), r = e.length, n = o.length, a = $(this.$imputeNumberControl.find(".brtc-va-editors-sheet-controls-radiocontrol")[0]).jqxRadioButton("val"), i = $(this.$imputeStringControl.find(".brtc-va-editors-sheet-controls-radiocontrol")[0]).jqxRadioButton("val"), 100 != this.$numberInput.getValue() && (s = !0);

    var p = [];
    return !r && !n && a && i ? (p.push("load"), s && p.push("randomSampling")) : (s && p.push("randomSampling"), r || n ? !r && n && a ? i ? p.push("deleteString") : p.push("replaceString") : r && !n && i ? a ? p.push("deleteNumber") : p.push("replaceNumber") : a && i ? p.push("removeLine") : !a && i ? p.push("deleteString", "replaceNumber") : a && !i ? p.push("deleteNumber", "replaceString") : p.push("replaceString", "replaceNumber") : (a || p.push("replaceNumber"), i || p.push("replaceString"))), p;
  }, o.prototype.createRandomSampling = function () {
    var e = this.functionsArray[this.functionsArray.length - 1],
        o = {
      fid: t.VA.Core.Utils.IDGenerator.func.id(),
      func: "randomSampling",
      name: "RandomSampling",
      inData: this.options.fnUnit[OUT_DATA],
      outData: this.options.fnUnit[OUT_DATA],
      param: this.PARAM_RANDOM_SAMPLING
    };
    this.functionsArray.push(o), this.createNewLinkParam(e.fid, o.fid);
  }, o.prototype.createRemoveLine = function () {
    var e = this.functionsArray[this.functionsArray.length - 1],
        o = {
      fid: t.VA.Core.Utils.IDGenerator.func.id(),
      func: "imputeRemoveLine",
      name: "ImputeRemoveLine",
      inData: this.options.fnUnit[OUT_DATA],
      outData: this.options.fnUnit[OUT_DATA],
      param: this.PARAM_REMOVE_LINE
    };
    this.functionsArray.push(o), this.createNewLinkParam(e.fid, o.fid);
  }, o.prototype.createImputeNumber = function () {
    var e = this.functionsArray[this.functionsArray.length - 1],
        o = {
      fid: t.VA.Core.Utils.IDGenerator.func.id(),
      func: "imputeNumberTypeFillColumn",
      name: "ImputeNumberTypeFillColumn",
      inData: this.options.fnUnit[OUT_DATA],
      outData: this.options.fnUnit[OUT_DATA],
      param: this.PARAM_NUMBER_TYPE_FILL_COLUMN
    };
    this.functionsArray.push(o), this.createNewLinkParam(e.fid, o.fid);
  }, o.prototype.createImputeString = function () {
    var e = this.functionsArray[this.functionsArray.length - 1],
        o = {
      fid: t.VA.Core.Utils.IDGenerator.func.id(),
      func: "imputeStringTypeFillColumn",
      name: "ImputeStringTypeFillColumn",
      inData: this.options.fnUnit[OUT_DATA],
      outData: this.options.fnUnit[OUT_DATA],
      param: this.PARAM_STRING_TYPE_FILL_COLUMN
    };
    this.functionsArray.push(o), this.createNewLinkParam(e.fid, o.fid);
  }, o.prototype.createNewLinkParam = function (e, o) {
    var r = {
      kid: t.VA.Core.Utils.IDGenerator.link.id(),
      sourceFid: e,
      targetFid: o
    };
    this.linksArray.push(r);
  }, o.prototype.createSubflowCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          functions: $.extend(!0, [], this.functionsArray),
          links: $.extend(!0, [], this.linksArray)
        }
      }
    };

    if (e.ref.param.functions && e.ref.param.functions.length > 0) {
      e.ref.param.entries = [e.ref.param.functions[0].fid];
      var o = e.ref.param.functions,
          r = e.ref.param.links;

      for (var n in e.ref.param.functions) {
        if ("RandomSampling" == o[n][FUNCTION_NAME] && n != o.length - 1) {
          var a = o[o.length - 1];
          o[o.length - 1] = o[n], o[n] = a, r[n - 1][TARGET_FID] = o[n].fid, r[n][SOURCE_FID] = o[n].fid, r[r.length - 1][TARGET_FID] = o[o.length - 1].fid;
          break;
        }
      }
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, o.prototype.createInputCommand = function () {
    this.createNewSubFunctionParam();
    var t = this.$dropDownListControl.val();
    return this.functionsArray[0].param[this.PARAM_FS_PATHS] = [t], this.loadFunction.param["fs-paths"] = [t], this.createSubflowCommand();
  }, o.prototype.createLoadCommonCommand = function (t, e) {
    return this.createNewSubFunctionParam(), this.loadFunction.param[t] = e, this.createSubflowCommand();
  }, o.prototype.createAdvancedSettingCommand = function (t) {
    for (var o in this.createNewSubFunctionParam(), t) {
      this.loadFunction.param[o] = "" === t[o] ? e[o] : t[o];
    }

    return this.createSubflowCommand();
  }, o.prototype.createRandomSamplingCommand = function (t) {
    var e, o;
    this.createNewSubFunctionParam();

    for (var r = 1; r < this.functionsArray.length; r++) {
      this.functionsArray[r].func == this.FUNC_RANDOM_SAMPLING && (e = r);
      break;
    }

    var n = this.getDecimalLength();

    if (this.$numberInput.getValue().split(".")[1]) {
      var a = Number(this.$numberInput.getValue()).toFixed(n);
      this.$numberInput.setValue(Number(a));
    }

    (o = Number((this.$numberInput.getValue() / 100).toFixed(n + 2)), e) && (this.functionsArray[e].param.value = t ? (t / 100).toString() : o.toString(), this.PARAM_RANDOM_SAMPLING.value = t ? (t / 100).toString() : o.toString());
    return this.createSubflowCommand();
  }, o.prototype.createReplacementCommand = function () {
    var t;
    this.createNewSubFunctionParam();

    for (var e = 1; e < this.functionsArray.length; e++) {
      this.functionsArray[e].func == this.FUNC_RANDOM_SAMPLING && (t = e);
      break;
    }

    if (t) {
      var o = this.functionsArray[t],
          r = this.getReplacementValue();
      o.param[this.PARAM_REPLACEMENT] = r, this.PARAM_RANDOM_SAMPLING[this.PARAM_REPLACEMENT] = r;
    }

    return this.createSubflowCommand();
  }, o.prototype.createImputeCommand = function () {
    this.createNewSubFunctionParam();

    for (var t, e, o, r = this.getImputeMethod(), n = 1; n < this.functionsArray.length; n++) {
      this.functionsArray[n].func == this.FUNC_REMOVE_LINE && (t = n), this.functionsArray[n].func == this.FUNC_NUMBER_TYPE_FILL_COLUMN && (e = n), this.functionsArray[n].func == this.FUNC_STRING_TYPE_FILL_COLUMN && (o = n);
    }

    for (var a in r) {
      var i;
      if ("removeLine" == r[a]) (i = this.functionsArray[t]).param.columns[0] = this.$stringColumnsControl.getSelectedItems().concat(this.$numberColumnsControl.getSelectedItems()), this.PARAM_REMOVE_LINE.columns[0] = this.$stringColumnsControl.getSelectedItems().concat(this.$numberColumnsControl.getSelectedItems());else if ("deleteString" == r[a]) (i = this.functionsArray[t]).param.columns[0] = this.$stringColumnsControl.getSelectedItems(), this.PARAM_REMOVE_LINE.columns[0] = this.$stringColumnsControl.getSelectedItems();else if ("deleteNumber" == r[a]) (i = this.functionsArray[t]).param.columns[0] = this.$numberColumnsControl.getSelectedItems(), this.PARAM_REMOVE_LINE.columns[0] = this.$numberColumnsControl.getSelectedItems();else if ("replaceString" == r[a]) {
        var s;
        i = this.functionsArray[o], s = this.$imputeStringControl.imputeString.val(), i.param[this.PARAM_FILL_STRING] = s, i.param.columns[0] = this.$stringColumnsControl.getSelectedItems(), this.PARAM_STRING_TYPE_FILL_COLUMN.columns[0] = this.$stringColumnsControl.getSelectedItems();
      } else if ("replaceNumber" == r[a]) {
        var l;
        i = this.functionsArray[e], l = this.$imputeNumberControl.imputeNumber.getValue(), i.param[this.PARAM_FILL_NUMBER] = l.toString(), i.param.columns[0] = this.$numberColumnsControl.getSelectedItems(), this.PARAM_NUMBER_TYPE_FILL_COLUMN.columns[0] = this.$numberColumnsControl.getSelectedItems();
      }
    }

    return this.createSubflowCommand();
  }, o.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_FS_PATHS ? this.showValidation(this.$dropDownListControl.parent(), this.problems[t]) : "column" === this.problems[t].param ? this.showValidation(this.$numberColumnsWidget, this.problems[t]) : "fill-number" === this.problems[t].param ? (this.showValidation(this.$imputeNumberControl, this.problems[t]), this.$imputeNumberControl.find(".brtc-va-editors-sheet-panels-validation-tooltip").css("float", "left")) : "fill-string" === this.problems[t].param ? (this.showValidation(this.$imputeStringControl, this.problems[t]), this.$imputeStringControl.find(".brtc-va-editors-sheet-panels-validation-tooltip").css("float", "left")) : "number-columns" === this.problems[t].param ? this.showValidation(this.$numberColumnsWidget, this.problems[t]) : "string-columns" === this.problems[t].param && this.showValidation(this.$stringColumnsWidget, this.problems[t]);
    }
  }, o.prototype.setColumns = function (t) {
    var e = this;
    this.numberColumnsArray = [], this.stringColumnsArray = [], $.each(t, function (t, o) {
      o.type && (-1 !== $.inArray(o.type.trim().toLowerCase(), e.numericTypes) ? e.numberColumnsArray.push({
        type: o.internalType,
        name: o.name
      }) : -1 !== $.inArray(o.type.trim().toLowerCase(), e.stringTypes) && e.stringColumnsArray.push({
        type: o.internalType,
        name: o.name
      }));
    }), e.$numberColumnsControl.setItems(e.numberColumnsArray), e.$stringColumnsControl.setItems(e.stringColumnsArray);
  }, o.prototype._hideProgress = function () {
    this.$parent.find(".brtc-va-progress").hide();
  }, o.prototype._showProgress = function () {
    this.$parent.find(".brtc-va-progress").show();
  }, o.prototype.getDecimalLength = function () {
    return this.$numberInput.options.min.toString().split(".")[1] ? this.$numberInput.options.min.toString().split(".")[1].length : 0;
  }, o.prototype.getReplacementValue = function () {
    var t = "false",
        e = this.$replacementControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(e, function (e, o) {
      if ($(o).jqxRadioButton("val") && "" !== $(o).attr("value")) return t = $(o).attr("value"), !1;
    }), "True" === t ? t = "true" : "False" === t && (t = "false"), t;
  }, o.prototype.setReplacementControlShowHide = function (t) {
    100 != t ? this.$replacementControl.show() : (this.$replacementControl.hide(), "true" == this.getReplacementValue() && $(this.$replacementControl.False).jqxRadioButton({
      checked: !0
    }));
  }, t.VA.Core.Functions.Library.load.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addRule(this.tableRule), this.addRule(this.addCheckColumnInTable), this.addRule(this.replaceNumberRule), this.addRule(this.replaceStringRule);
  }, e.prototype.tableRule = function (t) {
    return !t.param.functions[0].param || this.isEmptyForArray(t.param.functions[0].param["fs-paths"]) ? this.problemFactory.createProblem({
      errorCode: "BR-0033",
      param: "fs-paths",
      messageParam: ["Input Path"]
    }, t) : this.addCheckTableInServer(t);
  }, e.prototype.addCheckTableInServer = function (e) {
    var o = "";
    o = e.param.functions[0].param["fs-paths"][0] && e.param.functions[0].param["fs-paths"][0].constructor == Array ? e.param.functions[0].param["fs-paths"][0][0] : e.param.functions[0].param["fs-paths"][0];
    var r = t.VA.RepositoryQueryTemplate.getColumns(o);
    if (void 0 === r) ;else if (0 == r.length) return this.problemFactory.createProblem({
      errorCode: "BR-0001",
      param: "fs-paths",
      messageParam: [o.split("/").pop()]
    }, e);
  }, e.prototype.addCheckColumnInTable = function (e) {
    var o;
    e.param.functions[0] && e.param.functions[0].param && e.param.functions[0].param["fs-paths"] && (o = e.param.functions[0].param["fs-paths"][0]);
    var r = [];

    for (var n in e.param.functions) {
      if (e.param.functions[n].func && ("imputeRemoveLine" == e.param.functions[n].func || "imputeStringTypeFillColumn" == e.param.functions[n].func || "imputeNumberTypeFillColumn" == e.param.functions[n].func)) for (var a in e.param.functions[n].param.columns[0]) {
        r.push(e.param.functions[n].param.columns[0][a]);
      }
    }

    if (o && r.length > 0) {
      var i = t.VA.RepositoryQueryTemplate.getColumns(o);

      if (i) {
        var s = $.map(i, function (t) {
          return t.name;
        }),
            l = [];

        for (var c in r) {
          s.indexOf(r[c]) < 0 && l.push(r[c]);
        }

        if (l.length > 0) return this.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "column",
          messageParam: [l]
        }, e);
      }
    }
  }, e.prototype.replaceNumberRule = function (t) {
    var e = [],
        o = {
      errorCode: "BR-0033",
      param: "fill-number",
      messageParam: ["Repalce Number"]
    },
        r = {
      errorCode: "BR-0033",
      param: "number-columns",
      messageParam: ["Number Columns"]
    };

    for (var n in t.param.functions) {
      t.param.functions[n].func && "imputeNumberTypeFillColumn" == t.param.functions[n].func && (this.isEmptyForString(t.param.functions[n].param["fill-number"]) && e.push(this.problemFactory.createProblem(o, t)), this.isEmptyForArray(t.param.functions[n].param.columns) && e.push(this.problemFactory.createProblem(r, t)));
    }

    return e;
  }, e.prototype.replaceStringRule = function (t) {
    var e = [],
        o = {
      errorCode: "BR-0033",
      param: "fill-string",
      messageParam: ["Repalce String"]
    },
        r = {
      errorCode: "BR-0033",
      param: "string-columns",
      messageParam: ["String Columns"]
    };

    for (var n in t.param.functions) {
      t.param.functions[n].func && "imputeStringTypeFillColumn" == t.param.functions[n].func && (this.isEmptyForString(t.param.functions[n].param["fill-string"]) && e.push(this.problemFactory.createProblem(o, t)), this.isEmptyForArray(t.param.functions[n].param.columns) && e.push(this.problemFactory.createProblem(r, t)));
    }

    return e;
  }, e = e, t.VA.Core.Functions.Library.load.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.loadFromAlluxio = {
    category: "io",
    defaultFnUnit: {
      func: "loadFromAlluxio",
      name: "Subflow",
      outData: [],
      param: {
        functions: [{
          fid: "",
          func: "load",
          name: "InOutData",
          outData: [],
          param: {
            "io-mode": "read",
            "fs-type": "alluxiocsv",
            "df-names": [],
            "fs-paths": []
          },
          persist: !0
        }],
        links: []
      },
      display: {
        label: "Load From Local",
        charts: [{
          chart: {
            type: "table"
          }
        }]
      },
      persist: !0
    },
    description: "Load data from Repository.",
    mandatory: ["fs-paths"],
    tags: ["Load From Repository"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.loadFromHdfs = {
    category: "io",
    defaultFnUnit: {
      func: "loadFromHdfs",
      name: "Subflow",
      outData: [],
      param: {
        functions: [{
          fid: "",
          func: "load",
          name: "InOutData",
          outData: [],
          param: {
            "io-mode": "read",
            "fs-type": "alluxiocsv",
            "df-names": [],
            "fs-paths": []
          },
          persist: !0
        }],
        links: []
      },
      display: {
        label: "Load From Hdfs"
      },
      persist: !0
    },
    description: "Load data from Hdfs.",
    mandatory: ["fs-paths"],
    tags: ["Load From Hdfs"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.loadFromLocal = {
    category: "io",
    defaultFnUnit: {
      func: "loadFromLocal",
      name: "Subflow",
      outData: [],
      param: {
        functions: [{
          fid: "",
          func: "load",
          name: "InOutData",
          outData: [],
          param: {
            "io-mode": "read",
            "fs-type": "alluxiocsv",
            "df-names": [],
            "fs-paths": []
          },
          persist: !0
        }],
        links: []
      },
      display: {
        label: "Load From Local"
      },
      persist: !0
    },
    description: "Load data from Local.",
    mandatory: ["fs-paths"],
    tags: ["Load From Local"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.loadFromRdb = {
    category: "io",
    defaultFnUnit: {
      func: "loadFromRdb",
      name: "Subflow",
      outData: [],
      param: {
        functions: [{
          fid: "",
          func: "load",
          name: "InOutData",
          outData: [],
          param: {
            "io-mode": "read",
            "fs-type": "alluxiocsv",
            "df-names": [],
            "fs-paths": []
          },
          persist: !0
        }],
        links: []
      },
      display: {
        label: "Load From Local"
      },
      persist: !0
    },
    description: "Load data from RDB.",
    mandatory: ["fs-paths"],
    tags: ["Load From RDB"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.loadFromStaging = {
    category: "io",
    defaultFnUnit: {
      func: "loadFromStaging",
      name: "Empty",
      param: {
        modelId: "",
        tableId: ""
      },
      display: {
        label: "Load From Staging"
      }
    },
    description: "Load data from staging.",
    mandatory: ["fs-paths"],
    tags: ["Load From Staging"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.outData = {
    category: "io",
    defaultFnUnit: {
      func: "outData",
      name: "Subflow",
      inData: [],
      param: {
        functions: [{
          func: "unload",
          inData: [],
          name: "OutData",
          param: {
            "io-mode": "write",
            "fs-type": "alluxiocsv",
            "df-names": [],
            "fs-paths": [],
            delimiter: ",",
            "array-delimiter": ";",
            "key-value-delimiter": ":"
          }
        }, {
          func: "exportData",
          name: "ExportData",
          param: {
            "copy-to": "alluxio",
            "is-delete": "true",
            "input-path": "",
            "output-path": ""
          }
        }],
        links: []
      },
      display: {
        label: "Out Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function is download task.",
    tags: ["Export Data", "Export", "Download", "Out Data", "output"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 0,
      max: 0
    },
    "out-node": !0
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.randomDataGeneration = {
    category: "io",
    defaultFnUnit: {
      func: "randomDataGeneration",
      name: "RandomDataGeneration",
      inData: [],
      outData: [],
      param: {
        distribution: "",
        size: "",
        seed: "",
        mean: "",
        sd: "",
        shape: "",
        scale: "",
        min: "",
        max: ""
      },
      display: {
        label: "Random Data Generation",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function makes a table having a column of double type random numbers.",
    tags: ["RandomDataGeneration", "Random", "Data", "Generation", "random number generator", "generator", "Random Data Generation"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.renderDistribution(), this.renderSize(), this.renderSeed(), this.renderMean(), this.renderSd(), this.renderShape(), this.renderScale(), this.renderMin(), this.renderMax(), this.options.isRendered = !0;
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationControls = {}, this.PARAM_DISTRIBUTION = "distribution", this.PARAM_SIZE = "size", this.PARAM_SEED = "seed", this.PARAM_MEAN = "mean", this.PARAM_SD = "sd", this.PARAM_SHAPE = "shape", this.PARAM_SCALE = "scale", this.PARAM_MIN = "min", this.PARAM_MAX = "max", this.createDistributionControl(), this.createSizeControl(), this.createSeedControl(), this.createMeanControl(), this.createSdControl(), this.createShapeControl(), this.createScaleControl(), this.createMinControl(), this.createMaxControl(), this.render = {
      distribution: this.renderDistribution,
      size: this.renderSize,
      seed: this.renderSeed,
      mean: this.renderMean,
      sd: this.renderSd,
      shape: this.renderShape,
      scale: this.renderScale,
      min: this.renderMin,
      max: this.renderMax
    }, this.validation = {
      distribution: this.renderDistributionValidation,
      size: this.renderSizeValidation,
      seed: this.renderSeedValidation,
      mean: this.renderMeanValidation,
      sd: this.renderSdValidation,
      shape: this.renderShapeValidation,
      scale: this.renderScaleValidation,
      min: this.renderMinValidation,
      max: this.renderMaxValidation
    }, this.renderValidation();
  }, e.prototype.createSizeControl = function () {
    var t = this;
    this.addPropertyControl("Size", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(o), t.$sizeControl = t.createNumberInput(o, {
        numberType: "int",
        min: 1,
        max: 1e9,
        minus: !1,
        placeholder: "Enter value"
      }), t.$sizeControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_SIZE] != e) {
          var o = t.createCommand(t.PARAM_SIZE, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_SIZE] = o;
    }, {
      mandatory: !0
    });
  }, e.prototype.createDistributionControl = function () {
    var t = this;
    this.$exponentialControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Exponential</div>'), this.$gammaControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Gamma</div>'), this.$logNormalControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Log Normal</div>'), this.$normalControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Normal</div>'), this.$poissonControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Poisson</div>'), this.$uniformControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Uniform</div>'), this.addPropertyControl("Distribution", function (e) {
      e.append(this.$exponentialControl).append(this.$gammaControl).append(this.$logNormalControl).append(this.$normalControl).append(this.$poissonControl).append(this.$uniformControl), t.createRadioButton(t.$exponentialControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$gammaControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$logNormalControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$normalControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$poissonControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$uniformControl, {
        width: "80",
        groupName: "Group"
      }), t.$exponentialControl.on("checked", function () {
        var e = t.createCommand("distribution", "exponential");
        t.executeCommand(e), t.showParam("exponential");
      }), t.$gammaControl.on("checked", function () {
        var e = t.createCommand("distribution", "gamma");
        t.executeCommand(e), t.showParam("gamma");
      }), t.$logNormalControl.on("checked", function () {
        var e = t.createCommand("distribution", "log normal");
        t.executeCommand(e), t.showParam("log normal");
      }), t.$normalControl.on("checked", function () {
        var e = t.createCommand("distribution", "normal");
        t.executeCommand(e), t.showParam("normal");
      }), t.$poissonControl.on("checked", function () {
        var e = t.createCommand("distribution", "poisson");
        t.executeCommand(e), t.showParam("poisson");
      }), t.$uniformControl.on("checked", function () {
        var e = t.createCommand("distribution", "uniform");
        t.executeCommand(e), t.showParam("uniform");
      });
    });
  }, e.prototype.showParam = function (t) {
    "exponential" === t || "poisson" === t ? (this.$meanProperties.show(), this.$sdProperties.hide(), this.$shapeProperties.hide(), this.$scaleProperties.hide(), this.$minProperties.hide(), this.$maxProperties.hide()) : "gamma" === t ? (this.$meanProperties.hide(), this.$sdProperties.hide(), this.$shapeProperties.show(), this.$scaleProperties.show(), this.$minProperties.hide(), this.$maxProperties.hide()) : "log normal" === t || "normal" === t ? (this.$meanProperties.show(), this.$sdProperties.show(), this.$shapeProperties.hide(), this.$scaleProperties.hide(), this.$minProperties.hide(), this.$maxProperties.hide()) : "uniform" === t && (this.$meanProperties.hide(), this.$sdProperties.hide(), this.$shapeProperties.hide(), this.$scaleProperties.hide(), this.$minProperties.show(), this.$maxProperties.show());
  }, e.prototype.createSeedControl = function () {
    var t = this;
    this.addPropertyControl("Seed", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(o), t.$seedControl = t.createNumberInput(o, {
        numberType: "long",
        min: -0x8000000000000000,
        max: 0x8000000000000000,
        minus: !0,
        placeholder: "Enter value"
      }), t.$seedControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_SEED] != e) {
          var o = t.createCommand(t.PARAM_SEED, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_SEED] = o;
    }, {
      mandatory: !1
    });
  }, e.prototype.createMeanControl = function () {
    var t = this;
    this.$meanProperties = this.addPropertyControl("Mean", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(o), t.$meanControl = t.createNumberInput(o, {
        numberType: "double",
        minus: !1,
        placeholder: "Enter value"
      }), t.$meanControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_MEAN] != e) {
          var o = t.createCommand(t.PARAM_MEAN, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_MEAN] = o;
    }, {
      mandatory: !0
    });
  }, e.prototype.createSdControl = function () {
    var t = this;
    this.$sdProperties = this.addPropertyControl("Sd", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(o), t.$sdControl = t.createNumberInput(o, {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: "Enter value"
      }), t.$sdControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_SD] != e) {
          var o = t.createCommand(t.PARAM_SD, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_SD] = o;
    }, {
      mandatory: !0
    });
  }, e.prototype.createShapeControl = function () {
    var t = this;
    this.$shapeProperties = this.addPropertyControl("Shape", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(o), t.$shapeControl = t.createNumberInput(o, {
        numberType: "double",
        minus: !1,
        placeholder: "Enter value"
      }), t.$shapeControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_SHAPE] != e) {
          var o = t.createCommand(t.PARAM_SHAPE, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_SHAPE] = o;
    }, {
      mandatory: !0
    });
  }, e.prototype.createScaleControl = function () {
    var t = this;
    this.$scaleProperties = this.addPropertyControl("Scale", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(o), t.$scaleControl = t.createNumberInput(o, {
        numberType: "double",
        minus: !1,
        placeholder: "Enter value"
      }), t.$scaleControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_SCALE] != e) {
          var o = t.createCommand(t.PARAM_SCALE, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_SCALE] = o;
    }, {
      mandatory: !0
    });
  }, e.prototype.createMinControl = function () {
    var t = this;
    this.$minProperties = this.addPropertyControl("Min", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(o), t.$minControl = t.createNumberInput(o, {
        numberType: "double",
        minus: !0,
        placeholder: "Enter value"
      }), t.$minControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_MIN] != e) {
          var o = t.createCommand(t.PARAM_MIN, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_MIN] = o;
    }, {
      mandatory: !0
    });
  }, e.prototype.createMaxControl = function () {
    var t = this;
    this.$maxProperties = this.addPropertyControl("Max", function (e) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
      e.append(o), t.$maxControl = t.createNumberInput(o, {
        numberType: "double",
        minus: !0,
        placeholder: "Enter value"
      }), t.$maxControl.onChange(function (e) {
        if (t.options.fnUnit.param[t.PARAM_MAX] != e) {
          var o = t.createCommand(t.PARAM_MAX, e);
          t.executeCommand(o);
        }
      }), t.validationControls[t.PARAM_MAX] = o;
    }, {
      mandatory: !0
    });
  }, e.prototype.createCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderDistribution = function () {
    var t = this.options.fnUnit.param;
    t.distribution ? "exponential" === t.distribution ? this.$exponentialControl.jqxRadioButton("check") : "gamma" === t.distribution ? this.$gammaControl.jqxRadioButton("check") : "log normal" === t.distribution ? this.$logNormalControl.jqxRadioButton("check") : "normal" === t.distribution ? this.$normalControl.jqxRadioButton("check") : "poisson" === t.distribution ? this.$poissonControl.jqxRadioButton("check") : "uniform" === t.distribution && this.$uniformControl.jqxRadioButton("check") : this.$exponentialControl.jqxRadioButton("check");
  }, e.prototype.renderSize = function () {
    this.$sizeControl.setValue(this.options.fnUnit.param.size);
  }, e.prototype.renderSeed = function () {
    this.$seedControl.setValue(this.options.fnUnit.param.seed);
  }, e.prototype.renderMean = function () {
    this.$meanControl.setValue(this.options.fnUnit.param.mean);
  }, e.prototype.renderSd = function () {
    this.$sdControl.setValue(this.options.fnUnit.param.sd);
  }, e.prototype.renderShape = function () {
    this.$shapeControl.setValue(this.options.fnUnit.param.shape);
  }, e.prototype.renderScale = function () {
    this.$scaleControl.setValue(this.options.fnUnit.param.scale);
  }, e.prototype.renderMin = function () {
    this.$minControl.setValue(this.options.fnUnit.param.min);
  }, e.prototype.renderMax = function () {
    this.$maxControl.setValue(this.options.fnUnit.param.max);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.validation[e] && this.validation[e].call(this, this.problems[t]);
    }
  }, e.prototype.renderDistributionValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_DISTRIBUTION], t);
  }, e.prototype.renderSizeValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_SIZE], t);
  }, e.prototype.renderSeedValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_SEED], t);
  }, e.prototype.renderMeanValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_MEAN], t);
  }, e.prototype.renderSdValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_SD], t);
  }, e.prototype.renderShapeValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_SHAPE], t);
  }, e.prototype.renderScaleValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_SCALE], t);
  }, e.prototype.renderMinValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_MIN], t);
  }, e.prototype.renderMaxValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_MAX], t);
  }, t.VA.Core.Functions.Library.randomDataGeneration.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.unload = {
    category: "io",
    defaultFnUnit: {
      func: "unload",
      name: "OutData",
      inData: [],
      param: {
        "io-mode": "write",
        "fs-type": "alluxiocsv",
        "df-names": [],
        "fs-paths": []
      },
      display: {
        label: "Unload",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Unload data to filesystem.",
    tags: ["UnLoad"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 0,
      max: 0
    },
    "connectable-functions": ["export"]
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.getPrimaryOperation = function () {
    return "Unload";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "fs-paths": this.renderFsPathControl,
      "df-names": this.renderDfNamesControl
    }, this.createFsPathControl(), this.setContentsEditable(!0);
  }, e.prototype.createFsPathControl = function () {
    var e = this,
        o = this.addPropertyControl("Unload To", function (o) {
      e.$dropDownListControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input-readonly"/>'), e.createInput(this.$dropDownListControl, {
        placeHolder: "+ Setting Unload To"
      }, "brtc-va-editors-sheet-controls-margin-bottom"), this.$dropDownListControl.prop("readonly", !0), o.append(this.$dropDownListControl.parent()), e.$dropDownListControl.click(function () {
        new t.VA.Core.Dialogs.RepositoryBrowserDialog(e.$mainControl, {
          filePath: e.$dropDownListControl.val(),
          close: function close(t) {
            t.OK && t.selectedFile && e.renderInput([t.selectedFile]);
          },
          resizable: !1,
          title: "Setting Unload To"
        });
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "fs-paths", "Unload To", {
      type: "array"
    });
  }, e.prototype.renderInput = function (t) {
    var e = this.$dropDownListControl.val(),
        o = t[0] || "";

    if (e !== o) {
      var r = this.createFsPathCommand(o);
      this.executeCommand(r);
    }

    this.$dropDownListControl.val(o), this.$dropDownListControl.attr("title", o);
  }, e.prototype.createFsPathCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param["fs-paths"] = [e], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.fillControlValues = function () {
    this.renderFsPathControl();
  }, e.prototype.renderFsPathControl = function () {
    this.$dropDownListControl.val(this.options.fnUnit.param["fs-paths"][0]);
  }, e.prototype.renderDfNamesControl = function () {}, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "fs-paths" === this.problems[t].param && this.createValidationContent(this.$dropDownListControl.closest(".brtc-va-editors-sheet-controls-wrapper"), this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.unload.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_FS_PATHS = "fs-paths", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFsPathRule();
  }, e.prototype.addLinkRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkLinkIsConnected(e);
    });
  }, e.prototype.checkLinkIsConnected = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    };
    if (!this._hasPrevious(t)) return this.problemFactory.createProblem(e, t);
  }, e.prototype.addFsPathRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];

      if (!t.checkLinkIsConnected(e)) {
        if (0 === e.param[t.PARAM_FS_PATHS].length || "" === e.param[t.PARAM_FS_PATHS][0]) {
          var r = {
            errorCode: "BR-0033",
            param: t.PARAM_FS_PATHS,
            paramIndex: 0,
            messageParam: ["Unload To"]
          };
          o.push(t.problemFactory.createProblem(r, e));
        }

        return o;
      }
    });
  }, e = e, t.VA.Core.Functions.Library.unload.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.capitalizeColName = {
    category: "manipulation",
    defaultFnUnit: {
      func: "capitalizeColName",
      name: "CapitalizeColumnName",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "capitalize-mode": "lowercase"
      },
      display: {
        label: "Capitalize Column Name",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Change column names to upper case or lower case.",
    tags: ["Capitalize Column Name", "CapitalizeColumnName", "Table Schema Transform", "Preprocessing", "upper", "lower", "case sensitive", "alphabet", "capital", "capitalize", "small letter"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_CAPITALIZE_MODE = "capitalize-mode", this.render = {
      columns: this.renderColumnsControl,
      "capitalize-mode": this.renderCapitalizeModeControl
    }, this.createColumnsControl(), this.createCapitalizeModeControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 3,
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          e.columnsChanged(t, o);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.columnsChanged = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param.columns = [[]];
    var n = this.columnsControl.getSelectedItems();
    n && (r.ref.param.columns[0] = n);
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(a);
  }, e.prototype.createCapitalizeModeControl = function () {
    var t = this;
    this.$capitalizemodeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-capitalizemode"/>');
    var e = this.addPropertyControl("Capitalize Mode", function (e) {
      e.append(t.$capitalizemodeControl), t.createRadioButtonControl(t.$capitalizemodeControl, "uppercase", "capitalizemode"), t.createRadioButtonControl(t.$capitalizemodeControl, "lowercase", "capitalizemode");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "capitalize-mode", "Capitalize Mode");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e;
      $(t.target).attr("value");
      e = r.createRadioCommand(), r.executeCommand(e);
    });
  }, e.prototype.getRadioButtonValue = function () {
    var t = "",
        e = this.$capitalizemodeControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(e, function (e, o) {
      $(o).jqxRadioButton("val") && (t = $(o).attr("value"));
    }), t;
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnsControl.setItems(t);
    var e = this.options.fnUnit.param[this.PARAM_CAPITALIZE_MODE];
    e && $(this.$capitalizemodeControl[e]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderCapitalizeModeControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CAPITALIZE_MODE];
    t && $(this.$capitalizemodeControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.createColumnsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_COLUMNS] = [], o.ref.param[this.PARAM_COLUMNS].push(e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createRadioCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_CAPITALIZE_MODE] = e || this.getRadioButtonValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.capitalizeColName.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.capitalizeColName.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.changeColumnName = {
    category: "manipulation",
    defaultFnUnit: {
      func: "changeColumnName",
      name: "ChangeColumnName",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "new-column-name": []
      },
      display: {
        label: "Change Column Name",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Change column name into the entered new column name.",
    tags: ["Change Column Name", "ChangeColumnName", "Table Schema Transform", "Preprocessing", "new column"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_NEW_COLUMN_NAME = "new-column-name", this.render = {
      columns: this.renderColumns,
      "new-column-name": this.renderNewColumnName
    }, this.createColumnControl();
  }, e.prototype.createColumnControl = function () {
    var t = this;
    this.$columnsWidget = $('<div class="brtc-va-editors-sheet-controls-columnlist"/>'), this.$newColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-new-columns"/>'), this.$newColumns.append('<div class="brtc-va-editors-sheet-contrls-propertycontrol-new-column-arrowdown" style="margin-top: 10px; margin-bottom: 10px; text-align: center"><i class="fa fa-arrow-down"></i></div>'), this.$newColumns.find(".brtc-va-editors-sheet-contrls-propertycontrol-new-column-arrowdown").css("display", "none"), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columnsWidget);
      var o = {
        maxRowCount: 0,
        expand: !0,
        multiple: !0,
        changed: function changed(e, o) {
          t.columnsChanged(e, o);
          var r = t.createColumnsCommand();
          t.executeCommand(r);
        },
        added: function added(e, o) {
          t.columnsAdded(e, o);
        },
        removed: function removed(e, o) {
          t.columnsRemoved(e, o);
        }
      };
      t.$columnsControl = t.createColumnList(t.$columnsWidget, o), e.append(t.$newColumns);
    }, {
      mandatory: !0
    });
  }, e.prototype.columnsChanged = function (t, e) {
    var o = this;

    if (this.$newColumns.find(".brtc-va-editors-sheet-contrls-propertycontrol-new-column-arrowdown").css("display", "block"), $.each(e.removed, function (t, e) {
      o.$newColumns.inputControl[e] && (o.$newColumns.inputControl[e].parent().remove(), delete o.$newColumns.inputControl[e]);
    }), $.each(e.added, function (t, e) {
      if (!o.$newColumns.inputControl[e]) {
        var r = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-new-column-input" valid-type = "type1"/>');
        o.$newColumns.append(r), o.createInput(r, {}, "default"), r.on("change", function (t) {
          if (o.isInputValueChanged("new-column-name", o.getNewColumnsValue())) {
            var e = o.createInputCommand();
            o.executeCommand(e);
          }
        }), o.$newColumns.inputControl[e] = r;
      }
    }), this.$columnsControl.getSelectedItems().length < $(".brtc-va-editors-sheet-controls-propertycontrol-new-column-input").length) {
      var r = this.$columnsControl.getSelectedItems().length;
      $(".brtc-va-editors-sheet-controls-propertycontrol-new-column-input")[r].remove();
    }

    0 === this.$columnsControl.getSelectedItems().length && this.$newColumns.find(".brtc-va-editors-sheet-contrls-propertycontrol-new-column-arrowdown").css("display", "none");
  }, e.prototype.columnsAdded = function (t, e, o) {
    var r = this;
    this.$newColumns.find(".brtc-va-editors-sheet-contrls-propertycontrol-new-column-arrowdown").css("display", "block"), $.each(t.added, function (t, e) {
      if (!r.$newColumns.inputControl[e]) {
        var o = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-new-column-input" valid-type = "type1"/>');
        r.$newColumns.append(o), r.createInput(o, {}, "default"), o.on("change", function (t) {
          if (r.isInputValueChanged("new-column-name", r.getNewColumnsValue())) {
            var e = r.createInputCommand();
            r.executeCommand(e);
          }
        }), r.$newColumns.inputControl[e] = o;
      }
    });
  }, e.prototype.columnsRemoved = function (t, e, o) {
    var r = this;
    $.each(t.removed, function (t, e) {
      r.$newColumns.inputControl[e] && (r.$newColumns.inputControl[e].parent().remove(), delete r.$newColumns.inputControl[e]);
    }), 0 === t.items.length && this.$newColumns.find(".brtc-va-editors-sheet-contrls-propertycontrol-new-column-arrowdown").css("display", "none");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.$columnsControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columnsWidget, this.problems[t]), this.problems[t].param === this.PARAM_NEW_COLUMN_NAME && this.createValidationContent(this.$newColumns, this.problems[t]);
    }
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.$columnsControl.setSelectedItems(t.columns[0]), this.renderNewColumnName();
  }, e.prototype.createNewColumnInputControl = function () {
    var t = this;
    this.$newColumns.inputControl = {}, this.$newColumns.find(".brtc-va-editors-sheet-controls-propertycontrol-new-column-input").parent().remove(), 0 === this.$columnsControl.getSelectedItems().length ? this.$newColumns.find(".brtc-va-editors-sheet-contrls-propertycontrol-new-column-arrowdown").css("display", "none") : this.$newColumns.find(".brtc-va-editors-sheet-contrls-propertycontrol-new-column-arrowdown").css("display", "block");
    var e = this.options.fnUnit.param[this.PARAM_COLUMNS][0];
    $.each(e, function (e, o) {
      var r = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-new-column-input" valid-type = "type1"/>');
      t.$newColumns.append(r), t.createInput(r, {}, "default"), r.on("change", function (e) {
        if (t.isInputValueChanged("new-column-name", t.getNewColumnsValue())) {
          var o = t.createInputCommand();
          t.executeCommand(o);
        }
      }), t.$newColumns.inputControl[o] = r;
    });
  }, e.prototype.renderNewColumnName = function () {
    this.$mainControl.find(".brtc-va-editors-sheet-panels-validation-tooltip").remove(), this.createNewColumnInputControl();

    for (var t = this.options.fnUnit.param[this.PARAM_NEW_COLUMN_NAME], e = this.options.fnUnit.param[this.PARAM_COLUMNS][0], o = 0; o < e.length; o++) {
      this.$newColumns.inputControl[e[o]].jqxInput("val", t[o]);
    }
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), e.ref.param[this.PARAM_NEW_COLUMN_NAME] = this.getNewColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.getNewColumnsValue = function () {
    var t = this,
        e = [],
        o = Object.keys(this.$newColumns.inputControl);
    return $.each(o, function (o, r) {
      e.push(t.$newColumns.inputControl[r].jqxInput("val"));
    }), e;
  }, e.prototype.createInputCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_NEW_COLUMN_NAME] = this.getNewColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.changeColumnName.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_NEW_COLUMN_NAME = "new-column-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addNewColumnNameRule(), this.addDuplicateColumnNameRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addNewColumnNameRule = function () {
    var e = this;
    this.addRule(function (o) {
      var r = [];
      return $.each(o.param[e.PARAM_NEW_COLUMN_NAME], function (n, a) {
        var i;
        if (i = 0 == n ? "1st" : 1 == n ? "2nd" : 2 == n ? "3rd" : n + 1 + "th", e._isEmptyString(a)) r.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: e.PARAM_NEW_COLUMN_NAME,
          paramIndex: n,
          messageParam: [i + " Change Name"]
        }, o));else if (!t.VA.Core.Utils.InputValidator.isValid.columnNameType(a)) {
          var s = e.problemFactory.createProblem({
            errorCode: "BR-0045",
            param: e.PARAM_NEW_COLUMN_NAME,
            paramIndex: n,
            messageParam: [a]
          }, o);
          r.push(s);
        }
      }), r;
    });
  }, e.prototype.addDuplicateColumnNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      return $.each(e.param[t.PARAM_COLUMNS][0], function (o, r) {
        $.each(e.param[t.PARAM_NEW_COLUMN_NAME], function (t, e) {});
      }), [];
    });
  }, t.VA.Core.Functions.Library.changeColumnName.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.conditionalUpdate = {
    category: "manipulation",
    defaultFnUnit: {
      func: "conditionalUpdate",
      name: "UpdateColumn",
      inData: [],
      outData: [],
      param: {
        "update-column": "",
        condition: [[]]
      },
      display: {
        label: "Update Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function changes data in a selected column based on the condition.",
    tags: ["Update Column", "UpdateColumn", "Transform", "Update", "Preprocessing", "condition", "change data", "selected column"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_UPDATE_COLUMN = "update-column", this.PARAM_CONDITION = "condition", this.render = {
      "update-column": this.renderColumnsControl,
      condition: this.renderConditionControl
    }, this.ifPropertyControlArray = [], this.elseIfPropertyControlArray = [], this.elsePropertyControlArray = [], this.createColumnsControl(), this.createConditionControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Update Column", function (t) {
      t.append(e.$column);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createColumnCommand(t, o.items);
          e.executeCommand(r);
        }
      };
      e.columnsControl = e.createColumnList(e.$column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.columnChanged = function (t, e) {
    var o = this.createColumnCommand(e);
    this.executeCommand(o);
  }, e.prototype.createConditionControl = function () {
    this.TYPE_IF = "IF", this.TYPE_ELSE_IF = "ELSE_IF", this.TYPE_ELSE = "ELSE", this.createIfArea(), this.createElseIfArea(), this.createAddConditionButton();
  }, e.prototype.createIfArea = function () {
    this.$ifArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-if-area" style="width:100%"></div>'), this.$contentsArea.append(this.$ifArea);
  }, e.prototype.createElseIfArea = function () {
    this.$elseIfArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-else-if-area" style="width:100%"></div>'), this.$contentsArea.append(this.$elseIfArea);
  }, e.prototype.createAddConditionButton = function () {
    var e = this;
    this.$addConditionButton = $('<input type="button" class="brtc-va-conditional-update-property add-else-if-button" value="+ Add Else if"/>'), this.$contentsArea.append(this.$addConditionButton), this.$addConditionButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addConditionButton.click(function () {
      e.createNewConditionControl(e.TYPE_ELSE_IF);
      var t = e.createConditionCommand();
      e.executeCommand(t);
    });
  }, e.prototype.createNewConditionControl = function (t) {
    var e,
        o = this,
        r = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-new-condition-area"/>'),
        a = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        i = $('<div class="brtc-va-conditional-update-property remove-else-if-button brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>'),
        s = "";
    t === this.TYPE_IF ? (s = "If", this.ifPropertyControlArray = [r, a], e = {
      propertyControlParent: o.$ifArea,
      mandatory: !0
    }) : t === this.TYPE_ELSE_IF && (s = "Else If", this.elseIfPropertyControlArray.push([r, a]), e = {
      propertyControlParent: o.$elseIfArea
    }), this.addPropertyControl(s, function (e) {
      e.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), e.addClass("brtc-va-conditional-update-property"), e.append(r), e.append(n), o.createAddExpressionButton(e, n, t), e.append(a), t === o.TYPE_ELSE_IF && e.siblings(".brtc-va-editors-sheet-controls-propertycontrol-label").append(i);
      var s = {
        placeHolder: "Condition"
      };
      o.createInput(r, s, "brtc-va-editors-sheet-controls-width-12", {
        "margin-bottom": "5px"
      }), r.on("change", function (t) {
        var e = o.createConditionCommand();
        o.isInputValueChanged("condition", e.options.ref.param.condition) && o.executeCommand(e);
      }), s = {
        placeHolder: "Enter value"
      }, o.createInput(a, s, "brtc-va-editors-sheet-controls-width-12"), a.on("change", function (t) {
        var e = o.createConditionCommand();
        o.isInputValueChanged("condition", e.options.ref.param.condition) && o.executeCommand(e);
      }), i.click(function (t) {
        var e = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol"),
            r = e.prevAll().length;
        r > -1 && o.elseIfPropertyControlArray.splice(r, 1), e.remove();
        var n = o.createConditionCommand();
        o.executeCommand(n), t.stopPropagation();
      });
    }, e);
  }, e.prototype.createAddExpressionButton = function (t, e, o) {
    var r = this,
        n = $('<input class="add-condition-button" type="button" value="+ Add Condition"/>');
    t.append(n), r.createButton(n, {
      height: 25
    }, "brtc-va-editors-sheet-controls-width-12"), n.click(function () {
      r.createNewExpressionControl(e, o);
      var t = r.createConditionCommand();
      r.executeCommand(t);
    });
  }, e.prototype.createNewExpressionControl = function (t, e) {
    var o = this,
        r = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    t.append(r);
    var n = t.parents(".brtc-va-editors-sheet-controls-propertycontrol");
    e === this.TYPE_IF && this.ifPropertyControlArray.splice(this.ifPropertyControlArray.length - 1, 0, r);
    var a = n.prevAll().length;
    e === this.TYPE_ELSE_IF && a > -1 && this.elseIfPropertyControlArray[a].splice(this.elseIfPropertyControlArray[a].length - 1, 0, r);
    o.createInput(r, {
      placeHolder: "AND Condition"
    }, "brtc-va-editors-sheet-controls-width-12", {
      "margin-bottom": "5px"
    }), r.on("change", function (t) {
      var e = o.createConditionCommand();
      o.isInputValueChanged("condition", e.options.ref.param.condition) && o.executeCommand(e);
    });
    var i = $('<div class="remove-condition-button"></div>');
    r.parent(".brtc-va-editors-sheet-controls-wrapper").prepend(i), i.click(function (t) {
      var r = $(this).parent(".brtc-va-editors-sheet-controls-wrapper"),
          n = r.prevAll(".brtc-va-editors-sheet-controls-wrapper").length + 1;
      e === o.TYPE_IF && o.ifPropertyControlArray.splice(n, 1), e === o.TYPE_ELSE_IF && a > -1 && o.elseIfPropertyControlArray[a].splice(n, 1), r.remove();
      var i = o.createConditionCommand();
      o.executeCommand(i), t.stopPropagation();
    });
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnsControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if (this.problems[t].param === this.PARAM_UPDATE_COLUMN && this.createValidationContent(this.$column.parent(), this.problems[t]), "condition" === this.problems[t].param) {
        var e = parseInt(this.problems[t].paramIndex[0]),
            o = parseInt(this.problems[t].paramIndex[1]);
        0 === e ? this.createValidationContent(this.ifPropertyControlArray[o].parent(), this.problems[t]) : e === this.elseIfPropertyControlArray.length + 1 ? this.createValidationContent(this.elsePropertyControlArray[o].parent(), this.problems[t]) : this.createValidationContent(this.elseIfPropertyControlArray[e - 1][o].parent(), this.problems[t]);
      }
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems([t[this.PARAM_UPDATE_COLUMN]] || []);
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[this.PARAM_UPDATE_COLUMN] = "", o && o.length > 0 && (r.ref.param[this.PARAM_UPDATE_COLUMN] = o[0]), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderConditionControl = function () {
    var t, e;
    this.ifPropertyControlArray = [], this.elseIfPropertyControlArray = [], this.$ifArea.empty(), this.$elseIfArea.empty();
    var o = this.options.fnUnit.param.condition;

    if (o.length >= 1) {
      for (this.createNewConditionControl(this.TYPE_IF), t = 1; t < o[0].length - 1; t++) {
        this.createNewExpressionControl(this.ifPropertyControlArray[0].parents(".brtc-va-editors-sheet-controls-wrapper").siblings(".brtc-va-editors-sheet-controls-propertycontrol-new-condition-area"), this.TYPE_IF);
      }

      if (o.length > 1) for (t = 1; t < o.length; t++) {
        for (this.createNewConditionControl(this.TYPE_ELSE_IF), e = 1; e < o[t].length - 1; e++) {
          this.createNewExpressionControl(this.elseIfPropertyControlArray[t - 1][0].parents(".brtc-va-editors-sheet-controls-wrapper").siblings(".brtc-va-editors-sheet-controls-propertycontrol-new-condition-area"), this.TYPE_ELSE_IF);
        }
      }

      for (var r in this.ifPropertyControlArray) {
        this.ifPropertyControlArray[r].val(o[0][r]);
      }

      if (o.length > 1) for (var n in this.elseIfPropertyControlArray) {
        for (var a in this.elseIfPropertyControlArray[n]) {
          this.elseIfPropertyControlArray[n][a].val(o[parseInt(n) + 1][a]);
        }
      }
    } else {
      for (var r in this.createNewConditionControl(this.TYPE_IF), this.ifPropertyControlArray) {
        this.ifPropertyControlArray[r].val("");
      }

      for (var n in this.elseIfPropertyControlArray) {
        for (var a in this.elseIfPropertyControlArray) {
          this.elseIfPropertyControlArray[n][a].val("");
        }
      }
    }
  }, e.prototype.createConditionCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.condition = [];

    var o = function o(t) {
      return t.val();
    },
        r = this.ifPropertyControlArray.map(o),
        n = this.elseIfPropertyControlArray.map(function (t) {
      return t.map(o);
    });

    return e.ref.param.condition = [r].concat(n), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.conditionalUpdate.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_UPDATE_COLUMN = "update-column", this.PARAM_CONDITION = "condition", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addConditionRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_UPDATE_COLUMN, e.param[t.PARAM_UPDATE_COLUMN], "Update Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_UPDATE_COLUMN, e.param[t.PARAM_UPDATE_COLUMN]);
    });
  }, e.prototype.addConditionRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];

      if (t._getSchema(e)) {
        for (var r in e.param.condition) {
          var n = e.param.condition[r];

          for (var a in n) {
            var i = n[a],
                s = {
              errorCode: "BR-0033",
              param: t.PARAM_CONDITION,
              messageParam: ["Condition"]
            };
            0 == a ? r == e.param.condition.length - 1 ? s.messageParam = ["Value"] : s.messageParam = ["Condition"] : a == n.length - 1 ? s.messageParam = ["Value"] : s.messageParam = ["AND Condition"];

            var l = t._checkStringIsEmpty(s, e, i);

            l ? (l.paramIndex = [r, a], o.push(l)) : (l = t.checkColumnExists(e, t.PARAM_CONDITION, t.getColumnsInCondition(i))) && (l.paramIndex = [r, a], o.push(l));
          }
        }

        if (0 === e.param.condition[0].length) (s = {
          errorCode: "BR-0033",
          param: t.PARAM_CONDITION,
          messageParam: ["Condition"]
        }).messageParam = ["Condition"], s.paramIndex = [0, 0], o.push(t.problemFactory.createProblem(s, e)), s.messageParam = ["Value"], s.paramIndex = [0, 1], o.push(t.problemFactory.createProblem(s, e));
        return o;
      }
    });
  }, e.prototype.getColumnsInCondition = function (t) {
    var e = [],
        o = t.replace(new RegExp('"([^"]*)"', "g"), "").replace(new RegExp("^[^\\[]*|[^\\]]*$", "g"), "");
    return o.match(new RegExp("\\[|\\]", "g")) && (e = o.replace(new RegExp("^[^\\[]*\\[|\\][^\\]]*$", "g"), "").split(new RegExp("\\].*?\\[", "g"))), e;
  }, t.VA.Core.Functions.Library.conditionalUpdate.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.conditionFilter = {
    category: "manipulation",
    defaultFnUnit: {
      func: "conditionFilter",
      name: "Filter",
      inData: [],
      outData: [],
      param: {
        condition: []
      },
      display: {
        label: "Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Selecting data that satisfies the conditions.",
    tags: ["Condition Filter", "ConditionFilter", "Filter", "Remove", "Preprocessing", "condition", "search"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.operandSource = {
      string: [{
        label: "==",
        value: "=="
      }, {
        label: "!=",
        value: "!="
      }, {
        label: "In",
        value: "in"
      }, {
        label: "Not In",
        value: "notIn"
      }, {
        label: "Starts With",
        value: "startsWith"
      }, {
        label: "Ends With",
        value: "endsWith"
      }, {
        label: "Contain",
        value: "contain"
      }, {
        label: "Not Contain",
        value: "notContain"
      }],
      number: [{
        label: "<",
        value: "<"
      }, {
        label: "<=",
        value: "<="
      }, {
        label: ">",
        value: ">"
      }, {
        label: ">=",
        value: ">="
      }, {
        label: "==",
        value: "=="
      }, {
        label: "!=",
        value: "!="
      }, {
        label: "In",
        value: "in"
      }, {
        label: "Not In",
        value: "notIn"
      }]
    }, this.render = {
      condition: this.renderCondition
    }, this.propertyControlArray = [], this.createControlExpander(), this.createFilterControl(), this.createAddButton();
  }, e.prototype.createControlExpander = function () {
    this.addPropertyControl("Condition", function (t) {}, {
      mandatory: !0
    }), this.$contents = this.$contentsArea.find(".brtc-va-editors-sheet-controls-propertycontrol-contents");
  }, e.prototype.createAddButton = function () {
    var e = this;
    if (this.$contents.find(".brtc-va-editors-sheet-controls-propertycontrol-addbutton").length > 0) return !1;
    this.$addButton = $('<input type="button" class= "brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Condition"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.$addButton.detach(), e.createFilterControl(), e.$addButton.appendTo(e.$contents), 1 != e.renderFlag && e.createCommand();
    });
  }, e.prototype.fillControlValues = function () {
    var t = this;
    this.columnNameArray = [];
    var e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];

    for (var o in e) {
      "number" != e[o].type && "string" != e[o].type || this.columnNameArray.push(e[o]);
    }

    $.each(this.propertyControlArray, function (e) {
      t.propertyControlArray[e].columnsControl.setItems(t.columnNameArray), t.propertyControlArray[e].$operandInput.columnControl.setItems(t.columnNameArray);
    });
  }, e.prototype.createFilterControl = function (e) {
    var o = this,
        r = {};
    r.conditionId = t.VA.Core.Utils.IDGenerator.uuid.id(8), r.$inputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>'), this.$contents.append(r.$inputControl), r.$andOrDiv = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-and"></div>'), r.$inputControl.append(r.$andOrDiv), r.$andControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton" style="float: left">And</div>'), r.$orControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton" style="float: left">Or</div>'), r.$andOrDiv.append(r.$andControl).append(r.$orControl), r.$removeButton = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>'), r.$inputControl.append(r.$removeButton), r.$inputWrapper = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-wrapper" condition-id="' + r.conditionId + '"/>'), r.$inputControl.append(r.$inputWrapper), r.$columnInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column" condition-id="' + r.conditionId + '"/>'), r.$operatorInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-operator" condition-id="' + r.conditionId + '"/>'), r.$operandInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-condition-operand" condition-id="' + r.conditionId + '"/>'), r.$inputWrapper.append(r.$columnInput), r.$inputWrapper.append(r.$operatorInput), r.$inputWrapper.append(r.$operandInput), o.createRadioButton(r.$andControl, {
      width: "60",
      groupName: "Group" + r.conditionId,
      checked: !0
    }), o.createRadioButton(r.$orControl, {
      width: "60",
      groupName: "Group" + r.conditionId
    }), r.$andOrDiv.find(".brtc-va-editors-sheet-controls-wrapper").css("float", "left"), r.$andControl.on("checked", function (t) {
      o.createCommand();
    }), r.$orControl.on("checked", function (t) {
      o.createCommand();
    }), this.createDropDownList(r.$operatorInput, {
      source: this.operandSource.string,
      displayMember: "label",
      valueMember: "value"
    });
    var n = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending",
      changed: function changed(t, e) {
        var n = r.$operandInput.find(".brtc-va-editors-sheet-panels-propertycontrol-button[name=column]"),
            a = r.$operandInput.find(".brtc-va-editors-sheet-panels-propertycontrol-button[name=value]");
        if (0 == e.items.length) ;else {
          var i = "";

          for (var s in o.columnNameArray) {
            if (o.columnNameArray[s].name === e.items[0]) {
              i = o.columnNameArray[s].type;
              break;
            }
          }

          o.renderFlag = !0;
          var l = r.$operatorInput.val();
          r.$operatorInput.jqxDropDownList({
            disabled: !1,
            source: o.operandSource[i]
          }), r.$operatorInput.jqxDropDownList("selectItem", l), o.configureOperand(r.conditionId, r.$operatorInput.val()), o.renderFlag = !1, n.jqxButton({
            disabled: !1
          }), a.jqxButton({
            disabled: !1
          });
        }
        1 != o.renderFlag && o.createCommand();
      }
    };
    this.createOperandTypeControl(r.$operandInput), this.createOperandColumnControl(r.$operandInput), this.createOperandStringControl(r.$operandInput), r.$operatorInput.on("change", function () {
      var t = r.$operandInput.find(".brtc-va-editors-sheet-panels-propertycontrol-button[name=column]"),
          e = r.$operandInput.find(".brtc-va-editors-sheet-controls-propertycontrol-stringinputcontrol");
      ["in", "notIn", "startsWith", "endsWith", "contain", "notContain"].indexOf($(this).val()) > -1 ? (t.jqxButton({
        disabled: !0
      }), e.jqxInput({
        placeHolder: "val1,val2,val3"
      })) : (t.jqxButton({
        disabled: !1
      }), e.jqxInput({
        placeHolder: "Enter value"
      }));
    }), r.$operandInput.columnControl.$parent.css({
      display: "none"
    }), r.$operandInput.stringControl.css({
      display: "none"
    }), r.columnsControl = this.createColumnList(r.$columnInput, n), r.columnsControl.setItems(this.columnNameArray), this.$contents.children() && ($(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text(""), $(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-deck-remove").css("display", "none")), this.createFilterControlEvent(r), this.propertyControlArray.push(r);
  }, e.prototype.createFilterControlEvent = function (t) {
    var e = this;
    t.$operatorInput.on("change", function (t) {
      1 != e.renderFlag && e.createCommand();
    }), t.$removeButton.click(function (t) {
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;
      o > -1 && e.propertyControlArray.splice(o, 1), $(this).parent().remove(), e.$contents.children() && $(e.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text(""), 1 != e.renderFlag && e.createCommand(), t.stopPropagation();
    });
  }, e.prototype.createOperandTypeControl = function (e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-operandtype brtc-va-editors-sheet-controls-wrapper"/>');
    e.append(r);
    var n = $('<button type="button" name="column" class="brtc-va-editors-sheet-panels-propertycontrol-button">Column</button>');
    r.append(n);
    var a = $('<button type="button" name="value" class="brtc-va-editors-sheet-panels-propertycontrol-button">Value</button>');
    r.append(a.css("border-left", "none")), n.jqxButton({
      theme: t.VA.Env.Theme,
      width: "50%",
      height: "100%"
    }), a.jqxButton({
      theme: t.VA.Env.Theme,
      width: "50%",
      height: "100%"
    }), n.click(function () {
      o.operandTypeEvent(e, "column");
    }), a.click(function () {
      o.operandTypeEvent(e, "string");
    }), e.operandType = r;
  }, e.prototype.createOperandColumnControl = function (t) {
    var e = this,
        o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columncontrol"/>'),
        r = $('<span class="brtc-va-editors-sheet-controls-propertycontrol-columncontrol-remove">   <i class="fa fa-minus-circle"></i></span>');
    t.append(o).append(r), r.click(function (o) {
      var r = t.columnControl.getSelectedItems();
      e.operandTypeEvent(t, "type"), t.columnControl.removeColumnUnit(r[0]), r.length > 0 && e.createCommand();
    });
    var n = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending",
      changed: function changed(t, o) {
        1 != e.renderFlag && e.createCommand();
      }
    },
        a = this.createColumnList(o, n, "brtc-va-editors-sheet-controls-width-11");
    t.append(a), a.setItems(this.columnNameArray), t.columnControl = a, t.columnControlRemove = r;
  }, e.prototype.createOperandStringControl = function (t) {
    var e = this,
        o = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-stringinputcontrol"/>'),
        r = $('<span class="brtc-va-editors-sheet-controls-propertycontrol-stringinputcontrol-remove">   <i class="fa fa-minus-circle"></i></span>');
    t.append(o).append(r), r.click(function (o) {
      var r = t.stringControl.val();
      e.operandTypeEvent(t, "type"), "" != r && t.stringControl.val("");
    }), this.createInput(o, {
      placeHolder: "Enter value"
    }, "brtc-va-editors-sheet-controls-width-11"), o.on("change", function (t) {
      if (1 != e.renderFlag) {
        if (!e.isInputValueChanged("condition", e.getConditionValue())) return;
        e.createCommand();
      }
    }), t.stringControl = o, t.stringControlRemove = r;
  }, e.prototype.getColumnType = function (t) {
    var e = t.replace("[", "").replace("]", "");

    for (var o in this.columnNameArray) {
      if (e === this.columnNameArray[o].name) return this.columnNameArray[o].type;
    }

    return "";
  }, e.prototype.restrictingCondition = function (t, e) {
    this.restrictingByOperator(t, e), this.restrictingByOperand(t, e);
  }, e.prototype.restrictingByColumn = function (t, e) {
    e[0] || (this.propertyControlArray[t].$operatorInput.jqxDropDownList("disabled", !0), this.disableOperand(t));
  }, e.prototype.restrictingByOperator = function (t, e) {
    this.configureOperand(t, e[1]);
  }, e.prototype.restrictingByOperand = function (t, e) {
    var o = this.propertyControlArray.find(function (e) {
      return e.conditionId === t;
    });

    if (!o) {
      var r = o.$operandInput;
      null != e[2] && e[2].indexOf("[") > -1 ? (this.operandTypeEvent(r, "column"), r.columnControl.setSelectedItems(e[2] ? [e[2].substring(1, e[2].length - 1)] : [])) : null != e[2] && e[2].length > 0 ? (this.operandTypeEvent(r, "string"), r.stringControl.val(e[2])) : this.operandTypeEvent(r, "type");
    }
  }, e.prototype.disableOperand = function (t) {
    var e = this.propertyControlArray[t],
        o = e.$operandInput.find(".brtc-va-editors-sheet-panels-propertycontrol-button[name=column]"),
        r = e.$operandInput.find(".brtc-va-editors-sheet-panels-propertycontrol-button[name=value]");
    o.jqxButton({
      disabled: !0
    }), r.jqxButton({
      disabled: !0
    });
  }, e.prototype.configureOperand = function (t, e) {
    var o = this.propertyControlArray.find(function (e) {
      return e.conditionId === t;
    });

    if (o) {
      var r = o.$operandInput.find(".brtc-va-editors-sheet-panels-propertycontrol-button[name=column]"),
          n = o.$operandInput.find(".brtc-va-editors-sheet-panels-propertycontrol-button[name=value]"),
          a = o.$operandInput.find(".brtc-va-editors-sheet-controls-propertycontrol-stringinputcontrol");
      e ? ["in", "notIn", "startsWith", "endsWith", "contain", "notContain"].indexOf(e) > -1 ? (r.jqxButton({
        disabled: !0
      }), n.jqxButton({
        disabled: !1
      }), a.jqxInput({
        placeHolder: "val1,val2,val3"
      })) : (r.jqxButton({
        disabled: !1
      }), n.jqxButton({
        disabled: !1
      }), a.jqxInput({
        placeHolder: "Enter value"
      })) : (r.jqxButton({
        disabled: !1
      }), n.jqxButton({
        disabled: !1
      }));
    }
  }, e.prototype.renderCondition = function () {
    var t = this.options.fnUnit.param.condition;

    if (t && t.length > 0) {
      for (var e in this.renderFlag = !0, this.$addButton.detach(), t) {
        e > this.propertyControlArray.length - 1 && this.createFilterControl(), this.propertyControlArray[e].columnsControl.setSelectedItems(t[e][0] ? [t[e][0].substring(1, t[e][0].length - 1)] : []);
        var o = this.getColumnType(t[e][0]);
        this.propertyControlArray[e].$operatorInput.jqxDropDownList({
          source: this.operandSource[o]
        });
        var r = this.propertyControlArray[e].$operatorInput.jqxDropDownList("getSelectedItem");
        this.propertyControlArray[e].$operatorInput.jqxDropDownList("unselectItem", r), this.propertyControlArray[e].$operatorInput.val(t[e][1]), null != t[e][2] && t[e][2].indexOf("[") > -1 ? (this.operandTypeEvent(this.propertyControlArray[e].$operandInput, "column"), this.propertyControlArray[e].$operandInput.columnControl.setSelectedItems(t[e][2] ? [t[e][2].substring(1, t[e][2].length - 1)] : [])) : null != t[e][2] && t[e][2].length > 0 ? (this.operandTypeEvent(this.propertyControlArray[e].$operandInput, "string"), this.propertyControlArray[e].$operandInput.stringControl.val(t[e][2])) : (this.operandTypeEvent(this.propertyControlArray[e].$operandInput, "type"), this.propertyControlArray[e].$operandInput.stringControl.val(t[e][2]));
      }

      for (var e in t) {
        e != t.length - 1 && (void 0 === t[e][3] ? this.propertyControlArray[e + 1].$andControl.jqxRadioButton("check") : "and" === t[e][3] ? this.propertyControlArray[parseInt(e) + 1].$andControl.jqxRadioButton("checked") || this.propertyControlArray[parseInt(e) + 1].$andControl.jqxRadioButton("check") : this.propertyControlArray[parseInt(e) + 1].$orControl.jqxRadioButton("checked") || this.propertyControlArray[parseInt(e) + 1].$orControl.jqxRadioButton("check")), this.restrictingCondition(this.propertyControlArray[e].conditionId, t[e]);
      }

      if (t.length < this.propertyControlArray.length) {
        for (var n = this.propertyControlArray.length - 1; n == t.length; n--) {
          $(this.propertyControlArray[n].$inputControl).remove();
        }

        this.propertyControlArray.splice(t.length, this.propertyControlArray.length - t.length);
      }

      this.$addButton.appendTo(this.$contents), this.renderFlag = !1;
    } else this.resetPropertyControls();
  }, e.prototype.resetPropertyControls = function () {
    for (var t = this.propertyControlArray.length - 1; t >= 0; t--) {
      0 === t ? (this.propertyControlArray[t].columnsControl.setSelectedItems([]), this.propertyControlArray[t].$operatorInput.jqxDropDownList("selectIndex", -1), this.operandTypeEvent(this.propertyControlArray[t].$operandInput, "type")) : ($(this.propertyControlArray[t].$inputControl).remove(), this.propertyControlArray.splice(t, 1));
    }

    this.propertyControlArray[0];
  }, e.prototype.createCommand = function (e) {
    if (1 != this.renderFlag) {
      var o = this.getConditionValue(),
          r = {
        fnUnit: this.options.fnUnit,
        ref: {
          param: {
            condition: o
          }
        }
      },
          n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
      this.executeCommand(n);
    }
  }, e.prototype.getConditionValue = function (t) {
    var e = [];

    for (var o in this.propertyControlArray) {
      var r = this.propertyControlArray[o].columnsControl.getSelectedItems()[0] ? "[" + this.propertyControlArray[o].columnsControl.getSelectedItems()[0] + "]" : "",
          n = this.propertyControlArray[o].$operatorInput.val(),
          a = "";
      a = "block" == this.propertyControlArray[o].$operandInput.columnControl.$parent.css("display") ? this.propertyControlArray[o].$operandInput.columnControl.getSelectedItems()[0] ? "[" + this.propertyControlArray[o].$operandInput.columnControl.getSelectedItems()[0] + "]" : "" : this.propertyControlArray[o].$operandInput.stringControl.val();
      var i = this.propertyControlArray[o].$andControl.jqxRadioButton("checked") ? "and" : "or",
          s = [r, n, a, ""];
      o > 0 && (e[o - 1][3] = i), e.push(s);
    }

    return e;
  }, e.prototype.renderValidation = function () {
    var t = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-column"),
        e = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-input-condition-operand"),
        o = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-input-operator");

    for (var r in this.problems) {
      "Column" === this.problems[r].param && this.createValidationContent($(t[this.problems[r].paramIndex]).parent(), this.problems[r]), "Operand" === this.problems[r].param && this.createValidationContent($(e[this.problems[r].paramIndex]), this.problems[r]), "Operator" === this.problems[r].param && this.createValidationContent($(o[this.problems[r].paramIndex]).parent(), this.problems[r]);
    }
  }, e.prototype.operandTypeEvent = function (t, e) {
    var o = t.attr("condition-id"),
        r = this.propertyControlArray.find(function (t) {
      return t.conditionId === o;
    });

    if (r) {
      var n = r.columnsControl.getSelectedItems();
      if (n.length > 0) var a = this.getColumnType(n[0]);
      "column" == e ? (t.operandType.css({
        display: "none"
      }), t.columnControl.$parent.css({
        display: "block"
      }), t.stringControl.css({
        display: "none"
      }), t.columnControlRemove.css({
        display: "block"
      }), t.stringControlRemove.css({
        display: "none"
      }), r.$operatorInput.jqxDropDownList("disableItem", "in"), r.$operatorInput.jqxDropDownList("disableItem", "notIn"), "string" === a && (r.$operatorInput.jqxDropDownList("disableItem", "startsWith"), r.$operatorInput.jqxDropDownList("disableItem", "endsWith"), r.$operatorInput.jqxDropDownList("disableItem", "contain"), r.$operatorInput.jqxDropDownList("disableItem", "notContain"))) : "string" == e ? (t.operandType.css({
        display: "none"
      }), t.columnControl.$parent.css({
        display: "none"
      }), t.stringControl.css({
        display: "block"
      }), t.columnControlRemove.css({
        display: "none"
      }), t.stringControlRemove.css({
        display: "block"
      }), r.$operatorInput.jqxDropDownList("enableItem", "in"), r.$operatorInput.jqxDropDownList("enableItem", "notIn"), "string" === a && (r.$operatorInput.jqxDropDownList("enableItem", "startsWith"), r.$operatorInput.jqxDropDownList("enableItem", "endsWith"), r.$operatorInput.jqxDropDownList("enableItem", "contain"), r.$operatorInput.jqxDropDownList("enableItem", "notContain"))) : (t.operandType.css({
        display: "block"
      }), t.columnControl.$parent.css({
        display: "none"
      }), t.stringControl.css({
        display: "none"
      }), t.columnControlRemove.css({
        display: "none"
      }), t.stringControlRemove.css({
        display: "none"
      }), r.$operatorInput.jqxDropDownList("enableItem", "in"), r.$operatorInput.jqxDropDownList("enableItem", "notIn"), "string" === a && (r.$operatorInput.jqxDropDownList("enableItem", "startsWith"), r.$operatorInput.jqxDropDownList("enableItem", "endsWith"), r.$operatorInput.jqxDropDownList("enableItem", "contain"), r.$operatorInput.jqxDropDownList("enableItem", "notContain")));
    }
  }, t.VA.Core.Functions.Library.conditionFilter.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addConditionRule(), this.addRule(this.operatorRule), this.addRule(this.operandRule);
  }, e.prototype.addConditionRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [],
          r = e.param.condition;
      0 === r.length && (a = t.checkColumnIsEmpty(e, "Column", "", "Column", 0)) && o.push(a);

      for (var n in r) {
        var a,
            i = r[n][0] || "";
        i && (i = i.substr(1, i.length - 2)), (a = t.checkColumnIsEmpty(e, "Column", i, "Column", n)) && o.push(a);
      }

      return o;
    }), this.addRule(function (e) {
      var o = [],
          r = e.param.condition;

      for (var n in r) {
        var a = r[n][0] || "";
        a && (a = a.substr(1, a.length - 2));
        var i = t.checkColumnExists(e, "Column", a, 0);
        i && (i.paramIndex = n, o.push(i));
      }

      return o;
    });
  }, e.prototype.operatorRule = function (t) {
    if (this._hasSchema(t)) {
      var e = this,
          o = [],
          r = e._getSchema(t);

      if (void 0 !== r && $.map(r, function (t) {
        if ("string" == t.type) return t;
      }), $.each(t.param.condition, function (r, n) {
        e.isEmptyForString(n[1]) && o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "Operator",
          paramIndex: r,
          messageParam: ["Operator"]
        }, t));
      }), 0 === t.param.condition.length) {
        o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "Operator",
          paramIndex: 0,
          messageParam: ["Operator"]
        }, t));
      }

      return o;
    }
  }, e.prototype.operandRule = function (t) {
    if (this._hasSchema(t)) {
      var e = this,
          o = [];

      if ($.each(t.param.condition, function (r, n) {
        var a = {
          errorCode: "BR-0033",
          param: "Operand",
          paramIndex: r,
          messageParam: ["Operand"]
        };
        e.isEmptyForString(n[2]) && o.push(e.problemFactory.createProblem(a, t));
      }), 0 === t.param.condition.length) {
        o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "Operand",
          paramIndex: 0,
          messageParam: ["Operand"]
        }, t));
      }

      return o;
    }
  }, t.VA.Core.Functions.Library.conditionFilter.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.elementwiseProduct = {
    category: "manipulation",
    defaultFnUnit: {
      func: "elementwiseProduct",
      name: "ElementwiseProduct",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "weight-array": "",
        "weight-column": [[]]
      },
      display: {
        label: "Elementwise Product",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "this function returns the elementwise(Hadamard) product. Given number type columns and a fixed weight vector with (length) = (column length).",
    tags: ["elementwise", "Product", "element", "wise", "Elementwise Product", "hadamard product", "weight vector"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "weight-column": this.renderWeightColumn
    }, this.createColumnsControl(), this.createWeightColumnControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(this.$columns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("columns", o.items);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createWeightColumnControl = function (t) {
    var e = this;
    this.$weightColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Weight Column", function (t) {
      t.append(this.$weightColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          e.createColumnListCommand("weight-column", o.items);
        }
      };
      e.weightColumnControl = e.createColumnList(e.$weightColumn, o);
    });
  }, e.prototype.fillControlValues = function (t) {
    var e,
        o = [],
        r = [];
    (o = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : []).filter(function (t) {
      "number" === t.type && r.push(t);
    }), this.columnsControl.setItems(r), e = this.dataMap ? this.options.fnUnit[IN_DATA][1] ? this.dataMap[this.options.fnUnit[IN_DATA][1]].columns : o : [], this.weightColumnControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderWeightColumn = function () {
    var t = this.options.fnUnit.param;
    this.weightColumnControl.setSelectedItems(t["weight-column"][0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "weight-column" === this.problems[t].param && this.createValidationContent(this.$weightColumn, this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.elementwiseProduct.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_WEIGHT_COLUMN = "weight-column", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.elementwiseProduct.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.imputeDatetime = {
    category: "manipulation",
    defaultFnUnit: {
      func: "imputeDatetime",
      name: "ExtendDateTime",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "impute-unit": "day"
      },
      display: {
        label: "Extend Datetime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It estimates and fills in an empty or missing DateTime by checking and extending other DateTimes back-and-forth.",
    tags: ["Extend Datetime", "ExtendDatetime", "Timeseries", "Preprocessing", "Datetime", "datetime", "estimates", "fill data", "empty", "missing", "year", "month", "day", "hour", "minute"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "impute-unit": this.renderImputeUnit
    }, this.createColumnsControls(), this.createImputeUnitControls();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 1,
        multiple: !1,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommand("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createImputeUnitControls = function () {
    var t = this;
    this.$imputeUnit = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = [{
      label: "Year",
      value: "year"
    }, {
      label: "Month",
      value: "month"
    }, {
      label: "Day",
      value: "day"
    }, {
      label: "Hour",
      value: "hour"
    }, {
      label: "Minute",
      value: "minute"
    }],
        o = this.addPropertyControl("Impute Unit", function (o) {
      t.createDropDownList(this.$imputeUnit, {
        source: e
      }), o.append(this.$imputeUnit.parent()), t.$imputeUnit.on("change", function () {
        var e = t.$imputeUnit.jqxDropDownList("getSelectedItem") ? t.$imputeUnit.jqxDropDownList("getSelectedItem").value : "";
        t.createCommonCommand("impute-unit", e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "impute-unit", "Impute Unit");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnsControl.setItems(t);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderImputeUnit = function () {
    var t = this.options.fnUnit.param;
    void 0 === t["impute-unit"] || "" === t["impute-unit"] ? this.$imputeUnit.jqxDropDownList("selectIndex", -1) : this.$imputeUnit.jqxDropDownList("selectItem", t["impute-unit"]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.columnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.imputeDatetime.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.imputeDatetime.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.imputeNumberTypeFillColumn = {
    category: "manipulation",
    defaultFnUnit: {
      func: "imputeNumberTypeFillColumn",
      name: "ImputeNumberTypeFillColumn",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "abnormal-number": "NaN",
        "fill-method": "to",
        "fill-number": "0"
      },
      display: {
        label: "Replace Missing Number",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It handles NaN, null and any double type abnormal values which can be customized by setting parameters.",
    tags: ["Replace Missing Number", "ReplaceMissingNumber", "Filter", "Transform", "Preprocessing", "refine", "preprocess", "null", "nan"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.numericTypes = ["smallint", "integer", "bigint", "decimal", "numeric", "real", "double", "float", "number", "int"], this.PARAM_COLUMNS = "columns", this.PARAM_ABNORMAL_NUMBER = "abnormal-number", this.PARAM_FILL_METHOD = "fill-method", this.PARAM_FILL_NUMBER = "fill-number", this.render = {
      columns: this.renderColumnsControl,
      "abnormal-number": this.renderAbnormalNumberControl,
      "fill-method": this.renderFillMethodControl,
      "fill-number": this.renderFillNumberControl
    }, this.createColumnsControl(), this.createAbnormalNumberControl(), this.createFillMethodControl();
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.getFillMethodValue = function () {
    var t = "",
        e = this.$fillMethodControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radiocontrol");
    return $.each(e, function (e, o) {
      $(o).jqxRadioButton("val") && (t = $(o).attr("value"));
    }), t;
  }, e.prototype.getAbnormalNumberValue = function () {
    var t = "",
        e = this.$abnormalNumberControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radiocontrol"),
        o = this.$abnormalNumberControl.abnormalNumber;
    return $.each(e, function (e, r) {
      if ($(r).jqxRadioButton("val")) return "" !== $(r).attr("value") ? (t = $(r).attr("value"), !1) : (t = o.getValue(), !1);
    }), t.toString();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columnsWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columnsWidget);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed() {
          var e = t.createColumnsCommand();
          t.executeCommand(e);
        }
      };
      t.$columnsControl = t.createColumnList(t.$columnsWidget, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiocontrol">' + e + "</div>");
    t.append(n);
    var a = "";
    a = "" === e ? "brtc-va-editors-sheet-controls-width-1" : "to" === e ? "brtc-va-editors-sheet-controls-width-2" : "brtc-va-editors-sheet-controls-width-12", this.createRadioButton(n, {
      groupName: o
    }, a), n.attr("value", e), t[e] = n, n.on("checked", function (e) {
      var n,
          a = $(e.target).attr("value"),
          i = !1;
      "abnormalNumber" === o ? (i = "" !== a, n = r.createAbnormalNumberCommand()) : "fillMethod" === o && (i = "to" !== a, n = r.createFillMethodCommand()), t[o].setDisabled(i), r.executeCommand(n);
    });
  }, e.prototype.createNumberInputControl = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol"/>');
    t.append(r);
    var n = "";
    "abnormalNumber" === e ? n = "brtc-va-editors-sheet-controls-width-11" : "fillMethod" === e && (n = "brtc-va-editors-sheet-controls-width-10");
    var a = o.createNumericInput(r, {
      numberType: "double",
      min: void 0,
      max: void 0,
      minus: !0,
      placeholder: "Enter value"
    }, n);
    a.onChange(function (t) {
      var r;
      "abnormalNumber" === e ? r = o.createAbnormalNumberCommand(t) : "fillMethod" === e && (r = o.createFillNumberCommand(t)), o.executeCommand(r);
    }), t[e] = a;
  }, e.prototype.createAbnormalNumberControl = function () {
    var t = this;
    this.$abnormalNumberControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>');
    var e = this.addPropertyControl("Abnormal Number", function (e) {
      e.append(t.$abnormalNumberControl), t.createRadioButtonControl(t.$abnormalNumberControl, "Null", "abnormalNumber"), t.createRadioButtonControl(t.$abnormalNumberControl, "NaN", "abnormalNumber"), t.createRadioButtonControl(t.$abnormalNumberControl, "", "abnormalNumber"), t.createNumberInputControl(t.$abnormalNumberControl, "abnormalNumber");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "abnormal-number", "Abnormal Number");
  }, e.prototype.createFillMethodControl = function () {
    var t = this;
    this.$fillMethodControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>');
    this.addPropertyControl("Choose a method", function (e) {
      e.append(t.$fillMethodControl), t.createRadioButtonControl(t.$fillMethodControl, "to", "fillMethod"), t.createNumberInputControl(t.$fillMethodControl, "fillMethod"), t.createRadioButtonControl(t.$fillMethodControl, "mean", "fillMethod"), t.createRadioButtonControl(t.$fillMethodControl, "min", "fillMethod"), t.createRadioButtonControl(t.$fillMethodControl, "max", "fillMethod");
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.$columnsControl.setItems(this.getFilteredData());
  }, e.prototype.renderColumnsControl = function () {
    this.$columnsControl.setSelectedItems(this.options.fnUnit.param.columns[0]);
  }, e.prototype.renderAbnormalNumberControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ABNORMAL_NUMBER],
        e = this.$abnormalNumberControl.abnormalNumber;

    if (t) {
      if ("NaN" === t) return $(this.$abnormalNumberControl[t]).jqxRadioButton({
        checked: !0
      }), void e.setDisabled(!0);
      if ("Null" === t) return $(this.$abnormalNumberControl.Null).jqxRadioButton({
        checked: !0
      }), e.setDisabled(!0), void e.setValue("");
    }

    $(this.$abnormalNumberControl[""]).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!1), e.setValue(t);
  }, e.prototype.renderFillMethodControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_FILL_METHOD],
        e = this.$fillMethodControl.fillMethod;
    if (t) return $(this.$fillMethodControl[t]).jqxRadioButton({
      checked: !0
    }), "to" === t ? void e.setDisabled(!1) : void e.setDisabled(!0);
    $(this.$fillMethodControl.to).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!1);
  }, e.prototype.renderFillNumberControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_FILL_NUMBER];
    this.$fillMethodControl.fillMethod.setValue(t && "" !== t ? t : 0);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && (this.renderPropertyControlHeader(this.$columnsWidget, this.problems[t]), this.createValidationContent(this.$columnsWidget, this.problems[t])), this.problems[t].param === this.PARAM_FILL_NUMBER && (this.renderPropertyControlHeader(this.$fillMethodControl, this.problems[t]), this.createValidationContent(this.$fillMethodControl, this.problems[t])), this.problems[t].param === this.PARAM_ABNORMAL_NUMBER && (this.renderPropertyControlHeader(this.$abnormalNumberControl, this.problems[t]), this.createValidationContent(this.$abnormalNumberControl, this.problems[t]));
    }
  }, e.prototype.getFilteredData = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    return $.grep(t, function (t) {
      return "double" === t.internalType.toLowerCase() || "float" === t.internalType.toLowerCase() || "decimal" === t.internalType.toLowerCase();
    });
  }, e.prototype.createColumnsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createAbnormalNumberCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_ABNORMAL_NUMBER] = e || this.getAbnormalNumberValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createFillMethodCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_FILL_METHOD] = this.getFillMethodValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createFillNumberCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_FILL_NUMBER] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.imputeNumberTypeFillColumn.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_ABNORMAL_NUMBER = "abnormal-number", this.PARAM_FILL_METHOD = "fill-method", this.PARAM_FILL_NUMBER = "fill-number", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addAbnormalNumberRule(), this.addFillNumberRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "number");
    });
  }, e.prototype.addAbnormalNumberRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: this.PARAM_ABNORMAL_NUMBER,
        messageParam: ["Missing Number"]
      };
      if ("Null" !== e.param[this.PARAM_ABNORMAL_NUMBER] || "NaN" !== e.param[this.PARAM_ABNORMAL_NUMBER]) return t._checkStringIsEmpty(o, e, e.param[t.PARAM_ABNORMAL_NUMBER]);
    });
  }, e.prototype.addFillNumberRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: this.PARAM_FILL_NUMBER,
        messageParam: ["Replace Number"]
      };
      if ("to" === e.param[this.PARAM_FILL_METHOD]) return t._checkStringIsEmpty(o, e, e.param[t.PARAM_FILL_NUMBER]);
    });
  }, e = e, t.VA.Core.Functions.Library.imputeNumberTypeFillColumn.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.imputeStringTypeFillColumn = {
    category: "manipulation",
    defaultFnUnit: {
      func: "imputeStringTypeFillColumn",
      name: "ImputeStringTypeFillColumn",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "abnormal-string": "",
        "fill-string": ""
      },
      display: {
        label: "Replace Missing String",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["abnormal-string", "fill-string"],
    description: "It handles null, empty string and any string type abnormal values which can be customized by setting parameters.",
    tags: ["Replace Missing String", "ReplaceMissingString", "Filter", "Transform", "Preprocessing", "refine", "preprocess", "null"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.stringTypes = ["character", "char", "text", "string", "varchar"], this.PARAM_COLUMNS = "columns", this.PARAM_ABNORMAL_STRING = "abnormal-string", this.PARAM_FILL_STRING = "fill-string", this.render = {
      columns: this.renderColumnsControl,
      "abnormal-string": this.renderAbnormalStringControl,
      "fill-string": this.renderFillStringControl
    }, this.createColumnsControl(), this.createAbnormalStringControl(), this.createFillStringControl();
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columnsWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columnsWidget);
      var o = {
        rowCount: 5,
        changed: function changed() {
          var e = t.createColumnsCommand();
          t.executeCommand(e);
        }
      };
      t.$columnsControl = t.createColumnList(t.$columnsWidget, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiocontrol">' + e + "</div>");
    t.append(n);
    var a = "";
    a = "" === e ? "brtc-va-editors-sheet-controls-width-1" : "brtc-va-editors-sheet-controls-width-12", this.createRadioButton(n, {
      groupName: o
    }, a), n.on("checked", function (e) {
      var n,
          a = "" !== $(e.target).attr("value");
      "abnormalString" === o && (t[o].jqxInput("disabled", a), n = r.createAbnormalStringCommand()), r.executeCommand(n);
    }), n.attr("value", e), t[e] = n;
  }, e.prototype.getAbnormalStringValue = function () {
    var t = "",
        e = this.$abnormalStringControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radiocontrol"),
        o = this.$abnormalStringControl.abnormalString;
    return $.each(e, function (e, r) {
      if ($(r).jqxRadioButton("val")) return "" !== $(r).attr("value") ? (t = $(r).attr("value"), !1) : (t = o.jqxInput("val"), !1);
    }), t.toString();
  }, e.prototype.createAbnormalStringControl = function () {
    var t = this;
    this.$abnormalStringControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>'), this.$abnormalStringInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-inputcontrol"/>');
    var e = this.addPropertyControl("Abnormal String", function (e) {
      e.append(t.$abnormalStringControl), t.createRadioButtonControl(t.$abnormalStringControl, "Null", "abnormalString"), t.createRadioButtonControl(t.$abnormalStringControl, "", "abnormalString"), t.$abnormalStringControl.append(this.$abnormalStringInput);
      t.createInput(t.$abnormalStringInput, {
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-11"), t.$abnormalStringInput.on("change", function (e) {
        if (t.isInputValueChanged("abnormal-string", $(this).val())) {
          var o = t.createAbnormalStringCommand();
          t.executeCommand(o);
        }
      }), t.$abnormalStringControl.abnormalString = t.$abnormalStringInput;
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "abnormal-string", "Abnormal String");
  }, e.prototype.createFillStringControl = function () {
    var t = this;
    this.$fillStringControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-inputcontrol"/>');
    var e = this.addPropertyControl("Replace String", function (e) {
      e.append(t.$fillStringControl), t.createInput(t.$fillStringControl, {
        placeHolder: "Enter value"
      }), t.$fillStringControl.on("change", function (e) {
        if (t.isInputValueChanged("fill-string", $(this).val())) {
          var o = t.createFillStringCommand();
          t.executeCommand(o);
        }
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "fill-string", "Replace String");
  }, e.prototype.fillControlValues = function () {
    this.$columnsControl.setItems(this.getFilteredData());
  }, e.prototype.renderColumnsControl = function () {
    this.$columnsControl.setSelectedItems(this.options.fnUnit.param.columns[0]);
  }, e.prototype.renderAbnormalStringControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ABNORMAL_STRING],
        e = this.$abnormalStringControl.abnormalString;
    void 0 !== t ? "Null" === t ? ($(this.$abnormalStringControl[t]).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !0), e.jqxInput("val", "")) : ($(this.$abnormalStringControl[""]).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !1), e.jqxInput("val", t)) : ($(this.$abnormalStringControl.Null).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !1), e.jqxInput("val", ""));
  }, e.prototype.renderFillStringControl = function () {
    this.$fillStringControl.jqxInput("val", this.options.fnUnit.param[this.PARAM_FILL_STRING] ? this.options.fnUnit.param[this.PARAM_FILL_STRING] : "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && (this.renderPropertyControlHeader(this.$columnsWidget, this.problems[t]), this.createValidationContent(this.$columnsWidget, this.problems[t]));
    }
  }, e.prototype.getFilteredData = function () {
    var t = [],
        e = this,
        o = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    return $.each(o, function (o, r) {
      -1 !== $.inArray(r.internalType.toLowerCase(), e.stringTypes) && t.push(r);
    }), t;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createAbnormalStringCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return "Null" === this.getAbnormalStringValue() ? ((e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      },
      renderParams: [this.PARAM_COLUMNS, this.PARAM_ABNORMAL_STRING, this.PARAM_FILL_STRING]
    }).ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), e.ref.param[this.PARAM_FILL_STRING] = this.$fillStringControl.jqxInput("val"), new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, e)) : (e.ref.param[this.PARAM_ABNORMAL_STRING] = this.getAbnormalStringValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e));
  }, e.prototype.createFillStringCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_FILL_STRING] = this.$fillStringControl.jqxInput("val"), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.imputeStringTypeFillColumn.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "string");
    });
  }, e = e, t.VA.Core.Functions.Library.imputeStringTypeFillColumn.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.independentFilter = {
    category: "manipulation",
    defaultFnUnit: {
      func: "independentFilter",
      name: "IndependentFilter",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        threshold: ""
      },
      display: {
        label: "Independent Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Given a collection of number type columns, this function returns a maximal linearly independent set of columns.",
    tags: ["Independent Filter", "Filter", "feature selection", "dimension reduction", "qr decomposition", "gram schmidt"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns,
      threshold: this.renderThreshold
    }, this.createColumnsControl(), this.createHoldColumnsControl(), this.createThresholdControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(t.$holdColumns);
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, {
        rowCount: 3,
        multiple: !0
      }), t.holdColumnsControl.onChange(function () {
        var e = t.createHoldColumnsCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createThresholdControl = function () {
    var e = this;
    this.$threshold = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Threshold", function (o) {
      o.append(e.$threshold);
      var r = {
        numberType: "double",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.000001 (0 <= value)")
      };
      e.thresholdControl = e.createNumericInput(e.$threshold, r), e.thresholdControl.onChange(function () {
        var t = e.createThresholdCommand();
        e.executeCommand(t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "threshold", "Threshold");
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.holdColumnsControl.setItems(this.columnNameArray);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param["hold-columns"];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderThreshold = function () {
    var t = this.options.fnUnit.param.threshold;
    this.thresholdControl.setValue(t || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns.parent(), this.problems[t]), "threshold" === this.problems[t].param && this.createValidationContent(this.$threshold, this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createHoldColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["hold-columns"] = [[]];
    var o = this.holdColumnsControl.getSelectedItems();
    return o && (e.ref.param["hold-columns"][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createThresholdCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.threshold = "";
    var o = this.thresholdControl.getValue();
    return o && (e.ref.param.threshold = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.independentFilter.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARMA_THRESHOLD = "threshold", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addThresholdRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return parseFloat(e.param[t.PARMA_THRESHOLD]) <= 0 && o.push({
        level: "error",
        mid: e.parent().mid,
        fid: e.fid,
        code: "BR-0010",
        message: "This variable should be a double value greater than zero.",
        param: "threshold"
      }), o;
    });
  }, e = e, t.VA.Core.Functions.Library.independentFilter.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.lengthFilter = {
    category: "manipulation",
    defaultFnUnit: {
      func: "lengthFilter",
      name: "LengthFilter",
      inData: [],
      outData: [],
      param: {
        condition: []
      },
      display: {
        label: "Length Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The data selection which is the string lenghth condition satisfied.",
    tags: ["Length Filter", "LengthFilter", "Filter", "Remove", "Preprocessing", "string"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    this.columnNameArray = [], t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      condition: this.renderCondition
    }, this.propertyControlArray = [], this.createControlExpander(), this.createFilterControl(), this.createAddButton();
  }, e.prototype.createControlExpander = function () {
    this.addPropertyControl("Condition", function (t) {}, {
      mandatory: !0
    }), this.$contents = this.$contentsArea.find(".brtc-va-editors-sheet-controls-propertycontrol-contents");
  }, e.prototype.createAddButton = function () {
    var e = this;
    if (this.$contents.find(".brtc-va-editors-sheet-controls-propertycontrol-addbutton").length > 0) return !1;
    this.$addButton = $('<input type="button" class= "brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Condition"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.$addButton.detach(), e.createFilterControl(), e.$addButton.appendTo(e.$contents), e.createCommand();
    });
  }, e.prototype.fillControlValues = function () {
    var t = this;
    this.columnNameArray = [];
    var e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    this.columnNameArray = $.grep(e, function (t) {
      return "string" === t.type;
    }), $.each(this.propertyControlArray, function (e) {
      t.propertyControlArray[e].columnsControl.setItems(t.columnNameArray);
    });
  }, e.prototype.createFilterControl = function (t) {
    var e = this,
        o = new Object();
    this.filterSource = [{
      label: "<",
      value: "<"
    }, {
      label: "<=",
      value: "<="
    }, {
      label: ">",
      value: ">"
    }, {
      label: ">=",
      value: ">="
    }, {
      label: "==",
      value: "=="
    }, {
      label: "!=",
      value: "!="
    }], o.$inputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>'), this.$contents.append(o.$inputControl), o.$andOrDiv = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-and"></div>'), o.$inputControl.append(o.$andOrDiv), o.$andControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton" style="float: left">And</div>'), o.$orControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton" style="float: left">Or</div>'), o.$andOrDiv.append(o.$andControl).append(o.$orControl), o.$removeButton = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>'), o.$inputControl.append(o.$removeButton), o.$inputWrapper = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-wrapper"/>'), o.$inputControl.append(o.$inputWrapper), o.$columnInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), o.$operatorInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-operator"/>'), o.$operandInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-operand"/>'), o.$inputWrapper.append(o.$columnInput), o.$inputWrapper.append(o.$operatorInput), o.$inputWrapper.append(o.$operandInput), e.createRadioButton(o.$andControl, {
      width: "60",
      groupName: "Group" + this.propertyControlArray.length,
      checked: !0
    }), e.createRadioButton(o.$orControl, {
      width: "60",
      groupName: "Group" + this.propertyControlArray.length
    }), o.$andOrDiv.find(".brtc-va-editors-sheet-controls-wrapper").css("float", "left"), o.$andControl.on("checked", function (t) {
      e.createCommand();
    }), o.$orControl.on("checked", function (t) {
      e.createCommand();
    }), this.createDropDownList(o.$operatorInput, {
      source: this.filterSource
    });
    o.numberControl = this.createNumericInput(o.$operandInput, {
      numberType: "int",
      minus: !1,
      placeholder: "Enter value"
    }, "brtc-va-editors-sheet-controls-propertycontrol-filter-number-input"), o.numberControl.onChange(function (t) {
      e.createCommand();
    });
    var r = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      sort: "ascending",
      changed: function changed(t, o) {
        e.createCommand();
      }
    };
    o.columnsControl = this.createColumnList(o.$columnInput, r), o.columnsControl.setItems(this.columnNameArray), this.$contents.children() && ($(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text(""), $(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-deck-remove").css("display", "none")), this.createFilterControlEvent(o), this.propertyControlArray.push(o);
  }, e.prototype.createFilterControlEvent = function (t) {
    var e = this;
    t.$operatorInput.on("change", function (t) {
      e.createCommand();
    }), t.$removeButton.click(function (t) {
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;
      o > -1 && e.propertyControlArray.splice(o, 1), $(this).parent().remove(), e.$contents.children() && $(e.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text(""), e.createCommand(), t.stopPropagation();
    });
  }, e.prototype.renderCondition = function () {
    var t = this.options.fnUnit.param.condition;

    if (t && t.length > 0) {
      for (var e in this.$addButton.detach(), t) {
        e > this.propertyControlArray.length - 1 && this.createFilterControl(), this.propertyControlArray[e].columnsControl.setSelectedItems("" == t[e][0] ? [] : [t[e][0]]);
        var o = this.propertyControlArray[e].$operatorInput.jqxDropDownList("getSelectedItem");
        this.propertyControlArray[e].$operatorInput.jqxDropDownList("unselectItem", o), this.propertyControlArray[e].$operatorInput.val(t[e][1]), this.propertyControlArray[e].$operandInput.children().val(t[e][2]), void 0 === t[e][3] ? this.propertyControlArray[e].$andControl.jqxRadioButton("check") : "and" === t[e][3] ? this.propertyControlArray[e].$andControl.jqxRadioButton("checked") || this.propertyControlArray[e].$andControl.jqxRadioButton("check") : this.propertyControlArray[e].$orControl.jqxRadioButton("checked") || this.propertyControlArray[e].$orControl.jqxRadioButton("check");
      }

      if (t.length < this.propertyControlArray.length) {
        for (var r = this.propertyControlArray.length - 1; r == t.length; r--) {
          $(this.propertyControlArray[r].$inputControl).remove();
        }

        this.propertyControlArray.splice(t.length, this.propertyControlArray.length - t.length);
      }

      this.$addButton.appendTo(this.$contents);
    } else this.resetPropertyControls();
  }, e.prototype.resetPropertyControls = function () {
    for (var t = this.propertyControlArray.length - 1; t >= 0; t--) {
      0 === t ? (this.propertyControlArray[t].columnsControl.setSelectedItems([]), this.propertyControlArray[t].$operatorInput.jqxDropDownList("selectIndex", -1), this.propertyControlArray[t].$operandInput.children().val("")) : ($(this.propertyControlArray[t].$inputControl).remove(), this.propertyControlArray.splice(t, 1));
    }
  }, e.prototype.createCommand = function () {
    var e = this.getConditionValue(),
        o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          condition: e
        }
      }
    },
        r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.getConditionValue = function () {
    var t = [];

    for (var e in this.propertyControlArray) {
      var o,
          r = this.propertyControlArray[e].columnsControl.getSelectedItems()[0],
          n = this.propertyControlArray[e].$operatorInput.val(),
          a = this.propertyControlArray[e].$operandInput.children().val(),
          i = this.propertyControlArray[e].$andControl.jqxRadioButton("checked") ? "and" : "or";
      o = [r, n, a, 0 == e ? "and" : i], t.push(o);
    }

    return t;
  }, e.prototype.renderValidation = function () {
    var t = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-column"),
        e = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-input-operand"),
        o = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-input-operator");

    for (var r in this.problems) {
      "Column" === this.problems[r].param && this.createValidationContent($(t[this.problems[r].paramIndex]).parent(), this.problems[r]), "ColumnType" === this.problems[r].param && this.createValidationContent($(t[this.problems[r].paramIndex]).parent(), this.problems[r]), "Operand" === this.problems[r].param && this.createValidationContent($(e[this.problems[r].paramIndex]).parent(), this.problems[r]), "Operator" === this.problems[r].param && this.createValidationContent($(o[this.problems[r].paramIndex]).parent(), this.problems[r]);
    }
  }, t.VA.Core.Functions.Library.lengthFilter.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addConditionRule(), this.addRule(this.operatorRule), this.addRule(this.operandRule);
  }, e.prototype.addConditionRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [],
          r = e.param.condition;
      0 === r.length && (a = t.checkColumnIsEmpty(e, "Column", "", "Column", 0)) && o.push(a);

      for (var n in r) {
        var a,
            i = r[n][0] || "";
        (a = t.checkColumnIsEmpty(e, "Column", i, "Column", n)) && o.push(a);
      }

      return o;
    }), this.addRule(function (e) {
      var o = [],
          r = e.param.condition;

      for (var n in r) {
        var a = r[n][0] || "",
            i = t.checkColumnExists(e, "Column", a, 0);
        i && (i.paramIndex = n, o.push(i));
      }

      return o;
    });
  }, e.prototype.operatorRule = function (t) {
    if (this._hasSchema(t)) {
      var e = this,
          o = [];

      if ($.each(t.param.condition, function (r, n) {
        var a = {
          errorCode: "BR-0033",
          param: "Operator",
          paramIndex: r,
          messageParam: ["Operator"]
        };
        e.isEmptyForString(n[1]) && o.push(e.problemFactory.createProblem(a, t));
      }), 0 === t.param.condition.length) {
        o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "Operator",
          paramIndex: 0,
          messageParam: ["Operator"]
        }, t));
      }

      return o;
    }
  }, e.prototype.operandRule = function (t) {
    if (this._hasSchema(t)) {
      var e = this,
          o = [];

      if ($.each(t.param.condition, function (r, n) {
        var a = {
          errorCode: "BR-0033",
          param: "Operand",
          paramIndex: r,
          messageParam: ["Operand"]
        };
        e.isEmptyForString(n[2]) && o.push(e.problemFactory.createProblem(a, t));
      }), 0 === t.param.condition.length) {
        o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "Operand",
          paramIndex: 0,
          messageParam: ["Operand"]
        }, t));
      }

      return o;
    }
  }, e = e, t.VA.Core.Functions.Library.lengthFilter.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.mahalanobisDistanceOutlierDetection = {
    category: "manipulation",
    defaultFnUnit: {
      func: "mahalanobisDistanceOutlierDetection",
      name: "MahalanobisDistanceOutlierDetection",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "hold-cols": [],
        "num-clusters": "",
        filter: "false",
        "confidence-level": "",
        "num-resamples": "",
        "sampling-rate": "",
        "cluster-col": "",
        "distance-col": "",
        "prediction-col": "",
        seed: "",
        "outlier-cluster-size": "",
        "group-by": []
      },
      display: {
        label: "Outlier Detection (K-means, Mahalanobis Distance)",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs an outlier detection based on k-means clustering and Mahalanobis distance.",
    mandatory: [],
    tags: ["outlier", "mahalanobis", "mahalanobisdistance", "mahalanobis distance", "outlier"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "hold-cols": this.renderHoldColsControl,
      "num-clusters": this.renderNumClustersControl,
      filter: this.renderFilterControl,
      "confidence-level": this.renderConfidenceLevelControl,
      "num-resamples": this.renderNumResamplesControl,
      "sampling-rate": this.renderSamplingRateControl,
      "cluster-col": this.renderClusterColControl,
      "distance-col": this.renderDistanceColControl,
      "prediction-col": this.renderPredictionColControl,
      seed: this.renderSeedControl,
      "outlier-cluster-size": this.renderOutlierClusterSizeControl,
      "group-by": this.renderGroupByControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createHoldColsControl(), this.createNumClustersControl(), this.createFilterControl(), this.createConfidenceLevelControl(), this.createNumResamplesControl(), this.createSamplingRateControl(), this.createClusterColControl(), this.createDistanceColControl(), this.createPredictionColControl(), this.createSeedControl(), this.createOutlierClusterSizeControl(), this.createGroupByControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Feature Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createNumClustersControl = function (t) {
    var e = this;
    e.$elements["num-clusters"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Number of Clusters", function (t) {
      t.append(e.$elements["num-clusters"]);
      e.controls["num-clusters"] = e.createNumericInput(e.$elements["num-clusters"], {
        placeholder: "1",
        numberType: "int"
      }), e.controls["num-clusters"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-clusters", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumClustersControl = function (t) {
    var e = this.options.fnUnit.param["num-clusters"];
    this.controls["num-clusters"].setValue(e || "");
  }, e.prototype.createFilterControl = function (t) {
    var e = this;
    e.$elements["filter.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["filter.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.addPropertyControl("Filter", function (t) {
      t.append(e.$elements["filter.true"]), e.controls["filter.true"] = e.createRadioButton(e.$elements["filter.true"], {
        width: "undefined",
        groupName: "filter"
      }), e.$elements["filter.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("filter", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["filter.false"]), e.controls["filter.false"] = e.createRadioButton(e.$elements["filter.false"], {
        width: "undefined",
        groupName: "filter",
        checked: !0
      }), e.$elements["filter.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("filter", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFilterControl = function (t) {
    var e = "filter." + this.options.fnUnit.param.filter;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createConfidenceLevelControl = function (t) {
    var e = this;
    e.$elements["confidence-level"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Confidence Level", function (t) {
      t.append(e.$elements["confidence-level"]);
      e.controls["confidence-level"] = e.createNumericInput(e.$elements["confidence-level"], {
        placeholder: "0.95",
        numberType: "double"
      }), e.controls["confidence-level"].onChange(function () {
        var t = e.createSetParameterValueCommand("confidence-level", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderConfidenceLevelControl = function (t) {
    var e = this.options.fnUnit.param["confidence-level"];
    this.controls["confidence-level"].setValue(e || "");
  }, e.prototype.createNumResamplesControl = function (t) {
    var e = this;
    e.$elements["num-resamples"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Number of Resamples", function (t) {
      t.append(e.$elements["num-resamples"]);
      e.controls["num-resamples"] = e.createNumericInput(e.$elements["num-resamples"], {
        placeholder: "0 (without bootstrapping)",
        numberType: "int"
      }), e.controls["num-resamples"].onChange(function () {
        var t = e.createSetParameterValueCommand("num-resamples", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumResamplesControl = function (t) {
    var e = this.options.fnUnit.param["num-resamples"];
    this.controls["num-resamples"].setValue(e || "");
  }, e.prototype.createSamplingRateControl = function (t) {
    var e = this;
    e.$elements["sampling-rate"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Sampling Rate", function (t) {
      t.append(e.$elements["sampling-rate"]);
      e.controls["sampling-rate"] = e.createNumericInput(e.$elements["sampling-rate"], {
        placeholder: "1.0",
        numberType: "double"
      }), e.controls["sampling-rate"].onChange(function () {
        var t = e.createSetParameterValueCommand("sampling-rate", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSamplingRateControl = function (t) {
    var e = this.options.fnUnit.param["sampling-rate"];
    this.controls["sampling-rate"].setValue(e || "");
  }, e.prototype.createClusterColControl = function (t) {
    var e = this;
    e.$elements["cluster-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Cluster Column", function (t) {
      t.append(e.$elements["cluster-col"]);
      e.controls["cluster-col"] = e.createInput(e.$elements["cluster-col"], {
        placeHolder: "cluster"
      }), e.$elements["cluster-col"].on("change", function (t) {
        if (e.isInputValueChanged("cluster-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("cluster-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderClusterColControl = function (t) {
    var e = this.options.fnUnit.param["cluster-col"];
    this.$elements["cluster-col"].val(e || "");
  }, e.prototype.createDistanceColControl = function (t) {
    var e = this;
    e.$elements["distance-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Distance Column", function (t) {
      t.append(e.$elements["distance-col"]);
      e.controls["distance-col"] = e.createInput(e.$elements["distance-col"], {
        placeHolder: "distance"
      }), e.$elements["distance-col"].on("change", function (t) {
        if (e.isInputValueChanged("distance-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("distance-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderDistanceColControl = function (t) {
    var e = this.options.fnUnit.param["distance-col"];
    this.$elements["distance-col"].val(e || "");
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Prediction Column", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.createSeedControl = function (t) {
    var e = this;
    e.$elements.seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Seed", function (t) {
      t.append(e.$elements.seed);
      e.controls.seed = e.createNumericInput(e.$elements.seed, {
        placeholder: "random seed",
        numberType: "int"
      }), e.controls.seed.onChange(function () {
        var t = e.createSetParameterValueCommand("seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSeedControl = function (t) {
    var e = this.options.fnUnit.param.seed;
    this.controls.seed.setValue(e || "");
  }, e.prototype.createOutlierClusterSizeControl = function (t) {
    var e = this;
    e.$elements["outlier-cluster-size"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Outlier Cluster Size", function (t) {
      t.append(e.$elements["outlier-cluster-size"]);
      e.controls["outlier-cluster-size"] = e.createNumericInput(e.$elements["outlier-cluster-size"], {
        placeholder: "1",
        numberType: "int"
      }), e.controls["outlier-cluster-size"].onChange(function () {
        var t = e.createSetParameterValueCommand("outlier-cluster-size", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderOutlierClusterSizeControl = function (t) {
    var e = this.options.fnUnit.param["outlier-cluster-size"];
    this.controls["outlier-cluster-size"].setValue(e || "");
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements["group-by"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements["group-by"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("group-by", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["group-by"] = e.createColumnList(e.$elements["group-by"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupByControl = function (t) {
    var e = this.options.fnUnit.param["group-by"];
    this.controls["group-by"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["hold-cols"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["group-by"].setItems(t);
  }, t.VA.Core.Functions.Library.mahalanobisDistanceOutlierDetection.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule();
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.mahalanobisDistanceOutlierDetection.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.minmaxFilter = {
    category: "manipulation",
    defaultFnUnit: {
      func: "minmaxFilter",
      name: "FunctionFilter",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "filter-type": "max",
        groupby: []
      },
      display: {
        label: "Function Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Min/Max/Min,Max both/data except for Min,Max",
    tags: ["Function Filter", "FunctionFilter", "Filter", "Remove", "Preprocessing", "min max filter", "get maximum minimum values"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    this.columnNameArray = [], t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumn,
      "filter-type": this.renderFilterType,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createFilterControl(), this.createGroupByControl();
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [];
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    this.columnNameArray = $.grep(t, function (t) {
      return "number" === t.type;
    }), this.$columnsControl.setItems(this.columnNameArray), this.groupbyControl.setItems(t);
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createColumnListCommand("columns", o.items);
        }
      };
      t.$columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createFilterControl = function (t) {
    var e = this;
    this.$filterType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-filter-type"/>'), this.filterSource = [{
      label: "Max",
      value: "max"
    }, {
      label: "Min",
      value: "min"
    }, {
      label: "Both",
      value: "both"
    }, {
      label: "Other",
      value: "other"
    }];
    var o = this.addPropertyControl("Filter Type", function (t) {
      t.append(e.$filterType), e.createDropDownList(e.$filterType, {
        source: this.filterSource
      }, "brtc-va-editors-sheet-controls-propertycontrol-filter-input");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "filter-type", "Filter Type"), this.createFilterControlEvent();
  }, e.prototype.createFilterControlEvent = function () {
    var t = this;
    this.$filterType.on("change", function (e) {
      t.createCommand();
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.renderColumn = function () {
    var t = this.options.fnUnit.param.columns[0];
    this.$columnsControl.setSelectedItems(t);
  }, e.prototype.renderFilterType = function () {
    var t = this.options.fnUnit.param["filter-type"];
    void 0 === t || "" === t ? this.$filterType.jqxDropDownList("selectIndex", -1) : this.$filterType.jqxDropDownList("selectItem", t);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: this.getConditionValue()
      }
    },
        o = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
    this.executeCommand(o);
  }, e.prototype.getConditionValue = function () {
    return {
      columns: [this.$columnsControl.getSelectedItems()],
      "filter-type": this.$filterType.jqxDropDownList("getSelectedItem") ? this.$filterType.jqxDropDownList("getSelectedItem").value : ""
    };
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.minmaxFilter.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.minmaxFilter.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.outlierRemoval = {
    category: "manipulation",
    defaultFnUnit: {
      func: "outlierRemoval",
      name: "OutlierRemoval",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "outlier-method": "",
        multiplier: "",
        groupby: [],
        "hold-column": "false",
        "min-row": ""
      },
      display: {
        label: "Outlier Removal",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Remove outliers. Two OutlierRemoval methods are provided.",
    tags: ["Outlier Removal", "OutlierRemoval", "Removal", "Remove", "deleting", "remove outlier", "multiplier", "min row", "carling", "tukey"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "outlier-method": this.renderOutlierMethod,
      multiplier: this.renderMultiplier,
      groupby: this.renderGroupby,
      "hold-column": this.renderHoldColumn,
      "min-row": this.renderMinRow
    }, this.createColumnsControls(), this.createOutlierMethodControl(), this.createMultiplierControls(), this.createGroupByColumnsControl(), this.createHoldColumnControl(), this.createMinRowControls();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createOutlierMethodControl = function () {
    var t = this;
    this.$outlierMethod = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.formatSource = [{
      label: "Carling",
      value: "carling"
    }, {
      label: "Tukey",
      value: "tukey"
    }];
    var e = this.addPropertyControl("Outlier-Method", function (e) {
      t.createDropDownList(this.$outlierMethod, {
        source: this.formatSource
      }), e.append(this.$outlierMethod.parent()), t.$outlierMethod.on("change", function () {
        var e = t.$outlierMethod.jqxDropDownList("getSelectedItem") ? t.$outlierMethod.jqxDropDownList("getSelectedItem").value : "";
        t.createCommonCommand("outlier-method", e), "Carling" === e ? t.multiplierControl.$mainControl.attr("placeholder", "2.3") : "Tukey" === e ? t.multiplierControl.$mainControl.attr("placeholder", "1.5") : t.multiplierControl.$mainControl.attr("placeholder", "Default(Carling: 2.3, Tukey: 1.5)");
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "outlier-method", "Outlier Method");
  }, e.prototype.createMultiplierControls = function () {
    var t = this;
    this.$multiplier = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Multiplier", function (e) {
      e.append(t.$multiplier);
      var o = {
        numberType: "double",
        min: void 0,
        minus: void 0,
        placeholder: "Carling: 2.3, Tukey: 1.5 (0 < value)"
      };
      t.multiplierControl = t.createNumericInput(t.$multiplier, o), t.multiplierControl.onChange(function () {
        t.createCommonCommand("multiplier", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "multiplier", "Multiplier");
  }, e.prototype.createGroupByColumnsControl = function () {
    var t = this;
    this.$groupbyColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(this.$groupbyColumn);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed(e, o) {
          t.columnSingleListCommnad("groupby", o.items);
        }
      };
      t.groupbyColumnControl = t.createColumnList(t.$groupbyColumn, o);
    });
  }, e.prototype.createHoldColumnControl = function (t) {
    var e = this;
    this.$holdColumnControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-replacemode"/>');
    var o = this.addPropertyControl("Hold Column", function (t) {
      t.append(e.$holdColumnControl), e.createRadioButtonControl(e.$holdColumnControl, "True", "hold-column"), e.createRadioButtonControl(e.$holdColumnControl, "False", "hold-column");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "hold-column", "Hold Column");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          n = r.createCommonCommand(o, e);
      r.executeCommand(n);
    }), n.attr("value", e), t[e] = n;
  }, e.prototype.createMinRowControls = function () {
    var e = this;
    this.$minrow = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Min-Row", function (o) {
      o.append(e.$minrow);
      var r = {
        numberType: "int",
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (1 <= value)")
      };
      e.minrow = e.createNumericInput(e.$minrow, r), e.minrow.onChange(function () {
        e.createCommonCommand("min-row", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "min-row", "Min Row");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var e = $.grep(t, function (t) {
      return "number" === t.type;
    });
    this.columnsControl.setItems(e), this.groupbyColumnControl.setItems(t);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderOutlierMethod = function () {
    var t = this.options.fnUnit.param;
    void 0 === t["outlier-method"] || "" === t["outlier-method"] ? this.$outlierMethod.jqxDropDownList("selectIndex", -1) : this.$outlierMethod.jqxDropDownList("selectItem", t["outlier-method"]);
  }, e.prototype.renderMultiplier = function () {
    var t = this.options.fnUnit.param;
    this.options.fnUnit.param.multiplier && this.multiplierControl.setValue(t.multiplier ? t.multiplier : "");
  }, e.prototype.renderGroupby = function () {
    var t = this.options.fnUnit.param;
    this.groupbyColumnControl.setSelectedItems(t.groupby);
  }, e.prototype.renderHoldColumn = function () {
    var t = this.options.fnUnit.param["hold-column"];
    "true" === t ? t = "True" : "false" === t && (t = "False"), t && $(this.$holdColumnControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderMinRow = function () {
    this.minrow.setValue(this.options.fnUnit.param["min-row"] || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "outlier-method" === this.problems[t].param ? this.createValidationContent(this.$outlierMethod.parent(), this.problems[t]) : "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbyColumn, this.problems[t]);
    }
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.columnSingleListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && (r.ref.param.groupby = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.outlierRemoval.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_OUTLIER_METHOD = "outlier-method", this.PARAM_GROUPBY = "groupby", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addMethodRule(), this.addGroupByRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addMethodRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_OUTLIER_METHOD,
          messageParam: ["Outlier Method"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_OUTLIER_METHOD]);
      }
    });
  }, e.prototype.addGroupByRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [],
          r = t.checkColumnExists(e, t.PARAM_GROUPBY, e.param[t.PARAM_GROUPBY]);

      if (!r && e.param[t.PARAM_GROUPBY].length > 0) {
        var n = [];

        for (var a in e.param[t.PARAM_GROUPBY]) {
          var i = e.param[t.PARAM_GROUPBY][a];
          $.inArray(i, e.param[t.PARAM_COLUMNS][0]) > -1 && n.push("[" + i + "]");
        }

        n.length > 0 && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0057",
          param: this.PARAM_GROUPBY,
          messageParam: [n, "Columns", "Group By"]
        }, e));
      } else if (r) return r;

      return o;
    });
  }, e = e, t.VA.Core.Functions.Library.outlierRemoval.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.sort = {
    category: "manipulation",
    defaultFnUnit: {
      func: "sort",
      name: "Sort",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "sort-mode": [],
        groupby: []
      },
      display: {
        label: "Sort",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Any process of arranging items in sequence or in sets.",
    tags: ["Sort", "ascending", "descending", "order"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.selectedItems = [], this.changedItems = {}, this.render = {
      columns: this.renderSortRule,
      "sort-mode": this.renderSortRule,
      groupby: this.renderGroupBy
    }, this.createColumnSelector(), this.createSortRuleControl(), this.createGroupByControl();
  }, e.prototype.renderValues = function (t) {
    this.renderSortRule(), this.renderGroupBy();
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$newRowButtonArea, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createSortRuleControl = function () {
    var e = this;
    this.$sortRuleControl = $('<div class="brtc-va-selectbutton-container">   <button class="brtc-va-editors-sheet-controls-propertycontrol-columnlist-selectbutton">Select Columns</button></div><div class = "brtc-va-editors-sheet-controls-propertycontrol-sort-rule-control">   <div class = "brtc-va-editors-sheet-controls-propertycontrol-row-container"></div>   <div class = "brtc-va-editors-sheet-controls-propertycontrol-new-row-button-area"></div></div>'), this.$selectButton = this.$sortRuleControl.find(".brtc-va-editors-sheet-controls-propertycontrol-columnlist-selectbutton"), this.$selectButton.jqxButton({
      theme: t.VA.Env.Theme,
      height: "25px"
    }), this.$selectButton.on("click", function () {
      e.columnSelector.open(this, e.selectedItems);
    }), this.$rowContainer = this.$sortRuleControl.find(".brtc-va-editors-sheet-controls-propertycontrol-row-container"), this.$newRowButtonArea = this.$sortRuleControl.find(".brtc-va-editors-sheet-controls-propertycontrol-new-row-button-area"), this.addPropertyControl("Sort Rule", function (t) {
      t.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), t.addClass("brtc-va-sort-property"), t.append(e.$sortRuleControl), e.$rowContainer.sortable({
        axis: "y",
        handle: ".brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element-wrapper",
        update: function update(t, o) {
          e.executeSortRuleCommand(), e.updateIndexNumber();
        }
      }), e.createNewSortRuleButton();
    }, {
      mandatory: !0
    });
  }, e.prototype.createColumnSelector = function (e) {
    var o = this;
    this.columnSelector = new t.VA.Core.Editors.Sheet.Controls.ColumnSelector(this.$mainControl, {
      columnList: this,
      multiple: !0,
      changed: function changed(t, e) {
        if ("selectAll" === t) for (var r in o.selectedItems = [], o.$rowContainer.empty(), e) {
          $.inArray(e[r].name, o.selectedItems) < 0 && (o.changedItems[e[r].name] = "select"), o.createNewSortRuleControl(e[r].name, "ASC"), o.selectedItems.push(e[r].name);
        }

        if ("unselectAll" === t) {
          for (var r in e) {
            $.inArray(e[r].name, o.selectedItems) > -1 && (o.changedItems[e[r].name] = "unselect");
          }

          o.selectedItems = [], o.$rowContainer.empty();
        }

        "select" === t && ($.inArray(e.name, o.selectedItems) < 0 && (o.changedItems[e.name] = "select"), o.createNewSortRuleControl(e.name, "ASC"), o.selectedItems.push(e.name));

        if ("unselect" === t) {
          $.inArray(e.name, o.selectedItems) > -1 && (o.changedItems[e.name] = "unselect");
          var n = o.$sortRuleControl.find(".brtc-va-editors-sheet-controls-propertycontrol-row");

          for (var r in n) {
            if ($(n[r]).attr("column") === e.name) {
              n[r].remove();
              break;
            }
          }

          for (var a in o.selectedItems) {
            if (o.selectedItems[a] === e.name) {
              o.selectedItems.splice(a, 1);
              break;
            }
          }
        }

        if ("close" === t) {
          var i = [],
              s = [];

          for (var l in o.changedItems) {
            "select" === o.changedItems[l] ? i.push(l) : s.push(l);
          }

          (i.length > 0 || s.length > 0) && (o.executeSortRuleCommand(), o.updateIndexNumber()), o.changedItems = {};
        }
      }
    });
  }, e.prototype.createNewSortRuleButton = function () {
    var t = this,
        e = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-row brtc-va-editors-sheet-controls-propertycontrol-new-row-button">   <div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"></div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-button brtc-va-editors-sheet-controls-new-row-toggle-button"><i class="fa fa-sort"></i></div></div>');
    this.$newRowButtonArea.append(e);
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-combobox");
    this.newRowColumnList = this.createColumnList(o, {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !1
    }, "brtc-va-editors-sheet-controls-width-6", {
      width: "70%",
      height: "25px",
      "padding-left": "4px",
      "margin-left": "13px"
    }), this.newRowColumnList.onChange(function (e, o) {
      t.createNewSortRuleControl(o.items[0], "ASC"), t.selectedItems.push(o.items[0]), t.executeSortRuleCommand(), t.newRowColumnList.setSelectedItems([]), t.updateIndexNumber();
    });
  }, e.prototype.createNewSortRuleControl = function (t, e) {
    var o = this;
    t = t || "", e = e || "ASC";
    var r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-row">   <div class="brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element-wrapper">      <div class="brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element"></div>      <div class="brtc-va-editors-sheet-controls-propertycontrol-number"></div>   </div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"></div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-button brtc-va-editors-sheet-controls-propertycontrol-sort-mode-button"><i class="fa fa-sort"></i></div>   <div class="brtc-va-editors-sheet-controls-sort-rule-remove-button"></div></div>');
    this.$rowContainer.append(r), r.attr("column", t), r.attr("type", this.getColumnType(t)), r.attr("sort-mode", e), r.find(".brtc-va-editors-sheet-controls-propertycontrol-button").attr("title", e);
    var n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-number"),
        a = this.$rowContainer.find(".brtc-va-editors-sheet-controls-propertycontrol-row").length + 1;
    n.text(a + ""), r.find(".brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element-wrapper").attr("title", a + "");
    var i = r.find(".brtc-va-editors-sheet-controls-propertycontrol-combobox"),
        s = this.createColumnList(i, {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !1
    }, "brtc-va-editors-sheet-controls-width-6", {
      width: "70%",
      height: "25px"
    });
    s.onChange(function (t, e) {
      r.attr("column", e.items[0]), r.attr("type", o.getColumnType(e.items[0])), o.updateSortModeIcon(l, r.attr("sort-mode"), o.getColumnType(e.items[0])), o.executeSortRuleCommand();
    }), s.setItems(this.columnNameArray), s.setSelectedItems(t ? [t] : []), r.data("columnList", s);
    var l = r.find(".brtc-va-editors-sheet-controls-propertycontrol-button");
    l.on("click", function () {
      var t = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-row"),
          e = "ASC" === t.attr("sort-mode") ? "DESC" : "ASC";
      t.attr("sort-mode", e), $(this).attr("title", e), o.updateSortModeIcon(l, t.attr("sort-mode"), o.getColumnType(t.attr("column"))), o.executeSortRuleCommand();
    }), r.find(".brtc-va-editors-sheet-controls-sort-rule-remove-button").click(function (t) {
      var e = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-row");

      for (var r in e.remove(), o.selectedItems) {
        if (o.selectedItems[r] === e.attr("column")) {
          o.selectedItems.splice(r, 1);
          break;
        }
      }

      o.executeSortRuleCommand(), o.updateIndexNumber();
    }), this.updateSortModeIcon(l, e, this.getColumnType(t));
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var t = $.extend(!0, [], this.columnNameArray);
    this.columnSelector.setSource(t), this.newRowColumnList.setItems(t), this.groupbyControl.setItems(t);
  }, e.prototype.renderSortRule = function () {
    var t = this.options.fnUnit.param.columns,
        e = this.options.fnUnit.param["sort-mode"];

    if (e.length && t[0].length) {
      var o,
          r,
          n,
          a,
          i,
          s = this.$rowContainer.find(".brtc-va-editors-sheet-controls-propertycontrol-row"),
          l = s.length;

      if (l < t[0].length) {
        for (a = 0; a < l; a++) {
          o = s[a], (r = $(o).data("columnList")).setItems(this.columnNameArray), r.setSelectedItems([t[0][a]]), $(o).attr("column", t[0][a]), $(o).attr("type", this.getColumnType(t[0][a])), $(o).attr("sort-mode", e[a]), (n = $(o).find(".brtc-va-editors-sheet-controls-propertycontrol-button")).attr("title", e[a]), this.updateSortModeIcon(n, e[a], this.getColumnType(t[0][a]));
        }

        for (i = l; i < t[0].length; i++) {
          this.createNewSortRuleControl(t[0][i], e[i]);
        }

        this.selectedItems = t;
      } else {
        for (a = 0; a < t[0].length; a++) {
          o = s[a], (r = $(o).data("columnList")).setItems(this.columnNameArray), r.setSelectedItems([t[0][a]]), $(o).attr("column", t[0][a]), $(o).attr("type", this.getColumnType(t[0][a])), $(o).attr("sort-mode", e[a]), (n = $(o).find(".brtc-va-editors-sheet-controls-propertycontrol-button")).attr("title", e[a]), this.updateSortModeIcon(n, e[a], this.getColumnType(t[0][a]));
        }

        for (i = t[0].length; i < l; i++) {
          (o = s[i]).remove();
        }
      }
    } else this.$rowContainer.empty();

    this.updateIndexNumber();
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        t.executeGroupByCommand();
      });
    });
  }, e.prototype.executeGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    o && (e.ref.param.groupby = o);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
    this.executeCommand(r);
  }, e.prototype.executeSortRuleCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]], e.ref.param["sort-mode"] = [], this.$rowContainer.find(".brtc-va-editors-sheet-controls-propertycontrol-row").each(function (t, o) {
      e.ref.param.columns[0].push($(this).attr("column")), e.ref.param["sort-mode"].push($(this).attr("sort-mode"));
    });
    var o = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
    this.executeCommand(o);
  }, e.prototype.updateIndexNumber = function () {
    this.$rowContainer.find(".brtc-va-editors-sheet-controls-propertycontrol-row").each(function (t, e) {
      var o = Number(t) + 1 + "";
      $(e).find(".brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element-wrapper").attr("title", o), $(e).find(".brtc-va-editors-sheet-controls-propertycontrol-number").text(o);
    });
  }, e.prototype.updateSortModeIcon = function (t, e, o) {
    var r;
    t.find("i").removeClass(), "string" === o ? (r = "fa fa-sort-alpha-" + e.toLowerCase(), t.find("i").addClass(r)) : "number" === o || "date" === o ? (r = "fa fa-sort-numeric-" + e.toLowerCase(), t.find("i").addClass(r)) : (r = "fa fa-sort", t.find("i").addClass(r));
  }, e.prototype.getColumnType = function (t) {
    for (var e in this.columnNameArray) {
      if (this.columnNameArray[e].name === t) return this.columnNameArray[e].type;
    }
  }, t.VA.Core.Functions.Library.sort.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_GROUP_BY = "groupby", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addGroupByRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Sort Rule");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, $.unique($.extend(!0, [], e.param[t.PARAM_COLUMNS][0])));
    });
  }, e.prototype.addGroupByRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_GROUP_BY, e.param[t.PARAM_GROUP_BY]);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = t.getArrayConflicted(e.param[t.PARAM_GROUP_BY], e.param[t.PARAM_COLUMNS][0]);
        return t.createProblemForConflicted(o, t.PARAM_GROUP_BY, "Group By", "Columns", e);
      }
    });
  }, t.VA.Core.Functions.Library.sort.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.stringFilter = {
    category: "manipulation",
    defaultFnUnit: {
      func: "stringFilter",
      name: "StringFilter",
      inData: [],
      outData: [],
      param: {
        condition: []
      },
      display: {
        label: "String Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Select a specific string data.",
    tags: ["String Filter", "StringFilter", "Filter", "Remove", "Preprocessing", "includes", "contains"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      condition: this.renderCondition
    }, this.propertyControlArray = [], this.createControlExpander(), this.createFilterControl(), this.createAddButton();
  }, e.prototype.createControlExpander = function () {
    this.addPropertyControl("Condition", function (t) {}, {
      mandatory: !0
    }), this.$contents = this.$contentsArea.find(".brtc-va-editors-sheet-controls-propertycontrol-contents");
  }, e.prototype.createAddButton = function () {
    var e = this;
    if (this.$contents.find(".brtc-va-editors-sheet-controls-propertycontrol-addbutton").length > 0) return !1;
    this.$addButton = $('<input type="button" class= "brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Condition"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.$addButton.detach(), e.createFilterControl(), e.$addButton.appendTo(e.$contents), e.createCommand();
    });
  }, e.prototype.fillControlValues = function () {
    var t = this;
    this.columnNameArray = [];
    var e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    this.columnNameArray = $.grep(e, function (t) {
      return "string" === t.type;
    }), $.each(this.propertyControlArray, function (e) {
      t.propertyControlArray[e].columnsControl.setItems(t.columnNameArray);
    });
  }, e.prototype.createFilterControl = function (t) {
    var e = this,
        o = new Object();
    o.$inputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>'), o.$andDiv = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-and">And</div>'), o.$inputWrapper = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-wrapper"/>'), o.$columnInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), o.$operatorInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-switch-operator"/>'), o.$operandInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input-operand"/>'), o.$inputWrapper.append(o.$columnInput), o.$inputWrapper.append(o.$operatorInput), o.$inputWrapper.append(o.$operandInput), this.createOperatorControl(o.$operatorInput), this.createInput(o.$operandInput, {
      placeHolder: "Enter value"
    }, "brtc-va-editors-sheet-controls-propertycontrol-filter-string-input");
    var r = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending",
      changed: function changed(t, o) {
        e.createCommand();
      }
    };
    o.$removeButton = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>'), o.$inputControl.append(o.$andDiv), o.$inputControl.append(o.$removeButton), o.$inputControl.append(o.$inputWrapper), this.$contents.append(o.$inputControl), o.columnsControl = this.createColumnList(o.$columnInput, r), o.columnsControl.setItems(this.columnNameArray), this.$contents.children() && ($(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text(""), $(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-deck-remove").css("display", "none")), this.createFilterControlEvent(o), this.propertyControlArray.push(o);
  }, e.prototype.createOperatorControl = function (t) {
    var e = this,
        o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-switch switch">    <div class="fl">        <p class="left">Contains</p>    </div>    <div class="fr">        <p class="right">Not Contains</p>    </div></div>');
    t.append(o), t.find(".switch").click(function (t) {
      $(this).toggleClass("on");
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;
      1 != e.renderFlag && e.createCommand(o);
    }), t.operatorSwitch = o;
  }, e.prototype.createFilterControlEvent = function (t) {
    var e = this;
    t.$operandInput.on("change", function (t) {
      1 != e.renderFlag && e.createCommand();
    }), t.$removeButton.click(function (t) {
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;
      o > -1 && e.propertyControlArray.splice(o, 1), $(this).parent().remove(), e.$contents.children() && $(e.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-input-and").text(""), e.createCommand(), t.stopPropagation();
    });
  }, e.prototype.renderCondition = function () {
    var t = this.options.fnUnit.param.condition;

    if (t && t.length > 0) {
      this.renderFlag = !0, this.$addButton.detach();

      for (var e = 0; e < t.length; e++) {
        e >= this.propertyControlArray.length - 1 && this.createFilterControl(), this.propertyControlArray[e].columnsControl.setSelectedItems("" == t[e][0] ? [] : [t[e][0]]), this.propertyControlArray[e].$operandInput.val(t[e][1]), !!t[e][2] && "true" == t[e][2] ? this.propertyControlArray[e].$operatorInput.find(".brtc-va-editors-sheet-controls-propertycontrol-switch").removeClass("on") : this.propertyControlArray[e].$operatorInput.find(".brtc-va-editors-sheet-controls-propertycontrol-switch").addClass("on");
      }

      if (t.length < this.propertyControlArray.length) {
        for (var o = this.propertyControlArray.length - 1; o == t.length; o--) {
          $(this.propertyControlArray[o].$inputControl).remove();
        }

        this.propertyControlArray.splice(t.length, this.propertyControlArray.length - t.length);
      }

      this.$addButton.appendTo(this.$contents), this.renderFlag = !1;
    } else this.resetPropertyControls();
  }, e.prototype.resetPropertyControls = function () {
    for (var t = this.propertyControlArray.length - 1; t >= 0; t--) {
      0 === t ? (this.propertyControlArray[t].columnsControl.setSelectedItems([]), this.propertyControlArray[t].$operandInput.val(""), this.propertyControlArray[t].$operatorInput.find(".brtc-va-editors-sheet-controls-propertycontrol-switch").removeClass("on")) : ($(this.propertyControlArray[t].$inputControl).remove(), this.propertyControlArray.splice(t, 1));
    }
  }, e.prototype.createCommand = function (e) {
    var o = this.getConditionValue(e),
        r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          condition: o
        }
      }
    },
        n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.isInputValueChanged("condition", n.options.ref.param.condition) && this.executeCommand(n);
  }, e.prototype.getConditionValue = function (t) {
    var e = [];

    for (var o in this.propertyControlArray) {
      var r,
          n,
          a = this.propertyControlArray[o].columnsControl.getSelectedItems()[0];
      n = (!this.propertyControlArray[o].$operatorInput.find(".brtc-va-editors-sheet-controls-propertycontrol-switch").hasClass("on")).toString(), r = [a, this.propertyControlArray[o].$operandInput.val(), n], e.push(r);
    }

    return e;
  }, e.prototype.renderValidation = function () {
    var t = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-columnlist"),
        e = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-input-operand");

    for (var o in this.problems) {
      "Column" === this.problems[o].param && this.createValidationContent($(t[this.problems[o].paramIndex]).parent(), this.problems[o]), "ColumnType" === this.problems[o].param && this.createValidationContent($(t[this.problems[o].paramIndex]).parent(), this.problems[o]), "Operand" === this.problems[o].param && this.createValidationContent($(e[this.problems[o].paramIndex]).parent(), this.problems[o]);
    }
  }, t.VA.Core.Functions.Library.stringFilter.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addConditionRule(), this.addRule(this.operandRule);
  }, e.prototype.addConditionRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [],
          r = e.param.condition;
      0 === r.length && (a = t.checkColumnIsEmpty(e, "Column", "", "Column", 0)) && o.push(a);

      for (var n in r) {
        var a,
            i = r[n][0] || "";
        (a = t.checkColumnIsEmpty(e, "Column", i, "Column", n)) && o.push(a);
      }

      return o;
    }), this.addRule(function (e) {
      var o = [],
          r = e.param.condition;

      for (var n in r) {
        var a = r[n][0] || "",
            i = t.checkColumnExists(e, "Column", a, 0);
        i && (i.paramIndex = n, o.push(i));
      }

      return o;
    });
  }, e.prototype.columnRule = function (t) {
    var e = this,
        o = [];

    if ($.each(t.param.condition, function (r, n) {
      var a = {
        errorCode: "BR-0033",
        param: "Column",
        paramIndex: r,
        messageParam: ["Column"]
      };
      e.isEmptyForString(n[0]) && o.push(e.problemFactory.createProblem(a, t));
    }), 0 === t.param.condition.length) {
      o.push(e.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "Column",
        paramIndex: 0,
        messageParam: ["Column"]
      }, t));
    }

    return o;
  }, e.prototype.operandRule = function (t) {
    if (this._hasSchema(t)) {
      var e = this,
          o = [];

      if ($.each(t.param.condition, function (r, n) {
        var a = {
          errorCode: "BR-0033",
          param: "Operand",
          paramIndex: r,
          messageParam: ["Operand"]
        };
        e.isEmptyForString(n[1]) && o.push(e.problemFactory.createProblem(a, t));
      }), 0 === t.param.condition.length) {
        o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "Operand",
          paramIndex: 0,
          messageParam: ["Operand"]
        }, t));
      }

      return o;
    }
  }, e = e, t.VA.Core.Functions.Library.stringFilter.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.timeSeriesDistance = {
    category: "manipulation",
    defaultFnUnit: {
      func: "timeSeriesDistance",
      name: "TimeSeriesDistance",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "distance-type": "",
        "reference-columns": [],
        groupby: [],
        "reference-sd-columns": [],
        "reference-groupby": [],
        "hold-columns": [[]],
        "normalization-max": "",
        "out-of-control-criteria": "",
        "alphabet-column": "",
        alphabet: "",
        symmetric: "2",
        "window-size": "",
        "fast-method-type": "DiagonalDTW",
        "fast-method-limit": ""
      },
      display: {
        label: "Time Series Distance",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function calculates distance between 2 double arrays. If 'SAX' is chosen for 'distance-type', distance between two SAX strings is calculated.",
    tags: ["TimeSeries Distance", "TimeSeriesDistance", "Preprocessing", "Distance", "sax", "dtw", "euclidean", "correlation", "l1 distance", "interpolation", "Time Series Distance"],
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "distance-type": this.renderDistanceType,
      "reference-columns": this.renderReferenceColumns,
      groupby: this.renderGroupby,
      "reference-sd-columns": this.renderReferenceSdColumns,
      "reference-groupby": this.renderReferenceGroupby,
      "hold-columns": this.renderHoldColumns,
      "normalization-max": this.renderNormalizationMax,
      "out-of-control-criteria": this.renderOutOfControlCriteria,
      "alphabet-column": this.renderAlphabetColumn,
      alphabet: this.renderAlphabet,
      symmetric: this.renderSymmetric,
      "window-size": this.renderWindowSize,
      "fast-method-type": this.renderFastMethodType,
      "fast-method-limit": this.renderFastMethodLimit
    }, this.createColumnsControl(), this.createDistanceTypeControl(), this.createGroupbyControl(), this.createReferenceColumnsControl(), this.createReferenceSdColumnsControl(), this.createReferenceGroupbyControl(), this.createHoldColumnsControl(), this.createNormalizationMaxControl(), this.createOutOfControlCriteriaControl(), this.createSAXArea(e), this.createDWTArea(e);
  }, e.prototype.createSAXArea = function (t) {
    this.$saxArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" distanceType="SAX" />'), t.append(this.$saxArea), this.createAlphabetColumnControl(this.$saxArea), this.createAlphabetControl(this.$saxArea), this.$saxArea.css("display", "none");
  }, e.prototype.createDWTArea = function (t) {
    this.$dwtArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-subarea" distanceType="DTW" />'), t.append(this.$dwtArea), this.createSymmetricControl(this.$dwtArea), this.createWindowSizeControl(this.$dwtArea), this.createFastMethodTypeControl(this.$dwtArea), this.createFastMethodLimitControl(this.$dwtArea), this.$dwtArea.css("display", "none");
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderDistanceType = function () {
    var t = this.options.fnUnit.param;
    void 0 === t["distance-type"] || "" === t["distance-type"] ? this.$distanceType.jqxDropDownList("selectIndex", -1) : this.$distanceType.jqxDropDownList("selectItem", t["distance-type"]);
  }, e.prototype.renderReferenceColumns = function () {
    var t = this.options.fnUnit.param;
    this.referenceColumnsControl.setSelectedItems(t["reference-columns"]);
  }, e.prototype.renderGroupby = function () {
    var t = this.options.fnUnit.param;
    this.groupbyControl.setSelectedItems(t.groupby);
  }, e.prototype.renderReferenceSdColumns = function () {
    var t = this.options.fnUnit.param;
    this.referenceSdColumnsControl.setSelectedItems(t["reference-sd-columns"]);
  }, e.prototype.renderReferenceGroupby = function () {
    var t = this.options.fnUnit.param;
    this.referenceGroupbyControl.setSelectedItems(t["reference-groupby"]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t["hold-columns"][0] ? this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]) : this.holdColumnsControl.setSelectedItems([]);
  }, e.prototype.renderNormalizationMax = function () {
    var t = this.options.fnUnit.param;
    this.normalizationMaxControl.setValue(t["normalization-max"] || "");
  }, e.prototype.renderOutOfControlCriteria = function () {
    var t = this.options.fnUnit.param;
    this.outOfControlMaxControl.setValue(t["out-of-control-criteria"] || "");
  }, e.prototype.renderAlphabetColumn = function () {
    var t = this.options.fnUnit.param;

    if (void 0 !== t["alphabet-column"]) {
      var e = "" === t["alphabet-column"] ? [] : [t["alphabet-column"]];
      this.alphabetColumnControl.setSelectedItems(e);
    } else this.alphabetColumnControl.setSelectedItems([]);
  }, e.prototype.renderAlphabet = function () {
    var t = this.options.fnUnit.param;
    this.alphabetControl.setValue(t.alphabet || "");
  }, e.prototype.renderSymmetric = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t.symmetric ? this.$symmetric[t.symmetric].jqxRadioButton("check") : this.$symmetric[2].jqxRadioButton("check");
  }, e.prototype.renderWindowSize = function () {
    var t = this.options.fnUnit.param;
    this.windowSizeControl.setValue(t["window-size"] || "");
  }, e.prototype.renderFastMethodType = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t["fast-method-type"] ? this.$fastMethodType[t["fast-method-type"]].jqxRadioButton("check") : this.$fastMethodType.DiagonalDTW.jqxRadioButton("check");
  }, e.prototype.renderFastMethodLimit = function () {
    var t = this.options.fnUnit.param;
    this.fastMethodLimitControl.setValue(t["fast-method-limit"] || "");
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.columnsControl = {}, this.$columns = this.createCommonColumnsControl("columnsControl", "Columns"), this.columnsControl.onChange(function () {
      var e = t.createColumnsCommand();
      t.executeCommand(e);
    });
  }, e.prototype.createDistanceTypeControl = function () {
    var t = this;
    this.$distanceType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.distanceTypeSource = [{
      label: "Sax",
      value: "SAX"
    }, {
      label: "Dtw",
      value: "DTW"
    }, {
      label: "Euclidean",
      value: "Euclidean"
    }, {
      label: "Correlation",
      value: "Correlation"
    }, {
      label: "L1Distance",
      value: "L1Distance"
    }, {
      label: "EuclideanWithInterpolation",
      value: "EuclideanWithInterpolation"
    }, {
      label: "L1DistanceWithInterpolation",
      value: "L1DistanceWithInterpolation"
    }];
    var e = this.addPropertyControl("Distance Type", function (e) {
      t.createDropDownList(this.$distanceType, {
        source: this.distanceTypeSource
      }), e.append(t.$distanceType.parent()), t.$distanceType.on("change", function () {
        var e = t.$distanceType.jqxDropDownList("getSelectedItem") ? t.$distanceType.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand("distance-type", e);
        t.executeCommand(o);
        var r = t.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol-subarea");
        $.each(r, function (t, o) {
          $(o).attr("distanceType") === e ? $(o).css("display", "block") : $(o).css("display", "none");
        });
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "distance-type", "Distance Type");
  }, e.prototype.createReferenceColumnsControl = function () {
    var t = this;
    this.referenceColumnsControl = {}, this.$referenceColumns = this.createCommonColumnsControl("referenceColumnsControl", "Reference Columns"), this.referenceColumnsControl.onChange(function () {
      var e = t.createCommonColumnCommand("reference-columns", t.referenceColumnsControl, []);
      t.executeCommand(e);
    });
  }, e.prototype.createGroupbyControl = function () {
    var t = this;
    this.groupbyControl = {}, this.$groupby = this.createCommonColumnsControl("groupbyControl", "Group By"), this.groupbyControl.onChange(function () {
      var e = t.createCommonColumnCommand("groupby", t.groupbyControl, []);
      t.executeCommand(e);
    });
  }, e.prototype.createReferenceSdColumnsControl = function () {
    var t = this;
    this.referenceSdColumnsControl = {}, this.$referenceSdColumns = this.createCommonColumnsControl("referenceSdColumnsControl", "Reference Sd Columns"), this.referenceSdColumnsControl.onChange(function () {
      var e = t.createCommonColumnCommand("reference-sd-columns", t.referenceSdColumnsControl, []);
      t.executeCommand(e);
    });
  }, e.prototype.createReferenceGroupbyControl = function () {
    var t = this;
    this.referenceGroupbyControl = {}, this.$referenceGroupby = this.createCommonColumnsControl("referenceGroupbyControl", "Reference Group By"), this.referenceGroupbyControl.onChange(function () {
      var e = t.createCommonColumnCommand("reference-groupby", t.referenceGroupbyControl, []);
      t.executeCommand(e);
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.holdColumnsControl = {}, this.$holdColumns = this.createCommonColumnsControl("holdColumnsControl", "Hold Columns"), this.holdColumnsControl.onChange(function () {
      var e = t.createCommonColumnCommand("hold-columns", t.holdColumnsControl, [[]]);
      t.executeCommand(e);
    });
  }, e.prototype.createNormalizationMaxControl = function () {
    var t = this;
    this.$normalizationMax = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Normalization Max", function (e) {
      e.append(t.$normalizationMax);
      t.normalizationMaxControl = t.createNumericInput(t.$normalizationMax, {
        numberType: "double",
        minus: !1,
        placeholder: "3.0"
      });
    });
    t.normalizationMaxControl.onChange(function (e) {
      var o = t.createCommonCommand("normalization-max", e);
      t.executeCommand(o);
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "normalization-max", "Normalization Max");
  }, e.prototype.createOutOfControlCriteriaControl = function () {
    var t = this;
    this.$outOfControlMax = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Out Of Control Criteria", function (e) {
      e.append(t.$outOfControlMax);
      t.outOfControlMaxControl = t.createNumericInput(t.$outOfControlMax, {
        numberType: "double",
        minus: !1,
        placeholder: "10.0"
      });
    });
    t.outOfControlMaxControl.onChange(function (e) {
      var o = t.createCommonCommand("out-of-control-criteria", e);
      t.executeCommand(o);
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "out-of-control-criteria", "Out Of Control Criteria");
  }, e.prototype.createAlphabetColumnControl = function (t) {
    var e = this;
    this.alphabetColumnControl = {};
    this.$alphabetColumn = this.createCommonColumnsControl("alphabetColumnControl", "Alphabet Column", t, {
      rowCount: 1,
      multiple: !1
    }), this.alphabetColumnControl.onChange(function () {
      var t = e.createCommonColumnCommand("alphabet-column", e.alphabetColumnControl, "");
      e.executeCommand(t);
    });
  }, e.prototype.createAlphabetControl = function (e) {
    var o = this;
    this.$alphabet = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Alphabet", function (e) {
      e.append(o.$alphabet);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5")
      };
      o.alphabetControl = o.createNumericInput(o.$alphabet, r);
    }, void 0, e);
    o.alphabetControl.onChange(function (t) {
      var e = o.createCommonCommand("alphabet", t);
      o.executeCommand(e);
    });
    var n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "alphabet", "Alphabet");
  }, e.prototype.createSymmetricControl = function (t) {
    var e = this;
    this.$symmetric = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>');
    var o = this.addPropertyControl("Symmetric", function (t) {
      t.append(e.$symmetric), e.createRadioButtonControl(e.$symmetric, "1", "symmetric"), e.createRadioButtonControl(e.$symmetric, "2", "symmetric");
    }, void 0, t).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "symmetric", "Symmetric");
  }, e.prototype.createWindowSizeControl = function (e) {
    var o = this;
    this.$windowSize = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Window Size", function (e) {
      e.append(o.$windowSize);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("100")
      };
      o.windowSizeControl = o.createNumericInput(o.$windowSize, r);
    }, void 0, e);
    o.windowSizeControl.onChange(function (t) {
      var e = o.createCommonCommand("window-size", t);
      o.executeCommand(e);
    });
    var n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "window-size", "Window Size");
  }, e.prototype.createFastMethodTypeControl = function (t) {
    var e = this;
    this.$fastMethodType = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Fast Method Type", function (t) {
      t.append(e.$fastMethodType), e.createRadioButtonControl(e.$fastMethodType, "DiagonalDTW", "fast-method-type");
    }, void 0, t);
  }, e.prototype.createFastMethodLimitControl = function (e) {
    var o = this;
    this.$fastMethodLimit = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Fast Method Limit", function (e) {
      e.append(o.$fastMethodLimit);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("20000")
      };
      o.fastMethodLimitControl = o.createNumericInput(o.$fastMethodLimit, r);
    }, void 0, e);
    o.fastMethodLimitControl.onChange(function (t) {
      var e = o.createCommonCommand("fast-method-limit", t);
      o.executeCommand(e);
    });
    var n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(n, {}, "fast-method-limit", "Fast Method Limit");
  }, e.prototype.createCommonColumnsControl = function (t, e, o, r) {
    var n = this,
        a = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(a);
      n[t] = n.createColumnList(a, r || {
        rowCount: 1,
        multiple: !0
      });
    }, "Columns" == e ? {
      mandatory: !0
    } : {}, o), a;
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          n = r.createCommonCommand(o, e);
      r.executeCommand(n);
    });
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    if (o) for (var r in o) {
      e.ref.param.columns[0].push(o[r]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && Array.isArray(r)) {
      if (Array.isArray(r[0])) for (var i in a) {
        n.ref.param[e][0].push(a[i]);
      } else for (var i in a) {
        n.ref.param[e].push(a[i]);
      }
    } else a && "string" == typeof r && (n.ref.param[e] = a[0]);
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        o = this.dataMap && this.options.fnUnit[IN_DATA][1] ? this.dataMap[this.options.fnUnit[IN_DATA][1]].columns : [],
        r = [];
    $.each(e, function (e, o) {
      "number" === o.type && t.push(o), "String" === o.internalType && r.push(o), "Double[]" === o.internalType && r.push(o);
    }), this.columnsControl.setItems(r), this.groupbyControl.setItems(e), this.holdColumnsControl.setItems(e), this.alphabetColumnControl.setItems(e), o.length > 0 ? (this.referenceColumnsControl.setItems(o), this.referenceSdColumnsControl.setItems(o), this.referenceGroupbyControl.setItems(o)) : (this.referenceColumnsControl.setItems(e), this.referenceSdColumnsControl.setItems(e), this.referenceGroupbyControl.setItems(e));
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "distance-type" === this.problems[t].param && this.createValidationContent(this.$distanceType.parent(), this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.timeSeriesDistance.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_DISTANCE_TYPE = "distance-type", t.VA.Core.Validator.MultiInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.MultiInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.MultiInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addDistanceTypeRule();
  }, e.prototype.checkInTableIsEmpty = function (e) {
    var o = {
      errorCode: "BR-0138",
      messageParam: [[]]
    },
        r = e.parent().getPrevious(e.fid),
        n = e.parent().type,
        a = t.VA.Core.Utils.WidgetUtils.getFunctionLibrary(n, e.func)["in-range"],
        i = e.parent().getPrevious(e.fid);
    if (!(i.length > a.max || i.length < a.min)) for (var s = 0, l = 0; l < r.length; l++) {
      var c = e.parent().getFnUnitById(r[l]);
      this._getSchema(e, l) || ++s == r.length && o.messageParam[0].push("[" + c.display.label + "]");
    }
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addDistanceTypeRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (!t.checkLinkIsConnected(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_DISTANCE_TYPE,
          messageParam: ["Distance Type"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_DISTANCE_TYPE]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.timeSeriesDistance.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.export = {
    category: "process",
    defaultFnUnit: {
      func: "export",
      name: "ExportData",
      inData: [],
      outData: [],
      param: {
        "copy-to": "alluxio",
        "input-path": "/shared/upload/",
        "output-path": "",
        delimiter: ",",
        header: "true",
        quote: '"',
        "array-delimiter": ":",
        "array-start-string": "[",
        "array-end-string": "]",
        "key-value-delimiter": "=",
        "map-start-string": "{",
        "map-end-string": "}",
        "null-value": "",
        "table-name": "",
        "datasource-name": "",
        "is-delete": "true",
        "is-append": "false",
        "connection-timeout": "",
        "login-timeout": "",
        "socket-timeout": "",
        "lock-timeout": ""
      },
      display: {
        label: "Export Data",
        description: "",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["delimiter", "quote", "array-delimiter", "array-start-string", "array-end-string", "key-value-delimiter", "map-start-string", "map-end-string", "null-value"],
    tags: ["ExportData", "Export Data", "unload", "file"],
    description: "Export data.",
    "in-range": {
      min: 1,
      max: 20
    },
    "out-range": {
      min: 0,
      max: 10
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.renderFlag = !0, this.renderValues(), Studio.getInstance().doValidate(this.options.fnUnit.parent()), this.options.isRendered = !0;
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.DATA_PARAM = {
      "input-path": {
        label: "Input Path",
        type: "code",
        category: "source",
        mandatory: !0
      },
      "copy-to": {
        label: "Export To",
        type: "radio",
        category: "target"
      },
      ip: {
        label: "IP",
        type: "code",
        category: "target",
        mandatory: !0
      },
      port: {
        label: "Port",
        category: "target",
        mandatory: !0
      },
      "output-path": {
        label: "Output Path",
        type: "code",
        category: "target",
        mandatory: !0
      },
      delimiter: {
        label: "Delimiter",
        type: "radio",
        category: "target"
      },
      header: {
        label: "Header",
        type: "radio",
        category: "target"
      },
      quote: {
        label: "Quote",
        type: "radio",
        category: "target"
      },
      "array-delimiter": {
        label: "Array Delimiter",
        type: "radio",
        category: "target"
      },
      "array-start-string": {
        label: "Array Start",
        type: "radio",
        category: "target"
      },
      "array-end-string": {
        label: "Array End",
        type: "radio",
        category: "target"
      },
      "key-value-delimiter": {
        label: "Key Value",
        type: "radio",
        category: "target"
      },
      "map-start-string": {
        label: "Map Start",
        type: "radio",
        category: "target"
      },
      "map-end-string": {
        label: "Map End",
        type: "radio",
        category: "target"
      },
      "datasource-name": {
        label: "Datasource",
        type: "dropDown",
        category: "target",
        mandatory: !0
      },
      "table-name": {
        label: "Table Name",
        type: "code",
        category: "target",
        mandatory: !0
      },
      "is-delete": {
        label: "Overwrite",
        type: "radio",
        category: "target"
      },
      "connection-timeout": {
        label: "Connection Timeout(sec)",
        type: "number",
        category: "target",
        placeholder: "Default: 600",
        max: 3e3
      },
      "login-timeout": {
        label: "Login Timeout(sec)",
        type: "number",
        category: "target",
        placeholder: "Default: 600",
        max: 3e3
      },
      "socket-timeout": {
        label: "Socket Timeout(sec)",
        type: "number",
        category: "target",
        placeholder: "Default: 600",
        max: 3e3
      },
      "lock-timeout": {
        label: "Lock Timeout(sec)",
        type: "number",
        category: "target",
        placeholder: "Default: 600",
        max: 3e3
      }
    }, this.RADIO_DATA_PARAM = {
      "copy-to": [{
        label: "Repository",
        value: "alluxio"
      }, {
        label: "HDFS",
        value: "hdfs"
      }, {
        label: "Relational DB",
        value: "jdbc"
      }],
      delimiter: [{
        label: "Comma",
        value: ","
      }, {
        label: "Tab",
        value: "\t"
      }, {
        label: "Space",
        value: " "
      }, {
        label: "Colon",
        value: ":"
      }, {
        label: "Semicolon",
        value: ";"
      }, {
        label: "Other",
        value: "Other"
      }],
      header: [{
        label: "True",
        value: "true"
      }, {
        label: "False",
        value: "false"
      }],
      quote: [{
        label: "Double Quotation",
        value: '"'
      }, {
        label: "Other",
        value: "Other"
      }],
      "array-delimiter": [{
        label: "Colon",
        value: ":"
      }, {
        label: "Other",
        value: "Other"
      }],
      "array-start-string": [{
        label: "Left Square Bracket",
        value: "["
      }, {
        label: "Other",
        value: "Other"
      }],
      "array-end-string": [{
        label: "Right Square Bracket",
        value: "]"
      }, {
        label: "Other",
        value: "Other"
      }],
      "key-value-delimiter": [{
        label: "Equal",
        value: "="
      }, {
        label: "Other",
        value: "Other"
      }],
      "map-start-string": [{
        label: "Left Curly Bracket",
        value: "{"
      }, {
        label: "Other",
        value: "Other"
      }],
      "map-end-string": [{
        label: "Right Curly Bracket",
        value: "}"
      }, {
        label: "Other",
        value: "Other"
      }],
      "is-delete": [{
        label: "True",
        value: "true"
      }, {
        label: "False",
        value: "false"
      }]
    }, this.PARAM_VISIBLE = {
      hdfs: ["copy-to", "input-path", "ip", "port", "output-path", "delimiter", "header", "quote", "array-delimiter", "array-start-string", "array-end-string", "key-value-delimiter", "map-start-string", "map-end-string", "is-delete"],
      jdbc: ["copy-to", "datasource-name", "input-path", "is-delete", "table-name", "connection-timeout", "login-timeout", "socket-timeout", "lock-timeout"],
      alluxio: ["copy-to", "input-path", "output-path", "delimiter", "header", "quote", "array-delimiter", "array-start-string", "array-end-string", "key-value-delimiter", "map-start-string", "map-end-string", "is-delete"]
    }, this.createExportDataButtonControl(), this.createConfigurationControl();
  }, e.prototype.createExportDataButtonControl = function () {
    var e = this;
    this.addPropertyControl("Setting Configuration", function (o) {
      e.$exportDataButton = $('<input class="brtc-va-editors-sheet-panels-properties-button" type="button" value="Setting"/>'), o.append(e.$exportDataButton), e.$exportDataButton.jqxButton({
        theme: t.VA.Env.Theme,
        width: "100%",
        height: 25
      }), e.$exportDataButton.click(function () {
        new t.VA.Core.Dialogs.ExportDataSettingDialog(e.$mainControl, {
          param: e.options.fnUnit.param,
          close: function close(t) {
            if (t.OK && t.results) {
              var o = t.results;
              e.createConfigurationCommand(o), e.renderParameters(o);
            }
          },
          title: "Setting Configuration"
        });
      });
    });
  }, e.prototype.createConfigurationControl = function () {
    var t = this;
    this.addPropertyControl("Configuration", function (e) {
      t.$configurationArea = $('<div class="brtc-va-export-data-configuration-area"></div>'), e.append(t.$configurationArea);
    });
  }, e.prototype.fillControlValues = function () {}, e.prototype.renderValues = function (t) {
    var e = this.options.fnUnit.param;
    this.renderParameters(e);
  }, e.prototype.renderParameters = function (t) {
    this.$configurationArea.empty(), this.createCategoryControl(this.$configurationArea, "source"), this.createCategoryControl(this.$configurationArea, "target"), this.setParamControlVisible(this.options.fnUnit.param["copy-to"]);
  }, e.prototype.createCategoryControl = function (t, e) {
    var o,
        r,
        n = Object.keys(this.DATA_PARAM);
    t.append('<div class="brtc-category-label">' + e + "</div>");

    for (var a = 0; a < n.length; a++) {
      if (r = n[a], this.DATA_PARAM[r].category === e) {
        (o = $('<div class="control-row brtc-va-propertiespanel-export-data" control-type="' + r + '">   <div class="column-1"><div class="point-icon"/>' + this.DATA_PARAM[r].label + '</div>   <div class="column-2"/></div>')).find(".column-1").addClass(r), this.DATA_PARAM[r].mandatory && o.find(".column-1").addClass("mandatory"), t.append(o);
        var i = this.options.fnUnit.param;
        this.createArgumentControl(o, r), this.setArgumentValue(r, i[r] || "");
      }
    }
  }, e.prototype.createArgumentControl = function (t, e) {
    var o = $('<input type="text" class="brtc-va-views-properties-pages-controls-propertycontrol-input" param-key="' + e + '"/>');
    t.find(".column-2").append(o), this.createInput(o, {
      disabled: !0
    });
  }, e.prototype.setArgumentValue = function (t, e) {
    var o = this.$mainControl.find('.brtc-va-views-properties-pages-controls-propertycontrol-input[param-key="' + t + '"]');

    if ("copy-from" === t || "copy-to" === t) {
      for (var r, n = 0; n < this.RADIO_DATA_PARAM[t].length; n++) {
        if (this.RADIO_DATA_PARAM[t][n].value === e) {
          r = this.RADIO_DATA_PARAM[t][n].label;
          break;
        }
      }

      e = r || e;
    }

    o.val(e);
  }, e.prototype.setParamControlVisible = function (t) {
    for (var e, o = Object.keys(this.DATA_PARAM), r = this.PARAM_VISIBLE[t], n = 0; n < o.length; n++) {
      e = this.$mainControl.find("div[control-type=" + o[n] + "]"), r.indexOf(o[n]) >= 0 ? e.css("display", "") : e.css("display", "none");
    }

    "jdbc" === t ? this.$mainControl.find(".column-type").removeClass("mandatory") : this.$mainControl.find(".column-type").addClass("mandatory");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "column-type" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='column-type']").parent().parent(), this.problems[t]) : "table-name" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='table-name']").parent().parent(), this.problems[t]) : "datasource-name" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='datasource-name']").parent().parent(), this.problems[t]) : "input-path" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='input-path']").parent().parent(), this.problems[t]) : "output-path" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='output-path']").parent().parent(), this.problems[t]) : "ip" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='ip']").parent().parent(), this.problems[t]) : "port" === this.problems[t].param && this.createValidationContent(this.$parent.find("input[param-key='port']").parent().parent(), this.problems[t]);
    }
  }, e.prototype.createConfigurationCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: e
      }
    },
        r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, t.VA.Core.Functions.Library.export.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addInputPathRule(), this.addDataSourceRule(), this.addTableNameRule(), this.addIpRule(), this.addPortRule(), this.addOutPathRule();
  }, e.prototype.addInputPathRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "input-path", e.param["input-path"], "Input Path");
    });
  }, e.prototype.addDataSourceRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "datasource-name", e.param["datasource-name"], "DataSource");
    });
  }, e.prototype.addTableNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "table-name", e.param["table-name"], "Table Name");
    });
  }, e.prototype.addOutPathRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "output-path", e.param["output-path"], "Output Path");
    }), this.addRule(function (e) {
      var o = t.isEmptyValue(e, "output-path", e.param["output-path"], "Output Path"),
          r = "/" + Studio.getSession().userId + "/upload";
      if (!o && (e.param["output-path"].startsWith("/shared/upload") || e.param["output-path"].startsWith(r))) return this.problemFactory.createProblem({
        errorCode: "EP002",
        messageParam: ["Output Path"],
        param: "output-path"
      }, e);
    });
  }, e.prototype.addIpRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "ip", e.param.ip, "IP");
    });
  }, e.prototype.addPortRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "port", e.param.port, "Port");
    });
  }, e.prototype.isEmptyValue = function (t, e, o, r) {
    var n;
    return this.isEmptyCondition(o) && (n = this.problemFactory.createProblem({
      errorCode: "BR-0033",
      messageParam: [r],
      param: e
    }, t)), n;
  }, e.prototype.isEmptyCondition = function (t) {
    return null == t || "" === t.trim();
  }, t.VA.Core.Functions.Library.export.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.import = {
    category: "process",
    defaultFnUnit: {
      func: "import",
      name: "ImportData",
      inData: [],
      outData: [],
      param: {
        "copy-from": "alluxio",
        "column-type": [],
        "input-path": "",
        "output-path": "/shared/upload/",
        delimiter: ",",
        quote: '"',
        "is-delete": "false",
        "array-delimiter": ":",
        "array-start-string": "[",
        "array-end-string": "]",
        "key-value-delimiter": "=",
        "map-start-string": "{",
        "map-end-string": "}",
        "null-value": "",
        "nan-value": "NaN",
        "table-name": "",
        "datasource-name": "",
        "connection-timeout": "",
        "execution-timeout": ""
      },
      display: {
        label: "Import Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["delimiter", "quote", "array-delimiter", "array-start-string", "array-end-string", "key-value-delimiter", "map-start-string", "map-end-string", "null-value", "nan-value"],
    tags: ["ImportData", "Import Data", "alluxio", "postgre", "load", "oracle"],
    description: "Import data.",
    "in-range": {
      min: 1,
      max: 20
    },
    "out-range": {
      min: 0,
      max: 10
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.renderFlag = !0, this.renderValues(), Studio.getInstance().doValidate(this.options.fnUnit.parent()), this.options.isRendered = !0;
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.DATA_PARAM = {
      "copy-from": {
        label: "Import From",
        type: "radio",
        category: "source"
      },
      "input-path": {
        label: "Input Path",
        type: "code",
        category: "source",
        mandatory: !0
      },
      ip: {
        label: "IP",
        type: "code",
        category: "source"
      },
      port: {
        label: "Port",
        category: "source"
      },
      "output-path": {
        label: "Output Path",
        type: "code",
        category: "target",
        mandatory: !0
      },
      "datasource-name": {
        label: "Datasource",
        type: "dropDown",
        category: "source",
        mandatory: !0
      },
      "table-name": {
        label: "Table Name",
        type: "code",
        category: "source",
        mandatory: !0
      },
      "column-type": {
        label: "Column Type",
        type: "code",
        category: "source",
        placeholder: "ex. Int, String, String",
        mandatory: !0
      },
      delimiter: {
        label: "Delimiter",
        type: "radio",
        category: "source"
      },
      quote: {
        label: "Quote",
        type: "radio",
        category: "source"
      },
      "array-delimiter": {
        label: "Array Delimiter",
        type: "radio",
        category: "source"
      },
      "array-start-string": {
        label: "Array Start",
        type: "radio",
        category: "source"
      },
      "array-end-string": {
        label: "Array End",
        type: "radio",
        category: "source"
      },
      "key-value-delimiter": {
        label: "Key Value",
        type: "radio",
        category: "source"
      },
      "map-start-string": {
        label: "Map Start",
        type: "radio",
        category: "source"
      },
      "map-end-string": {
        label: "Map End",
        type: "radio",
        category: "source"
      },
      "is-delete": {
        label: "Overwrite",
        type: "radio",
        category: "target"
      },
      "connection-timeout": {
        label: "Connection Timeout(sec)",
        type: "number",
        category: "source",
        placeholder: "Default: 600",
        max: 3e3
      },
      "execution-timeout": {
        label: "Execution Timeout(sec)",
        type: "number",
        category: "source",
        placeholder: "Default: 600",
        max: 3e3
      }
    }, this.RADIO_DATA_PARAM = {
      "copy-from": [{
        label: "Repository",
        value: "alluxio"
      }, {
        label: "HDFS",
        value: "hdfs"
      }, {
        label: "Relational DB",
        value: "jdbc"
      }],
      delimiter: [{
        label: "Comma",
        value: ","
      }, {
        label: "Tab",
        value: "\t"
      }, {
        label: "Space",
        value: " "
      }, {
        label: "Colon",
        value: ":"
      }, {
        label: "Semicolon",
        value: ";"
      }, {
        label: "Other",
        value: "Other"
      }],
      quote: [{
        label: "Double Quotation",
        value: '"'
      }, {
        label: "Other",
        value: "Other"
      }],
      "array-delimiter": [{
        label: "Colon",
        value: ":"
      }, {
        label: "Other",
        value: "Other"
      }],
      "array-start-string": [{
        label: "Left Square Bracket",
        value: "["
      }, {
        label: "Other",
        value: "Other"
      }],
      "array-end-string": [{
        label: "Right Square Bracket",
        value: "]"
      }, {
        label: "Other",
        value: "Other"
      }],
      "key-value-delimiter": [{
        label: "Equal",
        value: "="
      }, {
        label: "Other",
        value: "Other"
      }],
      "map-start-string": [{
        label: "Left Curly Bracket",
        value: "{"
      }, {
        label: "Other",
        value: "Other"
      }],
      "map-end-string": [{
        label: "Right Curly Bracket",
        value: "}"
      }, {
        label: "Other",
        value: "Other"
      }],
      "is-delete": [{
        label: "True",
        value: "true"
      }, {
        label: "False",
        value: "false"
      }]
    }, this.PARAM_VISIBLE = {
      hdfs: ["copy-from", "column-type", "input-path", "ip", "port", "output-path", "delimiter", "quote", "array-delimiter", "array-start-string", "array-end-string", "key-value-delimiter", "map-start-string", "map-end-string", "is-delete"],
      jdbc: ["copy-from", "column-type", "datasource-name", "output-path", "is-delete", "table-name", "connection-timeout", "execution-timeout"],
      alluxio: ["copy-from", "column-type", "input-path", "output-path", "delimiter", "quote", "array-delimiter", "array-start-string", "array-end-string", "key-value-delimiter", "map-start-string", "map-end-string", "is-delete"]
    }, this.createImportDataButtonControl(), this.createConfigurationControl();
  }, e.prototype.createImportDataButtonControl = function () {
    var e = this;
    this.addPropertyControl("Setting Configuration", function (o) {
      e.$importDataButton = $('<input class="brtc-va-editors-sheet-panels-properties-button" type="button" value="Setting"/>'), o.append(e.$importDataButton), e.$importDataButton.jqxButton({
        theme: t.VA.Env.Theme,
        width: "100%",
        height: 25
      }), e.$importDataButton.click(function () {
        new t.VA.Core.Dialogs.ImportDataSettingDialog(e.$mainControl, {
          param: e.options.fnUnit.param,
          close: function close(t) {
            if (t.OK && t.results) {
              var o = t.results;
              e.createConfigurationCommand(o), e.renderParameters(o);
            }
          },
          title: "Setting Configuration"
        });
      });
    });
  }, e.prototype.createConfigurationControl = function () {
    var t = this;
    this.addPropertyControl("Configuration", function (e) {
      t.$configurationArea = $('<div class="brtc-va-import-data-configuration-area"></div>'), e.append(t.$configurationArea);
    });
  }, e.prototype.fillControlValues = function () {}, e.prototype.renderValues = function (t) {
    var e = this.options.fnUnit.param;
    this.renderParameters(e);
  }, e.prototype.renderParameters = function (t) {
    this.$configurationArea.empty(), this.createCategoryControl(this.$configurationArea, "source"), this.createCategoryControl(this.$configurationArea, "target"), this.setParamControlVisible(this.options.fnUnit.param["copy-from"]);
  }, e.prototype.createCategoryControl = function (t, e) {
    var o,
        r,
        n = Object.keys(this.DATA_PARAM);
    t.append('<div class="brtc-category-label">' + e + "</div>");

    for (var a = 0; a < n.length; a++) {
      if (r = n[a], this.DATA_PARAM[r].category === e) {
        (o = $('<div class="control-row brtc-va-propertiespanel-import-data" control-type="' + r + '">   <div class="column-1"><div class="point-icon"/>' + this.DATA_PARAM[r].label + '</div>   <div class="column-2"/></div>')).find(".column-1").addClass(r), this.DATA_PARAM[r].mandatory && o.find(".column-1").addClass("mandatory"), t.append(o);
        var i = this.options.fnUnit.param;
        this.createArgumentControl(o, r), this.setArgumentValue(r, i[r] || "");
      }
    }
  }, e.prototype.createArgumentControl = function (t, e) {
    var o = $('<input type="text" class="brtc-va-views-properties-pages-controls-propertycontrol-input" param-key="' + e + '"/>');
    t.find(".column-2").append(o), this.createInput(o, {
      disabled: !0
    });
  }, e.prototype.setArgumentValue = function (t, e) {
    var o = this.$mainControl.find('.brtc-va-views-properties-pages-controls-propertycontrol-input[param-key="' + t + '"]');

    if ("copy-from" === t || "copy-to" === t) {
      for (var r, n = 0; n < this.RADIO_DATA_PARAM[t].length; n++) {
        if (this.RADIO_DATA_PARAM[t][n].value === e) {
          r = this.RADIO_DATA_PARAM[t][n].label;
          break;
        }
      }

      e = r || e;
    }

    o.val(e);
  }, e.prototype.setParamControlVisible = function (t) {
    for (var e, o = Object.keys(this.DATA_PARAM), r = this.PARAM_VISIBLE[t], n = 0; n < o.length; n++) {
      e = this.$mainControl.find("div[control-type=" + o[n] + "]"), r.indexOf(o[n]) >= 0 ? e.css("display", "") : e.css("display", "none");
    }

    "jdbc" === t ? this.$mainControl.find(".column-type").removeClass("mandatory") : this.$mainControl.find(".column-type").addClass("mandatory");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "column-type" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='column-type']").parent().parent(), this.problems[t]) : "table-name" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='table-name']").parent().parent(), this.problems[t]) : "datasource-name" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='datasource-name']").parent().parent(), this.problems[t]) : "input-path" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='input-path']").parent().parent(), this.problems[t]) : "output-path" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='output-path']").parent().parent(), this.problems[t]) : "ip" === this.problems[t].param ? this.createValidationContent(this.$parent.find("input[param-key='ip']").parent().parent(), this.problems[t]) : "port" === this.problems[t].param && this.createValidationContent(this.$parent.find("input[param-key='port']").parent().parent(), this.problems[t]);
    }
  }, e.prototype.createConfigurationCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: e
      }
    },
        r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, t.VA.Core.Functions.Library.import.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;
  var e = ["int", "long", "string", "double", "boolean", "array(double)", "array(string)", "map(int,double)", "map(string,double)"];

  function o(e) {
    t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  o.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    this.addInputPathRule(), this.addDataSourceRule(), this.addTableNameRule(), this.addIpRule(), this.addPortRule(), this.addOutPathRule();
  }, o.prototype.addInputPathRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "input-path", e.param["input-path"], "Input Path");
    });
  }, o.prototype.addColumnTypeRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "column-type", e.param["column-type"][0], "Column Type");
    }), this.addRule(function (o) {
      var r = [];

      if (!t.isEmptyCondition(o.param["column-type"][0])) {
        for (var n in o.param["column-type"]) {
          var a = o.param["column-type"][n].toLowerCase().trim();

          if ($.inArray(a, e) < 0) {
            r.push(this.problemFactory.createProblem({
              errorCode: "ET001",
              messageParam: ["Column Type"],
              param: "column-type"
            }, o));
            break;
          }
        }

        return r;
      }
    });
  }, o.prototype.addDataSourceRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "datasource-name", e.param["datasource-name"], "DataSource");
    });
  }, o.prototype.addTableNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "table-name", e.param["table-name"], "Table Name");
    });
  }, o.prototype.addOutPathRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "output-path", e.param["output-path"], "Output Path");
    }), this.addRule(function (e) {
      var o = t.isEmptyValue(e, "output-path", e.param["output-path"], "Output Path"),
          r = "/" + Studio.getSession().userId + "/upload";
      if (!o && !e.param["output-path"].startsWith("/shared/upload") && !e.param["output-path"].startsWith(r)) return this.problemFactory.createProblem({
        errorCode: "EP001",
        messageParam: ["Output Path"],
        param: "output-path"
      }, e);
    });
  }, o.prototype.addIpRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "ip", e.param.ip, "IP");
    });
  }, o.prototype.addPortRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.isEmptyValue(e, "port", e.param.port, "Port");
    });
  }, o.prototype.isEmptyValue = function (t, e, o, r) {
    var n;
    return this.isEmptyCondition(o) && (n = this.problemFactory.createProblem({
      errorCode: "BR-0033",
      messageParam: [r],
      param: e
    }, t)), n;
  }, o.prototype.isEmptyCondition = function (t) {
    return null == t || "" === t.trim();
  }, t.VA.Core.Functions.Library.import.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.setValue = {
    category: "process",
    defaultFnUnit: {
      func: "setValue",
      name: "SetValue",
      inData: [],
      outData: [],
      param: {
        variables: []
      },
      display: {
        label: "Set Value",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Set variable value.",
    tags: ["set", "setvalue", "value"],
    mandatory: ["variables"],
    "in-range": {
      min: 1,
      max: 20
    },
    "out-range": {
      min: 0,
      max: 10
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      variables: this.renderVariables
    }, this.createVariablesControl();
  }, e.prototype.createVariablesControl = function () {
    var e = this;
    this.$container = $('<div class="brtc-va-editors-sheet-panels-properties-setvariable-variable-container"></div>'), this.addPropertyControl("Variables", function (o) {
      o.append(this.$container), this.variableControl = new t.VA.Core.Views.SetVariable(this.$container, {
        width: "100%",
        height: "calc(100% - 30px)",
        editor: this.options.modelEditor,
        onAdd: function onAdd(t) {
          e.createOnAddCommand(t);
        },
        onRemove: function onRemove(t) {
          e.createOnRemoveCommand(t);
        },
        onChange: function onChange(t, o) {
          e.createOnChangeCommand(t, o);
        }
      });
    });
  }, e.prototype.renderVariables = function () {
    this.variableControl.renderValues(this.options.fnUnit.param.variables);
  }, e.prototype.fillControlValues = function () {}, e.prototype.createOnRemoveCommand = function (e) {
    var o = e.name,
        r = this.options.fnUnit.param.variables,
        n = [];

    for (var a in r) {
      r[a].name !== o && n.push(r[a]);
    }

    var i = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          variables: n
        }
      }
    },
        s = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, i);
    this.executeCommand(s);
  }, e.prototype.createOnChangeCommand = function (e, o) {
    var r = e.name,
        n = this.options.fnUnit.param.variables,
        a = [];

    for (var i in this.updateMode(o), this.updateParam(o), n) {
      n[i].name !== r ? a.push(n[i]) : a.push(o);
    }

    var s = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          variables: a
        }
      }
    },
        l = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, s);
    this.executeCommand(l);
  }, e.prototype.createOnAddCommand = function (e) {
    var o = $.extend(!0, [], e),
        r = $.extend(!0, [], this.options.fnUnit.param.variables);
    this.updateMode(o), this.updateParam(o), r.push(e);
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          variables: r
        }
      }
    },
        a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, n);
    this.executeCommand(a);
  }, e.prototype.updateMode = function (t) {
    t.mode = "value";
  }, e.prototype.updateParam = function (t) {
    var e = $.extend(t.value);
    t.param = {}, t.param.value = e, delete t.value;
  }, t.VA.Core.Functions.Library.setValue.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.alsRecommend = {
    category: "recommendation",
    defaultFnUnit: {
      func: "alsRecommend",
      name: "ALSRecommend",
      inData: [],
      outData: [],
      param: {
        mode: "predict",
        "user-column": [],
        "item-column": [],
        "hold-columns": [[]],
        "predict-column-name": "",
        "topn-number": "",
        "target-users": []
      },
      display: {
        label: "ALS Recommend",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts ratings for user-item pairs or recommends top-N items for users using user-factors and item-factors.",
    tags: ["ALS", "predict", "recommend", "recommand", "ALSRecommend", "ALS Recommend", "recommendation", "user product", "alternating least squares", "user", "item", "user item"],
    "in-range": {
      min: 3,
      max: 3
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      mode: this.renderMode,
      "user-column": this.renderUserColumn,
      "item-column": this.renderItemColumn,
      "hold-columns": this.renderHoldColumns,
      "predict-column-name": this.renderPredictName,
      "topn-number": this.renderTopnNumber,
      "target-users": this.renderTargetUsers
    }, this.targetUserControlArray = [], this.createModeControl(), this.createUserColumnControl(), this.createItemColumnControl(), this.createHoldColumnsControl(), this.createPredictNameControl(), this.createTopNControl(), this.createTargetUsersControl();
  }, e.prototype.createModeControl = function () {
    var t = this;
    this.$predictModeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Predict</div>'), this.$topnModeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">TOPn</div>'), this.addPropertyControl("Mode", function (e) {
      e.append(this.$predictModeControl).append(this.$topnModeControl), t.createRadioButton(t.$predictModeControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$topnModeControl, {
        width: "80",
        groupName: "Group"
      }), t.$predictModeControl.on("checked", function (e) {
        t.createCommonCommand("mode", "predict"), t.showPredictParam("predict");
      }), t.$topnModeControl.on("checked", function (e) {
        t.createCommonCommand("mode", "topn"), t.showPredictParam("topn");
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createUserColumnControl = function () {
    var t = this;
    this.$userColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.$userColumnProperties = this.addPropertyControl("User Column", function (e) {
      e.append(this.$userColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createColumnListCommand("user-column", o.items);
        }
      };
      t.userColumnControl = t.createColumnList(t.$userColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createItemColumnControl = function () {
    var t = this;
    this.$itemColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.$itemColumnProperties = this.addPropertyControl("Item Column", function (e) {
      e.append(this.$itemColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createColumnListCommand("item-column", o.items);
        }
      };
      t.itemColumnControl = t.createColumnList(t.$itemColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.$holdColumnProperties = this.addPropertyControl("Hold Columns", function (e) {
      e.append(this.$holdColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(e, o) {
          t.createHoldColumnListCommand("hold-columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, o);
    });
  }, e.prototype.createPredictNameControl = function () {
    var t = this;
    this.$predictColumnName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), this.$predictColumnProperties = this.addPropertyControl("Predict Column Name", function (e) {
      e.append(t.$predictColumnName), t.predictColumnNameControl = t.createInput(t.$predictColumnName, {
        height: "23px",
        placeHolder: "prediction"
      });
    }), this.$predictColumnName.on("change", function () {
      t.isInputValueChanged("predict-column-name", $(this).val()) && t.createCommonCommand("predict-column-name", $(this).val());
    });
    var e = this.$predictColumnProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "predict-column-name", "Predict Column Name");
  }, e.prototype.createTopNControl = function () {
    var t = this;
    this.$topN = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.$topNProperties = this.addPropertyControl("TOPn Number", function (e) {
      e.append(this.$topN);
      t.topNControl = t.createNumericInput(t.$topN, {
        numberType: "int",
        min: 1,
        minus: !1
      }), t.topNControl.onChange(function () {
        t.createCommonCommand("topn-number", this.getValue());
      });
    }, {
      mandatory: !0
    });
    var e = this.$topNProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "topn-number", "TOPn Number");
  }, e.prototype.createTargetUsersControl = function () {
    var t = this;
    this.$targetUsers = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input"></div>'), this.$targetUsersProperties = this.addPropertyControl("Target Users", function (e) {
      e.append(t.$targetUsers);
    });
    var e = this.$targetUsersProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "target-users", "Target Users");
  }, e.prototype.createTargetUsersRow = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-multiclass-classification-evaluation-property brtc-va-editors-sheet-controls-propertycontrol-by-labels-row"></div>'),
        n = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'),
        a = $('<div class="brtc-va-multiclass-classification-evaluation-property brtc-va-editors-sheet-controls-propertycontrol-add-button"></div>'),
        i = $('<div class="brtc-va-multiclass-classification-evaluation-property brtc-va-editors-sheet-controls-propertycontrol-remove-button"></div>');
    r.append(n), t ? r.append(a) : r.append(i), this.targetUserControlArray.push(n), this.$targetUsers.append(r), this.createInput(n, {
      placeHolder: "Enter value"
    }, "", {
      width: "90%",
      float: "left"
    }), e || n.jqxInput("focus"), n.on("change", function (t) {
      var e = o.createTargetUsersCommand();
      o.executeCommand(e);
    }), i.click(function () {
      var t = i.parents(".brtc-va-editors-sheet-controls-propertycontrol-by-labels-row"),
          e = t.prevAll().length;
      o.targetUserControlArray.splice(e, 1), t.remove();
      var r = o.createTargetUsersCommand();
      o.executeCommand(r);
    }), i.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), a.click(function () {
      o.createTargetUsersRow(!1, !1);
      var t = o.createTargetUsersCommand();
      o.executeCommand(t);
    }), a.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][2] ? this.dataMap[this.options.fnUnit[IN_DATA][2]].columns : [];
    var e = [];

    for (var o in t) {
      "number" === t[o].type && e.push(t[o]);
    }

    this.userColumnControl.setItems(e), this.itemColumnControl.setItems(e), this.holdColumnsControl.setItems(t);
  }, e.prototype.renderMode = function () {
    var t = this.options.fnUnit.param;
    t.mode ? "predict" === t.mode ? this.$predictModeControl.jqxRadioButton("check") : this.$topnModeControl.jqxRadioButton("check") : this.$predictModeControl.jqxRadioButton("check");
  }, e.prototype.showPredictParam = function (t) {
    "predict" === t ? (this.$userColumnProperties.show(), this.$itemColumnProperties.show(), this.$holdColumnProperties.show(), this.$predictColumnProperties.show(), this.$topNProperties.hide(), this.$targetUsersProperties.hide()) : "topn" === t && (this.$userColumnProperties.hide(), this.$itemColumnProperties.hide(), this.$holdColumnProperties.hide(), this.$predictColumnProperties.hide(), this.$topNProperties.show(), this.$targetUsersProperties.show());
  }, e.prototype.renderUserColumn = function () {
    var t = this.options.fnUnit.param;
    this.userColumnControl.setSelectedItems(t["user-column"]);
  }, e.prototype.renderItemColumn = function () {
    var t = this.options.fnUnit.param;
    this.itemColumnControl.setSelectedItems(t["item-column"]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderPredictName = function () {
    var t = this.options.fnUnit.param;
    this.$predictColumnName.val(t["predict-column-name"] || "");
  }, e.prototype.renderTopnNumber = function () {
    var t = this.options.fnUnit.param;
    this.topNControl.setValue(t["topn-number"] || "");
  }, e.prototype.renderTargetUsers = function () {
    var t = this.options.fnUnit.param["target-users"];

    if (this.targetUserControlArray = [], this.$targetUsers.empty(), t.length) {
      this.createTargetUsersRow(!0, !0);

      for (var e = 1; e < t.length; e++) {
        this.createTargetUsersRow(!1, !0);
      }

      for (var o in this.targetUserControlArray) {
        this.targetUserControlArray[o].val(t[o]);
      }
    } else this.createTargetUsersRow(!0, !0);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "user-column" === this.problems[t].param ? this.createValidationContent(this.$userColumn, this.problems[t]) : "item-column" === this.problems[t].param ? this.createValidationContent(this.$itemColumn, this.problems[t]) : "hold-columns" === this.problems[t].param ? this.createValidationContent(this.$holdColumns, this.problems[t]) : "topn-number" === this.problems[t].param ? this.createValidationContent(this.$topN, this.problems[t]) : "predict-column-name" === this.problems[t].param && this.createValidationContent(this.$predictColumnName.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createHoldColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createTargetUsersCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["target-users"] = [], this.targetUserControlArray) {
      e.ref.param["target-users"].push(this.targetUserControlArray[o].val());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.alsRecommend.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_USERCOLUMN = "user-column", this.PARAM_ITEMCOLUMN = "item-column", this.PARAM_HOLDCOLUMN = "hold-columns", this.PARAM_TOPNCOLUMN = "topn-number", this.PARAM_PREDICT_COLUMN_NAME = "predict-column-name", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addUserColumnRule(), this.addItemColumnRule(), this.addHoldColumnsRule(), this.addTopNRule(), this.addNewColumnNameRule(this.PARAM_PREDICT_COLUMN_NAME);
  }, e.prototype.addLinkRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkLinkIsConnected(e);
    });
  }, e.prototype.checkLinkIsConnected = function (t) {
    var e = t[IN_DATA];

    if ("predict" == t.param.mode) {
      if (3 != e.length) return this.problemFactory.createProblem({
        errorCode: "BR-0059",
        messageParam: ["Inputs", "3"]
      }, t);
    } else if (2 != e.length) return this.problemFactory.createProblem({
      errorCode: "BR-0059",
      messageParam: ["Inputs", "2"]
    }, t);
  }, e.prototype.addInTableRule = function (t) {
    var e = this;
    this.addRule(function (t) {
      return e.checkInTableIsEmpty(t);
    }), this.addRule(function (t) {
      var o = {
        errorCode: "BR-0138",
        param: "inData",
        messageParam: [[]]
      },
          r = t[IN_DATA];

      for (var n in e.hasAllSchema = !0, r) {
        var a = t.parent().getPreFnUnitByCondition(t.fid, function (t) {
          return $.inArray(r[n], t[OUT_DATA]) > -1;
        });
        e._getSchema(t, n) && 0 !== e._getSchema(t, n).length || a && o.messageParam[0].push("[" + a.display.label + "]");
      }

      if (o.messageParam[0].length > 0) return e.hasAllSchema = !1, e.problemFactory.createProblem(o, t);
    });
  }, e.prototype.checkInTableIsEmpty = function (t) {
    var e = {
      errorCode: "BR-0138",
      messageParam: [[]]
    },
        o = t.parent().getPrevious(t.fid);

    if ("predict" == t.param.mode) {
      if (3 !== o.length) return;
      var r = t.parent().getFnUnitById(o[0]),
          n = t.parent().getFnUnitById(o[1]),
          a = t.parent().getFnUnitById(o[2]);
      if (this._getSchema(t, 0) || e.messageParam[0].push("[" + r.display.label + "]"), this._getSchema(t, 1) || e.messageParam[0].push("[" + n.display.label + "]"), this._getSchema(t, 2) || e.messageParam[0].push("[" + a.display.label + "]"), e.messageParam[0].length > 0) return this.problemFactory.createProblem(e, t);
    } else {
      if (2 !== o.length) return;
      r = t.parent().getFnUnitById(o[0]), n = t.parent().getFnUnitById(o[1]);
      if (this._getSchema(t, 0) || e.messageParam[0].push("[" + r.display.label + "]"), this._getSchema(t, 1) || e.messageParam[0].push("[" + n.display.label + "]"), e.messageParam[0].length > 0) return this.problemFactory.createProblem(e, t);
    }
  }, e.prototype.addUserColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (!t.checkLinkIsConnected(e) && !t.checkInTableIsEmpty(e)) return t.checkColumnIsEmpty(e, t.PARAM_USERCOLUMN, e.param[t.PARAM_USERCOLUMN], "User Column");
    }), this.addRule(function (e) {
      if (!t.checkLinkIsConnected(e) && !t.checkInTableIsEmpty(e)) return t.checkColumnExists(e, t.PARAM_USERCOLUMN, e.param[t.PARAM_USERCOLUMN], 2);
    });
  }, e.prototype.addItemColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (!t.checkLinkIsConnected(e) && !t.checkInTableIsEmpty(e)) return t.checkColumnIsEmpty(e, t.PARAM_ITEMCOLUMN, e.param[t.PARAM_ITEMCOLUMN], "Item Column");
    }), this.addRule(function (e) {
      if (!t.checkLinkIsConnected(e) && !t.checkInTableIsEmpty(e)) return t.checkColumnExists(e, t.PARAM_ITEMCOLUMN, e.param[t.PARAM_ITEMCOLUMN], 2);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = t.getArrayConflicted(e.param[t.PARAM_ITEMCOLUMN], e.param[t.PARAM_USERCOLUMN]);
        return t.createProblemForConflicted(o, t.PARAM_ITEMCOLUMN, "User Column", e);
      }
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLDCOLUMN, e.param[t.PARAM_HOLDCOLUMN][0], 2);
    });
  }, e.prototype.addTopNRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_TOPNCOLUMN,
          messageParam: ["TOPn"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_TOPNCOLUMN]);
      }
    });
  }, t.VA.Core.Functions.Library.alsRecommend.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.alsTrain = {
    category: "recommendation",
    defaultFnUnit: {
      func: "alsTrain",
      name: "ALSTrain",
      inData: [],
      outData: [],
      param: {
        "user-column": [],
        "item-column": [],
        "rating-column": [],
        "implict-prefs": "false",
        iteration: "",
        "reg-param": "",
        seed: "",
        rank: "",
        alpha: ""
      },
      display: {
        label: "ALS Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Learn a recommender model from the given data.",
    tags: ["ALS", "train", "ALSTrain", "ALS Train", "recommendation", "user product", "alternating least squares", "user", "item", "user item"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "user-column": this.renderUserColumn,
      "item-column": this.renderItemColumn,
      "rating-column": this.renderRatingColumn,
      "implict-prefs": this.renderImplict,
      iteration: this.renderIteration,
      "reg-param": this.renderRegparm,
      seed: this.renderSeed,
      rank: this.renderRank,
      alpha: this.renderAlpha
    }, this.createUserColumnControl(), this.createItemColumnControl(), this.createRatingColumnControl(), this.createImplictControl(), this.createIterationControl(), this.createRegparmControl(), this.createSeedControl(), this.createRankControl(), this.createAlphaControl();
  }, e.prototype.createUserColumnControl = function () {
    var t = this;
    this.$userColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("User Column", function (e) {
      e.append(this.$userColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createColumnListCommand("user-column", o.items);
        }
      };
      t.userColumnControl = t.createColumnList(t.$userColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createItemColumnControl = function () {
    var t = this;
    this.$itemColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Item Column", function (e) {
      e.append(this.$itemColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createColumnListCommand("item-column", o.items);
        }
      };
      t.itemColumnControl = t.createColumnList(t.$itemColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRatingColumnControl = function () {
    var t = this;
    this.$ratingColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Rating Column", function (e) {
      e.append(this.$ratingColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createColumnListCommand("rating-column", o.items);
        }
      };
      t.ratingColumnControl = t.createColumnList(t.$ratingColumn, o);
    });
  }, e.prototype.createImplictControl = function () {
    var t = this;
    this.$imlictTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$imlictFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var e = this.addPropertyControl("Implict Prefs", function (e) {
      e.append(this.$imlictTrueControl).append(this.$imlictFalseControl), t.createRadioButton(t.$imlictTrueControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$imlictFalseControl, {
        width: "80",
        groupName: "Group"
      }), t.$imlictTrueControl.on("checked", function (e) {
        t.createCommonCommand("implict-prefs", "true");
      }), t.$imlictFalseControl.on("checked", function (e) {
        t.createCommonCommand("implict-prefs", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "implict-prefs", "Implict Prefs");
  }, e.prototype.createIterationControl = function () {
    var t = this;
    this.$iteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Iteration", function (e) {
      e.append(t.$iteration);
      t.iterationControl = t.createNumericInput(t.$iteration, {
        numberType: "int",
        minus: !1,
        placeholder: "10 (0 < value)"
      }), t.iterationControl.onChange(function () {
        t.createCommonCommand("iteration", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "iteration", "Iteration");
  }, e.prototype.createRegparmControl = function () {
    var e = this;
    this.$regParm = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Reg Param", function (o) {
      o.append(e.$regParm);
      var r = {
        numberType: "double",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.1 (0 <= value)")
      };
      e.regParmControl = e.createNumericInput(e.$regParm, r), e.regParmControl.onChange(function () {
        e.createCommonCommand("reg-param", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "reg-param", "Reg Param");
  }, e.prototype.createSeedControl = function () {
    var t = this;
    this.$seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Seed", function (e) {
      e.append(t.$seed);
      t.seedControl = t.createNumericInput(t.$seed, {
        numberType: "int",
        minus: !1,
        placeholder: "Enter value"
      }), t.seedControl.onChange(function () {
        t.createCommonCommand("seed", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "seed", "Seed");
  }, e.prototype.createRankControl = function () {
    var e = this;
    this.$rank = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Rank", function (o) {
      o.append(e.$rank);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("10 (1 <= value)")
      };
      e.rankControl = e.createNumericInput(e.$rank, r), e.rankControl.onChange(function () {
        e.createCommonCommand("rank", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "rank", "Rank");
  }, e.prototype.createAlphaControl = function () {
    var e = this;
    this.$alpha = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol"/>');
    var o = this.addPropertyControl("Alpha", function (o) {
      o.append(e.$alpha);
      var r = {
        numberType: "double",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (0 <= value)")
      };
      e.alphaControl = e.createNumericInput(e.$alpha, r), e.alphaControl.onChange(function () {
        e.createCommonCommand("alpha", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "alpha", "Alpha");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var e = [];

    for (var o in t) {
      "number" == t[o].type && e.push(t[o]);
    }

    this.userColumnControl.setItems(e), this.itemColumnControl.setItems(e), this.ratingColumnControl.setItems(e);
  }, e.prototype.renderUserColumn = function () {
    var t = this.options.fnUnit.param;
    this.userColumnControl.setSelectedItems(t["user-column"]);
  }, e.prototype.renderItemColumn = function () {
    var t = this.options.fnUnit.param;
    this.itemColumnControl.setSelectedItems(t["item-column"]);
  }, e.prototype.renderRatingColumn = function () {
    var t = this.options.fnUnit.param;
    this.ratingColumnControl.setSelectedItems(t["rating-column"]);
  }, e.prototype.renderImplict = function () {
    var t = this.options.fnUnit.param;
    t["implict-prefs"] ? "true" === t["implict-prefs"] ? this.$imlictTrueControl.jqxRadioButton("check") : this.$imlictFalseControl.jqxRadioButton("check") : this.$imlictTrueControl.jqxRadioButton("check");
  }, e.prototype.renderIteration = function () {
    var t = this.options.fnUnit.param;
    this.iterationControl.setValue(t.iteration || "");
  }, e.prototype.renderRegparm = function () {
    var t = this.options.fnUnit.param;
    this.regParmControl.setValue(t["reg-param"] || "");
  }, e.prototype.renderSeed = function () {
    var t = this.options.fnUnit.param;
    this.seedControl.setValue(t.seed || "");
  }, e.prototype.renderRank = function () {
    var t = this.options.fnUnit.param;
    this.rankControl.setValue(t.rank || "");
  }, e.prototype.renderAlpha = function () {
    var t = this.options.fnUnit.param;
    this.alphaControl.setValue(t.alpha || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "user-column" === this.problems[t].param ? this.createValidationContent(this.$userColumn, this.problems[t]) : "item-column" === this.problems[t].param ? this.createValidationContent(this.$itemColumn, this.problems[t]) : "rating-column" === this.problems[t].param && this.createValidationContent(this.$ratingColumn, this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.alsTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_USERCOLUMN = "user-column", this.PARAM_ITEMCOLUMN = "item-column", this.PARAM_RATINGCOLUMN = "rating-column", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addUserColumnRule(), this.addItemColumnRule(), this.addRatingColumnRule();
  }, e.prototype.addUserColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_USERCOLUMN, e.param[t.PARAM_USERCOLUMN], "User Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_USERCOLUMN, e.param[t.PARAM_USERCOLUMN]);
    });
  }, e.prototype.addItemColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_ITEMCOLUMN, e.param[t.PARAM_ITEMCOLUMN], "Item Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ITEMCOLUMN, e.param[t.PARAM_ITEMCOLUMN]);
    });
  }, e.prototype.addRatingColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_RATINGCOLUMN, e.param[t.PARAM_RATINGCOLUMN]);
    });
  }, t.VA.Core.Functions.Library.alsTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.glm = {
    category: "regression",
    defaultFnUnit: {
      func: "glm",
      name: "GLMTrain",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [],
        response: "",
        model: "gaussian",
        link: "identity",
        "weight-col": "",
        intercept: "true",
        tolerance: "",
        "max-iteration": ""
      },
      display: {
        label: "GLM Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["response", "model", "link"],
    description: "This function provides a generalized linear model which includes linear, logistic and Poisson regressions depending on the distribution types.",
    tags: ["GLM", "GLM Train", "Regression", "generalized linear model, linear regression, logistic regression, poisson regression, gaussian distribution, binomial distribution", "poisson distribution", "gaussian", "binomial", "poisson", "identity", "logit", "log", "distribution", "link", "t value", "z value", "standard deviation", "dof", "degree of freedom", "residual deviance", "residual dof", "aic"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.MODELANDLINKS = [{
      model: "gaussian",
      link: "identity"
    }, {
      model: "binomial",
      link: "logit"
    }, {
      model: "poisson",
      link: "log"
    }], ["gaussian", "binomial", "poisson"], ["identity", "logit", "log"], this.render = {
      columns: this.renderColumns,
      groupby: this.renderGroupBy,
      response: this.renderResponse,
      model: this.renderModel,
      link: this.renderModel,
      "weight-col": this.renderWeightColumn,
      intercept: this.renderIntercept,
      tolerance: this.renderTolerance,
      "max-iteration": this.renderMaxIteration
    }, this.createColumnsControl(), this.createGroupByControl(), this.createResponseControl(), this.createModelControl(), this.createWeightColumnControl(), this.createInterceptControl(), this.createToleranceControl(), this.createMaxIterationControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.columnsControl = {};
    var e = {
      maxRowCount: 3,
      multiple: !0,
      changed: function changed(e, o) {
        var r = t.createColumnsCommand();
        t.executeCommand(r);
      }
    };
    this.$columns = this.createCommonColumnsControl("columnsControl", "Columns", e);
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.groupbyControl = {};
    var e = {
      maxRowCount: 3,
      multiple: !0,
      changed: function changed(e, o) {
        var r = t.createCommonColumnCommand("groupby", t.groupbyControl, []);
        t.executeCommand(r);
      }
    };
    this.$groupByColumns = this.createCommonColumnsControl("groupbyControl", "Group By", e);
  }, e.prototype.createResponseControl = function () {
    var t = this;
    this.responseControl = {};
    var e = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending",
      changed: function changed(e, o) {
        var r = t.createCommonColumnCommand("response", t.responseControl, "string");
        t.executeCommand(r);
      }
    };
    this.$responseColumn = this.createCommonColumnsControl("responseControl", "Response", e);
  }, e.prototype.createModelControl = function () {
    var t = this;
    this.$modelControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var e = this.addPropertyControl("Model & Link", function (e) {
      t.createDropDownList(t.$modelControl, {
        source: t.MODELANDLINKS,
        renderer: function renderer(e, o, r) {
          var n = t.MODELANDLINKS[e];
          return n.model + " : " + n.link;
        },
        selectionRenderer: function selectionRenderer() {
          var e = t.$modelControl.jqxDropDownList("getSelectedItem");
          if (e) return '<div class="brtc-va-jqxdropdown-content">' + e.originalItem.model + " : " + e.originalItem.link + "</div>";
        }
      }), e.append(this.$modelControl.parent()), t.$modelControl.on("change", function () {
        var e = t.$modelControl.jqxDropDownList("getSelectedItem") ? t.$modelControl.jqxDropDownList("getSelectedItem").originalItem : {
          model: "",
          link: ""
        },
            o = t.createModelAndLinkCommand(e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "model+link", "Model Link");
  }, e.prototype.createWeightColumnControl = function () {
    var t = this;
    this.weightColControl = {};
    var e = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending",
      changed: function changed(e, o) {
        var r = t.createCommonColumnCommand("weight-col", t.weightColControl, "string");
        t.executeCommand(r);
      }
    };
    this.$weightColumn = this.createCommonColumnsControl("weightColControl", "Weight", e);
  }, e.prototype.createInterceptControl = function (t) {
    var e = this;
    this.$InterceptTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$InterceptFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = this.addPropertyControl("Intercept", function (t) {
      t.append(e.$InterceptTrueControl).append(e.$InterceptFalseControl), e.createRadioButton(e.$InterceptTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$InterceptFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$InterceptTrueControl.on("checked", function (t) {
        var o = e.createCommonCommand("intercept", "true");
        e.executeCommand(o);
      }), e.$InterceptFalseControl.on("checked", function (t) {
        var o = e.createCommonCommand("intercept", "false");
        e.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "intercept", "Intercept");
  }, e.prototype.createToleranceControl = function () {
    var t = this;
    this.$tolerance = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Tolerance", function (e) {
      e.append(t.$tolerance);
      t.toleranceControl = t.createNumericInput(t.$tolerance, {
        numberType: "double",
        minus: !1,
        placeholder: "0.0000000001 (0 < value)"
      }), t.toleranceControl.onChange(function () {
        var e = t.createCommonCommand("tolerance", this.getValue());
        t.executeCommand(e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "tolerance", "Tolerance");
  }, e.prototype.createMaxIterationControl = function () {
    var t = this;
    this.$maxIteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var e = this.addPropertyControl("Max Iteration", function (e) {
      e.append(t.$maxIteration);
      t.maxIterationControl = t.createNumericInput(t.$maxIteration, {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: "500 (1 < value)"
      }), t.maxIterationControl.onChange(function () {
        var e = t.createCommonCommand("max-iteration", this.getValue());
        t.executeCommand(e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "max-iteration", "Max Iteration");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var e = $.grep(t, function (t) {
      return "number" === t.type;
    });
    this.columnsControl.setItems(e), this.groupbyControl.setItems(t), this.responseControl.setItems(e), this.weightColControl.setItems(e), this.$modelControl.jqxDropDownList("selectIndex", 0), this.$InterceptTrueControl.jqxRadioButton("check");
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param;
    this.groupbyControl.setSelectedItems(t.groupby);
  }, e.prototype.renderResponse = function () {
    var t = this.options.fnUnit.param;
    this.responseControl.setSelectedItems([t.response] || []);
  }, e.prototype.renderModel = function () {
    var t = this.options.fnUnit.param;

    if (void 0 !== t.model) {
      for (var e = 0, o = 0; o < this.MODELANDLINKS.length; o++) {
        this.MODELANDLINKS[o].model === t.model && this.MODELANDLINKS[o].link === t.link && (e = o);
      }

      this.$modelControl.jqxDropDownList("selectedIndex", e);
    } else this.$modelControl.jqxDropDownList("selectedIndex", -1);
  }, e.prototype.renderWeightColumn = function () {
    var t = this.options.fnUnit.param;
    this.weightColControl.setSelectedItems([t["weight-col"]]);
  }, e.prototype.renderIntercept = function () {
    var t = this.options.fnUnit.param;
    t.intercept ? "true" === t.intercept ? this.$InterceptTrueControl.jqxRadioButton("check") : this.$InterceptFalseControl.jqxRadioButton("check") : this.$InterceptTrueControl.jqxRadioButton("check");
  }, e.prototype.renderTolerance = function () {
    this.toleranceControl.setValue(this.options.fnUnit.param.tolerance || "");
  }, e.prototype.renderMaxIteration = function () {
    this.maxIterationControl.setValue(this.options.fnUnit.param["max-iteration"] || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "response" === this.problems[t].param ? this.createValidationContent(this.$responseColumn, this.problems[t]) : "groupby" === this.problems[t].param ? this.createValidationContent(this.$groupByColumns, this.problems[t]) : "weight-col" === this.problems[t].param && this.createValidationContent(this.$weightColumn, this.problems[t]);
    }
  }, e.prototype.createCommonColumnsControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(n);
      r[t] = r.createColumnList(n, o || {
        maxRowCount: 1,
        multiple: !1
      });
    }, "Columns" == e || "Response" == e ? {
      mandatory: !0
    } : {}), n;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    if (o) for (var r in o) {
      e.ref.param.columns[0].push(o[r]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && "object" == typeof r) for (var i in a) {
      n.ref.param[e].push(a[i]);
    } else a && "string" == typeof r && (n.ref.param[e] = void 0 === a[0] ? "" : a[0]);
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.createModelAndLinkCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var r in Object.keys(e)) {
      var n = Object.keys(e)[r];
      o.ref.param[n] = e[n];
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.glm.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_RESPONSE = "response", this.PARAM_GROUP_BY = "groupby", this.PARAM_WEIGHT_COLUMN = "weight-col", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addResponseColumnRule(), this.addGroupByColumnsRule(), this.addWeightColumnRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addResponseColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_RESPONSE, e.param[t.PARAM_RESPONSE], "Response");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_RESPONSE, e.param[t.PARAM_RESPONSE]);
    }), this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_RESPONSE]) return t.checkUsedColumn(e, t.PARAM_RESPONSE);
    });
  }, e.prototype.addGroupByColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_GROUP_BY]) return t.checkUsedColumn(e, t.PARAM_GROUP_BY);
    });
  }, e.prototype.addWeightColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_WEIGHT_COLUMN]) return t.checkUsedColumn(e, t.PARAM_WEIGHT_COLUMN);
    });
  }, e.prototype.checkUsedColumn = function (t, e) {
    var o = this,
        r = [o.PARAM_COLUMNS, o.PARAM_GROUP_BY, o.PARAM_RESPONSE, o.PARAM_WEIGHT_COLUMN],
        n = r.indexOf(e);
    -1 !== n && r.splice(n, 1);
    var a = [];

    if ($.each(r, function (e, r) {
      r === o.PARAM_COLUMNS ? $.each(t.param[r][0], function (t, e) {
        a.push(e);
      }) : r === o.PARAM_GROUP_BY ? $.each(t.param[r], function (t, e) {
        a.push(e);
      }) : a.push(t.param[r]);
    }), e === this.PARAM_GROUP_BY) {
      for (var i = [], s = 0; s < t.param[e].length; s++) {
        if ($.inArray(t.param[e][s], a) > -1) {
          i.push(t.param[e][s]);
          var l = {
            errorCode: "BR-0057",
            param: e,
            messageParam: [i, "Columns", "Group By"]
          };
        }
      }

      return $.inArray(t.param.response, t.param[e]) > -1 && (l.messageParam = [t.param.response, "Group By", "Response"]), o.problemFactory.createProblem(l, t);
    }

    if ($.inArray(t.param[e], a) > -1) {
      l = {
        errorCode: "BR-0057",
        param: e,
        messageParam: [t.param[e], "Columns", "Response"]
      };
      return $.inArray(t.param[e], t.param.groupby) > -1 && (l.messageParam = [t.param[e], "Group By", "Response"]), o.problemFactory.createProblem(l, t);
    }
  }, t.VA.Core.Functions.Library.glm.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.glmForLogisticRegression = {
    category: "regression",
    defaultFnUnit: {
      func: "glmForLogisticRegression",
      name: "GLMTrainforLogisticRegression",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [],
        link: "logit",
        "proportion-col": "",
        "frequency-col": "",
        intercept: "true",
        tolerance: "",
        "max-iteration": ""
      },
      display: {
        label: "GLM Train For Logistic Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides a generalized linear model for logistic regression with logit link in order to process special format for binomial data.",
    tags: ["GLM For LogisticRegression", "GLM Train For Logistic Regression", "GLM", "glm", "Regression", "GLM For Logistic Regression", "generalized linear model, logistic regression", "binomial distribution", "binomial", "poisson", "logit", "distribution", "link", "t value", "z value", "standard deviation", "residual deviance", "residual dof", "aic"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), ["identity", "logit", "log"], this.render = {
      columns: this.renderColumns,
      groupby: this.renderGroupBy,
      "proportion-col": this.renderProportionCol,
      "frequency-col": this.renderFrequencyCol,
      intercept: this.renderIntercept,
      tolerance: this.renderTolerance,
      "max-iteration": this.renderMaxIteration
    }, this.createColumnsControl(), this.createGroupByControl(), this.createProportionColControl(), this.createFrequencyColControl(), this.createInterceptControl(), this.createToleranceControl(), this.createMaxIterationControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.columnsControl = {};
    var e = {
      maxRowCount: 3,
      multiple: !0,
      changed: function changed(e, o) {
        var r = t.createColumnsCommand();
        t.executeCommand(r);
      }
    };
    this.$columns = this.createCommonColumnsControl("columnsControl", "Columns", e);
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.groupbyControl = {};
    var e = {
      maxRowCount: 3,
      multiple: !0,
      changed: function changed(e, o) {
        var r = t.createCommonColumnCommand("groupby", t.groupbyControl, []);
        t.executeCommand(r);
      }
    };
    this.$groupByColumns = this.createCommonColumnsControl("groupbyControl", "Group By", e);
  }, e.prototype.createProportionColControl = function () {
    var t = this;
    this.proportionColControl = {};
    this.$proportionColumn = this.createCommonColumnsControl("proportionColControl", "Proportion", {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending"
    }), this.proportionColControl.onChange(function () {
      var e = t.createCommonColumnCommand("proportion-col", t.proportionColControl, "string");
      t.executeCommand(e);
    });
  }, e.prototype.createFrequencyColControl = function () {
    var t = this;
    this.frequencyColControl = {};
    this.$frequencyColumn = this.createCommonColumnsControl("frequencyColControl", "Frequency", {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending"
    }), this.frequencyColControl.onChange(function () {
      var e = t.createCommonColumnCommand("frequency-col", t.frequencyColControl, "string");
      t.executeCommand(e);
    });
  }, e.prototype.createInterceptControl = function (t) {
    var e = this;
    this.$InterceptTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$InterceptFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), this.addPropertyControl("Intercept", function (t) {
      t.append(e.$InterceptTrueControl).append(e.$InterceptFalseControl), e.createRadioButton(e.$InterceptTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$InterceptFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$InterceptTrueControl.on("checked", function (t) {
        var o = e.createCommonCommand("intercept", "true");
        e.executeCommand(o);
      }), e.$InterceptFalseControl.on("checked", function (t) {
        var o = e.createCommonCommand("intercept", "false");
        e.executeCommand(o);
      });
    });
  }, e.prototype.createToleranceControl = function () {
    var t = this;
    this.$tolerance = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Tolerance", function (e) {
      e.append(t.$tolerance);
      t.toleranceControl = t.createNumericInput(t.$tolerance, {
        numberType: "double",
        minus: !1
      }), t.toleranceControl.onChange(function () {
        var e = t.createCommonCommand("tolerance", this.getValue());
        t.executeCommand(e);
      });
    });
  }, e.prototype.createMaxIterationControl = function () {
    var t = this;
    this.$maxIteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Max Iteration", function (e) {
      e.append(t.$maxIteration);
      t.maxIterationControl = t.createNumericInput(t.$maxIteration, {
        numberType: "int",
        min: 0,
        minus: !1
      }), t.maxIterationControl.onChange(function () {
        var e = t.createCommonCommand("max-iteration", this.getValue());
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        o = $.grep(e, function (t) {
      return "string" === t.type;
    }),
        r = $.grep(e, function (t) {
      return "number" === t.type;
    });
    this.columnsControl.setItems(o), this.groupbyControl.setItems(e), this.proportionColControl.setItems(r), this.frequencyColControl.setItems(r), this.$InterceptTrueControl.jqxRadioButton("check"), this.toleranceControl.setValue(1e-10), this.maxIterationControl.setValue(500);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param;
    this.groupbyControl.setSelectedItems(t.groupby);
  }, e.prototype.renderProportionCol = function () {
    var t = this.options.fnUnit.param;
    this.proportionColControl.setSelectedItems([t["proportion-col"]] || []);
  }, e.prototype.renderFrequencyCol = function () {
    var t = this.options.fnUnit.param;
    this.frequencyColControl.setSelectedItems([t["frequency-col"]] || []);
  }, e.prototype.renderIntercept = function () {
    var t = this.options.fnUnit.param;
    t.intercept ? "true" === t.intercept ? this.$InterceptTrueControl.jqxRadioButton("check") : this.$InterceptFalseControl.jqxRadioButton("check") : this.$InterceptTrueControl.jqxRadioButton("check");
  }, e.prototype.renderTolerance = function () {
    this.toleranceControl.setValue(this.options.fnUnit.param.tolerance || "");
  }, e.prototype.renderMaxIteration = function () {
    this.maxIterationControl.setValue(this.options.fnUnit.param["max-iteration"] || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "proportion-col" === this.problems[t].param ? this.createValidationContent(this.$proportionColumn, this.problems[t]) : "frequency-col" === this.problems[t].param ? this.createValidationContent(this.$frequencyColumn, this.problems[t]) : "groupby" === this.problems[t].param && this.createValidationContent(this.$groupByColumns, this.problems[t]);
    }
  }, e.prototype.createCommonColumnsControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(n);
      r[t] = r.createColumnList(n, o || {
        maxRowCount: 1,
        multiple: !1
      });
    }, "Columns" == e || "Proportion" == e || "Frequency" == e ? {
      mandatory: !0
    } : {}), n;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    if (o) for (var r in o) {
      e.ref.param.columns[0].push(o[r]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && "object" == typeof r) for (var i in a) {
      n.ref.param[e].push(a[i]);
    } else a && "string" == typeof r && (n.ref.param[e] = void 0 === a[0] ? "" : a[0]);
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.glmForLogisticRegression.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_GROUP_BY = "groupby", this.PARAM_PROPORTION_COL = "proportion-col", this.PARAM_FREQUENCY_COL = "frequency-col", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addSingleColumnRule(this.PARAM_PROPORTION_COL, "Proportion"), this.addSingleColumnRule(this.PARAM_FREQUENCY_COL, "Frequency"), this.addGroupByColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "string");
    });
  }, e.prototype.addSingleColumnRule = function (t, e) {
    var o = this;
    this.addRule(function (r) {
      return o.checkColumnIsEmpty(r, t, r.param[t], e);
    }), this.addRule(function (e) {
      return o.checkColumnExists(e, t, e.param[t]);
    }), this.addRule(function (e) {
      if ("" !== e.param[t]) return o.checkUsedColumn(e, t);
    });
  }, e.prototype.addGroupByColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_GROUP_BY]) return t.checkUsedColumn(e, t.PARAM_GROUP_BY);
    });
  }, e.prototype.checkUsedColumn = function (t, e) {
    var o = this,
        r = [o.PARAM_COLUMNS, o.PARAM_GROUP_BY, o.PARAM_PROPORTION_COL, o.PARAM_FREQUENCY_COL],
        n = r.indexOf(e);
    -1 !== n && r.splice(n, 1);
    var a = [];

    if ($.each(r, function (e, r) {
      r === o.PARAM_COLUMNS ? $.each(t.param[r][0], function (t, e) {
        a.push(e);
      }) : r === o.PARAM_GROUP_BY ? $.each(t.param[r], function (t, e) {
        a.push(e);
      }) : a.push(t.param[r]);
    }), e === this.PARAM_GROUP_BY) {
      for (var i = [], s = 0; s < t.param[e].length; s++) {
        if ($.inArray(t.param[e][s], a) > -1) {
          i.push(t.param[e][s]);
          var l = {
            errorCode: "BR-0057",
            param: e,
            messageParam: [i, "Columns", "Group By"]
          };
        }
      }

      return o.problemFactory.createProblem(l, t);
    }

    if ($.inArray(t.param[e], a) > -1) {
      l = {
        errorCode: "BR-0057",
        param: e,
        messageParam: [t.param[e]]
      };
      return o.problemFactory.createProblem(l, t);
    }
  }, t.VA.Core.Functions.Library.glmForLogisticRegression.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.glmPredict = {
    category: "regression",
    defaultFnUnit: {
      func: "glmPredict",
      name: "GLMPredict",
      inData: [],
      outData: [],
      param: {
        groupby: [],
        columns: [[]],
        "hold-columns": [[]]
      },
      display: {
        label: "GLM Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data from GLM Train.",
    tags: ["GLMPredict", "Regression", "generalized linear model, linear regression, logistic regression, poisson regression, gaussian distribution, binomial distribution", "poisson distribution", "gaussian", "binomial", "poisson", "identity", "logit", "log", "distribution", "link", "t value", "z value", "standard deviation", "dof", "degree of freedom", "residual deviance", "residual dof", "aic"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      groupby: this.renderGroupBy,
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createHoldColumnsControl(), this.createGroupByControl();
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          var r = e.createColumnsCommand("columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(this.$holdColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          var r = t.createColumnsCommand("hold-columns", o.items);
          t.executeCommand(r);
        }
      };
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, o);
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t, e;
    t = this.getColumnsOfInTable(0, ["number"]), e = this.getColumnsOfInTable(0, []), this.controls.columns.setItems(t), this.controls.groupby.setItems(e), this.holdColumnsControl.setItems(e);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(t);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns[0];
    this.controls.columns.setSelectedItems(t);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.createColumnsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.glmPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_GROUP_BY = "groupby", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addGroupByRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS], "number");
    });
  }, e.prototype.addGroupByRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_GROUP_BY, e.param[t.PARAM_GROUP_BY]);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = t.getArrayConflicted(e.param[t.PARAM_GROUP_BY], e.param[this.PARAM_COLUMNS][0]);
        return t.createProblemForConflicted(o, t.PARAM_GROUP_BY, "Group By", "Columns", e);
      }
    });
  }, t.VA.Core.Functions.Library.glmPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.glmPredictForLogisticRegression = {
    category: "regression",
    defaultFnUnit: {
      func: "glmPredictForLogisticRegression",
      name: "GLMPredictforLogisticRegression",
      inData: [],
      outData: [],
      param: {
        groupby: [],
        "hold-columns": [[]]
      },
      display: {
        label: "GLMPredict For Logistic Regression",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides a generalized linear model for logistic regression with logit link in order to process special format for binomial data.",
    tags: ["GLMPredict For LogisticRegression", "GLMPredict", "glm", "Regression", "GLMPredict For Logistic Regression", "generalized linear model, logistic regression", "binomial distribution", "binomial", "poisson", "logit", "distribution", "link", "t value", "z value", "standard deviation", "residual deviance", "residual dof", "aic"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      groupby: this.renderGroupBy,
      "hold-columns": this.renderHoldColumns
    }, this.createGroupByControl(), this.createHoldColumnsControl();
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupBy = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(this.$groupBy);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          var r = t.createGroupByCommand("groupby", o.items);
          t.executeCommand(r);
        }
      };
      t.groupbyControl = t.createColumnList(t.$groupBy, o);
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(this.$holdColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          var r = t.createColumnsCommand("hold-columns", o.items);
          t.executeCommand(r);
        }
      };
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, o);
    });
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.groupbyControl.setItems(t), this.holdColumnsControl.setItems(t);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param;
    this.groupbyControl.setSelectedItems(t.groupby);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.createGroupByCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [], o && (r.ref.param[e] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createColumnsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.glmPredictForLogisticRegression.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_GROUP_BY = "groupby", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addGroupByColumnsRule(), this.addColumnsRule(), this.addHoldColumnsRule();
  }, e.prototype.addGroupByColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_GROUP_BY]) return t.checkUsedColumn(e, t.PARAM_GROUP_BY);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0], "Hold Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0]);
    });
  }, e.prototype.checkUsedColumn = function (t, e) {
    var o = this,
        r = [o.PARAM_HOLD_COLUMNS, o.PARAM_GROUP_BY],
        n = r.indexOf(e);
    -1 !== n && r.splice(n, 1);
    var a = [];

    if ($.each(r, function (e, r) {
      r === o.PARAM_HOLD_COLUMNS ? $.each(t.param[r][0], function (t, e) {
        a.push(e);
      }) : r === o.PARAM_GROUP_BY ? $.each(t.param[r], function (t, e) {
        a.push(e);
      }) : a.push(t.param[r]);
    }), e === this.PARAM_GROUP_BY) {
      for (var i = [], s = 0; s < t.param[e].length; s++) {
        if ($.inArray(t.param[e][s], a) > -1) {
          i.push(t.param[e][s]);
          var l = {
            errorCode: "BR-0057",
            param: e,
            messageParam: [i, "Columns", "Group By"]
          };
        }
      }

      return o.problemFactory.createProblem(l, t);
    }

    if ($.inArray(t.param[e], a) > -1) {
      l = {
        errorCode: "BR-0057",
        param: e,
        messageParam: [t.param[e]]
      };
      return o.problemFactory.createProblem(l, t);
    }
  }, t.VA.Core.Functions.Library.glmPredictForLogisticRegression.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.interactivePrediction = {
    category: "regression",
    defaultFnUnit: {
      func: "interactivePrediction",
      name: "InteractivePrediction",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]]
      },
      display: {
        label: "Interactive Prediction",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates interactive prediction.",
    tags: ["InteractivePrediction", "Interactive Prediction", "regression"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 3,
      max: 3
    },
    "out-node": !0
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYColumn,
      xcolumns: this.renderXColumns
    }, this.createYColumnControl(), this.createXColumnsControl();
  }, e.prototype.createYColumnControl = function () {
    var t = this;
    this.$ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Y Column", function (e) {
      e.append(t.$ycolumn);
      t.ycolumnControl = t.createColumnList(t.$ycolumn, {
        rowCount: 1,
        multiple: !1
      }), t.ycolumnControl.onChange(function () {
        var e = t.createYColumnCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createXColumnsControl = function () {
    var t = this;
    this.$xcolumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Columns", function (e) {
      e.append(t.$xcolumns);
      t.xcolumnsControl = t.createColumnList(t.$xcolumns, {
        rowCount: 3,
        multiple: !0
      }), t.xcolumnsControl.onChange(function () {
        var e = t.createXColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.doubleColumnArray = $.grep(this.columnNameArray, function (t) {
      return "Double" === t.internalType || "Float" === t.internalType || "Decimal" === t.internalType;
    }), this.ycolumnControl.setItems(this.doubleColumnArray), this.xcolumnsControl.setItems(this.doubleColumnArray);
  }, e.prototype.renderYColumn = function () {
    var t = this.options.fnUnit.param.ycolumn;
    this.ycolumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderXColumns = function () {
    var t = this.options.fnUnit.param.xcolumns;
    this.xcolumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "ycolumn" === this.problems[t].param && this.createValidationContent(this.$ycolumn.parent(), this.problems[t]), "xcolumns" === this.problems[t].param && this.createValidationContent(this.$xcolumns.parent(), this.problems[t]);
    }
  }, e.prototype.createYColumnCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.ycolumn = [[]];
    var o = this.ycolumnControl.getSelectedItems();
    return o && (e.ref.param.ycolumn[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createXColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.xcolumns = [[]];
    var o = this.xcolumnsControl.getSelectedItems();
    return o && (e.ref.param.xcolumns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.interactivePrediction.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_YCOLUMN = "ycolumn", this.PARAM_XCOLUMNS = "xcolumns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_YCOLUMN, e.param[t.PARAM_YCOLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_XCOLUMNS, e.param[t.PARAM_XCOLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_YCOLUMN, e.param[t.PARAM_YCOLUMN][0]);
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_XCOLUMNS, e.param[t.PARAM_XCOLUMNS][0]);
    }), this.addRule(function (e) {
      var o = e.param[t.PARAM_YCOLUMN][0][0],
          r = e.param[t.PARAM_XCOLUMNS][0];

      if (o && r.length && r.indexOf(o) > -1) {
        var n = {
          errorCode: "BR-0057",
          param: t.PARAM_XCOLUMNS,
          messageParam: [o, "Y Column"]
        };
        return t.problemFactory.createProblem(n, e);
      }
    }), this.addRule(function (e) {
      var o = [],
          r = this._getSchema(e),
          n = {};

      for (var a in r) {
        n[r[a].name] = r[a].internalType;
      }

      var i,
          s = e.param[t.PARAM_YCOLUMN][0][0],
          l = e.param[t.PARAM_XCOLUMNS][0];
      s && "Double" !== n[s] && (i = {
        errorCode: "ET002",
        param: t.PARAM_YCOLUMN,
        messageParam: [s]
      }, o.push(t.problemFactory.createProblem(i, e)));
      var c = [];

      for (var p in l) {
        l[p] && "Double" !== n[l[p]] && c.push(l[p]);
      }

      return c.length && (i = {
        errorCode: "BR-0002",
        param: t.PARAM_XCOLUMNS,
        messageParam: [JSON.stringify(c)]
      }, o.push(t.problemFactory.createProblem(i, e))), o;
    });
  }, t.VA.Core.Functions.Library.interactivePrediction.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.isotonicRegressionPredict = {
    category: "regression",
    defaultFnUnit: {
      func: "isotonicRegressionPredict",
      name: "IsotonicRegressionPredict",
      inData: [],
      outData: [],
      param: {
        column: [[]],
        "hold-columns": [[]],
        groupby: []
      },
      display: {
        label: "Isotonic Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts the data using an isotonic regression model.",
    tags: ["isotonic", "regression", "Predict", "IsotonicRegression Predict", "monotonic increasing function", "nondecreasing function", "regression", "Isotonic Regression Predict"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      column: this.renderColumn,
      "hold-columns": this.renderHoldColumns,
      groupby: this.renderGroupBy
    }, this.createColumnControl(), this.createHoldColumnsControl(), this.createGroupByControl();
  }, e.prototype.createColumnControl = function (t) {
    var e = this;
    this.$column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Column", function (t) {
      t.append(this.$column);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          e.createColumnListCommand("column", o.items);
        }
      };
      e.columnControl = e.createColumnList(e.$column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(this.$holdColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("hold-columns", o.items);
        }
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = [];

    for (var r in e) {
      "number" == e[r].type && o.push(e[r]);
    }

    this.columnControl.setItems(o), this.holdColumnsControl.setItems(e), this.groupbyControl.setItems(e);
  }, e.prototype.renderColumn = function () {
    var t = this.options.fnUnit.param;
    this.columnControl.setSelectedItems(t.column[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "column" === this.problems[t].param && this.createValidationContent(this.$column, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.isotonicRegressionPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMN = "column", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnRule(), this.addBaseGroupByRule(this.PARAM_COLUMN, "X Column"), this.addBaseGroupByRule(this.PARAM_HOLD_COLUMNS, "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMN, e.param[t.PARAM_COLUMN][0], "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMN, e.param[t.PARAM_COLUMN][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.isotonicRegressionPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.isotonicRegressionTrain = {
    category: "regression",
    defaultFnUnit: {
      func: "isotonicRegressionTrain",
      name: "IsotonicRegressionTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumn: [[]],
        mode: "increasing",
        groupby: []
      },
      display: {
        label: "Isotonic Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function fits an isotonic regression model, which is a monotonic increasing or decreasing function of one variable.",
    tags: ["isotonic", "regression", "train", "IsotonicRegression Train", "monotonic increasing function", "nondecreasing function", "regression", "Isotonic Regression Train"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYColumn,
      xcolumn: this.renderXColumn,
      mode: this.renderMode,
      groupby: this.renderGroupBy
    }, this.createYColumnControl(), this.createXColumnControl(), this.createModeControl(), this.createGroupByControl();
  }, e.prototype.createYColumnControl = function (t) {
    var e = this;
    this.$ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Y Column", function (t) {
      t.append(this.$ycolumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          e.createColumnListCommand("ycolumn", o.items);
        }
      };
      e.ycolumnControl = e.createColumnList(e.$ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createXColumnControl = function (t) {
    var e = this;
    this.$xcolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Column", function (t) {
      t.append(this.$xcolumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          e.createColumnListCommand("xcolumn", o.items);
        }
      };
      e.xcolumnControl = e.createColumnList(e.$xcolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createModeControl = function () {
    var t = this;
    this.$modeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.modeSource = [{
      label: "Increasing",
      value: "increasing"
    }, {
      label: "Decreasing",
      value: "decreasing"
    }];
    var e = this.addPropertyControl("Mode", function (e) {
      t.createDropDownList(this.$modeControl, {
        source: this.modeSource
      }), e.append(t.$modeControl.parent()), t.$modeControl.on("change", function () {
        var e = t.$modeControl.jqxDropDownList("getSelectedItem") ? t.$modeControl.jqxDropDownList("getSelectedItem").value : "",
            o = t.createCommonCommand("mode", e);
        t.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "mode", "Mode");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = [];

    for (var r in e) {
      "number" == e[r].type && o.push(e[r]);
    }

    this.ycolumnControl.setItems(o), this.xcolumnControl.setItems(o), this.groupbyControl.setItems(e);
  }, e.prototype.renderYColumn = function () {
    var t = this.options.fnUnit.param;
    this.ycolumnControl.setSelectedItems(t.ycolumn[0]);
  }, e.prototype.renderXColumn = function () {
    var t = this.options.fnUnit.param;
    this.xcolumnControl.setSelectedItems(t.xcolumn[0]);
  }, e.prototype.renderMode = function () {
    var t = this.options.fnUnit.param.mode;
    void 0 === t || "" === t ? this.$modeControl.jqxDropDownList("selectIndex", 0) : this.$modeControl.jqxDropDownList("selectItem", t);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "ycolumn" === this.problems[t].param && this.createValidationContent(this.$ycolumn, this.problems[t]), "xcolumn" === this.problems[t].param && this.createValidationContent(this.$xcolumn, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.isotonicRegressionTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_Y_COLUMN = "ycolumn", this.PARAM_X_COLUMN = "xcolumn", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYColumnRule(), this.addXColumnRule(), this.addBaseGroupByRule(this.PARAM_Y_COLUMN, "Y Column"), this.addBaseGroupByRule(this.PARAM_X_COLUMN, "X Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addYColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0]);
    });
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMN, e.param[t.PARAM_X_COLUMN][0], "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMN, e.param[t.PARAM_X_COLUMN][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.isotonicRegressionTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.linearRegressionPredict = {
    category: "regression",
    defaultFnUnit: {
      func: "linearRegressionPredict",
      name: "LinearRegressionPredict",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        groupby: []
      },
      display: {
        label: "Linear Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict data using a linear regression model.",
    tags: ["LinearRegression Predict", "LinearRegressionPredict", "Trend", "Forecating", "Regression", "Predict", "Linear Regression Predict", "least squares approximation", "line", "hyperplane", "lasso", "elastic net", "L2"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createHoldColumnsControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(this.$columns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("columns", o.items);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (t) {
      t.append(this.$holdColumns);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("hold-columns", o.items);
        }
      };
      e.holdColumnsControl = e.createColumnList(e.$holdColumns, o);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = this.getColumnsOfInTable(0, ["number"]);
    this.columnsControl.setItems(o), this.holdColumnsControl.setItems(e), this.groupbyControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.linearRegressionPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_HOLD_COLUMNS = "hold-columns", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addHoldColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns"), this.addBaseGroupByRule(this.PARAM_HOLD_COLUMNS, "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], 0);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], ["number"]);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_HOLD_COLUMNS, e.param[t.PARAM_HOLD_COLUMNS][0], 0);
    });
  }, e.prototype.columnsRule = function (t) {
    return this.isEmptyForArray(t.param.columns) ? this.problemFactory.createProblem({
      errorCode: "BR-0033",
      messageParam: ["Columns"]
    }, t) : void 0;
  }, e.prototype.modelNameRule = function (t) {
    return t.param["model-name"] ? void 0 : this.problemFactory.createProblem({
      errorCode: "BR-0033",
      messageParam: ["Model-Name"]
    }, t);
  }, e.prototype.linkRule = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    };
    return this.isConnectedWithPrev(t) ? void 0 : this.problemFactory.createProblem(e, t);
  }, e = e, t.VA.Core.Functions.Library.linearRegressionPredict.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.linearRegressionResidual = {
    category: "regression",
    defaultFnUnit: {
      func: "linearRegressionResidual",
      name: "LinearRegressionResidual",
      inData: [],
      outData: [],
      param: {},
      display: {
        label: "Linear Regression Residual",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function outputs standardized residuals and studentized residuals.",
    mandatory: [],
    tags: ["post", "residual", "linear regression", "linear regression post", "linear regression residual"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {}, this.$elements = {}, this.controls = {};
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.linearRegressionResidual.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.linearRegressionResidual.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.linearRegressionTrain = {
    category: "regression",
    defaultFnUnit: {
      func: "linearRegressionTrain",
      name: "LinearRegressionTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumns: [[]],
        types: "",
        intercept: "true",
        iteration: "",
        regularization: "",
        tolerance: "",
        groupby: []
      },
      display: {
        label: "Linear Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fit a linear regression model.",
    tags: ["LinearRegression Train", "LinearRegressionTrain", "Regression", "Train", "Trend", "Forecating", "Linear Regression Train", "least squares approximation", "line", "hyperplane", "lasso", "elastic net", "L2"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 4,
      max: 4
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYColumn,
      xcolumns: this.renderXColumns,
      types: this.renderTypes,
      intercept: this.renderIntercept,
      iteration: this.renderIteration,
      regularization: this.renderRegularization,
      tolerance: this.renderTolerance,
      groupby: this.renderGroupBy
    }, this.createYColumnControl(), this.createXColumnsControl(), this.createTypesControl(), this.createInterceptControl(), this.createIterationControl(), this.createRegularizationControl(), this.createToleanceControl(), this.createGroupByControl();
  }, e.prototype.createYColumnControl = function (t) {
    var e = this;
    this.$yColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Y Column", function (t) {
      t.append(this.$yColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          e.createColumnListCommand("ycolumn", o.items);
        }
      };
      e.yColumnControl = e.createColumnList(e.$yColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createXColumnsControl = function (t) {
    var e = this;
    this.$xColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("X Columns", function (t) {
      t.append(this.$xColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("xcolumns", o.items);
        }
      };
      e.xColumnsControl = e.createColumnList(e.$xColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTypesControl = function (e) {
    var o = this;
    this.$types = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Types", function (e) {
      e.append(this.$types);
      var r = {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0 <= value <= 1)")
      };
      o.typesControl = o.createNumericInput(o.$types, r), o.typesControl.onChange(function () {
        o.createNumericInputCommand("types", o.typesControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "types", "Types");
  }, e.prototype.createInterceptControl = function (t) {
    var e = this;
    this.$InterceptTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$InterceptFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = this.addPropertyControl("Intercept", function (t) {
      t.append(this.$InterceptTrueControl).append(this.$InterceptFalseControl), e.createRadioButton(e.$InterceptTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$InterceptFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$InterceptTrueControl.on("checked", function (t) {
        e.createRadioButtonCommand("intercept", "true");
      }), e.$InterceptFalseControl.on("checked", function (t) {
        e.createRadioButtonCommand("intercept", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "intercept", "Intercept");
  }, e.prototype.createIterationControl = function (e) {
    var o = this;
    this.$iteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Iteration", function (e) {
      e.append(this.$iteration);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("100 (1 <= value)")
      };
      o.iterationControl = o.createNumericInput(o.$iteration, r), o.iterationControl.onChange(function () {
        o.createNumericInputCommand("iteration", o.iterationControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "iteration", "Iteration");
  }, e.prototype.createRegularizationControl = function (t) {
    var e = this;
    this.$regularization = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Regularization ", function (t) {
      t.append(this.$regularization);
      e.regularizationControl = e.createNumericInput(e.$regularization, {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: "0.01"
      }), e.regularizationControl.onChange(function () {
        e.createNumericInputCommand("regularization", e.regularizationControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "regularization", "Regularization");
  }, e.prototype.createToleanceControl = function (e) {
    var o = this;
    this.$toleranceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Tolerance ", function (e) {
      e.append(this.$toleranceControl);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.000001 (0 <= value)")
      };
      o.toleranceControl = o.createNumericInput(o.$toleranceControl, r), o.toleranceControl.onChange(function () {
        o.createNumericInputCommand("tolerance", o.toleranceControl.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "tolerance", "Tolerance");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = this.getColumnsOfInTable(0, ["number", "Double[]"]);
    this.xColumnsControl.setItems(o), o = this.getColumnsOfInTable(0, ["number"]), this.yColumnControl.setItems(o), this.$InterceptTrueControl.jqxRadioButton("check"), this.groupbyControl.setItems(e);
  }, e.prototype.renderYColumn = function () {
    var t = this.options.fnUnit.param;
    this.yColumnControl.setSelectedItems(t.ycolumn[0]);
  }, e.prototype.renderXColumns = function () {
    var t = this.options.fnUnit.param;
    this.xColumnsControl.setSelectedItems(t.xcolumns[0]);
  }, e.prototype.renderTypes = function () {
    var t = this.options.fnUnit.param;
    this.typesControl.setValue(t.types);
  }, e.prototype.renderIntercept = function () {
    var t = this.options.fnUnit.param;
    t.intercept ? "true" === t.intercept ? this.$InterceptTrueControl.jqxRadioButton("check") : this.$InterceptFalseControl.jqxRadioButton("check") : this.$InterceptTrueControl.jqxRadioButton("check");
  }, e.prototype.renderIteration = function () {
    var t = this.options.fnUnit.param;
    this.iterationControl.setValue(t.iteration);
  }, e.prototype.renderRegularization = function () {
    var t = this.options.fnUnit.param;
    this.regularizationControl.setValue(t.regularization);
  }, e.prototype.renderTolerance = function () {
    var t = this.options.fnUnit.param;
    this.toleranceControl.setValue(t.tolerance);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "xcolumns" === this.problems[t].param && this.createValidationContent(this.$xColumns, this.problems[t]), "ycolumn" === this.problems[t].param && this.createValidationContent(this.$yColumn, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.linearRegressionTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_X_COLUMNS = "xcolumns", this.PARAM_Y_COLUMN = "ycolumn", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addXColumnRule(), this.addYColumnRule(), this.addBaseGroupByRule(this.PARAM_X_COLUMNS, "X Columns"), this.addBaseGroupByRule(this.PARAM_Y_COLUMN, "Y Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, t.PARAM_X_COLUMNS, e.param[t.PARAM_X_COLUMNS][0], ["number", "Double[]"]);
    });
  }, e.prototype.addYColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.linearRegressionTrain.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.polynomialRegressionPredict = {
    category: "regression",
    defaultFnUnit: {
      func: "polynomialRegressionPredict",
      name: "PolynomialRegressionPredict",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]],
        "out-col-name": "",
        groupby: []
      },
      display: {
        label: "Polynomial Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict data using a univariate polynomial regression model.",
    mandatory: [],
    tags: ["polynomial regression predict", "polynomial", "regression", "predict"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      "hold-columns": this.renderHoldColumnsControl,
      "out-col-name": this.renderOutColNameControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createHoldColumnsControl(), this.createOutColNameControl(), this.createGroupbyControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Column", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns[0];
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"][0];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createOutColNameControl = function (t) {
    var e = this;
    e.$elements["out-col-name"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Output Column Name", function (t) {
      t.append(e.$elements["out-col-name"]);
      e.controls["out-col-name"] = e.createInput(e.$elements["out-col-name"], {}), e.$elements["out-col-name"].on("change", function (t) {
        if (e.isInputValueChanged("out-col-name", $(this).val())) {
          var o = e.createSetParameterValueCommand("out-col-name", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "out-col-name", "Output Column Name");
  }, e.prototype.renderOutColNameControl = function (t) {
    var e = this.options.fnUnit.param["out-col-name"];
    this.$elements["out-col-name"].val(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["hold-columns"].setItems(t), t = this.getColumnsOfInTable(0, ["String", "number"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.polynomialRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addHoldColumnsRule(), this.addBaseGroupByRule("columns", "X Column"), this.addBaseGroupByRule("hold-columns", "Hold Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns, "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "columns", e.param.columns, ["number"]);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "String", "number[]", "String[]"]);
    });
  }, t.VA.Core.Functions.Library.polynomialRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.polynomialRegressionTrain = {
    category: "regression",
    defaultFnUnit: {
      func: "polynomialRegressionTrain",
      name: "PolynomialRegressionTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumn: [[]],
        degree: "",
        types: "",
        iteration: "",
        regularization: "",
        tolerance: "",
        groupby: []
      },
      display: {
        label: "Polynomial Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fit a univariate polynomial regerssion model.",
    mandatory: [],
    tags: ["polynomial regression", "Polynomial Regression Train"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumn: this.renderXcolumnControl,
      degree: this.renderDegreeControl,
      types: this.renderTypesControl,
      iteration: this.renderIterationControl,
      regularization: this.renderRegularizationControl,
      tolerance: this.renderToleranceControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnControl(), this.createDegreeControl(), this.createTypesControl(), this.createIterationControl(), this.createRegularizationControl(), this.createToleranceControl(), this.createGroupbyControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnControl = function (t) {
    var e = this;
    e.$elements.xcolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Column", function (t) {
      t.append(e.$elements.xcolumn);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumn = e.createColumnList(e.$elements.xcolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnControl = function (t) {
    var e = this.options.fnUnit.param.xcolumn[0];
    this.controls.xcolumn.setSelectedItems(e);
  }, e.prototype.createDegreeControl = function (e) {
    var o = this;
    o.$elements.degree = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Degree", function (e) {
      e.append(o.$elements.degree);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (2 <= value)"),
        numberType: "int"
      };
      o.controls.degree = o.createNumericInput(o.$elements.degree, r), o.controls.degree.onChange(function () {
        var t = o.createSetParameterValueCommand("degree", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "degree", "Degree");
  }, e.prototype.renderDegreeControl = function (t) {
    var e = this.options.fnUnit.param.degree;
    this.controls.degree.setValue(e || "");
  }, e.prototype.createTypesControl = function (e) {
    var o = this;
    o.$elements.types = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Types", function (e) {
      e.append(o.$elements.types);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.0 (0 <= value <= 1)"),
        numberType: "double"
      };
      o.controls.types = o.createNumericInput(o.$elements.types, r), o.controls.types.onChange(function () {
        var t = o.createSetParameterValueCommand("types", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "types", "Types");
  }, e.prototype.renderTypesControl = function (t) {
    var e = this.options.fnUnit.param.types;
    this.controls.types.setValue(e || "");
  }, e.prototype.createIterationControl = function (e) {
    var o = this;
    o.$elements.iteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Iteration", function (e) {
      e.append(o.$elements.iteration);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("100 (1 <= value)"),
        numberType: "int"
      };
      o.controls.iteration = o.createNumericInput(o.$elements.iteration, r), o.controls.iteration.onChange(function () {
        var t = o.createSetParameterValueCommand("iteration", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "iteration", "Iteration");
  }, e.prototype.renderIterationControl = function (t) {
    var e = this.options.fnUnit.param.iteration;
    this.controls.iteration.setValue(e || "");
  }, e.prototype.createRegularizationControl = function (e) {
    var o = this;
    o.$elements.regularization = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Regularization", function (e) {
      e.append(o.$elements.regularization);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.01 (0 <= value)"),
        numberType: "double"
      };
      o.controls.regularization = o.createNumericInput(o.$elements.regularization, r), o.controls.regularization.onChange(function () {
        var t = o.createSetParameterValueCommand("regularization", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "regularization", "Regularization");
  }, e.prototype.renderRegularizationControl = function (t) {
    var e = this.options.fnUnit.param.regularization;
    this.controls.regularization.setValue(e || "");
  }, e.prototype.createToleranceControl = function (e) {
    var o = this;
    o.$elements.tolerance = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Tolerance", function (e) {
      e.append(o.$elements.tolerance);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.000001 (0 <= value)"),
        numberType: "double"
      };
      o.controls.tolerance = o.createNumericInput(o.$elements.tolerance, r), o.controls.tolerance.onChange(function () {
        var t = o.createSetParameterValueCommand("tolerance", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "tolerance", "Tolerance");
  }, e.prototype.renderToleranceControl = function (t) {
    var e = this.options.fnUnit.param.tolerance;
    this.controls.tolerance.setValue(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls.xcolumn.setItems(t), t = this.getColumnsOfInTable(0, ["String", "number"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.polynomialRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnRule(), this.addBaseGroupByRule("ycolumn", "Y Column"), this.addBaseGroupByRule("xcolumn", "X Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "ycolumn", e.param.ycolumn, ["number"]);
    });
  }, o.prototype.addXcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumn", e.param.xcolumn, "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumn", e.param.xcolumn);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "xcolumn", e.param.xcolumn, ["number"]);
    });
  }, t.VA.Core.Functions.Library.polynomialRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.predictor = {
    category: "regression",
    defaultFnUnit: {
      func: "predictor",
      name: "Predictor",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "hold-cols": [],
        "prediction-col": "",
        "group-by": []
      },
      display: {
        label: "Predictor (In-memory)",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data using a given model. Warning) This function collects (grouped) models in memory.",
    mandatory: [],
    tags: ["predictor", "prediction", "predict"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "hold-cols": this.renderHoldColsControl,
      "prediction-col": this.renderPredictionColControl,
      "group-by": this.renderGroupByControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createHoldColsControl(), this.createPredictionColControl(), this.createGroupByControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Feature Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createPredictionColControl = function (t) {
    var e = this;
    e.$elements["prediction-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Prediction Column", function (t) {
      t.append(e.$elements["prediction-col"]);
      e.controls["prediction-col"] = e.createInput(e.$elements["prediction-col"], {
        placeHolder: "prediction"
      }), e.$elements["prediction-col"].on("change", function (t) {
        if (e.isInputValueChanged("prediction-col", $(this).val())) {
          var o = e.createSetParameterValueCommand("prediction-col", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderPredictionColControl = function (t) {
    var e = this.options.fnUnit.param["prediction-col"];
    this.$elements["prediction-col"].val(e || "");
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements["group-by"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements["group-by"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("group-by", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["group-by"] = e.createColumnList(e.$elements["group-by"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupByControl = function (t) {
    var e = this.options.fnUnit.param["group-by"];
    this.controls["group-by"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["hold-cols"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["group-by"].setItems(t);
  }, t.VA.Core.Functions.Library.predictor.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addFeatureColsRule();
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number"]);
    });
  }, t.VA.Core.Functions.Library.predictor.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.stepwiseLinearRegressionPredict = {
    category: "regression",
    defaultFnUnit: {
      func: "stepwiseLinearRegressionPredict",
      name: "StepwiseLinearRegressionPredict",
      inData: [],
      outData: [],
      param: {
        "hold-cols": []
      },
      display: {
        label: "Stepwise Linear Regression Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict using the fitted stepwise linear regression model, which is the last row of the result from Stepwise Linear Regression Train.",
    mandatory: [],
    tags: ["stepwise linear regression predict", "linear regression"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "hold-cols": this.renderHoldColsControl
    }, this.$elements = {}, this.controls = {}, this.createHoldColsControl();
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.stepwiseLinearRegressionPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.stepwiseLinearRegressionPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.stepwiseLinearRegressionTrain = {
    category: "regression",
    defaultFnUnit: {
      func: "stepwiseLinearRegressionTrain",
      name: "StepwiseLinearRegressionTrain",
      inData: [],
      outData: [],
      param: {
        "label-col": "",
        "feature-cols": [],
        "initial-cols": [],
        step: "both"
      },
      display: {
        label: "Stepwise Linear Regression Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fit a linear regression model by stepwisely adding and removing features.",
    mandatory: [],
    tags: ["stepwise linear regression", "linear regression"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "label-col": this.renderLabelColControl,
      "feature-cols": this.renderFeatureColsControl,
      "initial-cols": this.renderInitialColsControl,
      step: this.renderStepControl
    }, this.$elements = {}, this.controls = {}, this.createLabelColControl(), this.createFeatureColsControl(), this.createInitialColsControl(), this.createStepControl();
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createInitialColsControl = function (t) {
    var e = this;
    e.$elements["initial-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Initial Columns", function (t) {
      t.append(e.$elements["initial-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("initial-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["initial-cols"] = e.createColumnList(e.$elements["initial-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderInitialColsControl = function (t) {
    var e = this.options.fnUnit.param["initial-cols"];
    this.controls["initial-cols"].setSelectedItems(e);
  }, e.prototype.createStepControl = function (t) {
    var e = this;
    e.$elements["step.both"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Both</div>'), e.$elements["step.forward"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Forward</div>'), e.$elements["step.backward"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Backward</div>'), e.addPropertyControl("Step", function (t) {
      t.append(e.$elements["step.both"]), e.controls["step.both"] = e.createRadioButton(e.$elements["step.both"], {
        width: "undefined",
        groupName: "step",
        checked: !0
      }), e.$elements["step.both"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("step", "both");
        e.executeCommand(o);
      }), t.append(e.$elements["step.forward"]), e.controls["step.forward"] = e.createRadioButton(e.$elements["step.forward"], {
        width: "undefined",
        groupName: "step"
      }), e.$elements["step.forward"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("step", "forward");
        e.executeCommand(o);
      }), t.append(e.$elements["step.backward"]), e.controls["step.backward"] = e.createRadioButton(e.$elements["step.backward"], {
        width: "undefined",
        groupName: "step"
      }), e.$elements["step.backward"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("step", "backward");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderStepControl = function (t) {
    var e = "step." + this.options.fnUnit.param.step;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["label-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls["initial-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.stepwiseLinearRegressionTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addLabelColRule(), this.addFeatureColsRule();
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number"]);
    });
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "X Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number"]);
    });
  }, t.VA.Core.Functions.Library.stepwiseLinearRegressionTrain.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.flatMapR = {
    category: "script",
    defaultFnUnit: {
      func: "flatMapR",
      name: "FlatMap",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [],
        "message-column-name": ""
      },
      display: {
        label: "R Flat Map",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function trans to general data.",
    tags: ["flat Map", "flatMap", "Flat Map", "r group by", "R Flat Map"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      groupby: this.renderGroupBy,
      "message-column-name": this.renderMsgColName
    }, this.createColumnsControl(), this.createGroupbyControl(), this.createMessageColName();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnslist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(t, o) {
          e.columnListCommnad("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createGroupbyControl = function () {
    var t = this;
    this.$groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupby);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnSingleListCommnad("groupby", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.groupbyControl = t.createColumnList(t.$groupby, o);
    });
  }, e.prototype.createMessageColName = function () {
    var t = this;
    this.$messageNameInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("Message Column Name", function (e) {
      e.append(t.$messageNameInput);
      t.createInput(t.$messageNameInput, {
        placeHolder: "Message Column Name"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$messageNameInput.on("change", function (e) {
        t.isInputValueChanged("message-column-name", $(this).val()) && t.createMsgColNameCommand();
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "message-column-name", "Message Column Name");
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [],
        o = [];
    $.each(t, function (t, r) {
      "byte[]" === r.type || "Double[]" === r.internalType || "String[]" === r.internalType ? e.push(r) : o.push(r);
    }), this.groupbyControl.setItems(o), this.columnsControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param;
    this.groupbyControl.setSelectedItems(t.groupby);
  }, e.prototype.renderMsgColName = function () {
    var t = this.options.fnUnit.param["message-column-name"];
    this.$messageNameInput.val(t || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "message-column-name" === this.problems[t].param && this.createValidationContent(this.$messageNameInput.parent(), this.problems[t]);
    }
  }, e.prototype.columnSingleListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && (r.ref.param.groupby = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createMsgColNameCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["message-column-name"] = this.$messageNameInput.val().replace(/ /gi, "");
    var o = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
    this.executeCommand(o);
  }, t.VA.Core.Functions.Library.flatMapR.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_MESSAGE_COLUMN_NAME = "message-column-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addNewColumnNameRule(this.PARAM_MESSAGE_COLUMN_NAME);
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.flatMapR.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.pythonScript = {
    category: "script",
    defaultFnUnit: {
      func: "pythonScript",
      name: "PythonScript",
      inputs: {
        inputs: [],
        models: [],
        images: []
      },
      outputs: {},
      param: {
        script: ""
      },
      display: {
        label: "Python Script",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      },
      version: "3.6",
      context: "python",
      meta: {
        inputs: {
          type: "table",
          range: {
            min: 1,
            max: 10
          }
        },
        models: {
          type: "model",
          range: {
            min: 1,
            max: 10
          }
        },
        images: {
          type: "image",
          range: {
            min: 1,
            max: 10
          }
        }
      }
    },
    description: "This function returns value for executed Python Script",
    tags: ["python", "script", "Python Script"]
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.fillControlValues = function (t) {
    for (var e in this.columnData = this.dataMap && this.FnUnitUtils.getInTable(this.options.fnUnit)[0] ? this.dataMap[this.FnUnitUtils.getInTable(this.options.fnUnit)[0]].columns : [], this.hintList = [], this.FnUnitUtils.getInTable(this.options.fnUnit)) {
      this.hintList.push("inputs[" + e + "]");
    }

    for (var e in this.columnData) {
      this.hintList.push(this.columnData[e].name);
    }
  }, e.prototype.getPrimaryOperation = function () {
    return "brightics.function.script$python_script";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      script: this.renderScript
    }, this.createScriptControl(), this.createOutputsControl();
  }, e.prototype.createOutputsControl = function () {
    this.$outputsWrapper = this.addPropertyControl("Outputs", function (t) {
      this.createOutputsUnit(t, {
        alias: "",
        type: "table"
      });
    }), this.$outputsWrapper.find(".brtc-va-editors-sheet-controls-propertycontrol-contents").css("margin-bottom", "0");
    var t = this.$outputsWrapper.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(t, {}, "out-alias", "Out Alias");
  }, e.prototype.openScriptEditor = function () {
    var e = this;
    new t.VA.Core.Dialogs.PythonEditorDialog(e.$mainControl, {
      title: "Python Script",
      mode: {
        name: "python",
        version: 3,
        singleLineStringErrors: !1
      },
      additionalHint: e.hintList,
      fnUnit: e.options.fnUnit,
      statement: e.pythonScriptViewer.codeMirror.getValue(),
      scriptType: "Python",
      close: function close(t) {
        t.OK && (e.createScriptInputCommand(t), e.redrawQueryStatement(t.param.script), e.renderOutputs());
      }
    });
  }, e.prototype.createScriptControl = function () {
    var e = this;
    this.addPropertyControl("Script", function (o) {
      var r = $('<textarea class="brtc-va-editors-sheet-controls-sqlcontrol"></textarea>');
      o.append(r), e.pythonScriptViewer = e.createTextAreaControl(r, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: {
          name: "python",
          version: 3,
          singleLineStringErrors: !1
        },
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), o.find(".CodeMirror-sizer").css({
        height: "300px"
      }), e.pythonScriptViewer.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        $(window).trigger("mousedown"), e.openScriptEditor();
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.redrawQueryStatement = function (t) {
    this.pythonScriptViewer.setValue(t), this.pythonScriptViewer.codeMirror.setSize("100%", "100%");
  }, e.prototype.renderScript = function () {
    var t = this.options.fnUnit.param;
    t.script || (t.script = '#\n#   NOTE : Enter "Out Table Alias"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\n'), this.redrawQueryStatement(t.script), this.renderOutputs();
  }, e.prototype.createOutputsUnit = function (e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-out-alias-unit"></div'),
        a = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input">'),
        i = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-dropdown"></div');
    a.css("margin-bottom", "5px"), e.append(n), n.append(a), n.append(i);
    var s = {
      theme: t.VA.Env.Theme,
      width: "100%",
      height: "28px",
      source: [{
        text: "TABLE",
        value: "table"
      }, {
        text: "MODEL",
        value: "model"
      }, {
        text: "IMAGE",
        value: "image"
      }],
      displayMember: "text",
      selectedIndex: 0,
      valueMember: "value",
      dropDownHeight: 70,
      disabled: !0
    };
    this.createInput(a, {
      height: 30
    }, "alias-name"), this.createComboBox(i, s, "alias-type"), a.attr("readonly", !0), i.attr("readonly", !0), a.val(o.alias), i.val(o.type), a.on("click", function () {
      r.openScriptEditor();
    }), i.on("click", function () {
      r.openScriptEditor();
    });
  }, e.prototype.renderOutputs = function () {
    var t = this.FnUnitUtils.getOutputs(this.options.fnUnit),
        e = this.$outputsWrapper.find(".brtc-va-editors-sheet-controls-propertycontrol-contents").empty();

    if (_.isEmpty(t)) {
      var o = {
        alias: r,
        type: this.FnUnitUtils.getTypeByTableId(this.options.fnUnit, t[r])
      };
      this.createOutputsUnit(e, o);
    } else for (var r in t) {
      o = {
        alias: r,
        type: this.FnUnitUtils.getTypeByTableId(this.options.fnUnit, t[r])
      };
      this.createOutputsUnit(e, o);
    }
  }, e.prototype.createScriptInputCommand = function (e) {
    var o = new t.VA.Core.CompoundCommand(this),
        r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        n = {
      fnUnit: this.options.fnUnit,
      ref: {
        outputs: {},
        meta: {}
      }
    };
    r.ref.param.script = "", e.param.script && (r.ref.param.script = e.param.script), n.ref.outputs = e.outputs, n.ref.meta = e.meta;
    var a = new t.VA.Core.Editors.Diagram.Commands.ChangeOutputsCommand(this, n),
        i = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    o.add(i), o.add(a), this.executeCommand(o);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "script" == this.problems[t].param && this.createValidationContent(this.pythonScriptViewer.$mainControl.parent(), this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.pythonScript.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addScriptRule(), this.addOutTableAliasRule();
  }, e.prototype.addScriptRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param.script && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "script",
        messageParam: ["Script"]
      }, e)), o;
    });
  }, e.prototype.addOutTableAliasRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "BR-0033",
        param: "out-table-alias",
        messageParam: ["Out Table Alias"]
      }, e, e.param["out-table-alias"]);
    });
  }, e.prototype.addLinkRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkLinkIsConnected(e);
    });
  }, e.prototype.checkLinkIsConnected = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    };
    if (!this._hasPrevious(t)) return this.problemFactory.createProblem(e, t);
  }, t.VA.Core.Functions.Library.pythonScript.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.queryExecutor = {
    category: "script",
    defaultFnUnit: {
      func: "queryExecutor",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        mode: "full",
        "full-query": "SELECT ",
        "alias-names": []
      },
      display: {
        label: "Query Executor",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Query Executor"],
    "in-range": {
      min: 1,
      max: 8
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.BasePanel.prototype.createContentsAreaControls.call(this, e), this.FnUnitInputs = brtc_require("FnUnitInputs"), this.PARAM_FULL_QUERY = "full-query", this.PARAM_ALIAS_NAMES = "alias-names", this.render = {
      "full-query": this.renderQueryStatement,
      "alias-names": this.renderAliasNames
    }, this.createSelectControl(), this.customizeElementClass();
  }, e.prototype.fillControlValues = function (t) {
    for (var e in this.columnData = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.hintList = [], this.options.fnUnit[IN_DATA]) {
      this.hintList.push("#{DF(" + e + ")}");
    }

    for (var e in this.columnData) {
      this.hintList.push(this.columnData[e].name);
    }
  }, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_FULL_QUERY = "full-query", this.PARAM_ALIAS_NAMES = "alias-names", this.render = {
      "full-query": this.renderQueryStatement,
      "alias-names": this.renderAliasNames
    }, this.createSelectControl(), this.customizeElementClass();
  }, e.prototype.createSelectControl = function () {
    var e = this;
    this.addPropertyControl("SQL", function (o) {
      var r = $('<textarea class="brtc-va-editors-sheet-controls-sqlcontrol"></textarea>');
      o.append(r), e.sqlEditViewer = e.createTextAreaControl(r, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: "text/x-sql",
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), e.sqlEditViewer.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        $(window).trigger("mousedown"), new t.VA.Core.Dialogs.SqlEditorDialog(e.$mainControl, {
          title: "SQL",
          window: {
            width: 1400,
            height: 700,
            minWidth: 700,
            minHeight: 400,
            maxWidth: 1400,
            maxHeight: 700,
            resizable: !0
          },
          mode: "text/x-sql",
          additionalHint: e.hintList,
          fnUnit: e.options.fnUnit,
          statement: e.sqlEditViewer.codeMirror.getValue(),
          tables: e.getInputTables(),
          scriptType: "SQL Editor",
          close: function close(t) {
            if (t.OK) {
              e.redrawQueryStatement(t.queryStatement);
              var o = e.createQueryStatementCommand(t.queryStatement);
              e.executeCommand(o);
            }
          }
        });
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.getInputTables = function () {
    var t = this.options.fnUnit.parent(),
        e = this.options.fnUnit.fid,
        o = [],
        r = t.getPrevious(e);

    for (var n in r) {
      var a = t.getFnUnitById(r[n]);

      for (var i in a[OUT_DATA]) {
        var s = {
          name: a[OUT_DATA][i],
          label: "Out of " + a.display.label,
          columns: []
        };
        a[OUT_DATA].length > 1 && (s.label = parseInt(i) + 1 + "th " + s.label), this.dataMap[s.name] && (s.columns = this.dataMap[s.name].columns), o.push(s);
        break;
      }
    }

    return o;
  }, e.prototype.renderQueryStatement = function () {
    var t = this.options.fnUnit.param[this.PARAM_FULL_QUERY];
    this.redrawQueryStatement(t);
  }, e.prototype.renderAliasNames = function () {}, e.prototype.redrawQueryStatement = function (t) {
    this.sqlEditViewer.setValue(t), this.selectMarker = this.sqlEditViewer.codeMirror.markText({
      line: 0,
      ch: 0
    }, {
      line: 0,
      ch: 7
    }, {
      readOnly: !0,
      inclusiveLeft: !0,
      atomic: !0
    }), this.sqlEditViewer.codeMirror.setSize("100%", "100%");
  }, e.prototype.customizeElementClass = function () {
    this.$mainControl.find(".brtc-va-editors-sheet-panels-basepanel-contents-area").addClass("flex");
    this.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol").addClass("sql").find(".brtc-va-editors-sheet-controls-propertycontrol-contents").addClass("sql-contents").find(".brtc-va-editors-sheet-controls-wrapper").addClass("sql-wrapper");
  }, e.prototype.createQueryStatementCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param[this.PARAM_FULL_QUERY] = e, o.ref.param[this.PARAM_ALIAS_NAMES] = [];

    for (var r = this.getInputTables().length, n = 0; n < r; n++) {
      o.ref.param[this.PARAM_ALIAS_NAMES].push("#{DF(" + n + ")}");
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "full-query" == this.problems[t].param && this.createValidationContent(this.scalaScriptViewer.$mainControl.parent(), this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.queryExecutor.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param.script && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "script",
        messageParam: ["Script"]
      }, e)), o;
    });
  }, e.prototype.addLinkRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkLinkIsConnected(e);
    });
  }, e.prototype.checkLinkIsConnected = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    };
    if (!this._hasPrevious(t)) return this.problemFactory.createProblem(e, t);
  }, e = e, t.VA.Core.Functions.Library.queryExecutor.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.rGroupBy = {
    category: "script",
    defaultFnUnit: {
      func: "rGroupBy",
      name: "Grouping",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [],
        "out-col-name": ""
      },
      display: {
        label: "R Group By",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function data trans for R Script.",
    tags: ["R", "Gro", "GroupBy", "Group By", "r group by"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.render = {
      "out-col-name": this.renderOutColName,
      columns: this.renderColumns,
      groupby: this.renderGroupBy
    }, this.createOutColNameControls(), this.createGroupByControls(), this.createColumnsControls();
  }, e.prototype.createOutColNameControls = function () {
    var t = this;
    this.$newColumnInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("Output Column Name", function (e) {
      e.append(t.$newColumnInput);
      t.createInput(t.$newColumnInput, {
        placeHolder: "Output Column Name"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$newColumnInput.on("change", function (e) {
        if (t.isInputValueChanged("out-col-name", $(this).val())) {
          var o = t.createOutColNameCommand();
          t.executeCommand(o);
        }
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "out-col-name", "Output Column Name");
  }, e.prototype.createGroupByControls = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommnad("columns", o.items);
        }
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    this.groupbyControl.setItems(t), this.columnsControl.setItems(t);
  }, e.prototype.renderOutColName = function () {
    var t = this.options.fnUnit.param["out-col-name"];
    this.$newColumnInput.val(t || "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "out-col-name" === this.problems[t].param && this.createValidationContent(this.$newColumnInput.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]), this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.createOutColNameCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param["out-col-name"] = this.$newColumnInput.val().replace(/ /gi, ""), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.columnListCommnad = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param.columns[0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.rGroupBy.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_OUT_COL_NAME = "out-col-name", this.PARAM_GROUPBY = "groupby", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addOutColNameRule(), this.addNewColumnNameRule(this.PARAM_OUT_COL_NAME), this.addGroupByColumnsRule(), this.addColumnsRule();
  }, e.prototype.addOutColNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_OUT_COL_NAME,
          messageParam: ["Output Column Name"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_OUT_COL_NAME]);
      }
    });
  }, e.prototype.addGroupByColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_GROUPBY, e.param[t.PARAM_GROUPBY]);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.rGroupBy.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.rScript = {
    category: "script",
    defaultFnUnit: {
      func: "rScript",
      name: "GroupFunctionWithR",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [],
        "r-script": "",
        "strings-as-factors": "",
        "result-names": [],
        "message-column-name": ""
      },
      display: {
        label: "R",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Call R script into each grouped data\n",
    tags: ["R", "RScript", "R Script", "ScriptR", "Script R", "r script", "r group by", "Group Function", "R Script Group Function"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.fillControlValues = function (t) {
    for (var e in this.columnData = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnNameList = [], this.columnData) {
      this.columnNameList.push(this.columnData[e].name);
    }
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "r-script": this.renderScript,
      "message-column-name": this.renderMsgColName,
      columns: this.renderColumns,
      "strings-as-factors": this.renderFactors,
      groupby: this.renderGroupby,
      "result-names": this.renderResultNames
    }, this.createRScriptControl(), this.createMessageColName();
  }, e.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommand("columns", o.items);
        }
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createGroupByControls = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        t.createGroupByCommand();
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.createRScriptControl = function () {
    var e = this;
    this.addPropertyControl("R Script", function (o) {
      var r = $('<textarea class="brtc-va-editors-sheet-controls-rcontrol"></textarea>');
      o.append(r), e.rscriptViewer = e.createTextAreaControl(r, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: "text/x-rsrc",
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), o.find(".CodeMirror-sizer").css({
        height: "300px",
        "max-height": "300px"
      }), e.rscriptViewer.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        new t.VA.Core.Dialogs.REditorDialog(e.$mainControl, {
          statement: e.rscriptViewer.codeMirror.getValue(),
          additionalHint: e.columnNameList,
          scriptType: "R",
          mode: "text/x-rsrc",
          dataMap: e.dataMap,
          fnUnit: e.options.fnUnit,
          close: function close(t) {
            t && t.OK && (e.redrawQueryStatement(t.queryStatement), e.createScriptInputCommand(t.columns, t.groupbys, t.queryStatement, t.factors, t.resultNames));
          }
        });
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createMessageColName = function () {
    var t = this;
    this.$messageNameInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("Message Column Name", function (e) {
      e.append(t.$messageNameInput);
      t.createInput(t.$messageNameInput, {
        placeHolder: "Message Column Name"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$messageNameInput.on("change", function (e) {
        t.isInputValueChanged("message-column-name", $(this).val()) && t.createMsgColNameCommand();
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "message-column-name", "Message Column Name");
  }, e.prototype.renderScript = function () {
    var t = this.options.fnUnit.param;
    this.redrawQueryStatement(t["r-script"]);
  }, e.prototype.renderMsgColName = function () {
    var t = this.options.fnUnit.param["message-column-name"];
    this.$messageNameInput.val(t || "");
  }, e.prototype.renderColumns = function () {}, e.prototype.renderFactors = function () {}, e.prototype.renderGroupby = function () {}, e.prototype.renderResultNames = function () {}, e.prototype.redrawQueryStatement = function (t) {
    this.rscriptViewer.setValue(t), this.rscriptViewer.codeMirror.setSize("100%", "100%");
  }, e.prototype.customizeElementClass = function () {
    this.$mainControl.find(".brtc-va-editors-sheet-panels-basepanel-contents-area").addClass("flex");
    this.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol").addClass("sql").find(".brtc-va-editors-sheet-controls-propertycontrol-contents").addClass("sql-contents").find(".brtc-va-editors-sheet-controls-wrapper").addClass("sql-wrapper");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "r-script" === this.problems[t].param && this.createValidationContent(this.rscriptViewer.$mainControl.parent(), this.problems[t]), "result-names" === this.problems[t].param && this.createValidationContent(this.rscriptViewer.$mainControl.parent(), this.problems[t]), "columns" === this.problems[t].param && this.createValidationContent(this.rscriptViewer.$mainControl.parent(), this.problems[t]), "message-column-name" === this.problems[t].param && this.createValidationContent(this.$messageNameInput.parent(), this.problems[t]);
    }
  }, e.prototype.createScriptInputCommand = function (e, o, r, n, a) {
    var i = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    i.ref.param.columns = [[]], e && (i.ref.param.columns[0] = e), i.ref.param.groupby = o, i.ref.param["r-script"] = r, i.ref.param["strings-as-factors"] = n, i.ref.param["result-names"] = a;
    var s = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, i);
    this.executeCommand(s);
  }, e.prototype.createMsgColNameCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["message-column-name"] = this.$messageNameInput.val().replace(/ /gi, "");
    var o = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
    this.executeCommand(o);
  }, t.VA.Core.Functions.Library.rScript.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    this.PARAM_COLUMNS = "columns", this.PARAM_RESULT_NAME = "result-names", this.PARAM_RSCRIT = "r-script", this.PARAM_MESSAGE_COLUMN_NAME = "message-column-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addResultNameRule(), this.addRScriptRule(), this.addNewColumnNameRule(this.PARAM_RESULT_NAME), this.addNewColumnNameRule(this.PARAM_MESSAGE_COLUMN_NAME);
  }, e.prototype.addResultNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_RESULT_NAME, e.param[t.PARAM_RESULT_NAME][0], "Result Names");
    });
  }, e.prototype.addRScriptRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: t.PARAM_RSCRIT,
        messageParam: ["R Script"]
      };
      return t._checkStringIsEmpty(o, e, e.param[t.PARAM_RSCRIT]);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.rScript.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.rScript2 = {
    category: "script",
    defaultFnUnit: {
      func: "rScript2",
      name: "RScript",
      inData: [],
      outData: [],
      param: {
        "input-cols": [],
        "partition-by": [],
        script: "",
        "strings-as-factors": "",
        "input-dataframe": "",
        "output-dataframe": [],
        "script-error-col": "",
        "flatten-error-col": ""
      },
      display: {
        label: "R Script",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Execute R Script for user input data.",
    tags: ["R", "RScript", "R Script", "ScriptR", "Script R", "r script"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.fillControlValues = function (t) {
    for (var e in this.columnData = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnNameList = [], this.columnData) {
      this.columnNameList.push(this.columnData[e].name);
    }
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-cols": this.renderColumns,
      "partition-by": this.renderPartitionBy,
      script: this.renderScript,
      "strings-as-factors": this.renderFactors,
      "input-dataframe": this.renderInputDataFrame,
      "output-dataframe": this.renderOutputDataFrame,
      "script-error-col": this.renderScriptErrorCol,
      "flatten-error-col": this.renderFlattenErrorCol
    }, this.createRScriptControl();
  }, e.prototype.createRScriptControl = function () {
    var e = this;
    this.addPropertyControl("R Script", function (o) {
      var r = $('<textarea class="brtc-va-editors-sheet-controls-rcontrol"></textarea>');
      o.append(r), e.rscriptViewer = e.createTextAreaControl(r, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: "text/x-rsrc",
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), o.find(".CodeMirror-sizer").css({
        height: "310px",
        "max-height": "310px"
      }), e.rscriptViewer.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        new t.VA.Core.Dialogs.RScriptEditorDialog(e.$mainControl, {
          statement: e.rscriptViewer.codeMirror.getValue(),
          additionalHint: e.columnNameList,
          scriptType: "R",
          mode: "text/x-rsrc",
          dataMap: e.dataMap,
          fnUnit: e.options.fnUnit,
          close: function close(t) {
            t && t.OK && (e.redrawQueryStatement(t.queryStatement), e.createScriptInputCommand(t.columns, t.partitionBy, t.queryStatement, t.factors, t.inputDataframe, t.outputDataframe, t.scriptErrorCol, t.flattenErrorCol));
          }
        });
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderScript = function () {
    var t = this.options.fnUnit.param;
    this.redrawQueryStatement(t.script);
  }, e.prototype.renderColumns = function () {}, e.prototype.renderFactors = function () {}, e.prototype.renderPartitionBy = function () {}, e.prototype.renderScriptErrorCol = function () {}, e.prototype.renderFlattenErrorCol = function () {}, e.prototype.renderOutputDataFrame = function () {}, e.prototype.renderInputDataFrame = function () {}, e.prototype.redrawQueryStatement = function (t) {
    this.rscriptViewer.setValue(t), this.rscriptViewer.codeMirror.setSize("100%", "100%");
  }, e.prototype.customizeElementClass = function () {
    this.$mainControl.find(".brtc-va-editors-sheet-panels-basepanel-contents-area").addClass("flex");
    this.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol").addClass("sql").find(".brtc-va-editors-sheet-controls-propertycontrol-contents").addClass("sql-contents").find(".brtc-va-editors-sheet-controls-wrapper").addClass("sql-wrapper");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "script" === this.problems[t].param && this.createValidationContent(this.rscriptViewer.$mainControl.parent(), this.problems[t]), "output-dataframe" === this.problems[t].param && this.createValidationContent(this.rscriptViewer.$mainControl.parent(), this.problems[t]), "input-cols" === this.problems[t].param && this.createValidationContent(this.rscriptViewer.$mainControl.parent(), this.problems[t]), "script-error-col" === this.problems[t].param && this.createValidationContent(this.rscriptViewer.$mainControl.parent(), this.problems[t]), "input-dataframe" === this.problems[t].param && this.createValidationContent(this.rscriptViewer.$mainControl.parent(), this.problems[t]);
    }
  }, e.prototype.createScriptInputCommand = function (e, o, r, n, a, i, s, l) {
    var c = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    c.ref.param["input-cols"] = [], e && (c.ref.param["input-cols"] = e), c.ref.param["partition-by"] = o, c.ref.param.script = r, c.ref.param["strings-as-factors"] = n, c.ref.param["input-dataframe"] = a, c.ref.param["output-dataframe"] = i, c.ref.param["script-error-col"] = s, c.ref.param["flatten-error-col"] = l;
    var p = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, c);
    this.executeCommand(p);
  }, t.VA.Core.Functions.Library.rScript2.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    this.PARAM_COLUMNS = "input-cols", this.PARAM_OUTPUT_DATAFRAME = "output-dataframe", this.PARAM_INPUT_DATAFRAME = "input-dataframe", this.PARAM_RSCRIT = "script", this.PARAM_MESSAGE_COLUMN_NAME = "message-column-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addRScriptRule(), this.addColumnsRule(), this.addInputDataframeRule(), this.addOutputDataframeRule(), this.addNewColumnNameRule(this.PARAM_OUTPUT_DATAFRAME), this.addNewColumnNameRule(this.PARAM_MESSAGE_COLUMN_NAME);
  }, e.prototype.addOutputDataframeRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_OUTPUT_DATAFRAME, e.param[t.PARAM_OUTPUT_DATAFRAME][0], "Output Dataframe");
    });
  }, e.prototype.addInputDataframeRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: t.PARAM_INPUT_DATAFRAME,
        messageParam: ["Input Dataframe"]
      };
      return t._checkStringIsEmpty(o, e, e.param[t.PARAM_INPUT_DATAFRAME]);
    });
  }, e.prototype.addRScriptRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: t.PARAM_RSCRIT,
        messageParam: ["R Script"]
      };
      return t._checkStringIsEmpty(o, e, e.param[t.PARAM_RSCRIT]);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS]);
    });
  }, e = e, t.VA.Core.Functions.Library.rScript2.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.scalaScript = {
    category: "script",
    defaultFnUnit: {
      func: "scalaScript",
      name: "ScalaScript",
      inputs: {
        inputs: [],
        models: []
      },
      outputs: {},
      param: {
        script: ""
      },
      display: {
        label: "Scala Script",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      },
      version: "3.6",
      context: "scala",
      meta: {
        inputs: {
          type: "table",
          range: {
            min: 1,
            max: 10
          }
        },
        outputs: {
          type: "table",
          range: {
            min: 1,
            max: 10
          }
        },
        models: {
          type: "model",
          range: {
            min: 1,
            max: 10
          }
        }
      }
    },
    description: "This function returns value for executed Scala Script",
    tags: ["Scala", "script", "ScalaScript"]
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.fillControlValues = function (t) {
    for (var e in this.columnData = this.dataMap && this.FnUnitUtils.getInTable(this.options.fnUnit)[0] ? this.dataMap[this.FnUnitUtils.getInTable(this.options.fnUnit)[0]].columns : [], this.hintList = [], this.FnUnitUtils.getInTable(this.options.fnUnit)) {
      this.hintList.push("inputs(" + e + ")");
    }

    for (var e in this.columnData) {
      this.hintList.push(this.columnData[e].name);
    }
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      script: this.renderScript
    }, this.createScriptControl(), this.createOutputsControl();
  }, e.prototype.createOutputsControl = function () {
    this.$outputsWrapper = this.addPropertyControl("Outputs", function (t) {
      this.createOutputsUnit(t, {
        alias: "",
        type: "table"
      });
    }), this.$outputsWrapper.find(".brtc-va-editors-sheet-controls-propertycontrol-contents").css("margin-bottom", "0");
    var t = this.$outputsWrapper.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(t, {}, "out-alias", "Out Alias");
  }, e.prototype.openScriptEditor = function () {
    var e = this;
    new t.VA.Core.Dialogs.ScalaEditorDialog(e.$mainControl, {
      title: "Scala Script",
      mode: {
        name: "scala",
        version: 3,
        singleLineStringErrors: !1
      },
      additionalHint: e.hintList,
      fnUnit: e.options.fnUnit,
      statement: e.scalaScriptViewer.codeMirror.getValue(),
      scriptType: "Scala",
      close: function close(t) {
        t.OK && (e.createScriptInputCommand(t), e.redrawQueryStatement(t.param.script), e.renderOutputs());
      }
    });
  }, e.prototype.createScriptControl = function () {
    var e = this;
    this.addPropertyControl("Script", function (o) {
      var r = $('<textarea class="brtc-va-editors-sheet-controls-sqlcontrol"></textarea>');
      o.append(r), e.scalaScriptViewer = e.createTextAreaControl(r, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: {
          name: "scala",
          version: 3,
          singleLineStringErrors: !1
        },
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), o.find(".CodeMirror-sizer").css({
        height: "300px"
      }), e.scalaScriptViewer.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        $(window).trigger("mousedown"), e.openScriptEditor();
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.redrawQueryStatement = function (t) {
    this.scalaScriptViewer.setValue(t), this.scalaScriptViewer.codeMirror.setSize("100%", "100%");
  }, e.prototype.renderScript = function () {
    var t = this.options.fnUnit.param;
    t.script || (t.script = '/*\n   NOTE : Enter "Out Table Alias"\n   ex)\n       val inputDataframe = inputs(0)\n       val result = inputDataframe\n*/\n'), this.redrawQueryStatement(t.script), this.renderOutputs();
  }, e.prototype.createOutputsUnit = function (e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-out-alias-unit"></div'),
        a = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input">'),
        i = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-dropdown"></div');
    a.css("margin-bottom", "5px"), e.append(n), n.append(a), n.append(i);
    var s = {
      theme: t.VA.Env.Theme,
      width: "100%",
      height: "28px",
      source: [{
        text: "TABLE",
        value: "table"
      }, {
        text: "MODEL",
        value: "model"
      }],
      displayMember: "text",
      selectedIndex: 0,
      valueMember: "value",
      dropDownHeight: 70,
      disabled: !0
    };
    this.createInput(a, {
      height: 30
    }, "alias-name"), this.createComboBox(i, s, "alias-type"), a.attr("readonly", !0), i.attr("readonly", !0), a.val(o.alias), i.val(o.type), a.on("click", function () {
      r.openScriptEditor();
    }), i.on("click", function () {
      r.openScriptEditor();
    });
  }, e.prototype.renderOutputs = function () {
    var t = this.FnUnitUtils.getOutputs(this.options.fnUnit),
        e = this.$outputsWrapper.find(".brtc-va-editors-sheet-controls-propertycontrol-contents").empty();

    if (_.isEmpty(t)) {
      var o = {
        alias: r,
        type: this.FnUnitUtils.getTypeByTableId(this.options.fnUnit, t[r])
      };
      this.createOutputsUnit(e, o);
    } else for (var r in t) {
      o = {
        alias: r,
        type: this.FnUnitUtils.getTypeByTableId(this.options.fnUnit, t[r])
      };
      this.createOutputsUnit(e, o);
    }
  }, e.prototype.createScriptInputCommand = function (e) {
    var o = new t.VA.Core.CompoundCommand(this),
        r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        n = {
      fnUnit: this.options.fnUnit,
      ref: {
        outputs: {},
        meta: {}
      }
    };
    r.ref.param.script = "", e.param.script && (r.ref.param.script = e.param.script), n.ref.outputs = e.outputs, n.ref.meta = e.meta;
    var a = new t.VA.Core.Editors.Diagram.Commands.ChangeOutputsCommand(this, n),
        i = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    o.add(i), o.add(a), this.executeCommand(o);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "script" == this.problems[t].param && this.createValidationContent(this.scalaScriptViewer.$mainControl.parent(), this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.scalaScript.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addScriptRule(), this.addOutTableAliasRule();
  }, e.prototype.addScriptRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param.script && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "script",
        messageParam: ["Script"]
      }, e)), o;
    });
  }, e.prototype.addOutTableAliasRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "BR-0033",
        param: "out-table-alias",
        messageParam: ["Out Table Alias"]
      }, e, e.param["out-table-alias"]);
    });
  }, e.prototype.addLinkRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkLinkIsConnected(e);
    });
  }, e.prototype.checkLinkIsConnected = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    };
    if (!this._hasPrevious(t)) return this.problemFactory.createProblem(e, t);
  }, t.VA.Core.Functions.Library.scalaScript.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.anova = {
    category: "statistics",
    defaultFnUnit: {
      func: "anova",
      name: "ANOVA",
      inData: [],
      outData: [],
      param: {
        column: [[]],
        target: [[]],
        group: [[]],
        flag: "true"
      },
      display: {
        label: "One Way ANOVA",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "In statistics, one-way analysis of variance (abbreviated one-way ANOVA) is a technique used to compare means of three or more samples.",
    tags: ["OneWayANOVA", "Statistics", "one way anova", "f test", "duncan test", "analysis of variance"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationControls = {}, this.PARAM_TARGET = "target", this.PARAM_GROUP = "group", this.PARAM_COLUMNS = "column", this.PARAM_FLAG = "flag", this.render = {
      column: this.renderColumn,
      target: this.renderTarget,
      group: this.renderGroup,
      flag: this.renderFlag
    }, this.validation = {
      column: this.renderColumnValidation
    }, this.createColumnContainerControl(), this.createTargetNameControl(), this.createGroupControl(), this.createFlagControl();
  }, e.prototype.createColumnContainerControl = function (t) {
    this.$columnContainer = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-container"></div>'), this.addedColumnControls = [], this.validationControls.column = [], this.addPropertyControl("Response Columns", function (t) {
      this.createColumnControl(this.$columnContainer, !0), t.append(this.$columnContainer);
    }, {
      mandatory: !0
    }), this.createAddButton();
  }, e.prototype.getSelectedItem = function (t) {
    var e = "",
        o = t.getSelectedItems();

    for (var r in o) {
      r > 0 && (e += "~"), e += o[r];
    }

    return e;
  }, e.prototype.createColumnControl = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column"></div>'),
        n = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-addedcolumn" style="margin-bottom: 5px;" ></div>'),
        a = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-innercontainer"></div>');
    r.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), r.attr("index", this.addedColumnControls.length), r.addClass(".brtc-va-editors-sheet-controls-propertycontrol-deck"), e || a.addClass("non-mandatory"), r.append(n);
    var i = this.createColumnList(n, {
      maxRowCount: 3,
      multiple: !0,
      showOpener: "click",
      changed: function changed(t, e) {
        o.executeCommand(o.createOnColumnsCommand()), o.checkColumnControlCount();
      }
    }, "brtc-va-editors-sheet-controls-width-12"),
        s = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
    s.click(function () {
      var t = o.validationControls.column.indexOf(a);
      o.validationControls.column.splice(t, 1), $(this).parent().remove(), o.addedColumnControls[t].getSelectedItems()[0], o.addedColumnControls = $.grep(o.addedColumnControls, function (t) {
        return !Object.is(t, i);
      }), o.checkColumnControlCount(), o.executeCommand(o.createOnColumnsCommand());
    }), e || r.append(s), a.append(r), t.append(a), this.addedColumnControls.push(i), this.validationControls.column.push(a);
  }, e.prototype.createAddButton = function () {
    var e = this;
    this.$addButton = $('<input class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-add-key-condition" type="button" value="+ Add Column"/>'), this.$columnContainer.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.$addButton.detach(), e.createColumnControl(e.$columnContainer), e.fillControlValues(!0), e.$columnContainer.append(e.$addButton), e.checkColumnControlCount(), e.executeCommand(e.createOnColumnsCommand());
    });
  }, e.prototype.checkColumnControlCount = function () {
    this.addedColumnControls.length > 1 ? (this.$target.closest(".brtc-va-editors-sheet-controls-propertycontrol").hide(), this.$group.closest(".brtc-va-editors-sheet-controls-propertycontrol").hide(), this.isTargetOrGroupExist = !1) : (this.$target.closest(".brtc-va-editors-sheet-controls-propertycontrol").show(), this.$group.closest(".brtc-va-editors-sheet-controls-propertycontrol").show(), this.targetControl.getSelectedItems().length > 0 || this.groupControl.getSelectedItems().length > 0 ? this.isTargetOrGroupExist = !0 : this.isTargetOrGroupExist = !1);
  }, e.prototype.createOnColumnsCommand = function () {
    var e = this.makeColumnParam();
    this.addedColumnControls.length > 1 && (this.targetControl.setSelectedItems([]), this.groupControl.setSelectedItems([]));
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          column: e
        }
      }
    };
    return this.isTargetOrGroupExist || (o.ref.param.target = [[]], o.ref.param.group = [[]]), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createTargetNameControl = function (t) {
    var e = this;
    this.$target = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.$targetWrapper = this.addPropertyControl("Factor Columns", function (t) {
      t.append(this.$target);
      var o = {
        maxRowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("target", o.items);
        }
      };
      e.targetControl = e.createColumnList(e.$target, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.createGroupControl = function (t) {
    var e = this;
    this.$group = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.$groupWrapper = this.addPropertyControl("Group By", function (t) {
      t.append(this.$group);
      var o = {
        maxRowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          e.createColumnListCommand("group", o.items);
        }
      };
      e.groupControl = e.createColumnList(e.$group, o);
    });
  }, e.prototype.createFlagControl = function () {
    var t = this;
    this.$flagTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-flag">True</div>'), this.$flagFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-flag">False</div>');
    var e = this.addPropertyControl("Print Treatment Targets", function (e) {
      e.append(t.$flagTrueControl).append(t.$flagFalseControl), t.createRadioButton(t.$flagTrueControl, {
        width: "80",
        groupName: "flag"
      }), t.createRadioButton(t.$flagFalseControl, {
        width: "80",
        groupName: "flag"
      }), t.$flagTrueControl.on("checked", function () {
        t.createRadioCommand("flag", "true");
      }), t.$flagFalseControl.on("checked", function () {
        t.createRadioCommand("flag", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "flag", "Print Treatment Targets");
  }, e.prototype.fillLastColumnControl = function () {
    var t = this.addedColumnControls.length - 1;
    this.addedColumnControls[t].setItems(this.columnData);
  }, e.prototype.renderColumn = function () {
    var t = this.options.fnUnit.param.column[0],
        e = this.options.fnUnit.param.target[0],
        o = this.options.fnUnit.param.group[0];
    if (this.addedColumnControls.splice(1, this.addedColumnControls.length), this.validationControls.column.splice(1, this.validationControls.column.length), this.$columnContainer.find(".non-mandatory").remove(), e.length > 0 || o.length > 0) this.addedColumnControls[0].setSelectedItems(t || []);else {
      0 === t.length && this.addedColumnControls[0].setSelectedItems([]);

      for (var r = 0; r < t.length; r++) {
        var n = t[r].split("~"),
            a = [];

        for (var i in n) {
          a.push(n[i]);
        }

        0 != r && (this.createColumnControl(this.$columnContainer), this.fillLastColumnControl()), this.addedColumnControls[r].setSelectedItems(a || []);
      }

      this.$addButton.detach(), this.$addButton.appendTo(this.$columnContainer);
    }
  }, e.prototype.fillControlValues = function () {
    var t = [];

    for (var e in t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnData = [], this.stringColumnData = [], t) {
      "number" === t[e].type.toLowerCase() ? this.columnData.push(t[e]) : "String" == t[e].internalType && this.stringColumnData.push(t[e]);
    }

    for (var e in this.addedColumnControls) {
      this.addedColumnControls[e].setItems(this.columnData);
    }

    this.targetControl.setItems(this.stringColumnData), this.groupControl.setItems(this.stringColumnData);
  }, e.prototype.renderTarget = function () {
    var t = this.options.fnUnit.param;
    this.targetControl.setSelectedItems(t.target[0]), this.groupControl.setSelectedItems(t.group[0]), t.column[0].length > 0 && -1 != t.column[0].indexOf("~") ? (this.$targetWrapper.hide(), this.$groupWrapper.hide()) : this.addedColumnControls.length > 1 ? (this.$targetWrapper.hide(), this.$groupWrapper.hide()) : (this.$targetWrapper.show(), this.$groupWrapper.show());
  }, e.prototype.renderGroup = function () {
    var t = this.options.fnUnit.param;
    this.targetControl.setSelectedItems(t.target[0]), this.groupControl.setSelectedItems(t.group[0]), t.column[0].length > 0 && -1 != t.column[0].indexOf("~") ? (this.$targetWrapper.hide(), this.$groupWrapper.hide()) : this.addedColumnControls.length > 1 ? (this.$targetWrapper.hide(), this.$groupWrapper.hide()) : (this.$targetWrapper.show(), this.$groupWrapper.show());
  }, e.prototype.renderFlag = function () {
    var t = this.options.fnUnit.param[this.PARAM_FLAG];
    void 0 === t ? this.$flagTrueControl.jqxRadioButton("check") : ("true" === t && this.$flagTrueControl.jqxRadioButton({
      checked: !0
    }), "false" === t && this.$flagFalseControl.jqxRadioButton({
      checked: !0
    }));
  }, e.prototype.renderValidation = function (t) {
    for (var e in this.problems) {
      if ("column" === this.problems[e].param) {
        var o = this.problems[e].paramIndex;
        this.createValidationContent(this.validationControls.column[o].find("[index=" + o + "]"), this.problems[e]);
      }

      "target" === this.problems[e].param && this.createValidationContent(this.$target, this.problems[e]), "group" === this.problems[e].param && this.createValidationContent(this.$group, this.problems[e]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    0 == this.targetControl.getSelectedItems().length && 0 == this.groupControl.getSelectedItems().length ? this.isTargetOrGroupExist = !1 : this.isTargetOrGroupExist = !0, r.ref.param.column = this.makeColumnParam(), r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.makeColumnParam = function () {
    var t = [];
    if (this.isTargetOrGroupExist) t.push(this.addedColumnControls[0].getSelectedItems());else for (var e in t = [[]], this.addedColumnControls) {
      t[0].push(this.getSelectedItem(this.addedColumnControls[e]));
    }
    return t;
  }, e.prototype.createRadioCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.anova.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMN = "column", this.PARAM_TARGET = "target", this.PARAM_GROUP = "group", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addTargetRule(), this.addBaseGroupByRule(this.PARAM_COLUMN, "Response Columns", this.PARAM_GROUP), this.addBaseGroupByRule(this.PARAM_TARGET, "Factor Columns", this.PARAM_GROUP);
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, this.PARAM_GROUP, t.param[this.PARAM_GROUP]);
    });
  }, e.prototype.addBaseGroupByRule = function (e, o, r) {
    e && (r = r || "groupby", this.addRule(function (n) {
      if (void 0 !== t.VA.Core.DataQueryTemplate.getSchema(n.parent().mid, n[IN_DATA][0])) {
        var a,
            i = [],
            s = n.param[r][0];
        if (n.param[e].constructor === Array && (a = n.param[e][0]) && a.length) for (var l in s) {
          a.indexOf(s[l]) > -1 && i.push(s[l]);
        }

        if (i.length) {
          var c = {
            errorCode: "BR-0057",
            param: r
          };
          return 1 == i.length ? c.messageParam = [i[0], o, "Group By"] : c.messageParam = [JSON.stringify(i), o, "Group By"], this.problemFactory.createProblem(c, n);
        }
      }
    }));
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      if (0 == e.param[t.PARAM_COLUMN][0].length) o.push(t.checkColumnIsEmpty(e, t.PARAM_COLUMN, e.param[t.PARAM_COLUMN][0], "Response Columns", 0));else for (var r in e.param[t.PARAM_COLUMN][0]) {
        var n = e.param[t.PARAM_COLUMN][0][r];
        "" === n && o.push(t.checkColumnIsEmpty(e, t.PARAM_COLUMN, n, "Response Columns", r));
      }
      return o;
    }), this.addRule(function (e) {
      var o = [];

      for (var r in e.param[t.PARAM_COLUMN][0]) {
        var n = e.param[t.PARAM_COLUMN][0][r],
            a = t.checkColumnExists(e, t.PARAM_COLUMN, n.split("~"), r);
        a && (a.paramIndex = r, o.push(a));
      }

      return o;
    });
  }, e.prototype.addTargetRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_TARGET, e.param[t.PARAM_TARGET][0], 0);
    });
  }, t.VA.Core.Functions.Library.anova.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.associationRule = {
    category: "statistics",
    defaultFnUnit: {
      func: "associationRule",
      name: "AssociationRule",
      inData: [],
      outData: [],
      param: {
        column: [],
        "min-support": "",
        "min-confidence": "",
        groupby: []
      },
      display: {
        label: "Association Rule",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Compute the association between items.",
    tags: ["Association", "Rule", "Association Rule", "Relation", "Frequent Pattern Mining", "Market Basket", "Node"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      column: this.renderColumnControl,
      "min-support": this.renderMinSupportControl,
      "min-confidence": this.renderMinConfidenceControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createColumnControl(), this.createMinSupportControl(), this.createMinConfidenceControl(), this.createGroupbyControl();
  }, e.prototype.createColumnControl = function (t) {
    var e = this;
    e.$elements.column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Column", function (t) {
      t.append(e.$elements.column);
      var o = {
        expand: !0,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("column", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.column = e.createColumnList(e.$elements.column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnControl = function (t) {
    var e = this.options.fnUnit.param.column;
    this.controls.column.setSelectedItems(e);
  }, e.prototype.createMinSupportControl = function (e) {
    var o = this;
    o.$elements["min-support"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Min Support", function (e) {
      e.append(o.$elements["min-support"]);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.01 (0 <= value)")
      };
      o.controls["min-support"] = o.createNumericInput(o.$elements["min-support"], r), o.controls["min-support"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-support", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-support", "Min Support");
  }, e.prototype.renderMinSupportControl = function (t) {
    var e = this.options.fnUnit.param["min-support"];
    this.controls["min-support"].setValue(e || "");
  }, e.prototype.createMinConfidenceControl = function (e) {
    var o = this;
    o.$elements["min-confidence"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Min Confidence", function (e) {
      e.append(o.$elements["min-confidence"]);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.8 (0 <= value)")
      };
      o.controls["min-confidence"] = o.createNumericInput(o.$elements["min-confidence"], r), o.controls["min-confidence"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-confidence", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-confidence", "Min Confidence");
  }, e.prototype.renderMinConfidenceControl = function (t) {
    var e = this.options.fnUnit.param["min-confidence"];
    this.controls["min-confidence"].setValue(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t, e;
    t = this.getColumnsOfInTable(0, ["string[]"]), this.controls.column.setItems(t), e = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(e);
  }, t.VA.Core.Functions.Library.associationRule.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnRule(), this.addGroupByRule();
  }, e.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "column", e.param.column, "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "column", e.param.column);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "column", e.param.column, ["string[]"]);
    });
  }, e.prototype.addGroupByRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "groupby", e.param.groupby);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = t.getArrayConflicted(e.param.groupby, e.param.column[0]);
        return t.createProblemForConflicted(o, "groupby", "Group By", "Columns", e);
      }
    });
  }, t.VA.Core.Functions.Library.associationRule.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.bartlettsTestForStacked = {
    category: "statistics",
    defaultFnUnit: {
      func: "bartlettsTestForStacked",
      name: "BartlettsTestForStacked",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "label-col": "",
        groupby: []
      },
      display: {
        label: "Bartlett's Test For Stacked Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Bartlett's Test of homogeneity of variances for stacked data",
    mandatory: [],
    tags: ["Bartlett's Test For Stacked Data", "bartlett bartletts", "bartlett's", "bartlett'stest", "bartletttest", "bartlettstest", "bartlett test", "bartletts test", "bartlett's test", "ftest", "f test", "variance", "homogenous", "inhomogenous"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "label-col": this.renderLabelColControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createLabelColControl(), this.createGroupbyControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Response Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Factor Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["label-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.bartlettsTestForStacked.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addLabelColRule(), this.addBaseGroupByRule("feature-cols", "Feature Columns"), this.addBaseGroupByRule("label-col", "Factor Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number"]);
    });
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Factor Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.bartlettsTestForStacked.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.bootstrapLimit = {
    category: "statistics",
    defaultFnUnit: {
      func: "bootstrapLimit",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        column: [],
        alpha: "0.05",
        bootstrap: "100",
        upperLower: "true",
        "script-id": "bootstrapLimit"
      },
      display: {
        label: "Bootstrap Limit",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It returns a control limit value of alpha from estimated population parameter by bootstrap.",
    mandatory: [],
    tags: ["bootstrap", "limit"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      alpha: this.renderAlphaControl,
      upperLower: this.renderUpperLowerControl,
      bootstrap: this.renderBootstrapControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createAlphaControl(), this.createUpperLowerControl(), this.createBootstrapControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        maxRowCount: "0",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns;
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createAlphaControl = function (t) {
    var e = this;
    e.$elements.alpha = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("alpha ( 0 < value < 1  )", function (t) {
      t.append(e.$elements.alpha);
      e.controls.alpha = e.createNumericInput(e.$elements.alpha, {
        placeholder: "0.05",
        numberType: "double"
      }), e.controls.alpha.onChange(function () {
        var t = e.createSetParameterValueCommand("alpha", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderAlphaControl = function (t) {
    var e = this.options.fnUnit.param.alpha;
    this.controls.alpha.setValue(e || "");
  }, e.prototype.createUpperLowerControl = function (t) {
    var e = this;
    e.$elements["upperLower.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">upper</div>'), e.$elements["upperLower.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">lower</div>'), e.addPropertyControl("Upper / Lower", function (t) {
      t.append(e.$elements["upperLower.true"]), e.controls["upperLower.true"] = e.createRadioButton(e.$elements["upperLower.true"], {
        width: "undefined",
        groupName: "upperLower"
      }), e.$elements["upperLower.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("upperLower", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["upperLower.false"]), e.controls["upperLower.false"] = e.createRadioButton(e.$elements["upperLower.false"], {
        width: "undefined",
        groupName: "upperLower"
      }), e.$elements["upperLower.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("upperLower", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderUpperLowerControl = function (t) {
    var e = "upperLower." + this.options.fnUnit.param.upperLower;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createBootstrapControl = function (t) {
    var e = this;
    e.$elements.bootstrap = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Number of bootstrap ( 10 <= value <= 10000)", function (t) {
      t.append(e.$elements.bootstrap);
      e.controls.bootstrap = e.createNumericInput(e.$elements.bootstrap, {
        placeholder: "100",
        numberType: "int"
      }), e.controls.bootstrap.onChange(function () {
        var t = e.createSetParameterValueCommand("bootstrap", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderBootstrapControl = function (t) {
    var e = this.options.fnUnit.param.bootstrap;
    this.controls.bootstrap.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t);
  }, e.prototype.getPrimaryOperation = function () {
    return "BootstrapLimit";
  }, t.VA.Core.Functions.Library.bootstrapLimit.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, o.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns, "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "columns", e.param.columns, ["number"]);
    });
  }, t.VA.Core.Functions.Library.bootstrapLimit.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.chiSqTestForTheVariance = {
    category: "statistics",
    defaultFnUnit: {
      func: "chiSqTestForTheVariance",
      name: "ChiSqTestForTheVariance",
      inData: [],
      outData: [],
      param: {
        "input-cols": [],
        alternatives: ["greater", "less", "two_sided"],
        "sigma-square": "",
        "confidence-level": "",
        groupby: []
      },
      display: {
        label: "Chi Square Test For The Variance",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function conduct chi square test for the variance.",
    mandatory: ["alternatives"],
    tags: ["Chi Square Test For The Variance", "Chi", "Chi Square", "ChiSquare", "Test", "One", "One sample"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-cols": this.renderInputColsControl,
      alternatives: this.renderAlternativesControl,
      "sigma-square": this.renderSigmaSquareControl,
      "confidence-level": this.renderConfidenceLevelControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createInputColsControl(), this.createAlternativesControl(), this.createSigmaSquareControl(), this.createConfidenceLevelControl(), this.createGroupbyControl();
  }, e.prototype.createInputColsControl = function (t) {
    var e = this;
    e.$elements["input-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Columns", function (t) {
      t.append(e.$elements["input-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["input-cols"] = e.createColumnList(e.$elements["input-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColsControl = function (t) {
    var e = this.options.fnUnit.param["input-cols"];
    this.controls["input-cols"].setSelectedItems(e);
  }, e.prototype.createAlternativesControl = function (t) {
    var e = this;
    e.$elements.alternatives = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.alternatives.append(o), e.$elements.alternatives.append(r), e.addPropertyControl("Alternatives", function (t) {
      t.append(e.$elements.alternatives), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Greater",
        value: "greater",
        default: !0
      }, {
        label: "Less",
        value: "less",
        default: !0
      }, {
        label: "Two Sided",
        value: "two_sided",
        default: !0
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("alternatives", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "alternatives." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.alternatives.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("alternatives", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("alternatives", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderAlternativesControl = function (t) {
    var e,
        o = this.options.fnUnit.param.alternatives,
        r = [{
      label: "Greater",
      value: "greater",
      default: !0
    }, {
      label: "Less",
      value: "less",
      default: !0
    }, {
      label: "Two Sided",
      value: "two_sided",
      default: !0
    }];

    for (var n in r) {
      e = "alternatives." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createSigmaSquareControl = function (t) {
    var e = this;
    e.$elements["sigma-square"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Hypothesized Variance", function (t) {
      t.append(e.$elements["sigma-square"]);
      e.controls["sigma-square"] = e.createNumericInput(e.$elements["sigma-square"], {
        placeholder: "(0 < value)",
        numberType: "double"
      }), e.controls["sigma-square"].onChange(function () {
        var t = e.createSetParameterValueCommand("sigma-square", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "sigma-square", "Hypothesized Variance");
  }, e.prototype.renderSigmaSquareControl = function (t) {
    var e = this.options.fnUnit.param["sigma-square"];
    this.controls["sigma-square"].setValue(e || "");
  }, e.prototype.createConfidenceLevelControl = function (e) {
    var o = this;
    o.$elements["confidence-level"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Confidence Level", function (e) {
      e.append(o.$elements["confidence-level"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.95 (0 <= value <= 1)"),
        numberType: "double"
      };
      o.controls["confidence-level"] = o.createNumericInput(o.$elements["confidence-level"], r), o.controls["confidence-level"].onChange(function () {
        var t = o.createSetParameterValueCommand("confidence-level", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "confidence-level", "Confidence Level");
  }, e.prototype.renderConfidenceLevelControl = function (t) {
    var e = this.options.fnUnit.param["confidence-level"];
    this.controls["confidence-level"].setValue(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["input-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["string", "number"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.chiSqTestForTheVariance.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputColsRule(), this.addAlternativesRule(), this.addBaseGroupByRule("input-cols", "Input Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addInputColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-cols", e.param["input-cols"], "Input Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-cols", e.param["input-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "input-cols", e.param["input-cols"], ["number"]);
    });
  }, o.prototype.addAlternativesRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "EE001",
        param: "alternatives",
        messageParam: ["Alternatives"]
      }, e, e.param.alternatives);
    });
  }, t.VA.Core.Functions.Library.chiSqTestForTheVariance.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.chiSquareTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "chiSquareTest",
      name: "ChiSquareTest",
      inData: [],
      outData: [],
      param: {
        column: [[]],
        excolumn: "",
        groupby: [],
        tableinputmode: "SINGLE"
      },
      display: {
        label: "Chi Square Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["excolumn", "groupby"],
    description: "This function is chi Square Test",
    tags: ["Chi Square Test", "ChisquareTest", "Chi", "Square", "Test"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t,
      e = this.Brightics;

  function o(t, o) {
    e.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, t, o);
  }

  o.prototype = Object.create(e.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), o.prototype.constructor = o, o.prototype.createControls = function () {
    e.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, o.prototype.createContentsAreaControls = function (o) {
    e.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, o), t = ["SINGLE", "PAIR", "MATRIX"], this.PARAM_COLUMN = "column", this.PARAM_GROUP_BY = "groupby", this.PARAM_TABLEINPUTMODE = "tableinputmode", this.render = {
      column: this.renderColumnControl,
      groupby: this.renderGroupByControl,
      tableinputmode: this.renderTableInputModeControl
    }, this.createColumnsControls(), this.createGroupbyControl(), this.createTableInputMode();
  }, o.prototype.createColumnsControls = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnListCommand("column", o.items);
        }
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, o.prototype.createGroupbyControl = function () {
    var t = this;
    this.$groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupby);
      var o = {
        rowCount: 1,
        multiple: !1,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.columnSingleListCommand("groupby", o.items);
        }
      };
      t.groupbyControl = t.createColumnList(t.$groupby, o);
    });
  }, o.prototype.createTableInputMode = function () {
    var e = this;
    this.$inputMode = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.addPropertyControl("Input Mode", function (o) {
      e.createDropDownList(this.$inputMode, {
        source: t,
        selectedIndex: 0
      }, e.$inputMode.parent()), o.append(this.$inputMode.parent()), e.$inputMode.on("change", function () {
        var t;
        t = e.$inputMode.val(), e.createCommonCommand("tableinputmode", t);
      });
    }, {
      mandatory: !0
    });
  }, o.prototype.columnListCommand = function (t, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[t] = [[]], o && (r.ref.param.column[0] = o);
    var n = new e.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, o.prototype.columnSingleListCommand = function (t, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[t] = [], o && (r.ref.param.groupby = o);
    var n = new e.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, o.prototype.createCommonCommand = function (t, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[t] = o;
    var n = new e.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, o.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];
    $.each(t, function (t, o) {
      "Double" !== o.internalType && "Float" !== o.internalType && "Decimal" !== o.internalType || e.push(o);
    }), this.columnsControl.setItems(e), this.groupbyControl.setItems(t);
  }, o.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMN ? this.createValidationContent(this.$columns, this.problems[t]) : this.problems[t].param === this.PARAM_TABLEINPUTMODE ? this.createValidationContent(this.$inputMode.parent(), this.problems[t]) : this.problems[t].param === this.PARAM_GROUP_BY && this.createValidationContent(this.$groupby, this.problems[t]);
    }
  }, o.prototype.renderColumnControl = function () {
    var t = this.options.fnUnit.param.column;
    this.columnsControl.setSelectedItems(t[0]);
  }, o.prototype.renderGroupByControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GROUP_BY];
    this.groupbyControl.setSelectedItems(t);
  }, o.prototype.renderTableInputModeControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TABLEINPUTMODE];
    this.$inputMode.jqxDropDownList("val", t || "");
  }, e.VA.Core.Functions.Library.chiSquareTest.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    this.PARAM_COLUMNS = "column", this.PARAM_TABLEINPUTMODE = "tableinputmode", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addGroupbyRule(), this.addTableInputNameRule();
  }, e.prototype.addTableInputNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: t.PARAM_TABLEINPUTMODE,
        messageParam: ["Table Input Mode"]
      };
      return t._checkStringIsEmpty(o, e, e.param[t.PARAM_TABLEINPUTMODE]);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addGroupbyRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.chiSquareTest.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.chiSquareTestForGivenProportions = {
    category: "statistics",
    defaultFnUnit: {
      func: "chiSquareTestForGivenProportions",
      name: "ChiSquareTestForGivenProportions",
      inData: [],
      outData: [],
      param: {
        "success-count-col": "",
        "trial-count-col": "",
        "probability-col": "",
        "yates-correction": "true",
        "group-by": []
      },
      display: {
        label: "Chi Square Test For Given Proportion",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Test the null that the proportions (probabilities of success) in several groups are equal to certain given values.",
    mandatory: [],
    tags: ["ChiSquareTestForGivenProportions Chi Square Test For Given Proportions"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "success-count-col": this.renderSuccessCountColControl,
      "trial-count-col": this.renderTrialCountColControl,
      "probability-col": this.renderProbabilityColControl,
      "yates-correction": this.renderYatesCorrectionControl,
      "group-by": this.renderGroupByControl
    }, this.$elements = {}, this.controls = {}, this.createSuccessCountColControl(), this.createTrialCountColControl(), this.createProbabilityColControl(), this.createYatesCorrectionControl(), this.createGroupByControl();
  }, e.prototype.createSuccessCountColControl = function (t) {
    var e = this;
    e.$elements["success-count-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Success Count Column", function (t) {
      t.append(e.$elements["success-count-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("success-count-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["success-count-col"] = e.createColumnList(e.$elements["success-count-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderSuccessCountColControl = function (t) {
    var e = this.options.fnUnit.param["success-count-col"];
    this.controls["success-count-col"].setSelectedItems([e]);
  }, e.prototype.createTrialCountColControl = function (t) {
    var e = this;
    e.$elements["trial-count-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Trial Count Column", function (t) {
      t.append(e.$elements["trial-count-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("trial-count-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["trial-count-col"] = e.createColumnList(e.$elements["trial-count-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderTrialCountColControl = function (t) {
    var e = this.options.fnUnit.param["trial-count-col"];
    this.controls["trial-count-col"].setSelectedItems([e]);
  }, e.prototype.createProbabilityColControl = function (t) {
    var e = this;
    e.$elements["probability-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Probability Column", function (t) {
      t.append(e.$elements["probability-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("probability-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["probability-col"] = e.createColumnList(e.$elements["probability-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderProbabilityColControl = function (t) {
    var e = this.options.fnUnit.param["probability-col"];
    this.controls["probability-col"].setSelectedItems([e]);
  }, e.prototype.createYatesCorrectionControl = function (t) {
    var e = this;
    e.$elements["yates-correction.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["yates-correction.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), e.addPropertyControl("Yates Correction", function (t) {
      t.append(e.$elements["yates-correction.true"]), e.controls["yates-correction.true"] = e.createRadioButton(e.$elements["yates-correction.true"], {
        width: "undefined",
        groupName: "yates-correction"
      }), e.$elements["yates-correction.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("yates-correction", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["yates-correction.false"]), e.controls["yates-correction.false"] = e.createRadioButton(e.$elements["yates-correction.false"], {
        width: "undefined",
        groupName: "yates-correction"
      }), e.$elements["yates-correction.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("yates-correction", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderYatesCorrectionControl = function (t) {
    var e = "yates-correction." + this.options.fnUnit.param["yates-correction"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements["group-by"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements["group-by"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("group-by", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["group-by"] = e.createColumnList(e.$elements["group-by"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupByControl = function (t) {
    var e = this.options.fnUnit.param["group-by"];
    this.controls["group-by"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["success-count-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls["trial-count-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls["probability-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["group-by"].setItems(t);
  }, t.VA.Core.Functions.Library.chiSquareTestForGivenProportions.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addSuccessCountColRule(), this.addTrialCountColRule(), this.addProbabilityColRule();
  }, o.prototype.addSuccessCountColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "success-count-col", e.param["success-count-col"], "Success Count Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "success-count-col", e.param["success-count-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "success-count-col", e.param["success-count-col"], ["number"]);
    });
  }, o.prototype.addTrialCountColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "trial-count-col", e.param["trial-count-col"], "Trial Count Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "trial-count-col", e.param["trial-count-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "trial-count-col", e.param["trial-count-col"], ["number"]);
    });
  }, o.prototype.addProbabilityColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "probability-col", e.param["probability-col"], "Probability Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "probability-col", e.param["probability-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "probability-col", e.param["probability-col"], ["number"]);
    });
  }, t.VA.Core.Functions.Library.chiSquareTestForGivenProportions.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.chiSquareTestOfIndependence = {
    category: "statistics",
    defaultFnUnit: {
      func: "chiSquareTestOfIndependence",
      name: "ChiSquareTestOfIndependence",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "label-col": "",
        groupby: []
      },
      display: {
        label: "Chi Square Test Of Independence",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function conduct Pearson's independence test for every feature against the label.",
    mandatory: [],
    tags: ["ChiSquareTestForIndependence", "chi", "chisquare", "chi square", "chi-square", "test", "independence", "cross table"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "label-col": this.renderLabelColControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createLabelColControl(), this.createGroupbyControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Feature Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Label Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["label-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.chiSquareTestOfIndependence.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addLabelColRule(), this.addBaseGroupByRule("feature-cols", "Feature Columns"), this.addBaseGroupByRule("label-col", "Label Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number", "String"]);
    });
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Label Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.chiSquareTestOfIndependence.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.correlation = {
    category: "statistics",
    defaultFnUnit: {
      func: "correlation",
      name: "Correlation",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumn: [[]],
        "out-col-name": "",
        method: "pearson",
        groupby: []
      },
      display: {
        label: "Correlation",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "In statistics, dependence is any statistical relationship between two random variables or two sets of data.",
    tags: ["Correlation", "matrix", "pearson", "spearman", "two random variables", "two sets of data", "p value", "r squared"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_Y_COLUMN = "ycolumn", this.PARAM_X_COLUMN = "xcolumn", this.PARAM_METHOD = "method", this.PARAM_OUT_COL_NAME = "out-col-name", this.render = {
      ycolumn: this.renderYColumnControl,
      xcolumn: this.renderXColumnControl,
      method: this.renderMethodControl,
      "out-col-name": this.renderOutColName,
      groupby: this.renderGroupBy
    }, this.createYColumnControl(), this.createXColumnControl(), this.createMethodControl(), this.createOutColNameControls(), this.createGroupByControl();
  }, e.prototype.createYColumnControl = function (t) {
    var e = this;
    this.$yColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Y Column", function (t) {
      t.append(e.$yColumn);
      var o = {
        rowCount: 4,
        multiple: !0,
        isOneType: !0,
        changed: function changed(t, o) {
          var r = e.createCommonCommand(e.PARAM_Y_COLUMN, [o.items]);
          e.executeCommand(r);
        }
      };
      e.yColumnControl = e.createColumnList(e.$yColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createXColumnControl = function (t) {
    var e = this;
    this.$xColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("X Column", function (t) {
      t.append(e.$xColumn);
      var o = {
        rowCount: 4,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createCommonCommand(e.PARAM_X_COLUMN, [o.items]);
          e.executeCommand(r);
        }
      };
      e.xColumnControl = e.createColumnList(e.$xColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createMethodControl = function () {
    var t = this;
    this.$methodControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-method"/>');
    var e = this.addPropertyControl("Method", function (e) {
      e.append(t.$methodControl), t.createRadioButtonControl(t.$methodControl, "pearson", "method"), t.createRadioButtonControl(t.$methodControl, "spearman", "method");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "method", "Method");
  }, e.prototype.createOutColNameControls = function () {
    var t = this;
    this.$newColumnInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var e = this.addPropertyControl("Output Column Name", function (e) {
      e.append(t.$newColumnInput);
      t.createInput(t.$newColumnInput, {
        placeHolder: "Output Column Name"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$newColumnInput.on("change", function (e) {
        if (t.isInputValueChanged(t.PARAM_OUT_COL_NAME, $(this).val().replace(/ /gi, ""))) {
          var o = t.createCommonCommand(t.PARAM_OUT_COL_NAME, t.$newColumnInput.val().replace(/ /gi, ""));
          t.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "out-col-name", "Output Column Name");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          o = r.createCommonCommand(r.PARAM_METHOD, e);
      r.executeCommand(o);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.stringColumnNames = [], this.numberColumnNames = [];
    var e = [];

    for (var o in t) {
      "number" == t[o].type ? (e.push(t[o]), this.numberColumnNames.push(t[o].name)) : "string" == t[o].type && this.stringColumnNames.push(t[o].name);
    }

    this.yColumnControl.setItems(e), this.xColumnControl.setItems(e), this.groupbyControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_Y_COLUMN && (this.renderPropertyControlHeader(this.$yColumn, this.problems[t]), this.createValidationContent(this.$yColumn, this.problems[t])), this.problems[t].param === this.PARAM_X_COLUMN && (this.renderPropertyControlHeader(this.$xColumn, this.problems[t]), this.createValidationContent(this.$xColumn, this.problems[t])), this.problems[t].param === this.PARAM_OUT_COL_NAME && this.createValidationContent(this.$newColumnInput.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderYColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_Y_COLUMN];
    this.yColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderXColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_X_COLUMN];
    this.xColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderMethodControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_METHOD];
    t ? $(this.$methodControl[t]).jqxRadioButton({
      checked: !0
    }) : $(this.$methodControl.pearson).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderOutColName = function () {
    this.$newColumnInput.val(this.options.fnUnit.param[this.PARAM_OUT_COL_NAME] || "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.correlation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_X_COLUMN = "xcolumn", this.PARAM_Y_COLUMN = "ycolumn", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addXColumnRule(), this.addYColumnRule(), this.addBaseGroupByRule(this.PARAM_X_COLUMN, "X Column"), this.addBaseGroupByRule(this.PARAM_Y_COLUMN, "Y Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMN, e.param[t.PARAM_X_COLUMN][0], "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMN, e.param[t.PARAM_X_COLUMN][0]);
    }), this.addRule(function (e) {
      if (t.isStringColumn(e) && e.param[this.PARAM_X_COLUMN][0].length > 1) {
        var o = {
          errorCode: "ET008",
          param: t.PARAM_X_COLUMN,
          messageParam: ["X Column"]
        };
        return this.problemFactory.createProblem(o, e);
      }
    });
  }, e.prototype.addYColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0]);
    }), this.addRule(function (e) {
      if (t.isStringColumn(e) && e.param[this.PARAM_Y_COLUMN][0].length > 1) {
        var o = {
          errorCode: "ET007",
          param: t.PARAM_Y_COLUMN,
          messageParam: ["Y Column"]
        };
        return this.problemFactory.createProblem(o, e);
      }
    });
  }, e.prototype.isStringColumn = function (t) {
    if (this._hasSchema(t)) {
      var e = this._getSchema(t, 0),
          o = t.param[this.PARAM_Y_COLUMN][0],
          r = !1;

      for (var n in o) {
        var a = o[n];

        for (var i in e) {
          if (r = !this._isEmptyString(a) && a === e[i].name && ("string" === e[i].internalType.toLowerCase() || "string" === e[i].type)) break;
        }
      }

      return r;
    }
  }, t.VA.Core.Functions.Library.correlation.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.correlationTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "correlationTest",
      name: "CorrelationTest",
      inData: [],
      outData: [],
      param: {
        "first-cols": [],
        "second-cols": [],
        method: "pearson",
        value: "corr_pval",
        "group-by": []
      },
      display: {
        label: "Correlation Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Correlation test is used to evaluate the association between two or more variables.",
    mandatory: [],
    tags: ["correlation test", "correlation", "test", "p value", "hypothesis"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "first-cols": this.renderFirstColsControl,
      "second-cols": this.renderSecondColsControl,
      method: this.renderMethodControl,
      value: this.renderValueControl,
      "group-by": this.renderGroupByControl
    }, this.$elements = {}, this.controls = {}, this.createFirstColsControl(), this.createSecondColsControl(), this.createMethodControl(), this.createValueControl(), this.createGroupByControl();
  }, e.prototype.createFirstColsControl = function (t) {
    var e = this;
    e.$elements["first-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("First Columns", function (t) {
      t.append(e.$elements["first-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("first-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["first-cols"] = e.createColumnList(e.$elements["first-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFirstColsControl = function (t) {
    var e = this.options.fnUnit.param["first-cols"];
    this.controls["first-cols"].setSelectedItems(e);
  }, e.prototype.createSecondColsControl = function (t) {
    var e = this;
    e.$elements["second-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Second Columns", function (t) {
      t.append(e.$elements["second-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("second-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["second-cols"] = e.createColumnList(e.$elements["second-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderSecondColsControl = function (t) {
    var e = this.options.fnUnit.param["second-cols"];
    this.controls["second-cols"].setSelectedItems(e);
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements["method.pearson"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Pearson</div>'), e.$elements["method.spearman"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Spearman</div>'), e.addPropertyControl("Method", function (t) {
      t.append(e.$elements["method.pearson"]), e.controls["method.pearson"] = e.createRadioButton(e.$elements["method.pearson"], {
        width: "undefined",
        groupName: "method",
        checked: !0
      }), e.$elements["method.pearson"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("method", "pearson");
        e.executeCommand(o);
      }), t.append(e.$elements["method.spearman"]), e.controls["method.spearman"] = e.createRadioButton(e.$elements["method.spearman"], {
        width: "undefined",
        groupName: "method"
      }), e.$elements["method.spearman"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("method", "spearman");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderMethodControl = function (t) {
    var e = "method." + this.options.fnUnit.param.method;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createValueControl = function (t) {
    var e = this;
    e.$elements["value.corr_pval"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Correlation with P-Value</div>'), e.$elements["value.corr"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Correlation</div>'), e.$elements["value.pval"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">P-Value</div>'), e.addPropertyControl("Value", function (t) {
      t.append(e.$elements["value.corr_pval"]), e.controls["value.corr_pval"] = e.createRadioButton(e.$elements["value.corr_pval"], {
        width: "undefined",
        groupName: "value",
        checked: !0
      }), e.$elements["value.corr_pval"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("value", "corr_pval");
        e.executeCommand(o);
      }), t.append(e.$elements["value.corr"]), e.controls["value.corr"] = e.createRadioButton(e.$elements["value.corr"], {
        width: "undefined",
        groupName: "value"
      }), e.$elements["value.corr"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("value", "corr");
        e.executeCommand(o);
      }), t.append(e.$elements["value.pval"]), e.controls["value.pval"] = e.createRadioButton(e.$elements["value.pval"], {
        width: "undefined",
        groupName: "value"
      }), e.$elements["value.pval"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("value", "pval");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderValueControl = function (t) {
    var e = "value." + this.options.fnUnit.param.value;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements["group-by"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements["group-by"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("group-by", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["group-by"] = e.createColumnList(e.$elements["group-by"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupByControl = function (t) {
    var e = this.options.fnUnit.param["group-by"];
    this.controls["group-by"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["Integer", "Long", "Double"]), this.controls["first-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["Integer", "Long", "Double"]), this.controls["second-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["Integer", "Long", "Double", "String"]), this.controls["group-by"].setItems(t);
  }, t.VA.Core.Functions.Library.correlationTest.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFirstColsRule(), this.addSecondColsRule();
  }, o.prototype.addFirstColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "first-cols", e.param["first-cols"], "First Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "first-cols", e.param["first-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "first-cols", e.param["first-cols"], ["Integer", "Long", "Double"]);
    });
  }, o.prototype.addSecondColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "second-cols", e.param["second-cols"], "Second Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "second-cols", e.param["second-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "second-cols", e.param["second-cols"], ["Integer", "Long", "Double"]);
    });
  }, t.VA.Core.Functions.Library.correlationTest.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.correlationWithPivot = {
    category: "statistics",
    defaultFnUnit: {
      func: "correlationWithPivot",
      name: "CorrelationWithPivot",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumn: [[]],
        "out-col-name": "",
        method: "pearson",
        "sequence-column": [],
        by: [],
        rate: "100",
        iteration: "1"
      },
      display: {
        label: "Correlation With Pivot",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides correlation between two random variables or two sets of data after pivoting table.",
    tags: ["CorrelationWithPivot", "Correlation With Pivot", "correlation with pivot", "correlationwithpivot"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_Y_COLUMN = "ycolumn", this.PARAM_X_COLUMN = "xcolumn", this.PARAM_METHOD = "method", this.PARAM_OUT_COL_NAME = "out-col-name", this.PARAM_SEQUENCE_COLUMN = "sequence-column", this.PARAM_BY = "by", this.PARAM_RATE = "rate", this.PARAM_ITERATION = "iteration", this.render = {
      ycolumn: this.renderYColumnControl,
      xcolumn: this.renderXColumnControl,
      method: this.renderMethodControl,
      "out-col-name": this.renderOutColName,
      "sequence-column": this.renderSequenceColumnControl,
      by: this.renderByGroupControl,
      rate: this.renderRateControl,
      iteration: this.renderIterationControl
    }, this.createYColumnControl(), this.createXColumnControl(), this.createSequenceColumnControl(), this.createMethodControl(), this.createRateControl(), this.createIterationControl(), this.createByGroupControl(), this.createOutColNameControls();
  }, e.prototype.createYColumnControl = function (t) {
    var e = this;
    this.$yColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Y Column", function (t) {
      t.append(e.$yColumn);
      var o = {
        rowCount: 4,
        multiple: !0,
        isOneType: !0,
        changed: function changed(t, o) {
          "string" === e.getColumnType(o.items[0]) ? e.changeSequenceColumnItem(!1) : e.changeSequenceColumnItem(!0);
          var r = e.createCommonCommand(e.PARAM_Y_COLUMN, [o.items]);
          e.executeCommand(r);
        }
      };
      e.yColumnControl = e.createColumnList(e.$yColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createXColumnControl = function (t) {
    var e = this;
    this.$xColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("X Column", function (t) {
      t.append(e.$xColumn);
      var o = {
        rowCount: 4,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createCommonCommand(e.PARAM_X_COLUMN, [o.items]);
          e.executeCommand(r);
        }
      };
      e.xColumnControl = e.createColumnList(e.$xColumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createSequenceColumnControl = function (t) {
    var e = this;
    this.$sequenceColumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.$sequenceColumnWrapper = this.addPropertyControl("Sequence Column", function (t) {
      t.append(e.$sequenceColumn);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createCommonCommand(e.PARAM_SEQUENCE_COLUMN, o.items);
          e.executeCommand(r);
        }
      };
      e.sequenceColumnControl = e.createColumnList(e.$sequenceColumn, o);
    }, {
      mandatory: !0
    }), this.$sequenceColumnWrapper.hide();
  }, e.prototype.createMethodControl = function () {
    var t = this;
    this.$methodControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-method"/>');
    var e = this.addPropertyControl("Method", function (e) {
      e.append(t.$methodControl), t.createRadioButtonControl(t.$methodControl, "pearson", "method"), t.createRadioButtonControl(t.$methodControl, "spearman", "method");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "method", "Method");
  }, e.prototype.createByGroupControl = function (t) {
    var e = this;
    this.$by = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("By", function (t) {
      t.append(e.$by);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createCommonCommand(e.PARAM_BY, o.items);
          e.executeCommand(r);
        }
      };
      e.byControl = e.createColumnList(e.$by, o);
    });
  }, e.prototype.createOutColNameControls = function () {
    var t = this;
    this.$newColumnInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), this.addPropertyControl("Output Column Name", function (e) {
      e.append(t.$newColumnInput);
      t.createInput(t.$newColumnInput, {
        placeHolder: "Output Column Name"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$newColumnInput.on("change", function (e) {
        if (t.isInputValueChanged(t.PARAM_OUT_COL_NAME, $(this).val().replace(/ /gi, ""))) {
          var o = t.createCommonCommand(t.PARAM_OUT_COL_NAME, t.$newColumnInput.val().replace(/ /gi, ""));
          t.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.createRateControl = function () {
    var t = this;
    this.$rateNumberControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol-percent"/>'), this.addPropertyControl("Rate", function (e) {
      e.append(t.$rateNumberControl);
      t.rateNumberControl = this.createNumericInput(t.$rateNumberControl, {
        numberType: "int",
        minus: !1,
        placeholder: "Enter value",
        min: 1,
        max: 100
      }, "brtc-va-editors-sheet-controls-propertycontrol-filter-number-input"), t.rateNumberControl.setValue(100), t.rateNumberControl.onChange(function (e) {
        var o = t.createCommonCommand(t.PARAM_RATE, e);
        t.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.createIterationControl = function () {
    var t = this;
    this.$iterationControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Iteration", function (e) {
      e.append(t.$iterationControl);
      t.iterationControl = t.createNumericInput(t.$iterationControl, {
        numberType: "int",
        min: 1,
        max: 100,
        minus: !1
      }), t.iterationControl.onChange(function () {
        var e = t.createCommonCommand(t.PARAM_ITERATION, this.getValue());
        t.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          o = r.createCommonCommand(r.PARAM_METHOD, e);
      r.executeCommand(o);
    });
  }, e.prototype.changeSequenceColumnItem = function (t) {
    t ? this.$sequenceColumnWrapper.hide() : this.$sequenceColumnWrapper.show();
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.stringColumnNames = [], this.numberColumnNames = [];
    var e = [];

    for (var o in t) {
      "number" == t[o].type ? (e.push(t[o]), this.numberColumnNames.push(t[o].name)) : "string" == t[o].type && this.stringColumnNames.push(t[o].name);
    }

    this.yColumnControl.setItems(t), this.xColumnControl.setItems(e), this.sequenceColumnControl.setItems(e), this.byControl.setItems(t), this.rateNumberControl.setValue(100), this.iterationControl.setValue(1);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_Y_COLUMN && (this.renderPropertyControlHeader(this.$yColumn, this.problems[t]), this.createValidationContent(this.$yColumn, this.problems[t])), this.problems[t].param === this.PARAM_X_COLUMN && (this.renderPropertyControlHeader(this.$xColumn, this.problems[t]), this.createValidationContent(this.$xColumn, this.problems[t])), this.problems[t].param === this.PARAM_SEQUENCE_COLUMN && (this.renderPropertyControlHeader(this.$sequenceColumn, this.problems[t]), this.createValidationContent(this.$sequenceColumn, this.problems[t]));
    }
  }, e.prototype.renderYColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_Y_COLUMN];
    "string" === this.getColumnType(t[0] ? t[0][0] : "") ? this.changeSequenceColumnItem(!1) : this.changeSequenceColumnItem(!0), this.yColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderXColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_X_COLUMN];
    this.xColumnControl.setSelectedItems(t[0]);
  }, e.prototype.renderSequenceColumnControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_SEQUENCE_COLUMN];
    this.sequenceColumnControl.setSelectedItems(t);
  }, e.prototype.renderMethodControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_METHOD];
    t ? $(this.$methodControl[t]).jqxRadioButton({
      checked: !0
    }) : $(this.$methodControl.pearson).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderByGroupControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_BY];
    this.byControl.setSelectedItems(t);
  }, e.prototype.renderOutColName = function () {
    this.$newColumnInput.val(this.options.fnUnit.param[this.PARAM_OUT_COL_NAME] || "");
  }, e.prototype.renderRateControl = function () {
    this.rateNumberControl.setValue(this.options.fnUnit.param[this.PARAM_RATE] || "");
  }, e.prototype.renderIterationControl = function () {
    this.iterationControl.setValue(this.options.fnUnit.param[this.PARAM_ITERATION] || "");
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.getColumnType = function (t) {
    var e,
        o = "";

    for (var r in e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : []) {
      if (e[r].name === t) {
        o = e[r].type;
        break;
      }
    }

    return o;
  }, t.VA.Core.Functions.Library.correlationWithPivot.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_X_COLUMN = "xcolumn", this.PARAM_Y_COLUMN = "ycolumn", this.PARAM_SEQUENCE_COLUMN = "sequence-column", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addXColumnRule(), this.addYColumnRule(), this.addSequenceColumnRule();
  }, e.prototype.addXColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_X_COLUMN, e.param[t.PARAM_X_COLUMN][0], "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_X_COLUMN, e.param[t.PARAM_X_COLUMN][0]);
    }), this.addRule(function (e) {
      if (t.isStringColumn(e) && e.param[this.PARAM_X_COLUMN][0].length > 1) {
        var o = {
          errorCode: "ET008",
          param: t.PARAM_X_COLUMN,
          messageParam: ["X Column"]
        };
        return this.problemFactory.createProblem(o, e);
      }
    });
  }, e.prototype.addYColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0], "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_Y_COLUMN, e.param[t.PARAM_Y_COLUMN][0]);
    }), this.addRule(function (e) {
      if (t.isStringColumn(e) && e.param[this.PARAM_Y_COLUMN][0].length > 1) {
        var o = {
          errorCode: "ET007",
          param: t.PARAM_Y_COLUMN,
          messageParam: ["Y Column"]
        };
        return this.problemFactory.createProblem(o, e);
      }
    });
  }, e.prototype.addSequenceColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t.isStringColumn(e)) return t.checkColumnIsEmpty(e, t.PARAM_SEQUENCE_COLUMN, e.param[t.PARAM_SEQUENCE_COLUMN], "Sequence Column");
    }), this.addRule(function (e) {
      if (t.isStringColumn(e)) return t.checkColumnExists(e, t.PARAM_SEQUENCE_COLUMN, e.param[t.PARAM_SEQUENCE_COLUMN]);
    });
  }, e.prototype.isStringColumn = function (t) {
    if (this._hasSchema(t)) {
      var e = this._getSchema(t, 0),
          o = t.param[this.PARAM_Y_COLUMN][0],
          r = !1;

      for (var n in o) {
        var a = o[n];

        for (var i in e) {
          if (r = !this._isEmptyString(a) && a === e[i].name && ("string" === e[i].internalType.toLowerCase() || "string" === e[i].type)) break;
        }
      }

      return r;
    }
  }, t.VA.Core.Functions.Library.correlationWithPivot.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.crossTable = {
    category: "statistics",
    defaultFnUnit: {
      func: "crossTable",
      name: "CrossTable",
      inData: [],
      outData: [],
      param: {
        "first-cols": [],
        "second-cols": [],
        contents: ["n", "nprt", "npct", "npt"],
        "additional-info": ["row-total", "col-total"],
        "row-total-col": "",
        "col-total-row": "",
        seed: ""
      },
      display: {
        label: "Cross Table",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function provides cross table of the given columns.",
    mandatory: ["contents"],
    tags: ["Cross Table", "cross", "crosstab", "cross tabulate", "tabulate", "CrossTable", "matrix"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "first-cols": this.renderFirstColsControl,
      "second-cols": this.renderSecondColsControl,
      contents: this.renderContentsControl,
      "additional-info": this.renderAdditionalInfoControl,
      "row-total-col": this.renderRowTotalColControl,
      "col-total-row": this.renderColTotalRowControl,
      seed: this.renderSeedControl
    }, this.$elements = {}, this.controls = {}, this.createFirstColsControl(), this.createSecondColsControl(), this.createContentsControl(), this.createAdditionalInfoControl(), this.createRowTotalColControl(), this.createColTotalRowControl(), this.createSeedControl();
  }, e.prototype.createFirstColsControl = function (t) {
    var e = this;
    e.$elements["first-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns 1", function (t) {
      t.append(e.$elements["first-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("first-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["first-cols"] = e.createColumnList(e.$elements["first-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFirstColsControl = function (t) {
    var e = this.options.fnUnit.param["first-cols"];
    this.controls["first-cols"].setSelectedItems(e);
  }, e.prototype.createSecondColsControl = function (t) {
    var e = this;
    e.$elements["second-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns 2", function (t) {
      t.append(e.$elements["second-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("second-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["second-cols"] = e.createColumnList(e.$elements["second-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderSecondColsControl = function (t) {
    var e = this.options.fnUnit.param["second-cols"];
    this.controls["second-cols"].setSelectedItems(e);
  }, e.prototype.createContentsControl = function (t) {
    var e = this;
    e.$elements.contents = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.contents.append(o), e.$elements.contents.append(r), e.addPropertyControl("Contents", function (t) {
      t.append(e.$elements.contents), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "N",
        value: "n",
        default: !0
      }, {
        label: "N / Row Total",
        value: "nprt",
        default: !0
      }, {
        label: "N / Column Total",
        value: "npct",
        default: !0
      }, {
        label: "N / Total",
        value: "npt",
        default: !0
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "contents." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("contents", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "contents." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.contents.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "contents." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "contents." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("contents", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "contents." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("contents", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderContentsControl = function (t) {
    var e,
        o = this.options.fnUnit.param.contents,
        r = [{
      label: "N",
      value: "n",
      default: !0
    }, {
      label: "N / Row Total",
      value: "nprt",
      default: !0
    }, {
      label: "N / Column Total",
      value: "npct",
      default: !0
    }, {
      label: "N / Total",
      value: "npt",
      default: !0
    }];

    for (var n in r) {
      e = "contents." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createAdditionalInfoControl = function (t) {
    var e = this;
    e.$elements["additional-info"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements["additional-info"].append(o), e.$elements["additional-info"].append(r), e.addPropertyControl("Additional Information", function (t) {
      t.append(e.$elements["additional-info"]), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Row Total",
        value: "row-total",
        default: !0
      }, {
        label: "Column Total",
        value: "col-total",
        default: !0
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "additional-info." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("additional-info", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "additional-info." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements["additional-info"].append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "additional-info." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "additional-info." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("additional-info", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "additional-info." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("additional-info", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderAdditionalInfoControl = function (t) {
    var e,
        o = this.options.fnUnit.param["additional-info"],
        r = [{
      label: "Row Total",
      value: "row-total",
      default: !0
    }, {
      label: "Column Total",
      value: "col-total",
      default: !0
    }];

    for (var n in r) {
      e = "additional-info." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createRowTotalColControl = function (e) {
    var o = this;
    o.$elements["row-total-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type4"/>');
    var r = o.addPropertyControl("Row Total Column Name", function (e) {
      e.append(o.$elements["row-total-col"]);
      o.controls["row-total-col"] = o.createInput(o.$elements["row-total-col"], {
        placeHolder: "row_total"
      }), t.VA.Core.Utils.InputValidator.appendValidationCondition(o.$elements["row-total-col"]), o.$elements["row-total-col"].on("change", function (t) {
        if (o.isInputValueChanged("row-total-col", $(this).val())) {
          var e = o.createSetParameterValueCommand("row-total-col", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "row-total-col", "Row Total Column Name");
  }, e.prototype.renderRowTotalColControl = function (t) {
    var e = this.options.fnUnit.param["row-total-col"];
    this.$elements["row-total-col"].val(e || "");
  }, e.prototype.createColTotalRowControl = function (e) {
    var o = this;
    o.$elements["col-total-row"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type4"/>');
    var r = o.addPropertyControl("Column Total Row Name", function (e) {
      e.append(o.$elements["col-total-row"]);
      o.controls["col-total-row"] = o.createInput(o.$elements["col-total-row"], {
        placeHolder: "col_total"
      }), t.VA.Core.Utils.InputValidator.appendValidationCondition(o.$elements["col-total-row"]), o.$elements["col-total-row"].on("change", function (t) {
        if (o.isInputValueChanged("col-total-row", $(this).val())) {
          var e = o.createSetParameterValueCommand("col-total-row", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "col-total-row", "Column Total Row Name");
  }, e.prototype.renderColTotalRowControl = function (t) {
    var e = this.options.fnUnit.param["col-total-row"];
    this.$elements["col-total-row"].val(e || "");
  }, e.prototype.createSeedControl = function (t) {
    var e = this;
    e.$elements.seed = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Seed", function (t) {
      t.append(e.$elements.seed);
      e.controls.seed = e.createNumericInput(e.$elements.seed, {
        placeholder: "12345",
        numberType: "int"
      }), e.controls.seed.onChange(function () {
        var t = e.createSetParameterValueCommand("seed", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "seed", "Seed");
  }, e.prototype.renderSeedControl = function (t) {
    var e = this.options.fnUnit.param.seed;
    this.controls.seed.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["first-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["second-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.crossTable.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addContentsRule();
  }, o.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "first-cols", e.param["first-cols"], "Columns 1");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "first-cols", $.unique($.extend(!0, [], e.param["first-cols"])));
    }), this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "second-cols", e.param["second-cols"], "Columns 2");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "second-cols", $.unique($.extend(!0, [], e.param["second-cols"])));
    });
  }, o.prototype.addContentsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "BR-0033",
        param: "contents",
        messageParam: ["Contents"]
      }, e, e.param.contents);
    });
  }, t.VA.Core.Functions.Library.crossTable.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.duncanTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "duncanTest",
      name: "DuncanTest",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "target-treatment": [[]],
        groupby: [],
        alpha: "0.05"
      },
      display: {
        label: "Duncan Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function is used for Duncan`s new multiple range test (MRT) that is a multiple comparison procedure developed by David B.",
    tags: ["Duncan Test", "DuncanTest", "Duncan", "Test", "anova", "multiple", "comparison", "range test"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_TARGET_TREATMENT = "target-treatment", this.PARAM_GROUPBY = "groupby", this.PARAM_ALPHA = "alpha", this.render = {
      columns: this.renderColumnsControl,
      "target-treatment": this.renderTargetTreatmentControl,
      groupby: this.renderGroupbvControl,
      alpha: this.renderAlphaControl
    }, this.createColumnsControl(), this.createTargetTreatmentControl(), this.createGroupbyControl(), this.createAlphaControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Response Column", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createTargetTreatmentControl = function (t) {
    var e = this;
    this.$target = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Factor Column", function (t) {
      t.append(e.$target);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createTargetTreatmentCommand();
          e.executeCommand(r);
        }
      };
      e.targetTreatmentControl = e.createColumnList(e.$target, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    this.$groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-column"/>'), this.addPropertyControl("Group By", function (t) {
      t.append(e.$groupby);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createGroupbyCommand();
          e.executeCommand(r);
        }
      };
      e.groupbyControl = e.createColumnList(e.$groupby, o);
    });
  }, e.prototype.createAlphaControl = function () {
    var t = this;
    this.$alphaControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-alpha"/>');
    var e = this.addPropertyControl("Alpha", function (e) {
      e.append(t.$alphaControl), t.createRadioButtonControl(t.$alphaControl, "0.05", "alpha"), t.createRadioButtonControl(t.$alphaControl, "0.01", "alpha");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "alpha", "Alpha");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this;
    this.$radioButton = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>"), t.append(this.$radioButton), this.createRadioButton(this.$radioButton, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), this.$radioButton.attr("value", e), t[e] = this.$radioButton, this.$radioButton.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          o = r.createRadioCommand(e);
      r.executeCommand(o);
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.targetTreatmentControl.setItems(this.columnNameArray), this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_X_COLUMNS ? (this.renderPropertyControlHeader(this.$xcolumns, this.problems[t]), this.createValidationContent(this.$xcolumns, this.problems[t])) : this.problems[t].param === this.PARAM_Y_COLUMN && (this.renderPropertyControlHeader(this.$yColumn, this.problems[t]), this.createValidationContent(this.$yColumn, this.problems[t]));
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMNS];
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderTargetTreatmentControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TARGET_TREATMENT];
    this.targetTreatmentControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupbvControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_GROUPBY];
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderAlphaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ALPHA];
    t && $(this.$alphaControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = [this.columnsControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createTargetTreatmentCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_TARGET_TREATMENT] = [this.targetTreatmentControl.getSelectedItems()], new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupbyCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_GROUPBY] = this.groupbyControl.getSelectedItems(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createRadioCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_ALPHA] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS ? (this.renderPropertyControlHeader(this.$columns, this.problems[t]), this.createValidationContent(this.$columns, this.problems[t])) : this.problems[t].param === this.PARAM_TARGET_TREATMENT && (this.renderPropertyControlHeader(this.$target, this.problems[t]), this.createValidationContent(this.$target, this.problems[t]));
    }
  }, t.VA.Core.Functions.Library.duncanTest.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_TARGET_TREATMENT = "target-treatment", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addTargetTreatmentRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Response Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addTargetTreatmentRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_TARGET_TREATMENT, e.param[t.PARAM_TARGET_TREATMENT][0], "Factor Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_TARGET_TREATMENT, e.param[t.PARAM_TARGET_TREATMENT][0]);
    });
  }, t.VA.Core.Functions.Library.duncanTest.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.frequency = {
    category: "statistics",
    defaultFnUnit: {
      func: "frequency",
      name: "Frequency",
      inData: [],
      outData: [],
      param: {
        groupby: [],
        "frequency-mode": [],
        columns: [[]]
      },
      display: {
        label: "Frequency",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a frequency by classification, cumulative frequency, percentage, cumulative percentage.",
    tags: ["Frequency", "Representative", "Count", "cumulative", "percent", "nan", "null", "count"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      groupby: this.renderGroupBy,
      "frequency-mode": this.renderFrequencyMode,
      columns: this.renderColumns
    }, this.createGroupByControl(), this.createFrequencyModeControl();
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createFrequencyModeControl = function () {
    var t = this;
    this.createFrequencyModeCheckBox(), this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Frequency Mode", function (e) {
      for (var o in t.$checkBoxes) {
        e.append(t.$checkBoxes[o]), t.createCheckBox(t.$checkBoxes[o], {}, "brtc-va-editors-sheet-controls-width-12"), t.$checkBoxes[o].on("change", function (e) {
          $(window).trigger("mousedown");
          var o = t.createFrequencyModeCommand();
          t.executeCommand(o);
        });
      }

      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }, "brtc-va-editors-sheet-controls-frequencymode-width"), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      }), t.addCssToWrapper(t.$columns, {
        display: "none"
      }), t.$checkBoxes[t.$checkBoxes.length - 1].on("change", function (e) {
        var o = e.args.checked,
            r = t.$columns.parent();
        o ? r.css("display", "block") : r.css("display", "none");
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createFrequencyModeCheckBox = function (t) {
    for (var e in this.checkBoxContents = [{
      label: "Frequency",
      value: "frequency"
    }, {
      label: "Cumulative Frequency",
      value: "cumulative_frequency"
    }, {
      label: "Percent",
      value: "percent"
    }, {
      label: "Cumulative Percent",
      value: "cumulative_percent"
    }, {
      label: "Missing Value",
      value: "missing_value"
    }], this.$checkBoxes = [], this.checkBoxContents) {
      var o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"><div/>');
      o.text(this.checkBoxContents[e].label), o.data("frequencyMode", this.checkBoxContents[e].value), this.$checkBoxes[e] = o;
    }
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.stringColumnArray = $.grep(this.columnNameArray, function (t) {
      return "string" === t.type;
    }), this.groupbyControl.setItems(this.stringColumnArray), this.columnsControl.setItems(this.columnNameArray);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderFrequencyMode = function () {
    var t = this.options.fnUnit.param["frequency-mode"];
    if (void 0 !== t) for (var e in this.$checkBoxes) {
      $.inArray(this.$checkBoxes[e].data("frequencyMode"), t) > -1 ? this.$checkBoxes[e].jqxCheckBox({
        checked: !0
      }) : this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    } else for (var e in this.$checkBoxes) {
      this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]), "frequency-mode" === this.problems[t].param && this.createValidationContent(this.$checkBoxes[4].parent(), this.problems[t]), "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]);
    }
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createFrequencyModeCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["frequency-mode"] = [], this.$checkBoxes) {
      !0 === this.$checkBoxes[o].val() && e.ref.param["frequency-mode"].push(this.$checkBoxes[o].data("frequencyMode"));
    }

    e.ref.param.columns = [[]];
    var r = this.columnsControl.getSelectedItems();
    return r && (e.ref.param.columns[0] = r), -1 === $.inArray("missing_value", e.ref.param["frequency-mode"]) && (e.ref.param.columns = [[]]), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.frequency.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_GROUPBY = "groupby", this.PARAM_COLUMNS = "columns", this.PARAM_FREQUENCY_MODE = "frequency-mode", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addGroupByRule(), this.addFrequencyModeRule(), this.addColumnsRule();
  }, e.prototype.addGroupByRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_GROUPBY, e.param[t.PARAM_GROUPBY], "Group By");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_GROUPBY, e.param[t.PARAM_GROUPBY]);
    });
  }, e.prototype.addFrequencyModeRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_FREQUENCY_MODE,
          messageParam: ["Frequency Mode"]
        };
        return t._checkArrayIsEmpty(o, e, e.param[t.PARAM_FREQUENCY_MODE]);
      }
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (-1 !== $.inArray("missing_value", e.param[t.PARAM_FREQUENCY_MODE])) return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      if (-1 !== $.inArray("missing_value", e.param[t.PARAM_FREQUENCY_MODE]) && e.param[t.PARAM_COLUMNS][0].length > 0) return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      var o = [],
          r = e.param[t.PARAM_GROUPBY],
          n = e.param[t.PARAM_COLUMNS][0];
      if (n.length) for (var a in n) {
        if (r.indexOf(n[a]) > -1) {
          var i = {
            errorCode: "BR-0057",
            param: t.PARAM_COLUMNS,
            messageParam: [n[a], "Group By", "Columns"]
          };
          o.push(t.problemFactory.createProblem(i, e));
        }
      }
      return o;
    });
  }, t.VA.Core.Functions.Library.frequency.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.frequencyMat = {
    category: "statistics",
    defaultFnUnit: {
      func: "frequencyMat",
      name: "FrequencyMat",
      inData: [],
      outData: [],
      param: {
        className: [[]],
        addInfo: "y"
      },
      display: {
        label: "Frequency (Matrix-Type)",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function generates a frequency by classification, cumulative frequency, percentage, cumulative percentage.",
    tags: ["FrequencyMat", "Frequency Mat", "frequencymat", "frequency mat", "Frequency Matrix", "Representative", "Count", "Frequency (Matrix-Type)"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      className: this.renderColumns,
      addInfo: this.renderNormalizationType
    }, this.createColumnsControl(), this.createAddInfoControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createAddInfoControl = function () {
    var t = this;
    this.$yAddInfoRadioButton = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton"/>'), this.$nAddInfoRadioButton = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton"/>'), this.addPropertyControl("Additional Information", function (e) {
      e.append(t.$yAddInfoRadioButton), e.append(t.$nAddInfoRadioButton), t.$yAddInfoRadioButton.text("Yes"), t.$yAddInfoRadioButton.attr("addInfo", "y"), t.$yAddInfoRadioButton.on("checked", function (e) {
        var o = t.createAddInfoCommand();
        t.executeCommand(o);
      }), t.$yAddInfoRadioButton.jqxRadioButton({
        checked: !0
      }), t.$nAddInfoRadioButton.text("No"), t.$nAddInfoRadioButton.attr("addInfo", "n"), t.$nAddInfoRadioButton.on("checked", function (e) {
        var o = t.createAddInfoCommand();
        t.executeCommand(o);
      }), t.createRadioButton(t.$yAddInfoRadioButton, {
        groupName: "addInfo"
      }, "brtc-va-editors-sheet-controls-width-12"), t.createRadioButton(t.$nAddInfoRadioButton, {
        groupName: "addInfo"
      }, "brtc-va-editors-sheet-controls-width-12");
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnsControl.setItems(this.columnNameArray);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.className;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderNormalizationType = function () {
    var t = this.options.fnUnit.param.addInfo;
    t ? "y" === t ? this.$yAddInfoRadioButton.jqxRadioButton({
      checked: !0
    }) : "n" === t && this.$nAddInfoRadioButton.jqxRadioButton({
      checked: !0
    }) : this.$yAddInfoRadioButton.jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "className" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "addInfo" === this.problems[t].param && this.createValidationContent(this.$yAddInfoRadioButton.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.className = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.className[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createAddInfoCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param.addInfo = "", this.$yAddInfoRadioButton.jqxRadioButton("checked") ? e.ref.param.addInfo = this.$yAddInfoRadioButton.attr("addInfo") : this.$nAddInfoRadioButton.jqxRadioButton("checked") && (e.ref.param.addInfo = this.$nAddInfoRadioButton.attr("addInfo")), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.frequencyMat.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "className", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      if (e.param[t.PARAM_COLUMNS][0].length > 2) return {
        level: "error",
        mid: e.parent().mid,
        fid: e.fid,
        param: t.PARAM_COLUMNS,
        code: "BR-0012",
        message: "Only one or two columns can be selected."
      };
    });
  }, t.VA.Core.Functions.Library.frequencyMat.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.fTestForStacked = {
    category: "statistics",
    defaultFnUnit: {
      func: "fTestForStacked",
      name: "FTestForStacked",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "label-col": "",
        alternatives: ["greater", "less", "two_sided"],
        "confidence-level": "",
        first: "",
        second: "",
        groupby: []
      },
      display: {
        label: "F Test For Stacked Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "F Test of equality of variances for stacked data",
    mandatory: ["alternatives"],
    tags: ["FTestForStackedData", "ftest", "f test", "variance", "homogenous", "inhomogenous"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "label-col": this.renderLabelColControl,
      alternatives: this.renderAlternativesControl,
      "confidence-level": this.renderConfidenceLevelControl,
      first: this.renderFirstControl,
      second: this.renderSecondControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createLabelColControl(), this.createAlternativesControl(), this.createConfidenceLevelControl(), this.createFirstControl(), this.createSecondControl(), this.createGroupbyControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Response Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Factor Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createAlternativesControl = function (t) {
    var e = this;
    e.$elements.alternatives = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.alternatives.append(o), e.$elements.alternatives.append(r), e.addPropertyControl("Alternatives", function (t) {
      t.append(e.$elements.alternatives), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Greater",
        value: "greater",
        default: !0
      }, {
        label: "Less",
        value: "less",
        default: !0
      }, {
        label: "Two Sided",
        value: "two_sided",
        default: !0
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("alternatives", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "alternatives." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.alternatives.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("alternatives", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("alternatives", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderAlternativesControl = function (t) {
    var e,
        o = this.options.fnUnit.param.alternatives,
        r = [{
      label: "Greater",
      value: "greater",
      default: !0
    }, {
      label: "Less",
      value: "less",
      default: !0
    }, {
      label: "Two Sided",
      value: "two_sided",
      default: !0
    }];

    for (var n in r) {
      e = "alternatives." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createConfidenceLevelControl = function (e) {
    var o = this;
    o.$elements["confidence-level"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Confidence Level", function (e) {
      e.append(o.$elements["confidence-level"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.95 (0 <= value <= 1)"),
        numberType: "double"
      };
      o.controls["confidence-level"] = o.createNumericInput(o.$elements["confidence-level"], r), o.controls["confidence-level"].onChange(function () {
        var t = o.createSetParameterValueCommand("confidence-level", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "confidence-level", "Confidence Level");
  }, e.prototype.renderConfidenceLevelControl = function (t) {
    var e = this.options.fnUnit.param["confidence-level"];
    this.controls["confidence-level"].setValue(e || "");
  }, e.prototype.createFirstControl = function (t) {
    var e = this;
    e.$elements.first = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("First", function (t) {
      t.append(e.$elements.first);
      e.controls.first = e.createInput(e.$elements.first, {}), e.$elements.first.on("change", function (t) {
        if (e.isInputValueChanged("first", $(this).val())) {
          var o = e.createSetParameterValueCommand("first", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "first", "First");
  }, e.prototype.renderFirstControl = function (t) {
    var e = this.options.fnUnit.param.first;
    this.$elements.first.val(e || "");
  }, e.prototype.createSecondControl = function (t) {
    var e = this;
    e.$elements.second = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Second", function (t) {
      t.append(e.$elements.second);
      e.controls.second = e.createInput(e.$elements.second, {}), e.$elements.second.on("change", function (t) {
        if (e.isInputValueChanged("second", $(this).val())) {
          var o = e.createSetParameterValueCommand("second", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "second", "Second");
  }, e.prototype.renderSecondControl = function (t) {
    var e = this.options.fnUnit.param.second;
    this.$elements.second.val(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("GroupBy", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["label-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.fTestForStacked.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addLabelColRule(), this.addAlternativesRule(), this.addBaseGroupByRule("feature-cols", "Response Columns"), this.addBaseGroupByRule("label-col", "Factor Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Response Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number"]);
    });
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Factor Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number", "string"]);
    });
  }, o.prototype.addAlternativesRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "EE001",
        param: "alternatives",
        messageParam: ["Alternatives"]
      }, e, e.param.alternatives);
    });
  }, t.VA.Core.Functions.Library.fTestForStacked.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.kernelDensity = {
    category: "statistics",
    defaultFnUnit: {
      func: "kernelDensity",
      name: "KernelDensity",
      inData: [],
      outData: [],
      param: {
        "kernel-bandwidth": "",
        "kernel-lower": "",
        "kernel-upper": ""
      },
      display: {
        label: "Kernel Density",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "",
    tags: ["Kernel", "Density", "kernelDensity", "Kernel Density", " Kernel Density Estimation"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_KERNEL_BANDWIDTH = "kernel-bandwidth", this.PARAM_KERNEL_LOWER = "kernel-lower", this.PARAM_KERNEL_UPPER = "kernel-upper", this.render = {
      "kernel-bandwidth": this.renderKernelBandwidthControl,
      "kernel-lower": this.renderKernelLowerControl,
      "kernel-upper": this.renderKernelUpperControl
    }, this.createKernelBandwidthControl(), this.createKernelLowerControl(), this.createKernelUpperControl();
  }, e.prototype.createKernelBandwidthControl = function (t) {
    var e = this;
    this.$kerenlBandwidthInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Kernel Bandwidth", function (t) {
      t.append(e.$kerenlBandwidthInputControl);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$kernelBandwidthControl = e.createNumericInput(e.$kerenlBandwidthInputControl, o), e.$kernelBandwidthControl.onChange(function (t) {
        var o = e.createKernelBandwidthCommand(t);
        e.executeCommand(o);
      });
    });
  }, e.prototype.createKernelLowerControl = function (t) {
    var e = this;
    this.$kerenlLowerInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Kernel Lower", function (t) {
      t.append(e.$kerenlLowerInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$kernelLowerControl = e.createNumericInput(e.$kerenlLowerInputControl, o), e.$kernelLowerControl.onChange(function (t) {
        var o = e.createKernelLowerCommand(t);
        e.executeCommand(o);
      });
    });
  }, e.prototype.createKernelUpperControl = function (t) {
    var e = this;
    this.$kerenlUpperInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Kernel Upper", function (t) {
      t.append(e.$kerenlUpperInputControl);
      var o = {
        numberType: "int",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      e.$kernelUpperControl = e.createNumericInput(e.$kerenlUpperInputControl, o), e.$kernelUpperControl.onChange(function (t) {
        var o = e.createKernelUpperCommand(t);
        e.executeCommand(o);
      });
    });
  }, e.prototype.fillControlValues = function () {}, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.renderKernelBandwidthControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_KERNEL_BANDWIDTH];
    this.$kernelBandwidthControl.setValue(t);
  }, e.prototype.renderKernelLowerControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_KERNEL_LOWER];
    this.$kernelLowerControl.setValue(t);
  }, e.prototype.renderKernelUpperControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_KERNEL_UPPER];
    this.$kernelUpperControl.setValue(t);
  }, e.prototype.createKernelBandwidthCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_KERNEL_BANDWIDTH] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createKernelLowerCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_KERNEL_LOWER] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createKernelUpperCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_KERNEL_UPPER] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.kernelDensity.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.kernelDensityEstimation = {
    category: "statistics",
    defaultFnUnit: {
      func: "kernelDensityEstimation",
      name: "KernelDensityEstimation",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        bandwidth: "",
        point: "",
        groupby: []
      },
      display: {
        label: "Kernel Density Estimation",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "estimates the probability density function at each of the given evaluation points based on sample data",
    tags: ["KernelDensityEstimation", "kernel", "density", "estimation", "histogram", "probability", "pdf", "Kernel Density Estimation"],
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      bandwidth: this.renderBandwidth,
      point: this.renderPoint,
      groupby: this.renderGroupBy
    }, this.validationControls = {}, this.createColumnContainerControl(), this.creataeBandwidthControl(), this.createPointControl(), this.createGroupByControl();
  }, e.prototype.createColumnContainerControl = function (t) {
    this.$columnContainer = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-container"></div>'), this.addedColumnControls = [], this.validationControls.columns = [], this.addPropertyControl("Columns", function (t) {
      this.$firstColumn = this.createColumnsList(this.$columnContainer, !0), this.$secondColumn = this.createColumnsList(this.$columnContainer, !0), t.append(this.$columnContainer);
    }, {
      mandatory: !0
    });
  }, e.prototype.createColumnsList = function (t) {
    var e = this,
        o = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column brtc-va-editors-sheet-panels-properties-single-column"></div>'),
        r = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-addedcolumn" style="margin-bottom: 5px;" ></div>'),
        n = $('<div class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-innercontainer"></div>');
    o.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), o.attr("index", this.addedColumnControls.length), o.addClass(".brtc-va-editors-sheet-controls-propertycontrol-deck"), o.append(r);
    var a = this.createColumnList(r, {
      maxRowCount: 1,
      multiple: !1,
      showOpener: "click",
      changed: function changed(t, o) {
        e.executeCommand(e.createOnColumnsCommand());
      }
    }, "brtc-va-editors-sheet-controls-width-12");
    return n.append(o), t.append(n), this.addedColumnControls.push(a), this.validationControls.columns.push(n), n;
  }, e.prototype.creataeBandwidthControl = function (t) {
    var e = this;
    this.$bandwidth = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numericinput"/>');
    var o = this.addPropertyControl("Bandwidth", function (t) {
      t.append(this.$bandwidth);
      e.bandwidthControl = e.createNumericInput(e.$bandwidth, {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: "1.0"
      }), e.bandwidthControl.onChange(function () {
        e.createNumericInputCommand("bandwidth", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "bandwidth", "Bandwidth");
  }, e.prototype.createPointControl = function (t) {
    var e = this;
    this.$point = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), this.$pointWrapperControl = this.addPropertyControl("Point", function (t) {
      t.append(e.$point), e.pointControl = e.createInput(e.$point, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    }, {
      mandatory: !0
    }), this.$point.on("change", function () {
      e.isInputValueChanged("point", $(this).val()) && e.createInputCommand("point", $(this).val());
    });
    var o = this.$pointWrapperControl.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "point", "Point");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = [];

    for (var r in e) {
      "number" == e[r].type && o.push(e[r]);
    }

    this.columnData1 = o;
    var n;
    n = this.dataMap && this.options.fnUnit[IN_DATA][1] ? this.dataMap[this.options.fnUnit[IN_DATA][1]].columns : [];
    var a = [];

    for (var r in n) {
      "number" == n[r].type && a.push(n[r]);
    }

    this.columnData2 = a, this.addedColumnControls[0].setItems(this.columnData1), 2 == this.addedColumnControls.length && this.addedColumnControls[1].setItems(this.columnData2), this.groupbyControl.setItems(e), this.options.fnUnit[IN_DATA].length < 2 ? (this.$secondColumn.hide(), this.$pointWrapperControl.show()) : (this.$secondColumn.show(), this.$pointWrapperControl.hide());
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    t && (this.addedColumnControls[0].setSelectedItems(t[0]), 2 == t.length && this.addedColumnControls[1].setSelectedItems(t[1]));
  }, e.prototype.fillLastColumnControl = function () {
    2 == this.addedColumnControls.length && this.addedColumnControls[1].setItems(this.columnData2);
  }, e.prototype.renderBandwidth = function () {
    var t = this.options.fnUnit.param;
    this.bandwidthControl.setValue(t.bandwidth);
  }, e.prototype.renderPoint = function () {
    var t = this.options.fnUnit.param;
    this.$point.val(t.point);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns0" === this.problems[t].param && this.createValidationContent(this.validationControls.columns[0].find("[index=0]"), this.problems[t]), "columns1" === this.problems[t].param && this.createValidationContent(this.validationControls.columns[1].find("[index=1]"), this.problems[t]), "bandwidth" === this.problems[t].param && this.createValidationContent(this.$bandwidth, this.problems[t]), "point" === this.problems[t].param && this.createValidationContent(this.$point.closest(".brtc-va-editors-sheet-controls-propertycontrol-contents"), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.makeColumnParam = function () {
    var t = [];

    for (var e in this.addedColumnControls) {
      var o = this.addedColumnControls[e].getSelectedItems() == [] ? [""] : this.addedColumnControls[e].getSelectedItems();
      t.push(o);
    }

    return t;
  }, e.prototype.createOnColumnsCommand = function () {
    var e = this.makeColumnParam(),
        o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          columns: e
        }
      }
    };
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.kernelDensityEstimation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.MultiInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.MultiInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.MultiInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addPointRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addInTableRule = function (t) {
    var e = this;
    this.addRule(function (t) {
      return e.checkInTableIsEmpty(t);
    }), this.addRule(function (t) {
      if (e._hasSchema(t)) {
        var o = {
          errorCode: "BR-0138",
          param: "inData",
          messageParam: [[]]
        },
            r = t[IN_DATA];

        for (var n in e.hasAllSchema = !0, r) {
          var a = t.parent().getPreFnUnitByCondition(t.fid, function (t) {
            return $.inArray(r[n], t[OUT_DATA]) > -1;
          });
          e._getSchema(t, n) && 0 !== e._getSchema(t, n).length || o.messageParam[0].push("[" + a.display.label + "]");
        }

        return o.messageParam[0].length > 0 ? (e.hasAllSchema = !1, e.problemFactory.createProblem(o, t)) : void 0;
      }
    });
  }, e.prototype.checkInTableIsEmpty = function (t) {
    var e = {
      errorCode: "BR-0138",
      messageParam: []
    },
        o = t.parent().getFnUnitById(t.parent().getPrevious(t.fid)[0]);
    if (this._hasPrevious(t)) for (var r = 0; r < t[IN_DATA].length; r++) {
      if (!this._getSchema(t, r) || 0 === this._getSchema(t, r).length) return e.messageParam.push(o.display.label), this.problemFactory.createProblem(e, t);
    }
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = [];
        if (0 == e.param.columns.length) for (var r in e.param[t.PARAM_COLUMNS]) {
          o.push(t.checkColumnExists(e, t.PARAM_COLUMNS + r, e.param[t.PARAM_COLUMNS][r], r));
        }
        if (e.param.columns.length == e[IN_DATA].length) for (var r in e.param[t.PARAM_COLUMNS]) {
          o.push(t.checkColumnExists(e, t.PARAM_COLUMNS + r, e.param[t.PARAM_COLUMNS][r], r));
        } else e.param.columns.length > e[IN_DATA].length && o.push(t.checkColumnExists(e, t.PARAM_COLUMNS + "0", e.param[t.PARAM_COLUMNS][0]));
        return o;
      }
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = [];
        return 1 == e.param[t.PARAM_COLUMNS].length ? null == e.param[t.PARAM_COLUMNS][0][0] && (o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "columns0",
          messageParam: ["Columns"]
        }, e)), o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "columns1",
          messageParam: ["Columns"]
        }, e))) : 2 == e.param[t.PARAM_COLUMNS].length && (null == e.param[t.PARAM_COLUMNS][0][0] && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "columns0",
          messageParam: ["Columns"]
        }, e)), null == e.param[t.PARAM_COLUMNS][1][0] && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "columns1",
          messageParam: ["Columns"]
        }, e)), 2 == e.param.columns.length && 1 == e[IN_DATA].length && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0138",
          param: "columns1"
        }, e))), o;
      }
    });
  }, e.prototype.addPointRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = [];
        return "" == e.param.point && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "point",
          messageParam: ["Point"]
        }, e)), o;
      }
    });
  }, e = e, t.VA.Core.Functions.Library.kernelDensityEstimation.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.kruskalWallisHTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "kruskalWallisHTest",
      name: "KruskalWallisHTest",
      inData: [],
      outData: [],
      param: {
        "response-cols": [],
        "factor-col": "",
        "group-by": []
      },
      display: {
        label: "Kruskal-Wallis H Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs Kruskal-Wallis H test.",
    mandatory: [],
    tags: ["kruskal", "wallis", "kruskalwallis", "kruskal-wallis", "anova", "nonparametric", "non-parametric"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "response-cols": this.renderResponseColsControl,
      "factor-col": this.renderFactorColControl,
      "group-by": this.renderGroupByControl
    }, this.$elements = {}, this.controls = {}, this.createResponseColsControl(), this.createFactorColControl(), this.createGroupByControl();
  }, e.prototype.createResponseColsControl = function (t) {
    var e = this;
    e.$elements["response-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Response Columns", function (t) {
      t.append(e.$elements["response-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("response-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["response-cols"] = e.createColumnList(e.$elements["response-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderResponseColsControl = function (t) {
    var e = this.options.fnUnit.param["response-cols"];
    this.controls["response-cols"].setSelectedItems(e);
  }, e.prototype.createFactorColControl = function (t) {
    var e = this;
    e.$elements["factor-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Factor Column", function (t) {
      t.append(e.$elements["factor-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("factor-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["factor-col"] = e.createColumnList(e.$elements["factor-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFactorColControl = function (t) {
    var e = this.options.fnUnit.param["factor-col"];
    this.controls["factor-col"].setSelectedItems([e]);
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements["group-by"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements["group-by"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("group-by", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["group-by"] = e.createColumnList(e.$elements["group-by"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupByControl = function (t) {
    var e = this.options.fnUnit.param["group-by"];
    this.controls["group-by"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "Double[]"]), this.controls["response-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["factor-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["group-by"].setItems(t);
  }, t.VA.Core.Functions.Library.kruskalWallisHTest.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addResponseColsRule(), this.addFactorColRule();
  }, o.prototype.addResponseColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "response-cols", e.param["response-cols"], "Response Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "response-cols", e.param["response-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "response-cols", e.param["response-cols"], ["number", "Double[]"]);
    });
  }, o.prototype.addFactorColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "factor-col", e.param["factor-col"], "Factor Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "factor-col", e.param["factor-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "factor-col", e.param["factor-col"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.kruskalWallisHTest.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.levenesTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "levenesTest",
      name: "LevenesTest",
      inData: [],
      outData: [],
      param: {
        "response-cols": [],
        "factor-col": "",
        center: "mean",
        "confidence-level": "",
        "group-by": []
      },
      display: {
        label: "Levene's Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs a test for the equality of variances for two or more groups. This function is an alternative to the Bartlett test that are less sensitive to departures from normality.",
    mandatory: [],
    tags: ["levenestest", "levenetest", "levene", "test", "variance", "bartlett"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "response-cols": this.renderResponseColsControl,
      "factor-col": this.renderFactorColControl,
      center: this.renderCenterControl,
      "confidence-level": this.renderConfidenceLevelControl,
      "group-by": this.renderGroupByControl
    }, this.$elements = {}, this.controls = {}, this.createResponseColsControl(), this.createFactorColControl(), this.createCenterControl(), this.createConfidenceLevelControl(), this.createGroupByControl();
  }, e.prototype.createResponseColsControl = function (t) {
    var e = this;
    e.$elements["response-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Response Columns", function (t) {
      t.append(e.$elements["response-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("response-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["response-cols"] = e.createColumnList(e.$elements["response-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderResponseColsControl = function (t) {
    var e = this.options.fnUnit.param["response-cols"];
    this.controls["response-cols"].setSelectedItems(e);
  }, e.prototype.createFactorColControl = function (t) {
    var e = this;
    e.$elements["factor-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Factor Column", function (t) {
      t.append(e.$elements["factor-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("factor-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["factor-col"] = e.createColumnList(e.$elements["factor-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFactorColControl = function (t) {
    var e = this.options.fnUnit.param["factor-col"];
    this.controls["factor-col"].setSelectedItems([e]);
  }, e.prototype.createCenterControl = function (t) {
    var e = this;
    e.$elements["center.mean"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Mean</div>'), e.addPropertyControl("Center", function (t) {
      t.append(e.$elements["center.mean"]), e.controls["center.mean"] = e.createRadioButton(e.$elements["center.mean"], {
        width: "undefined",
        groupName: "center",
        checked: !0
      }), e.$elements["center.mean"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("center", "mean");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderCenterControl = function (t) {
    var e = "center." + this.options.fnUnit.param.center;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createConfidenceLevelControl = function (t) {
    var e = this;
    e.$elements["confidence-level"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Confidence Level", function (t) {
      t.append(e.$elements["confidence-level"]);
      e.controls["confidence-level"] = e.createNumericInput(e.$elements["confidence-level"], {
        placeholder: "0.95",
        numberType: "double"
      }), e.controls["confidence-level"].onChange(function () {
        var t = e.createSetParameterValueCommand("confidence-level", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderConfidenceLevelControl = function (t) {
    var e = this.options.fnUnit.param["confidence-level"];
    this.controls["confidence-level"].setValue(e || "");
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements["group-by"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements["group-by"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("group-by", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["group-by"] = e.createColumnList(e.$elements["group-by"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupByControl = function (t) {
    var e = this.options.fnUnit.param["group-by"];
    this.controls["group-by"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "Double[]"]), this.controls["response-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["factor-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["group-by"].setItems(t);
  }, t.VA.Core.Functions.Library.levenesTest.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addResponseColsRule(), this.addFactorColRule();
  }, o.prototype.addResponseColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "response-cols", e.param["response-cols"], "Response Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "response-cols", e.param["response-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "response-cols", e.param["response-cols"], ["number", "Double[]"]);
    });
  }, o.prototype.addFactorColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "factor-col", e.param["factor-col"], "Factor Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "factor-col", e.param["factor-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "factor-col", e.param["factor-col"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.levenesTest.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.logLikelihoodRatioTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "logLikelihoodRatioTest",
      name: "LogLikelihoodRatioTest",
      inData: [],
      outData: [],
      param: {
        response: "",
        groupby: [],
        "weight-col": "",
        "nullmodel-type": "1"
      },
      display: {
        label: "Log Likelihood Ratio Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "LogLikelihood Ratio Test.",
    tags: ["Evaluation", "LogLikelihoodRatioTest", "LogLikelihood Ratio Test", "loglikelihood ratio test", "Log Likelihood Ratio Test", "linear regression", "logistic regression", "poisson regression", "gaussian distribution", "binomial distribution", "poisson distribution", "gaussian", "binomial", "poisson", "identity", "logit", "log", "distribution", "link", "dof", "degree of freedom", "p value", "chi-squared distribution"],
    "in-range": {
      min: 2,
      max: 3
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      response: this.renderResponse,
      "weight-col": this.renderWeightCol,
      groupby: this.renderGroupby,
      "nullmodel-type": this.renderNullModelType
    }, this.createResponseControl(), this.createWeightColControl(), this.createGroupbyControl(), this.createNullModelTypeControl();
  }, e.prototype.renderResponse = function () {
    var t = this.options.fnUnit.param;
    this.responseControl.setSelectedItems([t.response]);
  }, e.prototype.renderWeightCol = function () {
    var t = this.options.fnUnit.param;
    this.weightColControl.setSelectedItems([t["weight-col"]]);
  }, e.prototype.renderGroupby = function () {
    var t = this.options.fnUnit.param;
    this.groupbyControl.setSelectedItems(t.groupby);
  }, e.prototype.renderNullModelType = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t["nullmodel-type"] ? "1" === t["nullmodel-type"] ? this.$nullModelTypeTrueControl.jqxRadioButton("check") : this.$nullModelTypeFalseControl.jqxRadioButton("check") : this.$nullModelTypeTrueControl.jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "response" === this.problems[t].param ? this.createValidationContent(this.$responseColumn.parent(), this.problems[t]) : "weight-col" === this.problems[t].param ? this.createValidationContent(this.$WeightColumn, this.problems[t]) : "groupby" === this.problems[t].param && this.createValidationContent(this.$groupByColumns, this.problems[t]);
    }
  }, e.prototype.createResponseControl = function () {
    var t = this;
    this.responseControl = {};
    this.$responseColumn = this.createCommonColumnsControl("responseControl", "Response", {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending"
    }), this.responseControl.onChange(function () {
      var e = t.createCommonColumnCommand("response", t.responseControl, "string");
      t.executeCommand(e);
    });
  }, e.prototype.createWeightColControl = function () {
    var t = this;
    this.weightColControl = {};
    this.$WeightColumn = this.createCommonColumnsControl("weightColControl", "Weight", {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending"
    }), this.weightColControl.onChange(function () {
      var e = t.createCommonColumnCommand("weight-col", t.weightColControl, "string");
      t.executeCommand(e);
    });
  }, e.prototype.createGroupbyControl = function () {
    var t = this;
    this.groupbyControl = {}, this.$groupByColumns = this.createCommonColumnsControl("groupbyControl", "Group By", {
      maxRowCount: 3,
      multiple: !0
    }), this.groupbyControl.onChange(function () {
      var e = t.createCommonColumnCommand("groupby", t.groupbyControl, []);
      t.executeCommand(e);
    });
  }, e.prototype.createNullModelTypeControl = function (t) {
    var e = this;
    this.$nullModelTypeTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">1</div>'), this.$nullModelTypeFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">0</div>'), this.$nullModelTypeProperties = this.addPropertyControl("Null Model Type", function (t) {
      t.append(e.$nullModelTypeTrueControl).append(e.$nullModelTypeFalseControl), e.createRadioButton(e.$nullModelTypeTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$nullModelTypeFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$nullModelTypeTrueControl.on("checked", function (t) {
        var o = e.createCommonCommand("nullmodel-type", "1");
        e.executeCommand(o);
      }), e.$nullModelTypeFalseControl.on("checked", function (t) {
        var o = e.createCommonCommand("nullmodel-type", "0");
        e.executeCommand(o);
      });
    });
  }, e.prototype.createCommonColumnsControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(n);
      r[t] = r.createColumnList(n, o || {
        maxRowCount: 1,
        multiple: !1
      });
    }, "Response" == e ? {
      mandatory: !0
    } : {}), n;
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = "", o && (r.ref.param[e] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && "object" == typeof r) for (var i in a) {
      n.ref.param[e].push(a[i]);
    } else a && "string" == typeof r && (n.ref.param[e] = void 0 === a[0] ? "" : a[0]);
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [];
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = $.grep(t, function (t) {
      return "number" === t.type;
    });
    this.responseControl.setItems(e), this.weightColControl.setItems(e), this.groupbyControl.setItems(t), 3 === this.options.fnUnit[IN_DATA].length ? (this.$nullModelTypeProperties.hide(), this.$nullModelTypeTrueControl.jqxRadioButton("check")) : (this.$nullModelTypeProperties.show(), this.$nullModelTypeTrueControl.jqxRadioButton("check"));
  }, t.VA.Core.Functions.Library.logLikelihoodRatioTest.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_RESPONSE = "response", this.PARAM_WEIGHT_COLUMN = "weight-col", this.PARAM_GROUP_BY = "groupby", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addResponseColumnRule(), this.addWeightColumnRule(), this.addGroupByColumnsRule();
  }, e.prototype.addResponseColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_RESPONSE, e.param[t.PARAM_RESPONSE], "Response");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_RESPONSE, e.param[t.PARAM_RESPONSE]);
    }), this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_RESPONSE]) return t.checkUsedColumn(e, t.PARAM_RESPONSE);
    });
  }, e.prototype.addGroupByColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_GROUP_BY]) return t.checkUsedColumn(e, t.PARAM_GROUP_BY);
    });
  }, e.prototype.addWeightColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_WEIGHT_COLUMN]) return t.checkUsedColumn(e, t.PARAM_WEIGHT_COLUMN);
    });
  }, e.prototype.checkUsedColumn = function (t, e) {
    var o = this,
        r = [o.PARAM_GROUP_BY, o.PARAM_RESPONSE, o.PARAM_WEIGHT_COLUMN],
        n = r.indexOf(e);
    -1 !== n && r.splice(n, 1);
    var a = [];

    if ($.each(r, function (e, r) {
      r === o.PARAM_GROUP_BY ? $.each(t.param[r], function (t, e) {
        a.push(e);
      }) : a.push(t.param[r]);
    }), e === this.PARAM_GROUP_BY) {
      for (var i = [], s = 0; s < t.param[e].length; s++) {
        if ($.inArray(t.param[e][s], a) > -1) {
          i.push(t.param[e][s]);
          var l = {
            errorCode: "BR-0057",
            param: e,
            messageParam: [i, "Response", "Group By"]
          };
        }
      }

      return $.inArray(t.param["weight-col"], t.param[e]) > -1 && (l.messageParam = [t.param["weight-col"], "Weight", "Group By"]), o.problemFactory.createProblem(l, t);
    }

    if (e === this.PARAM_WEIGHT_COLUMN) {
      if ($.inArray(t.param[e], a) > -1) l = {
        errorCode: "BR-0057",
        param: e,
        messageParam: [t.param[e], "Weight", "Group By"]
      };
      return t.param[e] == t.param.response && (l.messageParam = [t.param["weight-col"], "Response", "Weight"]), o.problemFactory.createProblem(l, t);
    }

    if ($.inArray(t.param[e], a) > -1) {
      l = {
        errorCode: "BR-0057",
        param: e,
        messageParam: [t.param[e], "Response", "Weight"]
      };
      return $.inArray(t.param[e], t.param.groupby) > -1 && (l.messageParam = [t.param[e], "Response", "Group By"]), o.problemFactory.createProblem(l, t);
    }
  }, e = e, t.VA.Core.Functions.Library.logLikelihoodRatioTest.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.logLikelihoodRatioTestForLR = {
    category: "statistics",
    defaultFnUnit: {
      func: "logLikelihoodRatioTestForLR",
      name: "LogLikelihoodRatioTestForLR",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "proportion-col": "",
        "frequency-col": "",
        groupby: [],
        "nullmodel-type": "1"
      },
      display: {
        label: "Log Likelihood Ratio Test For LR",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "LogLikelihood Ratio Test especially for logistic regression model.",
    tags: ["Evaluation", "LogisticRegression", "Regression", "LogLikelihoodRatioTestForLR", "LogLikelihood Ratio Test For LR", "Log Likelihood Ratio Test For LR", "loglikelihood ratio test", "logistic regression", "binomial distribution", "binomial", "poisson", "logit", "distribution", "link "],
    "in-range": {
      min: 2,
      max: 3
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "proportion-col": this.renderProportionCol,
      "frequency-col": this.renderFrequencyCol,
      groupby: this.renderGroupby,
      "nullmodel-type": this.renderNullModelType
    }, this.createColumnsControl(), this.createProportionColControl(), this.createFrequencyColControl(), this.createGroupbyControl(), this.createNullModelTypeControl();
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderProportionCol = function () {
    var t = this.options.fnUnit.param;
    this.proportionColControl.setSelectedItems([t["proportion-col"]]);
  }, e.prototype.renderFrequencyCol = function () {
    var t = this.options.fnUnit.param;
    this.frequencyColControl.setSelectedItems([t["frequency-col"]]);
  }, e.prototype.renderGroupby = function () {
    var t = this.options.fnUnit.param;
    this.groupbyControl.setSelectedItems(t.groupby);
  }, e.prototype.renderNullModelType = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t["nullmodel-type"] ? "1" === t["nullmodel-type"] ? this.$nullModelTypeTrueControl.jqxRadioButton("check") : this.$nullModelTypeFalseControl.jqxRadioButton("check") : this.$nullModelTypeTrueControl.jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns.parent(), this.problems[t]) : "proportion-col" === this.problems[t].param ? this.createValidationContent(this.$proportionColumn, this.problems[t]) : "frequency-col" === this.problems[t].param ? this.createValidationContent(this.$frequencyColumn, this.problems[t]) : "groupby" === this.problems[t].param && this.createValidationContent(this.$groupByColumns, this.problems[t]);
    }
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.columnsControl = {};
    this.$columns = this.createCommonColumnsControl("columnsControl", "Columns", {
      maxRowCount: 6,
      multiple: !0
    }), this.columnsControl.onChange(function () {
      var e = t.createColumnsCommand();
      t.executeCommand(e);
    });
  }, e.prototype.createProportionColControl = function () {
    var t = this;
    this.proportionColControl = {};
    this.$proportionColumn = this.createCommonColumnsControl("proportionColControl", "Proportion", {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending"
    }), this.proportionColControl.onChange(function () {
      var e = t.createCommonColumnCommand("proportion-col", t.proportionColControl, "string");
      t.executeCommand(e);
    });
  }, e.prototype.createFrequencyColControl = function () {
    var t = this;
    this.frequencyColControl = {};
    this.$frequencyColumn = this.createCommonColumnsControl("frequencyColControl", "Frequency", {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending"
    }), this.frequencyColControl.onChange(function () {
      var e = t.createCommonColumnCommand("frequency-col", t.frequencyColControl, "string");
      t.executeCommand(e);
    });
  }, e.prototype.createGroupbyControl = function () {
    var t = this;
    this.groupbyControl = {}, this.$groupByColumns = this.createCommonColumnsControl("groupbyControl", "Group By", {
      maxRowCount: 3,
      multiple: !0
    }), this.groupbyControl.onChange(function () {
      var e = t.createCommonColumnCommand("groupby", t.groupbyControl, []);
      t.executeCommand(e);
    });
  }, e.prototype.createNullModelTypeControl = function (t) {
    var e = this;
    this.$nullModelTypeTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">1</div>'), this.$nullModelTypeFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">0</div>'), this.$nullModelTypeProperties = this.addPropertyControl("Null Model Type", function (t) {
      t.append(e.$nullModelTypeTrueControl).append(e.$nullModelTypeFalseControl), e.createRadioButton(e.$nullModelTypeTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$nullModelTypeFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$nullModelTypeTrueControl.on("checked", function (t) {
        var o = e.createCommonCommand("nullmodel-type", "1");
        e.executeCommand(o);
      }), e.$nullModelTypeFalseControl.on("checked", function (t) {
        var o = e.createCommonCommand("nullmodel-type", "0");
        e.executeCommand(o);
      });
    });
  }, e.prototype.createCommonColumnsControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(n);
      r[t] = r.createColumnList(n, o || {
        maxRowCount: 1,
        multiple: !1
      });
    }, "Columns" == e || "Proportion" == e || "Frequency" == e ? {
      mandatory: !0
    } : {}), n;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    if (o) for (var r in o) {
      e.ref.param.columns[0].push(o[r]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && "object" == typeof r) for (var i in a) {
      n.ref.param[e].push(a[i]);
    } else a && "string" == typeof r && (n.ref.param[e] = void 0 === a[0] ? "" : a[0]);
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = $.grep(t, function (t) {
      return "number" === t.type;
    }),
        o = $.grep(t, function (t) {
      return "string" === t.type;
    });
    this.columnsControl.setItems(o), this.proportionColControl.setItems(e), this.frequencyColControl.setItems(e), this.groupbyControl.setItems(t), 3 === this.options.fnUnit[IN_DATA].length ? (this.$nullModelTypeProperties.hide(), this.$nullModelTypeTrueControl.jqxRadioButton("check")) : (this.$nullModelTypeProperties.show(), this.$nullModelTypeTrueControl.jqxRadioButton("check"));
  }, t.VA.Core.Functions.Library.logLikelihoodRatioTestForLR.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_GROUP_BY = "groupby", this.PARAM_PROPORTION_COL = "proportion-col", this.PARAM_FREQUENCY_COL = "frequency-col", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addSingleColumnRule(this.PARAM_PROPORTION_COL, "Proportion"), this.addSingleColumnRule(this.PARAM_FREQUENCY_COL, "Frequency"), this.addGroupByColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addSingleColumnRule = function (t, e) {
    var o = this;
    this.addRule(function (r) {
      return o.checkColumnIsEmpty(r, t, r.param[t], e);
    }), this.addRule(function (e) {
      return o.checkColumnExists(e, t, e.param[t]);
    }), this.addRule(function (e) {
      if ("" !== e.param[t]) return o.checkUsedColumn(e, t);
    });
  }, e.prototype.addGroupByColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if ("" !== e.param[t.PARAM_GROUP_BY]) return t.checkUsedColumn(e, t.PARAM_GROUP_BY);
    });
  }, e.prototype.checkUsedColumn = function (t, e) {
    var o = this,
        r = [o.PARAM_COLUMNS, o.PARAM_GROUP_BY, o.PARAM_PROPORTION_COL, o.PARAM_FREQUENCY_COL],
        n = r.indexOf(e);
    -1 !== n && r.splice(n, 1);
    var a = [];

    if ($.each(r, function (e, r) {
      r === o.PARAM_COLUMNS ? $.each(t.param[r][0], function (t, e) {
        a.push(e);
      }) : r === o.PARAM_GROUP_BY ? $.each(t.param[r], function (t, e) {
        a.push(e);
      }) : a.push(t.param[r]);
    }), e === this.PARAM_GROUP_BY) {
      for (var i = [], s = 0; s < t.param[e].length; s++) {
        if ($.inArray(t.param[e][s], a) > -1) {
          i.push(t.param[e][s]);
          var l = {
            errorCode: "BR-0057",
            param: e,
            messageParam: [i, "Columns", "Group By"]
          };
        }
      }

      return i.length > 0 ? (i.length, l.errorCode = "BR-0057", o.problemFactory.createProblem(l, t)) : void 0;
    }

    if ($.inArray(t.param[e], a) > -1) {
      l = {
        errorCode: "BR-0057",
        param: e,
        messageParam: [t.param[e]]
      };
      return o.problemFactory.createProblem(l, t);
    }
  }, e = e, t.VA.Core.Functions.Library.logLikelihoodRatioTestForLR.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.mannWhitneyUTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "mannWhitneyUTest",
      name: "MannWhitneyUTest",
      inData: [],
      outData: [],
      param: {
        "response-cols": [],
        "factor-col": "",
        first: "",
        second: "",
        "group-by": []
      },
      display: {
        label: "Mann-Whitney U Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs Mann Whitney U test.",
    mandatory: [],
    tags: ["mann", "whitney", "mann whitney", "mann-whitney", "u test", "u-test", "non parametric", "non-parametric"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "response-cols": this.renderResponseColsControl,
      "factor-col": this.renderFactorColControl,
      first: this.renderFirstControl,
      second: this.renderSecondControl,
      "group-by": this.renderGroupByControl
    }, this.$elements = {}, this.controls = {}, this.createResponseColsControl(), this.createFactorColControl(), this.createFirstControl(), this.createSecondControl(), this.createGroupByControl();
  }, e.prototype.createResponseColsControl = function (t) {
    var e = this;
    e.$elements["response-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Response Columns", function (t) {
      t.append(e.$elements["response-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("response-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["response-cols"] = e.createColumnList(e.$elements["response-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderResponseColsControl = function (t) {
    var e = this.options.fnUnit.param["response-cols"];
    this.controls["response-cols"].setSelectedItems(e);
  }, e.prototype.createFactorColControl = function (t) {
    var e = this;
    e.$elements["factor-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Factor Column", function (t) {
      t.append(e.$elements["factor-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("factor-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["factor-col"] = e.createColumnList(e.$elements["factor-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFactorColControl = function (t) {
    var e = this.options.fnUnit.param["factor-col"];
    this.controls["factor-col"].setSelectedItems([e]);
  }, e.prototype.createFirstControl = function (t) {
    var e = this;
    e.$elements.first = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("First", function (t) {
      t.append(e.$elements.first);
      e.controls.first = e.createInput(e.$elements.first, {
        placeHolder: ""
      }), e.$elements.first.on("change", function (t) {
        if (e.isInputValueChanged("first", $(this).val())) {
          var o = e.createSetParameterValueCommand("first", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderFirstControl = function (t) {
    var e = this.options.fnUnit.param.first;
    this.$elements.first.val(e || "");
  }, e.prototype.createSecondControl = function (t) {
    var e = this;
    e.$elements.second = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Second", function (t) {
      t.append(e.$elements.second);
      e.controls.second = e.createInput(e.$elements.second, {
        placeHolder: ""
      }), e.$elements.second.on("change", function (t) {
        if (e.isInputValueChanged("second", $(this).val())) {
          var o = e.createSetParameterValueCommand("second", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSecondControl = function (t) {
    var e = this.options.fnUnit.param.second;
    this.$elements.second.val(e || "");
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements["group-by"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements["group-by"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("group-by", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["group-by"] = e.createColumnList(e.$elements["group-by"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupByControl = function (t) {
    var e = this.options.fnUnit.param["group-by"];
    this.controls["group-by"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "Double[]"]), this.controls["response-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["factor-col"].setItems(t), t = this.getColumnsOfInTable(0, ["string", "number"]), this.controls["group-by"].setItems(t);
  }, t.VA.Core.Functions.Library.mannWhitneyUTest.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addResponseColsRule(), this.addFactorColRule();
  }, o.prototype.addResponseColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "response-cols", e.param["response-cols"], "Response Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "response-cols", e.param["response-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "response-cols", e.param["response-cols"], ["number", "Double[]"]);
    });
  }, o.prototype.addFactorColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "factor-col", e.param["factor-col"], "Factor Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "factor-col", e.param["factor-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "factor-col", e.param["factor-col"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.mannWhitneyUTest.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.normalityTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "normalityTest",
      name: "NormalityTest",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        method: ["ks", "jb", "ad"],
        mu: "",
        "sigma-square": "",
        groupby: []
      },
      display: {
        label: "Normality Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs Kolmogorov-Smirnov test, Jarque-Bera test and Anderson-Darling test.",
    mandatory: ["method"],
    tags: ["normality", "normalitytest", "normality test", "kolmogorov", "smirnov", "jarque", "bera", "anderson", "darling"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      method: this.renderMethodControl,
      mu: this.renderMuControl,
      "sigma-square": this.renderSigmaSquareControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createMethodControl(), this.createMuControl(), this.createSigmaSquareControl(), this.createGroupbyControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Features", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.method.append(o), e.$elements.method.append(r), e.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Kolmogorov–Smirnov Test",
        value: "ks",
        default: !0
      }, {
        label: "Jarque-Bera Test",
        value: "jb",
        default: !0
      }, {
        label: "Anderson-Darling Test",
        value: "ad",
        default: !0
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "method." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("method", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "method." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.method.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "method." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "method." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("method", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "method." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("method", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderMethodControl = function (t) {
    var e,
        o = this.options.fnUnit.param.method,
        r = [{
      label: "Kolmogorov–Smirnov Test",
      value: "ks",
      default: !0
    }, {
      label: "Jarque-Bera Test",
      value: "jb",
      default: !0
    }, {
      label: "Anderson-Darling Test",
      value: "ad",
      default: !0
    }];

    for (var n in r) {
      e = "method." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMuControl = function (t) {
    var e = this;
    e.$elements.mu = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Hypothesized Mean", function (t) {
      t.append(e.$elements.mu);
      e.controls.mu = e.createNumericInput(e.$elements.mu, {
        placeholder: "",
        numberType: "double"
      }), e.controls.mu.onChange(function () {
        var t = e.createSetParameterValueCommand("mu", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderMuControl = function (t) {
    var e = this.options.fnUnit.param.mu;
    this.controls.mu.setValue(e || "");
  }, e.prototype.createSigmaSquareControl = function (t) {
    var e = this;
    e.$elements["sigma-square"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Hypothesized Variance", function (t) {
      t.append(e.$elements["sigma-square"]);
      e.controls["sigma-square"] = e.createNumericInput(e.$elements["sigma-square"], {
        placeholder: "",
        numberType: "double"
      }), e.controls["sigma-square"].onChange(function () {
        var t = e.createSetParameterValueCommand("sigma-square", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderSigmaSquareControl = function (t) {
    var e = this.options.fnUnit.param["sigma-square"];
    this.controls["sigma-square"].setValue(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number", "Double[]"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.normalityTest.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addMethodRule();
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Features");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number", "Double[]"]);
    });
  }, o.prototype.addMethodRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "BR-0033",
        param: "method",
        messageParam: ["Method"]
      }, e, e.param.method);
    });
  }, t.VA.Core.Functions.Library.normalityTest.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.oneSampleTTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "oneSampleTTest",
      name: "OneSampleTTest",
      inData: [],
      outData: [],
      param: {
        "input-cols": [],
        alternatives: ["greater", "less", "two_sided"],
        mu: "",
        "confidence-level": "",
        groupby: []
      },
      display: {
        label: "One Sample T Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function performs one sample t-test of given columns.",
    mandatory: ["alternatives"],
    tags: ["One Sample T Test", "T Test", "TTest", "One", "One sample"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-cols": this.renderInputColsControl,
      alternatives: this.renderAlternativesControl,
      mu: this.renderMuControl,
      "confidence-level": this.renderConfidenceLevelControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createInputColsControl(), this.createAlternativesControl(), this.createMuControl(), this.createConfidenceLevelControl(), this.createGroupbyControl();
  }, e.prototype.createInputColsControl = function (t) {
    var e = this;
    e.$elements["input-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Columns", function (t) {
      t.append(e.$elements["input-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["input-cols"] = e.createColumnList(e.$elements["input-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColsControl = function (t) {
    var e = this.options.fnUnit.param["input-cols"];
    this.controls["input-cols"].setSelectedItems(e);
  }, e.prototype.createAlternativesControl = function (t) {
    var e = this;
    e.$elements.alternatives = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.alternatives.append(o), e.$elements.alternatives.append(r), e.addPropertyControl("Alternatives", function (t) {
      t.append(e.$elements.alternatives), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Greater",
        value: "greater",
        default: !0
      }, {
        label: "Less",
        value: "less",
        default: !0
      }, {
        label: "Two Sided",
        value: "two_sided",
        default: !0
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("alternatives", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "alternatives." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.alternatives.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("alternatives", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("alternatives", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderAlternativesControl = function (t) {
    var e,
        o = this.options.fnUnit.param.alternatives,
        r = [{
      label: "Greater",
      value: "greater",
      default: !0
    }, {
      label: "Less",
      value: "less",
      default: !0
    }, {
      label: "Two Sided",
      value: "two_sided",
      default: !0
    }];

    for (var n in r) {
      e = "alternatives." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMuControl = function (t) {
    var e = this;
    e.$elements.mu = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Hypothesized Mean", function (t) {
      t.append(e.$elements.mu);
      e.controls.mu = e.createNumericInput(e.$elements.mu, {
        numberType: "double"
      }), e.controls.mu.onChange(function () {
        var t = e.createSetParameterValueCommand("mu", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "mu", "Hypothesized Mean");
  }, e.prototype.renderMuControl = function (t) {
    var e = this.options.fnUnit.param.mu;
    this.controls.mu.setValue(e || "");
  }, e.prototype.createConfidenceLevelControl = function (e) {
    var o = this;
    o.$elements["confidence-level"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Confidence Level", function (e) {
      e.append(o.$elements["confidence-level"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.95 (0 <= value <= 1)"),
        numberType: "double"
      };
      o.controls["confidence-level"] = o.createNumericInput(o.$elements["confidence-level"], r), o.controls["confidence-level"].onChange(function () {
        var t = o.createSetParameterValueCommand("confidence-level", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "confidence-level", "Confidence Level");
  }, e.prototype.renderConfidenceLevelControl = function (t) {
    var e = this.options.fnUnit.param["confidence-level"];
    this.controls["confidence-level"].setValue(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["input-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.oneSampleTTest.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputColsRule(), this.addAlternativesRule(), this.addBaseGroupByRule("input-cols", "Input Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addInputColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-cols", e.param["input-cols"], "Input Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-cols", e.param["input-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "input-cols", e.param["input-cols"], ["number"]);
    });
  }, o.prototype.addAlternativesRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "BR-0033",
        param: "alternatives",
        messageParam: ["Alternatives"]
      }, e, e.param.alternatives);
    });
  }, t.VA.Core.Functions.Library.oneSampleTTest.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.pairedTTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "pairedTTest",
      name: "PairedTTest",
      inData: [],
      outData: [],
      param: {
        "first-col": "",
        "second-col": "",
        alternatives: ["greater", "less", "two_sided"],
        mu: "",
        "confidence-level": "",
        groupby: []
      },
      display: {
        label: "Paired T Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function conducts the paired T-test.",
    mandatory: ["alternatives"],
    tags: ["Paired T Test", "T", "T Test", "ttest", "equal means", "equal", "means"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "first-col": this.renderFirstColControl,
      "second-col": this.renderSecondColControl,
      alternatives: this.renderAlternativesControl,
      mu: this.renderMuControl,
      "confidence-level": this.renderConfidenceLevelControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createFirstColControl(), this.createSecondColControl(), this.createAlternativesControl(), this.createMuControl(), this.createConfidenceLevelControl(), this.createGroupbyControl();
  }, e.prototype.createFirstColControl = function (t) {
    var e = this;
    e.$elements["first-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("First Column", function (t) {
      t.append(e.$elements["first-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("first-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["first-col"] = e.createColumnList(e.$elements["first-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFirstColControl = function (t) {
    var e = this.options.fnUnit.param["first-col"];
    this.controls["first-col"].setSelectedItems([e]);
  }, e.prototype.createSecondColControl = function (t) {
    var e = this;
    e.$elements["second-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Second Column", function (t) {
      t.append(e.$elements["second-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("second-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["second-col"] = e.createColumnList(e.$elements["second-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderSecondColControl = function (t) {
    var e = this.options.fnUnit.param["second-col"];
    this.controls["second-col"].setSelectedItems([e]);
  }, e.prototype.createAlternativesControl = function (t) {
    var e = this;
    e.$elements.alternatives = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.alternatives.append(o), e.$elements.alternatives.append(r), e.addPropertyControl("Alternatives", function (t) {
      t.append(e.$elements.alternatives), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Greater",
        value: "greater",
        default: !0
      }, {
        label: "Less",
        value: "less",
        default: !0
      }, {
        label: "Two Sided",
        value: "two_sided",
        default: !0
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("alternatives", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "alternatives." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.alternatives.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("alternatives", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("alternatives", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderAlternativesControl = function (t) {
    var e,
        o = this.options.fnUnit.param.alternatives,
        r = [{
      label: "Greater",
      value: "greater",
      default: !0
    }, {
      label: "Less",
      value: "less",
      default: !0
    }, {
      label: "Two Sided",
      value: "two_sided",
      default: !0
    }];

    for (var n in r) {
      e = "alternatives." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createMuControl = function (e) {
    var o = this;
    o.$elements.mu = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Hypothesized Difference", function (e) {
      e.append(o.$elements.mu);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0"),
        numberType: "double"
      };
      o.controls.mu = o.createNumericInput(o.$elements.mu, r), o.controls.mu.onChange(function () {
        var t = o.createSetParameterValueCommand("mu", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "mu", "Hypothesized Difference");
  }, e.prototype.renderMuControl = function (t) {
    var e = this.options.fnUnit.param.mu;
    this.controls.mu.setValue(e || "");
  }, e.prototype.createConfidenceLevelControl = function (e) {
    var o = this;
    o.$elements["confidence-level"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Confidence Level", function (e) {
      e.append(o.$elements["confidence-level"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.95 (0 <= value <= 1)"),
        numberType: "double"
      };
      o.controls["confidence-level"] = o.createNumericInput(o.$elements["confidence-level"], r), o.controls["confidence-level"].onChange(function () {
        var t = o.createSetParameterValueCommand("confidence-level", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "confidence-level", "Confidence Level");
  }, e.prototype.renderConfidenceLevelControl = function (t) {
    var e = this.options.fnUnit.param["confidence-level"];
    this.controls["confidence-level"].setValue(e || "");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["first-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls["second-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.pairedTTest.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFirstColRule(), this.addSecondColRule(), this.addAlternativesRule(), this.addBaseGroupByRule("first-col", "First Column"), this.addBaseGroupByRule("second-col", "Second Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addFirstColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "first-col", e.param["first-col"], "First Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "first-col", e.param["first-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "first-col", e.param["first-col"], ["number"]);
    });
  }, o.prototype.addSecondColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "second-col", e.param["second-col"], "Second Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "second-col", e.param["second-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "second-col", e.param["second-col"], ["number"]);
    });
  }, o.prototype.addAlternativesRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "BR-0033",
        param: "alternatives",
        messageParam: ["Alternatives"]
      }, e, e.param.alternatives);
    });
  }, t.VA.Core.Functions.Library.pairedTTest.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.statisticDerivation = {
    category: "statistics",
    defaultFnUnit: {
      func: "statisticDerivation",
      name: "StatisticDerivation",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [],
        "target-statistic": ["max", "min", "range", "sum", "avg", "variance", "stddev", "skewness", "kurtosis", "nrow", "num_of_value", "nan_count", "null_count"],
        "percentile-amounts": [],
        "trimmed-mean-amounts": []
      },
      display: {
        label: "Statistic Derivation",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Compute descriptive statistics by group and save the results in new columns.",
    tags: ["Statistic Derivation", "StatisticDerivation", "Statistics", "Representative", "Extraction", "Derivation", "minimum", "maximum", "summary", "average", "median", "count", "variance"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      groupby: this.renderGroupBy,
      "target-statistic": this.renderTargetStatistic,
      "percentile-amounts": this.renderPercentileAmounts,
      "trimmed-mean-amounts": this.renderTrimmedMeanAmounts
    }, this.percentileAmountsControlArray = [], this.trimmedMeanAmountsControlArray = [], this.createStatisticArray(), this.createColumnsControl(), this.createGroupByControl(), this.createTargetStatisticControl(), this.createPercentileAmountsControl(), this.createTrimmedMeanAmountsControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createTargetStatisticControl = function () {
    var t = this;
    this.$targetStatisticCheckboxContainer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>'), this.$selectAllButton = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'), this.$clearAllButton = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>'), this.createTargetStatisticCheckBox(), this.addPropertyControl("Target Statistic", function (e) {
      e.append(t.$targetStatisticCheckboxContainer), t.$targetStatisticCheckboxContainer.append(t.$selectAllButton), t.$targetStatisticCheckboxContainer.append(t.$clearAllButton), t.createButton(t.$selectAllButton, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), t.createButton(t.$clearAllButton, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var o = function o(e) {
        $(window).trigger("mousedown");
        var o = t.createTargetStatisticCommand();
        t.executeCommand(o), "percentile" != $(this).data("targetStatistic").toLowerCase() && "trimmed_mean" != $(this).data("targetStatistic").toLowerCase() || t.showOrHideAmounts(e.args.checked, $(this).data("targetStatistic").toLowerCase());
      };

      for (var r in t.$selectAllButton.on("click", function (e) {
        for (var r in t.$checkBoxes) {
          t.$checkBoxes[r].off("change", o), t.$checkBoxes[r].jqxCheckBox({
            checked: !0
          }), t.$checkBoxes[r].on("change", o), "percentile" != t.$checkBoxes[r].data("targetStatistic").toLowerCase() && "trimmed_mean" != t.$checkBoxes[r].data("targetStatistic").toLowerCase() || t.showOrHideAmounts(!0, t.$checkBoxes[r].data("targetStatistic").toLowerCase());
        }

        var n = t.createTargetStatisticCommand();
        t.executeCommand(n);
      }), t.$clearAllButton.on("click", function (e) {
        for (var r in t.$checkBoxes) {
          t.$checkBoxes[r].off("change", o), t.$checkBoxes[r].jqxCheckBox({
            checked: !1
          }), t.$checkBoxes[r].on("change", o), "percentile" != t.$checkBoxes[r].data("targetStatistic").toLowerCase() && "trimmed_mean" != t.$checkBoxes[r].data("targetStatistic").toLowerCase() || t.showOrHideAmounts(!1, t.$checkBoxes[r].data("targetStatistic").toLowerCase());
        }

        var n = t.createTargetStatisticCommand();
        t.executeCommand(n);
      }), t.$checkBoxes) {
        t.$targetStatisticCheckboxContainer.append(t.$checkBoxes[r]), t.createCheckBox(t.$checkBoxes[r], {}, "brtc-va-editors-sheet-controls-width-12"), t.$checkBoxes[r].on("change", o);
      }
    });
  }, e.prototype.createTargetStatisticCheckBox = function () {
    for (var t in this.$checkBoxes = [], this.statisticArray) {
      var e = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>');
      this.$targetStatisticCheckboxContainer.append(e), e.text(this.statisticArray[t].label), e.data("targetStatistic", this.statisticArray[t].value), this.$checkBoxes[t] = e;
    }
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderTargetStatistic = function () {
    var t = this.options.fnUnit.param["target-statistic"];
    if (void 0 !== t) for (var e in this.$checkBoxes) {
      $.inArray(this.$checkBoxes[e].data("targetStatistic"), t) > -1 ? this.$checkBoxes[e].jqxCheckBox({
        checked: !0
      }) : this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    } else for (var e in this.$checkBoxes) {
      this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createTargetStatisticCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["target-statistic"] = [], this.$checkBoxes) {
      !0 === this.$checkBoxes[o].val() && e.ref.param["target-statistic"].push(this.$checkBoxes[o].data("targetStatistic"));
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createStatisticArray = function () {
    this.statisticArray = [{
      label: "Max",
      value: "max"
    }, {
      label: "Min",
      value: "min"
    }, {
      label: "Range",
      value: "range"
    }, {
      label: "Sum",
      value: "sum"
    }, {
      label: "Average",
      value: "avg"
    }, {
      label: "Variance",
      value: "variance"
    }, {
      label: "Standard Deviation",
      value: "stddev"
    }, {
      label: "Skewness",
      value: "skewness"
    }, {
      label: "Kurtosis",
      value: "kurtosis"
    }, {
      label: "Number of row",
      value: "nrow"
    }, {
      label: "Number of value",
      value: "num_of_value"
    }, {
      label: "NaN Count",
      value: "nan_count"
    }, {
      label: "Null Count",
      value: "null_count"
    }, {
      label: "Median",
      value: "median"
    }, {
      label: "Q1",
      value: "q1"
    }, {
      label: "Q3",
      value: "q3"
    }, {
      label: "IQR",
      value: "iqr"
    }, {
      label: "Percentile",
      value: "percentile"
    }, {
      label: "Trimmed Mean",
      value: "trimmed_mean"
    }, {
      label: "Mode",
      value: "mode"
    }];
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-trimmed-mean-amounts-row").find(".brtc-va-editors-sheet-controls-propertycontrol-numberinput"),
          o = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-percentile-amounts-row").find(".brtc-va-editors-sheet-controls-propertycontrol-numberinput");
      "percentile-amounts" === this.problems[t].param && this.createValidationContent($(o[this.problems[t].paramIndex]).parent(), this.problems[t]), "trimmed-mean-amounts" === this.problems[t].param && this.createValidationContent($(e[this.problems[t].paramIndex]).parent(), this.problems[t]);
    }
  }, e.prototype.createPercentileAmountsControl = function () {
    var t = this;
    this.$percentileAmountsArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input"></div>');
    var e = this.$percentileAmountsProperty = this.addPropertyControl("Percentile Amounts", function (e) {
      e.append(t.$percentileAmountsArea);
    }, {
      mandatory: !0
    });
    this.$percentileAmountsProperty.hide();
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "percentile-amounts", "Percentile Amounts");
  }, e.prototype.renderPercentileAmounts = function () {
    var t = this.options.fnUnit.param["percentile-amounts"];
    this.percentileAmountsControlArray = [], this.$percentileAmountsArea.empty(), this.createAmountsRow(!0, !0, this.percentileAmountsControlArray, this.$percentileAmountsArea, "percentile-amounts");

    for (var e = 0; e < t.length; e++) {
      e >= 1 && this.createAmountsRow(!1, !0, this.percentileAmountsControlArray, this.$percentileAmountsArea, "percentile-amounts"), this.percentileAmountsControlArray[e].setValue(t[e]);
    }
  }, e.prototype.createTrimmedMeanAmountsControl = function () {
    var t = this;
    this.$trimmedMeanAmountsArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input"></div>');
    var e = this.$trimmedMeanAmountsProperty = this.addPropertyControl("Trimmed Mean Amounts", function (e) {
      e.append(t.$trimmedMeanAmountsArea);
    }, {
      mandatory: !0
    });
    this.$trimmedMeanAmountsProperty.hide();
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "trimmed-mean-amounts", "Trimmed Mean Amounts");
  }, e.prototype.renderTrimmedMeanAmounts = function () {
    var t = this.options.fnUnit.param["trimmed-mean-amounts"];
    this.trimmedMeanAmountsControlArray = [], this.$trimmedMeanAmountsArea.empty(), this.createAmountsRow(!0, !0, this.trimmedMeanAmountsControlArray, this.$trimmedMeanAmountsArea, "trimmed-mean-amounts");

    for (var e = 0; e < t.length; e++) {
      e >= 1 && this.createAmountsRow(!1, !0, this.trimmedMeanAmountsControlArray, this.$trimmedMeanAmountsArea, "trimmed-mean-amounts"), this.trimmedMeanAmountsControlArray[e].setValue(t[e]);
    }
  }, e.prototype.createAmountsRow = function (t, e, o, r, n) {
    var a = this,
        i = {
      numberType: "double",
      min: 0,
      max: "percentile-amounts" == n ? 1 : .5,
      minus: !1,
      placeholder: "percentile-amounts" == n ? "Enter value(0.0 <= value <= 1.0)" : "Enter value(0.0 <= value < 0.5)"
    },
        s = $('<div class="brtc-va-statistics-summary-property brtc-va-editors-sheet-controls-propertycontrol-' + n + '-row"></div>'),
        l = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"></div>'),
        c = $('<div class="brtc-va-statistics-summary-property brtc-va-editors-sheet-controls-propertycontrol-add-button"></div>'),
        p = $('<div class="brtc-va-statistics-summary-property brtc-va-editors-sheet-controls-propertycontrol-remove-button"></div>');
    s.append(l);
    var u = this.createNumericInput(l, i, "", {
      width: "90%",
      float: "left"
    });
    u.onChange(function (t) {
      var e = a.createAmountsCommand(o, n);
      a.isInputValueChanged(n, e.options.ref.param[n]) && a.executeCommand(e);
    }), t ? s.append(c) : s.append(p), o.push(u), r.append(s), e || l.jqxInput("focus"), p.click(function () {
      var t = p.parents(".brtc-va-editors-sheet-controls-propertycontrol-" + n + "-row"),
          e = t.prevAll().length;
      o.splice(e, 1), t.remove();
      var r = a.createAmountsCommand(o, n);
      a.executeCommand(r);
    }), p.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), c.click(function () {
      a.createAmountsRow(!1, !1, o, r, n);
      var t = a.createAmountsCommand(o, n);
      a.executeCommand(t);
    }), c.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.createAmountsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var n in r.ref.param[o] = [], e) {
      r.ref.param[o].push(e[n].getValue());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.showOrHideAmounts = function (t, e) {
    "percentile" == e ? t ? this.$percentileAmountsProperty.show() : this.$percentileAmountsProperty.hide() : "trimmed_mean" == e && (t ? this.$trimmedMeanAmountsProperty.show() : this.$trimmedMeanAmountsProperty.hide()), this.$contentsArea.perfectScrollbar("update");
  }, t.VA.Core.Functions.Library.statisticDerivation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_PERCENTILE = "percentile-amounts", this.PARAM_TRIMMED_MEAN = "trimmed-mean-amounts", this.PARAM_TARGET_STATISTIC = "target-statistic", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addPercentileAmountsRule(), this.addTrimmedMeanAmountsRule();
  }, e.prototype.addPercentileAmountsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e) && e.param[t.PARAM_TARGET_STATISTIC].indexOf("percentile") > -1) {
        var o = [];

        if (0 == e.param[t.PARAM_PERCENTILE].length) {
          var r = {
            errorCode: "BR-0033",
            param: t.PARAM_PERCENTILE,
            messageParam: ["Percentile Amounts"],
            paramIndex: 0
          };
          (a = t.problemFactory.createProblem(r, e)) && o.push(a);
        } else for (var n in e.param[t.PARAM_PERCENTILE]) {
          var a;
          r = {
            errorCode: "BR-0033",
            param: t.PARAM_PERCENTILE,
            messageParam: ["Percentile Amounts"],
            paramIndex: n
          };
          (a = t._checkStringIsEmpty(r, e, e.param[t.PARAM_PERCENTILE][n])) && o.push(a);
        }

        return o;
      }
    });
  }, e.prototype.addTrimmedMeanAmountsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e) && e.param[t.PARAM_TARGET_STATISTIC].indexOf("trimmed_mean") > -1) {
        var o = [];

        if (0 == e.param[t.PARAM_PERCENTILE].length) {
          var r = {
            errorCode: "BR-0033",
            param: t.PARAM_TRIMMED_MEAN,
            messageParam: ["Trimmed Mean Amounts"],
            paramIndex: 0
          };
          (a = t.problemFactory.createProblem(r, e)) && o.push(a);
        } else for (var n in e.param[t.PARAM_TRIMMED_MEAN]) {
          var a;
          r = {
            errorCode: "BR-0033",
            param: t.PARAM_TRIMMED_MEAN,
            messageParam: ["Trimmed Mean Amounts"],
            paramIndex: n
          };
          (a = t._checkStringIsEmpty(r, e, e.param[t.PARAM_TRIMMED_MEAN][n])) && o.push(a);
        }

        return o;
      }
    }), this.addRule(function (e) {
      if (t._hasSchema(e) && e.param[t.PARAM_TARGET_STATISTIC].indexOf("trimmed_mean") > -1) {
        var o = [];

        for (var r in e.param[t.PARAM_TRIMMED_MEAN]) {
          if (parseFloat(e.param[t.PARAM_TRIMMED_MEAN][r]) >= .5) {
            var n = {
              errorCode: "BR-0012",
              param: t.PARAM_TRIMMED_MEAN,
              messageParam: ["Trimmed Mean Amounts", "0.5"],
              paramIndex: r
            },
                a = this.problemFactory.createProblem(n, e);
            a && o.push(a);
          }
        }

        return o;
      }
    });
  }, t.VA.Core.Functions.Library.statisticDerivation.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.statisticSummary = {
    category: "statistics",
    defaultFnUnit: {
      func: "statisticSummary",
      name: "StatisticSummary",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [],
        "target-statistic": ["max", "min", "range", "sum", "avg", "variance", "stddev", "skewness", "kurtosis", "nrow", "num_of_value", "nan_count", "null_count"],
        "percentile-amounts": [],
        "trimmed-mean-amounts": []
      },
      display: {
        label: "Statistic Summary",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Report group-wise summary statistics for selected columns.",
    tags: ["Statistic Summary", "StatisticSummary", "Statistics", "Representative", "Summary", "summary", "statistics", "sum", "max", "min", "average", "variance", "total count"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      groupby: this.renderGroupBy,
      "target-statistic": this.renderTargetStatistic,
      "percentile-amounts": this.renderPercentileAmounts,
      "trimmed-mean-amounts": this.renderTrimmedMeanAmounts
    }, this.percentileAmountsControlArray = [], this.trimmedMeanAmountsControlArray = [], this.createStatisticArray(), this.createColumnsControl(), this.createGroupByControl(), this.createTargetStatisticControl(), this.createPercentileAmountsControl(), this.createTrimmedMeanAmountsControl();
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
      var e = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-trimmed-mean-amounts-row").find(".brtc-va-editors-sheet-controls-propertycontrol-numberinput"),
          o = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-percentile-amounts-row").find(".brtc-va-editors-sheet-controls-propertycontrol-numberinput");
      "percentile-amounts" === this.problems[t].param && this.createValidationContent($(o[this.problems[t].paramIndex]).parent(), this.problems[t]), "trimmed-mean-amounts" === this.problems[t].param && this.createValidationContent($(e[this.problems[t].paramIndex]).parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createTargetStatisticControl = function () {
    var t = this;
    this.$targetStatisticCheckboxContainer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>'), this.$selectAllButton = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'), this.$clearAllButton = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>'), this.createTargetStatisticCheckBox(), this.addPropertyControl("Target Statistic", function (e) {
      e.append(t.$targetStatisticCheckboxContainer), t.$targetStatisticCheckboxContainer.append(t.$selectAllButton), t.$targetStatisticCheckboxContainer.append(t.$clearAllButton), t.createButton(t.$selectAllButton, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), t.createButton(t.$clearAllButton, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var o = function o(e) {
        $(window).trigger("mousedown");
        var o = t.createTargetStatisticCommand();
        t.executeCommand(o), "percentile" != $(this).data("targetStatistic").toLowerCase() && "trimmed_mean" != $(this).data("targetStatistic").toLowerCase() || t.showOrHideAmounts(e.args.checked, $(this).data("targetStatistic").toLowerCase());
      };

      for (var r in t.$selectAllButton.on("click", function (e) {
        for (var r in t.$checkBoxes) {
          t.$checkBoxes[r].off("change", o), t.$checkBoxes[r].jqxCheckBox({
            checked: !0
          }), t.$checkBoxes[r].on("change", o), "percentile" != t.$checkBoxes[r].data("targetStatistic").toLowerCase() && "trimmed_mean" != t.$checkBoxes[r].data("targetStatistic").toLowerCase() || t.showOrHideAmounts(!0, t.$checkBoxes[r].data("targetStatistic").toLowerCase());
        }

        var n = t.createTargetStatisticCommand();
        t.executeCommand(n);
      }), t.$clearAllButton.on("click", function (e) {
        for (var r in t.$checkBoxes) {
          t.$checkBoxes[r].off("change", o), t.$checkBoxes[r].jqxCheckBox({
            checked: !1
          }), t.$checkBoxes[r].on("change", o), "percentile" != t.$checkBoxes[r].data("targetStatistic").toLowerCase() && "trimmed_mean" != t.$checkBoxes[r].data("targetStatistic").toLowerCase() || t.showOrHideAmounts(!1, t.$checkBoxes[r].data("targetStatistic").toLowerCase());
        }

        var n = t.createTargetStatisticCommand();
        t.executeCommand(n);
      }), t.$checkBoxes) {
        t.$targetStatisticCheckboxContainer.append(t.$checkBoxes[r]), t.createCheckBox(t.$checkBoxes[r], {}, "brtc-va-editors-sheet-controls-width-12"), t.$checkBoxes[r].on("change", o);
      }
    });
  }, e.prototype.createTargetStatisticCheckBox = function () {
    for (var t in this.$checkBoxes = [], this.statisticArray) {
      var e = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>');
      this.$targetStatisticCheckboxContainer.append(e), e.text(this.statisticArray[t].label), e.data("targetStatistic", this.statisticArray[t].value), this.$checkBoxes[t] = e;
    }
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderTargetStatistic = function () {
    var t = this.options.fnUnit.param["target-statistic"];
    if (void 0 !== t) for (var e in this.$checkBoxes) {
      $.inArray(this.$checkBoxes[e].data("targetStatistic"), t) > -1 ? this.$checkBoxes[e].jqxCheckBox({
        checked: !0
      }) : this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    } else for (var e in this.$checkBoxes) {
      this.$checkBoxes[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createTargetStatisticCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param["target-statistic"] = [], this.$checkBoxes) {
      !0 === this.$checkBoxes[o].val() && e.ref.param["target-statistic"].push(this.$checkBoxes[o].data("targetStatistic"));
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createStatisticArray = function () {
    this.statisticArray = [{
      label: "Max",
      value: "max"
    }, {
      label: "Min",
      value: "min"
    }, {
      label: "Range",
      value: "range"
    }, {
      label: "Sum",
      value: "sum"
    }, {
      label: "Average",
      value: "avg"
    }, {
      label: "Variance",
      value: "variance"
    }, {
      label: "Standard Deviation",
      value: "stddev"
    }, {
      label: "Skewness",
      value: "skewness"
    }, {
      label: "Kurtosis",
      value: "kurtosis"
    }, {
      label: "Number of row",
      value: "nrow"
    }, {
      label: "Number of value",
      value: "num_of_value"
    }, {
      label: "NaN Count",
      value: "nan_count"
    }, {
      label: "Null Count",
      value: "null_count"
    }, {
      label: "Median",
      value: "median"
    }, {
      label: "Q1",
      value: "q1"
    }, {
      label: "Q3",
      value: "q3"
    }, {
      label: "IQR",
      value: "iqr"
    }, {
      label: "Percentile",
      value: "percentile"
    }, {
      label: "Trimmed Mean",
      value: "trimmed_mean"
    }, {
      label: "Mode",
      value: "mode"
    }];
  }, e.prototype.createPercentileAmountsControl = function () {
    var t = this;
    this.$percentileAmountsArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input"></div>'), this.$percentileAmountsProperty = this.addPropertyControl("Percentile Amounts", function (e) {
      e.append(t.$percentileAmountsArea);
    }, {
      mandatory: !0
    }), this.$percentileAmountsProperty.hide();
  }, e.prototype.renderPercentileAmounts = function () {
    var t = this.options.fnUnit.param["percentile-amounts"];
    this.percentileAmountsControlArray = [], this.$percentileAmountsArea.empty(), this.createAmountsRow(!0, !0, this.percentileAmountsControlArray, this.$percentileAmountsArea, "percentile-amounts");

    for (var e = 0; e < t.length; e++) {
      e >= 1 && this.createAmountsRow(!1, !0, this.percentileAmountsControlArray, this.$percentileAmountsArea, "percentile-amounts"), this.percentileAmountsControlArray[e].setValue(t[e]);
    }
  }, e.prototype.createTrimmedMeanAmountsControl = function () {
    var t = this;
    this.$trimmedMeanAmountsArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input"></div>'), this.$trimmedMeanAmountsProperty = this.addPropertyControl("Trimmed Mean Amounts", function (e) {
      e.append(t.$trimmedMeanAmountsArea);
    }, {
      mandatory: !0
    }), this.$trimmedMeanAmountsProperty.hide();
  }, e.prototype.renderTrimmedMeanAmounts = function () {
    var t = this.options.fnUnit.param["trimmed-mean-amounts"];
    this.trimmedMeanAmountsControlArray = [], this.$trimmedMeanAmountsArea.empty(), this.createAmountsRow(!0, !0, this.trimmedMeanAmountsControlArray, this.$trimmedMeanAmountsArea, "trimmed-mean-amounts");

    for (var e = 0; e < t.length; e++) {
      e >= 1 && this.createAmountsRow(!1, !0, this.trimmedMeanAmountsControlArray, this.$trimmedMeanAmountsArea, "trimmed-mean-amounts"), this.trimmedMeanAmountsControlArray[e].setValue(t[e]);
    }
  }, e.prototype.createAmountsRow = function (t, e, o, r, n) {
    var a = this,
        i = {
      numberType: "double",
      min: 0,
      max: "percentile-amounts" == n ? 1 : .5,
      minus: !1,
      placeholder: "percentile-amounts" == n ? "Enter value(0.0 <= value <= 1.0)" : "Enter value(0.0 <= value < 0.5)"
    },
        s = $('<div class="brtc-va-statistics-summary-property brtc-va-editors-sheet-controls-propertycontrol-' + n + '-row"></div>'),
        l = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"></div>'),
        c = $('<div class="brtc-va-statistics-summary-property brtc-va-editors-sheet-controls-propertycontrol-add-button"></div>'),
        p = $('<div class="brtc-va-statistics-summary-property brtc-va-editors-sheet-controls-propertycontrol-remove-button"></div>');
    s.append(l);
    var u = this.createNumericInput(l, i, "", {
      width: "90%",
      float: "left"
    });
    u.onChange(function (t) {
      var e = a.createAmountsCommand(o, n);
      a.isInputValueChanged(n, e.options.ref.param[n]) && a.executeCommand(e);
    }), t ? s.append(c) : s.append(p), o.push(u), r.append(s), e || l.jqxInput("focus"), p.click(function () {
      var t = p.parents(".brtc-va-editors-sheet-controls-propertycontrol-" + n + "-row"),
          e = t.prevAll().length;
      o.splice(e, 1), t.remove();
      var r = a.createAmountsCommand(o, n);
      a.executeCommand(r);
    }), p.hover(function () {
      $(this).css({
        color: "#86BFA0"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    }), c.click(function () {
      a.createAmountsRow(!1, !1, o, r, n);
      var t = a.createAmountsCommand(o, n);
      a.executeCommand(t);
    }), c.hover(function () {
      $(this).css({
        color: "#429366"
      });
    }, function () {
      $(this).css({
        color: ""
      });
    });
  }, e.prototype.createAmountsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var n in r.ref.param[o] = [], e) {
      r.ref.param[o].push(e[n].getValue());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.showOrHideAmounts = function (t, e) {
    "percentile" == e ? t ? this.$percentileAmountsProperty.show() : this.$percentileAmountsProperty.hide() : "trimmed_mean" == e && (t ? this.$trimmedMeanAmountsProperty.show() : this.$trimmedMeanAmountsProperty.hide()), this.$contentsArea.perfectScrollbar("update");
  }, t.VA.Core.Functions.Library.statisticSummary.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_PERCENTILE = "percentile-amounts", this.PARAM_TRIMMED_MEAN = "trimmed-mean-amounts", this.PARAM_TARGET_STATISTIC = "target-statistic", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addBaseGroupByRule("columns", "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    }), this.addPercentileAmountsRule(), this.addTrimmedMeanAmountsRule();
  }, e.prototype.addPercentileAmountsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e) && e.param[t.PARAM_TARGET_STATISTIC].indexOf("percentile") > -1) {
        var o = [];

        if (0 == e.param[t.PARAM_PERCENTILE].length) {
          var r = {
            errorCode: "BR-0033",
            param: t.PARAM_PERCENTILE,
            messageParam: ["Percentile Amounts"],
            paramIndex: 0
          };
          (a = t.problemFactory.createProblem(r, e)) && o.push(a);
        } else for (var n in e.param[t.PARAM_PERCENTILE]) {
          var a;
          r = {
            errorCode: "BR-0033",
            param: t.PARAM_PERCENTILE,
            messageParam: ["Percentile Amounts"],
            paramIndex: n
          };
          (a = t._checkStringIsEmpty(r, e, e.param[t.PARAM_PERCENTILE][n])) && o.push(a);
        }

        return o;
      }
    });
  }, e.prototype.addTrimmedMeanAmountsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e) && e.param[t.PARAM_TARGET_STATISTIC].indexOf("trimmed_mean") > -1) {
        var o = [];

        if (0 == e.param[t.PARAM_PERCENTILE].length) {
          var r = {
            errorCode: "BR-0033",
            param: t.PARAM_TRIMMED_MEAN,
            messageParam: ["Trimmed Mean Amounts"],
            paramIndex: 0
          };
          (a = t.problemFactory.createProblem(r, e)) && o.push(a);
        } else for (var n in e.param[t.PARAM_TRIMMED_MEAN]) {
          var a;
          r = {
            errorCode: "BR-0033",
            param: t.PARAM_TRIMMED_MEAN,
            messageParam: ["Trimmed Mean Amounts"],
            paramIndex: n
          };
          (a = t._checkStringIsEmpty(r, e, e.param[t.PARAM_TRIMMED_MEAN][n])) && o.push(a);
        }

        return o;
      }
    }), this.addRule(function (e) {
      if (t._hasSchema(e) && e.param[t.PARAM_TARGET_STATISTIC].indexOf("trimmed_mean") > -1) {
        var o = [];

        for (var r in e.param[t.PARAM_TRIMMED_MEAN]) {
          if (parseFloat(e.param[t.PARAM_TRIMMED_MEAN][r]) >= .5) {
            var n = {
              errorCode: "BR-0012",
              param: t.PARAM_TRIMMED_MEAN,
              messageParam: ["Trimmed Mean Amounts", "0.5"],
              paramIndex: r
            },
                a = t.problemFactory.createProblem(n, e);
            a && o.push(a);
          }
        }

        return o;
      }
    });
  }, t.VA.Core.Functions.Library.statisticSummary.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.stringSummary = {
    category: "statistics",
    defaultFnUnit: {
      func: "stringSummary",
      name: "StringSummary",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [[]]
      },
      display: {
        label: "String Summary",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function reports group-wise summary statistics for selected String columns.",
    mandatory: [],
    tags: ["String Summary", "StringSummary"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createGroupbyControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns[0];
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby[0];
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t,
        e = [];

    for (var o in t = this.getColumnsOfInTable(0, [])) {
      var r = t[o].internalType.toLowerCase();
      ["string", "int", "double", "long", "boolean"].indexOf(r) > -1 && e.push(t[o]);
    }

    this.controls.columns.setItems(e), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.stringSummary.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule("columns", "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    });
  }, t.VA.Core.Functions.Library.stringSummary.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.trimmedMeansOneWayTest = {
    category: "statistics",
    defaultFnUnit: {
      func: "trimmedMeansOneWayTest",
      name: "TrimmedMeansOneWayTest",
      inData: [],
      outData: [],
      param: {
        "response-cols": [],
        "factor-col": "",
        "trim-fraction": "",
        "group-by": []
      },
      display: {
        label: "Robust ANOVA (Trimmed Mean One-Way)",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Computes a one-way ANOVA on trimmed means. Homoscedasticity assumption not required.",
    mandatory: [],
    tags: ["robust anova one way trimmed mean"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "response-cols": this.renderResponseColsControl,
      "factor-col": this.renderFactorColControl,
      "trim-fraction": this.renderTrimFractionControl,
      "group-by": this.renderGroupByControl
    }, this.$elements = {}, this.controls = {}, this.createResponseColsControl(), this.createFactorColControl(), this.createTrimFractionControl(), this.createGroupByControl();
  }, e.prototype.createResponseColsControl = function (t) {
    var e = this;
    e.$elements["response-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Response Columns", function (t) {
      t.append(e.$elements["response-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("response-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["response-cols"] = e.createColumnList(e.$elements["response-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderResponseColsControl = function (t) {
    var e = this.options.fnUnit.param["response-cols"];
    this.controls["response-cols"].setSelectedItems(e);
  }, e.prototype.createFactorColControl = function (t) {
    var e = this;
    e.$elements["factor-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Factor Column", function (t) {
      t.append(e.$elements["factor-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("factor-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["factor-col"] = e.createColumnList(e.$elements["factor-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFactorColControl = function (t) {
    var e = this.options.fnUnit.param["factor-col"];
    this.controls["factor-col"].setSelectedItems([e]);
  }, e.prototype.createTrimFractionControl = function (t) {
    var e = this;
    e.$elements["trim-fraction"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.addPropertyControl("Trim Fraction", function (t) {
      t.append(e.$elements["trim-fraction"]);
      e.controls["trim-fraction"] = e.createInput(e.$elements["trim-fraction"], {
        placeHolder: "0.2"
      }), e.$elements["trim-fraction"].on("change", function (t) {
        if (e.isInputValueChanged("trim-fraction", $(this).val())) {
          var o = e.createSetParameterValueCommand("trim-fraction", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderTrimFractionControl = function (t) {
    var e = this.options.fnUnit.param["trim-fraction"];
    this.$elements["trim-fraction"].val(e || "");
  }, e.prototype.createGroupByControl = function (t) {
    var e = this;
    e.$elements["group-by"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements["group-by"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("group-by", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["group-by"] = e.createColumnList(e.$elements["group-by"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupByControl = function (t) {
    var e = this.options.fnUnit.param["group-by"];
    this.controls["group-by"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["Double", "Integer", "Long"]), this.controls["response-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["String"]), this.controls["factor-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["group-by"].setItems(t);
  }, t.VA.Core.Functions.Library.trimmedMeansOneWayTest.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addResponseColsRule(), this.addFactorColRule();
  }, o.prototype.addResponseColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "response-cols", e.param["response-cols"], "Response Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "response-cols", e.param["response-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "response-cols", e.param["response-cols"], ["Double", "Integer", "Long"]);
    });
  }, o.prototype.addFactorColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "factor-col", e.param["factor-col"], "Factor Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "factor-col", e.param["factor-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "factor-col", e.param["factor-col"], ["String"]);
    });
  }, t.VA.Core.Functions.Library.trimmedMeansOneWayTest.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.ttest = {
    category: "statistics",
    defaultFnUnit: {
      func: "ttest",
      name: "TTest",
      inData: [],
      outData: [],
      param: {
        column: [[]],
        target: [],
        torder: "asc",
        excolumn: "",
        extarget: "",
        groupby: "",
        differ: "0",
        alter: "twosided",
        clevel: "0.95",
        vequal: "false"
      },
      display: {
        label: "T-Test",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Two sample T-test on vectors of data",
    tags: ["ttest", "T-Test"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationControls = {}, this.render = {
      column: this.renderColumn,
      target: this.renderTarget,
      torder: this.renderTargetOrder,
      groupby: this.renderGroupby,
      differ: this.renderDiffer,
      alter: this.renderAlter,
      clevel: this.renderCLevel,
      vequal: this.renderVEqual
    }, this.createColumnContainerControl(), this.createTargetControl(), this.createTargetOrderControl(), this.createGroupbyControl(), this.createDifferControl(), this.createAlterControl(), this.createCLevelControl(), this.createVEqualControl();
  }, e.prototype.renderColumn = function () {
    var t = this.options.fnUnit.param.column[0],
        e = this.options.fnUnit.param.target;
    if (this.addedColumnControls.splice(1, this.addedColumnControls.length), this.validationControls.column.splice(1, this.validationControls.column.length), this.$columnContainer.find(".non-mandatory").remove(), e.length > 0) this.addedColumnControls[0].setSelectedItems(t);else {
      0 === t.length && this.addedColumnControls[0].setSelectedItems([]);

      for (var o = 0; o < t.length; o++) {
        var r = t[o].split("~"),
            n = [];

        for (var a in r) {
          n.push(r[a]);
        }

        0 != o && (this.createColumnControl(this.$columnContainer), this.fillLastColumnControl()), this.addedColumnControls[o].setSelectedItems(n);
      }

      this.$addButton.detach(), this.$addButton.appendTo(this.$columnContainer);
    }
  }, e.prototype.renderTarget = function () {
    var t = this.options.fnUnit.param;
    this.targetControl.setSelectedItems(t.target), this.setVisuableControlsAboutTarget();
  }, e.prototype.renderTargetOrder = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t.torder && this.isTargetExist && this.$targetOrder[t.torder] ? this.$targetOrder[t.torder].jqxRadioButton("check") : this.$targetOrder.asc.jqxRadioButton("check");
  }, e.prototype.renderGroupby = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t.groupby && this.isTargetExist ? this.groupbyControl.setSelectedItems([t.groupby]) : this.groupbyControl.setSelectedItems([]);
  }, e.prototype.renderDiffer = function () {
    var t = this.options.fnUnit.param;
    this.$differControl.setValue(t.differ || "");
  }, e.prototype.renderAlter = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t.alter ? this.$alterControl[t.alter].jqxRadioButton("check") : this.$alterControl.twosided.jqxRadioButton("check");
  }, e.prototype.renderCLevel = function () {
    var t = this.options.fnUnit.param;
    this.$cLevelControl.setValue(t.clevel || "");
  }, e.prototype.renderVEqual = function () {
    var t = this.options.fnUnit.param;
    void 0 !== t.vequal ? this.$vEqualControl[t.vequal].jqxRadioButton("check") : this.$vEqualControl.false.jqxRadioButton("check");
  }, e.prototype.createColumnContainerControl = function () {
    this.$columnContainer = $('<div class="brtc-va-editors-sheet-panels-properties-column-container"></div>'), this.addedColumnControls = [], this.validationControls.column = [], this.addPropertyControl("X Columns", function (t) {
      this.createColumnControl(this.$columnContainer, !0), t.append(this.$columnContainer);
    }, {
      mandatory: !0
    }), this.createAddButton();
  }, e.prototype.createColumnControl = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-panels-properties-column"></div>'),
        n = $('<div class="brtc-va-editors-sheet-panels-properties-addedcolumn" style="margin-bottom: 5px;" ></div>'),
        a = $('<div class="brtc-va-editors-sheet-panels-properties-column-innercontainer"></div>');
    r.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), r.attr("index", this.addedColumnControls.length), r.addClass(".brtc-va-editors-sheet-controls-propertycontrol-deck"), e || a.addClass("non-mandatory"), r.append(n);
    var i = this.createColumnList(n, {
      maxRowCount: 2,
      multiple: !0,
      showOpener: "click",
      changed: function changed(t, e) {
        o.executeCommand(o.createOnColumnsCommand()), o.checkColumnControlCount();
      }
    }, "brtc-va-editors-sheet-controls-width-12"),
        s = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
    s.click(function () {
      var t = o.validationControls.column.indexOf(a);
      o.validationControls.column.splice(t, 1), $(this).parent().remove(), o.addedColumnControls[t].getSelectedItems()[0], o.addedColumnControls = $.grep(o.addedColumnControls, function (t) {
        return !Object.is(t, i);
      }), o.checkColumnControlCount(), o.executeCommand(o.createOnColumnsCommand());
    }), e || r.append(s), a.append(r), t.append(a), this.addedColumnControls.push(i), this.validationControls.column.push(a);
  }, e.prototype.createAddButton = function () {
    var e = this;
    this.$addButton = $('<input class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-add-key-condition" type="button" value="+ Add Column"/>'), this.$columnContainer.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.$addButton.detach(), e.createColumnControl(e.$columnContainer), e.fillControlValues(!0), e.$columnContainer.append(e.$addButton), e.checkColumnControlCount(), e.executeCommand(e.createOnColumnsCommand());
    });
  }, e.prototype.createTargetControl = function () {
    var t = this;
    this.targetControl = {}, this.$target = this.createCommonColumnsControl("targetControl", "Y Columns"), this.targetControl.onChange(function () {
      var e = t.createTargetColumnCommand();
      t.executeCommand(e), t.setVisuableControlsAboutTarget(), t.renderTargetOrder(), t.renderGroupby();
    });
  }, e.prototype.createTargetOrderControl = function () {
    var t = this;
    this.$targetOrder = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Target Order", function (e) {
      e.append(t.$targetOrder), t.createRadioButtonControl(t.$targetOrder, "asc", "torder"), t.createRadioButtonControl(t.$targetOrder, "desc", "torder");
    }, void 0);
  }, e.prototype.createGroupbyControl = function () {
    var t = this;
    this.groupbyControl = {}, this.$groupby = this.createCommonColumnsControl("groupbyControl", "Group By", "", {
      multiple: !1,
      maxRowCount: 1
    }), this.groupbyControl.onChange(function () {
      var e = t.createCommonColumnCommand("groupby", t.groupbyControl, "");
      t.executeCommand(e);
    });
  }, e.prototype.createDifferControl = function () {
    var t = this;
    this.$differControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberInput"/>'), this.addPropertyControl("Mean Difference", function (e) {
      e.append(t.$differControl);
      var o = {
        numberType: "double",
        min: 0,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      };
      t.$differControl = t.createNumericInput(t.$differControl, o), t.$differControl.onChange(function (e) {
        var o = t.createCommonCommand("differ", e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createAlterControl = function () {
    var t = this;
    this.$alterControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Alternative", function (e) {
      e.append(t.$alterControl), t.createRadioButtonControl(t.$alterControl, "greater", "alter"), t.createRadioButtonControl(t.$alterControl, "less", "alter"), t.createRadioButtonControl(t.$alterControl, "twosided", "alter");
    }, void 0);
  }, e.prototype.createCLevelControl = function () {
    var t = this;
    this.$cLevelControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberInput"/>'), this.addPropertyControl("Confidence Level", function (e) {
      e.append(t.$cLevelControl);
      t.$cLevelControl = t.createNumericInput(t.$cLevelControl, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1,
        placeholder: "Enter value"
      }), t.$cLevelControl.onChange(function (e) {
        var o = t.createCommonCommand("clevel", e);
        t.executeCommand(o);
      });
    });
  }, e.prototype.createVEqualControl = function () {
    var t = this;
    this.$vEqualControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Variance Equal", function (e) {
      e.append(t.$vEqualControl), t.createRadioButtonControl(t.$vEqualControl, "true", "vequal"), t.createRadioButtonControl(t.$vEqualControl, "false", "vequal");
    }, void 0);
  }, e.prototype.createCommonColumnsControl = function (t, e, o, r) {
    var n = this,
        a = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(a);
      n[t] = n.createColumnList(a, r || {
        rowCount: 1,
        multiple: !0
      });
    }, "Columns" == e ? {
      mandatory: !0
    } : {}, o), a;
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value"),
          n = r.createCommonCommand(o, e);
      r.executeCommand(n);
    });
  }, e.prototype.createOnColumnsCommand = function () {
    var e = this.makeColumnParam();
    this.addedColumnControls.length > 1 && (this.targetControl.setSelectedItems([]), this.groupbyControl.setSelectedItems([]));
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          column: e
        }
      }
    };
    return this.isTargetExist || (o.ref.param.target = [], o.ref.param.groupby = "", o.ref.param.torder = ""), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.column = [[]];
    var o = this.columnsControl.getSelectedItems();
    if (o) for (var r in o) {
      e.ref.param.column[0].push(o[r]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createTargetColumnCommand = function () {
    var e = this.targetControl.getSelectedItems();
    e.length > 0 ? this.isTargetExist = !0 : this.isTargetExist = !1;
    var o = this.makeColumnParam(),
        r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          column: o,
          target: e
        }
      }
    };
    return this.isTargetExist ? r.ref.param.torder = "" === this.options.fnUnit.param.torder ? "asc" : this.options.fnUnit.param.torder : (r.ref.param.groupby = "", r.ref.param.torder = ""), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && Array.isArray(r)) {
      if (Array.isArray(r[0])) for (var i in a) {
        n.ref.param[e][0].push(a[i]);
      } else for (var i in a) {
        n.ref.param[e].push(a[i]);
      }
    } else a && "string" == typeof r && (n.ref.param[e] = a[0] || "");
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.checkColumnControlCount = function () {
    this.addedColumnControls.length > 1 ? (this.$target.closest(".brtc-va-editors-sheet-controls-propertycontrol").hide(), this.$targetOrder.closest(".brtc-va-editors-sheet-controls-propertycontrol").hide(), this.$groupby.closest(".brtc-va-editors-sheet-controls-propertycontrol").hide(), this.isTargetExist = !1) : (this.$target.closest(".brtc-va-editors-sheet-controls-propertycontrol").show(), this.targetControl.getSelectedItems().length > 0 || this.groupbyControl.getSelectedItems().length > 0 ? (this.isTargetExist = !0, this.$targetOrder.closest(".brtc-va-editors-sheet-controls-propertycontrol").show(), this.$groupby.closest(".brtc-va-editors-sheet-controls-propertycontrol").show()) : this.isTargetExist = !1);
  }, e.prototype.setVisuableControlsAboutTarget = function () {
    this.options.fnUnit.param.target.length > 0 ? (this.$targetOrder.closest(".brtc-va-editors-sheet-controls-propertycontrol").show(), this.$groupby.closest(".brtc-va-editors-sheet-controls-propertycontrol").show(), this.isTargetExist = !0) : (this.$targetOrder.closest(".brtc-va-editors-sheet-controls-propertycontrol").hide(), this.$groupby.closest(".brtc-va-editors-sheet-controls-propertycontrol").hide(), this.isTargetExist = !1);
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = [],
        o = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];

    for (var r in $.each(o, function (o, r) {
      "Double" !== r.internalType && "Float" !== r.internalType && "Decimal" !== r.internalType || t.push(r), "string" === r.type && e.push(r);
    }), this.addedColumnControls) {
      this.addedColumnControls[r].setItems(t);
    }

    this.targetControl.setItems(e), this.groupbyControl.setItems(e), this.columnData = t;
  }, e.prototype.fillLastColumnControl = function () {
    var t = this.addedColumnControls.length - 1;
    this.addedColumnControls[t].setItems(this.columnData);
  }, e.prototype.makeColumnParam = function () {
    var t = [];
    if (this.isTargetExist) t.push(this.addedColumnControls[0].getSelectedItems());else for (var e in t = [[]], this.addedColumnControls) {
      t[0].push(this.getSelectedItem(this.addedColumnControls[e]));
    }
    return t;
  }, e.prototype.getSelectedItem = function (t) {
    var e = "",
        o = t.getSelectedItems();

    for (var r in o) {
      r > 0 && (e += "~"), e += o[r];
    }

    return e;
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if ("column" === this.problems[t].param) {
        var e = this.$columnContainer.find(".brtc-va-editors-sheet-controls-columnlist");
        this.problems[t].paramIndex >= 0 && this.createValidationContent($(e[parseInt(this.problems[t].paramIndex)]), this.problems[t]);
      }
    }
  }, t.VA.Core.Functions.Library.ttest.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "column", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (this._hasSchema(e)) {
        var o,
            r,
            n = [];
        if (0 === e.param[t.PARAM_COLUMNS][0].length) o = t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns", 0), n.push(o);else if (e.param[t.PARAM_COLUMNS][0].length > 1) {
          for (var a in e.param[t.PARAM_COLUMNS][0]) {
            if (2 !== (r = e.param[t.PARAM_COLUMNS][0][a].split("~")).length) {
              var i = [];

              for (var s in r) {
                o = t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, 0 === r.length ? t.PARAM_COLUMNS : r[s], "Columns", a), n.push(o), o && i.push(o);
              }
            }
          }
        } else for (var a in e.param[t.PARAM_COLUMNS][0]) {
          for (var s in r = e.param[t.PARAM_COLUMNS][0][a].split("~")) {
            n.push(t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, r[s], "Columns", a));
          }
        }
        return n;
      }
    });
  }, e = e, t.VA.Core.Functions.Library.ttest.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.twoSampleTTestForStacked = {
    category: "statistics",
    defaultFnUnit: {
      func: "twoSampleTTestForStacked",
      name: "TwoSampleTTestForStacked",
      inData: [],
      outData: [],
      param: {
        "feature-cols": [],
        "label-col": "",
        alternatives: ["greater", "less", "two_sided"],
        "confidence-level": "",
        first: "",
        second: "",
        mu: "",
        "equal-variances": "auto",
        groupby: []
      },
      display: {
        label: "Two Sample T Test For Stacked Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function conduct the two sampled T-test for stacked dataset.",
    mandatory: ["alternatives"],
    tags: ["TwoSampleTTestForStackedData", "ttest", "t test", "mean", "equal", "two sample", "two-sample"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl,
      "label-col": this.renderLabelColControl,
      alternatives: this.renderAlternativesControl,
      "confidence-level": this.renderConfidenceLevelControl,
      first: this.renderFirstControl,
      second: this.renderSecondControl,
      mu: this.renderMuControl,
      "equal-variances": this.renderEqualVariancesControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl(), this.createLabelColControl(), this.createAlternativesControl(), this.createConfidenceLevelControl(), this.createFirstControl(), this.createSecondControl(), this.createMuControl(), this.createEqualVariancesControl(), this.createGroupbyControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Response Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.createLabelColControl = function (t) {
    var e = this;
    e.$elements["label-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Factor Column", function (t) {
      t.append(e.$elements["label-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["label-col"] = e.createColumnList(e.$elements["label-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderLabelColControl = function (t) {
    var e = this.options.fnUnit.param["label-col"];
    this.controls["label-col"].setSelectedItems([e]);
  }, e.prototype.createAlternativesControl = function (t) {
    var e = this;
    e.$elements.alternatives = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
    var o = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>'),
        r = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');
    e.$elements.alternatives.append(o), e.$elements.alternatives.append(r), e.addPropertyControl("Alternatives", function (t) {
      t.append(e.$elements.alternatives), e.createButton(o, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6"), e.createButton(r, {
        height: 23
      }, "brtc-va-editors-sheet-controls-width-6");

      var n,
          a = [{
        label: "Greater",
        value: "greater",
        default: !0
      }, {
        label: "Less",
        value: "less",
        default: !0
      }, {
        label: "Two Sided",
        value: "two_sided",
        default: !0
      }],
          i = function i() {
        $(window).trigger("mousedown");
        var t = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, !0 === e.$elements[n].val() && t.push(e.$elements[n].data("tag"));
        }

        var r = e.createSetParameterValueCommand("alternatives", t);
        e.executeCommand(r);
      };

      for (var s in a) {
        n = "alternatives." + a[s].value, e.$elements[n] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>'), e.$elements[n].text(a[s].label), e.$elements[n].data("tag", a[s].value), e.$elements.alternatives.append(e.$elements[n]), e.controls[n] = e.createCheckBox(e.$elements[n], {}, "brtc-va-editors-sheet-controls-width-12"), e.$elements[n].on("change", i);
      }

      o.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !0
          }), e.$elements[n].on("change", i);
        }

        var r = [];

        for (var o in a) {
          n = "alternatives." + a[o].value, r.push(e.$elements[n].data("tag"));
        }

        var s = e.createSetParameterValueCommand("alternatives", r);
        e.executeCommand(s);
      }), r.on("click", function (t) {
        for (var o in a) {
          n = "alternatives." + a[o].value, e.$elements[n].off("change", i), e.$elements[n].jqxCheckBox({
            checked: !1
          }), e.$elements[n].on("change", i);
        }

        var r = e.createSetParameterValueCommand("alternatives", []);
        e.executeCommand(r);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderAlternativesControl = function (t) {
    var e,
        o = this.options.fnUnit.param.alternatives,
        r = [{
      label: "Greater",
      value: "greater",
      default: !0
    }, {
      label: "Less",
      value: "less",
      default: !0
    }, {
      label: "Two Sided",
      value: "two_sided",
      default: !0
    }];

    for (var n in r) {
      e = "alternatives." + r[n].value, $.inArray(this.$elements[e].data("tag"), o) > -1 ? this.$elements[e].jqxCheckBox({
        checked: !0
      }) : this.$elements[e].jqxCheckBox({
        checked: !1
      });
    }
  }, e.prototype.createConfidenceLevelControl = function (e) {
    var o = this;
    o.$elements["confidence-level"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Confidence Level", function (e) {
      e.append(o.$elements["confidence-level"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("0.95 (0 <= value <= 1)"),
        numberType: "double"
      };
      o.controls["confidence-level"] = o.createNumericInput(o.$elements["confidence-level"], r), o.controls["confidence-level"].onChange(function () {
        var t = o.createSetParameterValueCommand("confidence-level", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "confidence-level", "Confidence Level");
  }, e.prototype.renderConfidenceLevelControl = function (t) {
    var e = this.options.fnUnit.param["confidence-level"];
    this.controls["confidence-level"].setValue(e || "");
  }, e.prototype.createFirstControl = function (t) {
    var e = this;
    e.$elements.first = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("First", function (t) {
      t.append(e.$elements.first);
      e.controls.first = e.createInput(e.$elements.first, {}), e.$elements.first.on("change", function (t) {
        if (e.isInputValueChanged("first", $(this).val())) {
          var o = e.createSetParameterValueCommand("first", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "first", "First");
  }, e.prototype.renderFirstControl = function (t) {
    var e = this.options.fnUnit.param.first;
    this.$elements.first.val(e || "");
  }, e.prototype.createSecondControl = function (t) {
    var e = this;
    e.$elements.second = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Second", function (t) {
      t.append(e.$elements.second);
      e.controls.second = e.createInput(e.$elements.second, {}), e.$elements.second.on("change", function (t) {
        if (e.isInputValueChanged("second", $(this).val())) {
          var o = e.createSetParameterValueCommand("second", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "second", "Second");
  }, e.prototype.renderSecondControl = function (t) {
    var e = this.options.fnUnit.param.second;
    this.$elements.second.val(e || "");
  }, e.prototype.createMuControl = function (t) {
    var e = this;
    e.$elements.mu = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = e.addPropertyControl("Hypothesized Difference", function (t) {
      t.append(e.$elements.mu);
      e.controls.mu = e.createNumericInput(e.$elements.mu, {
        placeholder: "0",
        numberType: "double"
      }), e.controls.mu.onChange(function () {
        var t = e.createSetParameterValueCommand("mu", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "mu", "Hypothesized Difference");
  }, e.prototype.renderMuControl = function (t) {
    var e = this.options.fnUnit.param.mu;
    this.controls.mu.setValue(e || "");
  }, e.prototype.createEqualVariancesControl = function (t) {
    var e = this;
    e.$elements["equal-variances.auto"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Auto</div>'), e.$elements["equal-variances.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["equal-variances.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = e.addPropertyControl("Assume Equal Variances", function (t) {
      t.append(e.$elements["equal-variances.auto"]), e.controls["equal-variances.auto"] = e.createRadioButton(e.$elements["equal-variances.auto"], {
        width: "undefined",
        groupName: "equal-variances",
        checked: !0
      }), e.$elements["equal-variances.auto"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("equal-variances", "auto");
        e.executeCommand(o);
      }), t.append(e.$elements["equal-variances.true"]), e.controls["equal-variances.true"] = e.createRadioButton(e.$elements["equal-variances.true"], {
        width: "undefined",
        groupName: "equal-variances"
      }), e.$elements["equal-variances.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("equal-variances", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["equal-variances.false"]), e.controls["equal-variances.false"] = e.createRadioButton(e.$elements["equal-variances.false"], {
        width: "undefined",
        groupName: "equal-variances"
      }), e.$elements["equal-variances.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("equal-variances", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "equal-variances", "Assume Equal Variances");
  }, e.prototype.renderEqualVariancesControl = function (t) {
    var e = "equal-variances." + this.options.fnUnit.param["equal-variances"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["feature-cols"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls["label-col"].setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.twoSampleTTestForStacked.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule(), this.addLabelColRule(), this.addAlternativesRule(), this.addBaseGroupByRule("feature-cols", "Response Columns"), this.addBaseGroupByRule("label-col", "Factor Column");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Response Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number"]);
    });
  }, o.prototype.addLabelColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "label-col", e.param["label-col"], "Factor Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "label-col", e.param["label-col"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "label-col", e.param["label-col"], ["number", "string"]);
    });
  }, o.prototype.addAlternativesRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkArrayIsEmpty({
        errorCode: "BR-0033",
        param: "alternatives",
        messageParam: ["Alternatives"]
      }, e, e.param.alternatives);
    });
  }, t.VA.Core.Functions.Library.twoSampleTTestForStacked.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.vIF = {
    category: "statistics",
    defaultFnUnit: {
      func: "vIF",
      name: "VIF",
      inData: [],
      outData: [],
      param: {
        "feature-cols": []
      },
      display: {
        label: "VIF",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Compute the variable inflation factor (VIF) of columns.",
    mandatory: [],
    tags: ["VIF", "variable inflation factor", "multicolinearity", "multi colinearity", "colinearity"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "feature-cols": this.renderFeatureColsControl
    }, this.$elements = {}, this.controls = {}, this.createFeatureColsControl();
  }, e.prototype.createFeatureColsControl = function (t) {
    var e = this;
    e.$elements["feature-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Feature Columns", function (t) {
      t.append(e.$elements["feature-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("feature-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["feature-cols"] = e.createColumnList(e.$elements["feature-cols"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderFeatureColsControl = function (t) {
    var e = this.options.fnUnit.param["feature-cols"];
    this.controls["feature-cols"].setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls["feature-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.vIF.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addFeatureColsRule();
  }, o.prototype.addFeatureColsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "feature-cols", e.param["feature-cols"], "Feature Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "feature-cols", e.param["feature-cols"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "feature-cols", e.param["feature-cols"], ["number"]);
    });
  }, t.VA.Core.Functions.Library.vIF.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingFeatureEncoding = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingFeatureEncoding",
      name: "StreamingFeatureEncoding",
      inData: [],
      outData: [],
      param: {
        response: [[]],
        reward: [[]],
        "hold-columns": [[]],
        features: [[]]
      },
      display: {
        label: "Streaming Feature Encoding",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Make context data from raw data to use for input of functions such as LinearUCB, Q-Learning, Sarsa etc.",
    tags: ["stream", "streaming", "feature encoding", "featureencoding", "streaming feature encoding", "Streaming Feature Encoding", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingFilter = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingFilter",
      name: "StreamingFilter",
      inData: [],
      outData: [],
      param: {
        condition: [[]]
      },
      display: {
        label: "Streaming Filter",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function filter streaming Data.",
    tags: ["stream", "streaming", "ing", "filter", "Streaming Filter", "Filter"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingJoin = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingJoin",
      name: "StreamingJoin",
      inData: [],
      outData: [],
      param: {
        columns: [[""], [""]],
        "on-columns": [[]],
        "table-alias": ["", ""],
        "join-type": "full_outer"
      },
      display: {
        label: "Streaming Join",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function join streaming Data.",
    tags: ["stream", "streaming", "ing", "join", "Streaming Join", "Preprocessing"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingKafkaSend = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingKafkaSend",
      name: "StreamingKafkaSend",
      inData: [],
      outData: [],
      param: {
        topic: ""
      },
      display: {
        label: "Streaming Kafka Send",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Writes stream data to Repository or HDFS.",
    tags: ["stream", "streaming", "KafkaSend", "Kafka Send", "kafka", "Streaming Kafka Send", "I/O"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingKmeans = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingKmeans",
      name: "StreamingKMeans",
      inData: [],
      outData: [],
      param: {
        clusters: "",
        "decay-factor": "",
        "train-columns": [],
        "test-columns": [],
        "label-column": ""
      },
      display: {
        label: "Streaming KMeans",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "It partitions n observations into k clusters in which each observation belongs to the cluster with the nearest mean.",
    tags: ["stream", "streaming", "ing", "kmeans", "Streaming KMeans", "Clustering"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingLinearRegression = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingLinearRegression",
      name: "StreamingLinearRegression",
      inData: [],
      outData: [],
      param: {
        "num-features": "",
        iteration: "",
        step: "",
        ycolumn: [[]],
        xcolumns: [[]],
        "test-columns": [[]]
      },
      display: {
        label: "Streaming Linear Regression",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fitting regression models online, updating the parameters of the model as new data arrives.",
    tags: ["stream", "streaming", "Streaming Linear Regression", "Streaming Linear", "LinearRegression", "Regression", "Linear Regression", "Trend"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingLinearRegressionPredict = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingLinearRegressionPredict",
      name: "StreamingLinearRegressionPredict",
      inData: [],
      outData: [],
      param: {
        "test-columns": [[]],
        "model-path": ""
      },
      display: {
        label: "Streaming Linear Regression Predict",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function predicts data using the linear regression model trained from the function LinearRegressionTrain.",
    tags: ["stream", "streaming", "linear", "Streaming Linear", "predict", "Regression", "Streaming Linear Regression Predict", "Trend"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingLinearUCBPrescribe = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingLinearUCBPrescribe",
      name: "StreamingLinearUCBPrescribe",
      inData: [],
      outData: [],
      param: {
        "context-column": [[]],
        "id-column": [[]],
        alpha: "",
        "tiebreaker-threshold": "",
        "num-arms-in-prescription": "",
        "model-path": ""
      },
      display: {
        label: "Streaming Linear UCB Prescribe",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to prescribe actions/arms based on a given trained Linear UCB model.",
    tags: ["stream", "streaming", "linear ucb", "linear", "ucb", "prescribe", "Prescriptive", "Streaming Linear UCB Prescribe"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingLinearUCBTrain = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingLinearUCBTrain",
      name: "StreamingLinearUCBTrain",
      inData: [],
      outData: [],
      param: {
        "context-column": [[]],
        dimensionality: "",
        "shared-dimensionality": "",
        "arm-column": [[]],
        "reward-column": [[]],
        "arms-list": []
      },
      display: {
        label: "Streaming Linear UCB Train",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to train a Linear UCB algorithm based model for given data.",
    tags: ["stream", "streaming", "linear ucb", "linear", "ucb", "train", "Prescriptive", "Streaming Linear UCB Train"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingRead = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingRead",
      name: "StreamingRead",
      outData: [],
      param: {
        format: "json",
        schema: [[], []],
        topics: []
      },
      display: {
        label: "Streaming Read",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function load streaming Data.",
    tags: ["strea", "streaming", "ing", "read", "Streaming Read", "I/O"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingScalaScript = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingScalaScript",
      name: "StreamingScalaScript",
      inData: [],
      outData: [],
      param: {
        schema: [[], []],
        script: ""
      },
      display: {
        label: "Streaming Scala Script",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function returns value for executed Scala Script.",
    tags: ["stream", "streaming", "Scala", "Streaming Scala Script", "Script", "StreamingScalaScript", "Transform"],
    "in-range": {
      min: 1,
      max: 10
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingStart = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingStart",
      name: "StreamingStart",
      inData: [],
      param: {},
      display: {
        label: "Streaming Start",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function unload streaming Data.",
    tags: ["stream", "streaming", "ing", "start", "Streaming Start", "I/O"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 0,
      max: 0
    },
    "out-node": !0
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingThompsonSamplingPrescribe = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingThompsonSamplingPrescribe",
      name: "StreamingThompsonSamplingPrescribe",
      inData: [],
      param: {
        "context-column": [[]],
        "id-column": [[]],
        "num-arms-in-prescription": "",
        alpha: "",
        "model-path": ""
      },
      display: {
        label: "Streaming Thompson Sampling Prescribe",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to prescribe actions/arms based on a given trained ThompsonSampling model.",
    tags: ["stream", "streaming", "ing", "thompson sampling", "prescribe", "thompson sampling prescribe", "Streaming Thompson Sampling Prescribe", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingThompsonSamplingTrain = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingThompsonSamplingTrain",
      name: "StreamingThompsonSamplingTrain",
      inData: [],
      param: {
        "context-column": [[]],
        "arm-column": [[]],
        "reward-column": [[]],
        "arms-list": [],
        dimensionality: "",
        lambda: "",
        "initial-mean": "",
        "gray-scale-to-binary-reward-mapping-threshold": "",
        "regression-algorithm": "",
        "lbfgs-convergence-tol": "",
        "sgd-initial-step-size": "",
        "sgd-iterations": ""
      },
      display: {
        label: "Streaming Thompson Sampling Train",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function can be used to train a ThompsonSampling algorithm based model for given data.",
    tags: ["stream", "streaming", "ing", "thompson sampling", "train", "thompson sampling train", "Streaming Thompson Sampling Train", "Prescriptive"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingUnion = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingUnion",
      name: "StreamingUnion",
      inData: [],
      outData: [],
      param: {},
      display: {
        label: "Streaming Union",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: [{
            panel: [],
            layout: {}
          }, {
            panel: [],
            layout: {}
          }],
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function union streaming Data.",
    tags: ["stream", "streaming", "ing", "union", "Streaming Union", "Preprocessing"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingUpdateStateByKey = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingUpdateStateByKey",
      name: "StreamingUpdateStateByKey",
      inData: [],
      outData: [],
      param: {
        key: "",
        columns: [],
        "target-statistic": []
      },
      display: {
        label: "Streaming Update State By Key",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function Update State By Key streaming Data.",
    tags: ["stream", "streaming", "Update", "State By Key", "StateByKey", "Streaming Update State By Key", "Streaming Update", "Transform"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingWindow = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingWindow",
      name: "StreamingWindow",
      inData: [],
      outData: [],
      param: {
        "window-duration": "",
        "slide-duration": "",
        "window-type": "window",
        "key-column": [[]],
        "value-column": [[]]
      },
      display: {
        label: "Streaming Window",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Transformations over a sliding window of data.",
    tags: ["stream", "streaming", "Window", "Streaming Window", "StreamingWindow", "Transform"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.streamingWrite = {
    category: "streaming",
    defaultFnUnit: {
      func: "streamingWrite",
      name: "StreamingWrite",
      inData: [],
      param: {
        storage: "alluxio",
        "file-path": "",
        "is-delete": "false",
        "file-name-prefix": "",
        "file-name-suffix": ""
      },
      display: {
        label: "Streaming Write",
        type: "realtime",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Writes stream data to Repository or HDFS.",
    tags: ["stream", "streaming", "ing", "write", "Streaming Write", "I/O"],
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.elasticIndexing = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "elasticIndexing",
      name: "ElasticIndexing",
      inData: [],
      outData: [],
      param: {
        "index-name": ["brightics"],
        "type-name": [],
        "meta-all-enabled": "",
        "meta-all-store": "",
        "meta-meta": "",
        "meta-parent": "",
        "meta-routing-required": "",
        "meta-source": "",
        "meta-timestamp-enabled": "",
        "properties-colums": [],
        "properties-analyzer": [],
        "properties-boost": [],
        "properties-coerce": [],
        "properties-copy-to": [],
        "properties-doc-values": [],
        "properties-dynamic": [],
        "properties-enabled": [],
        "properties-fielddata": [],
        "properties-format": [],
        "properties-geohash": [],
        "properties-geohash-prefix": [],
        "properties-geohash-precision": [],
        "properties-ignore-above": [],
        "properties-ignore-malformed": [],
        "properties-include-in-all": [],
        "properties-index": [],
        "properties-index-options": [],
        "properties-lat-lon": [],
        "properties-fields": [],
        "properties-norms-enabled": [],
        "properties-norms-loading": [],
        "properties-null-value": [],
        "properties-position-increment-gap": [],
        "properties-properties": [],
        "properties-search-analyzer": [],
        "properties-similarity": [],
        "properties-store": [],
        "properties-term-vector": []
      },
      display: {
        label: "Elastic Indexing",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function indexing data for ElasticSearch.",
    tags: ["Elastic Indexing", "ElasticIndexing", "Elastic", "Indexing"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "index-name": this.renderIndexName,
      "type-name": this.renderTypeName,
      "meta-all-enabled": this.renderMetaAllEnabled,
      "meta-all-store": this.renderAllStore,
      "meta-meta": this.renderMetaMeta,
      "meta-parent": this.renderMetaParent,
      "meta-routing-required": this.renderRoutingRequired,
      "meta-source": this.renderSource,
      "meta-timestamp-enabled": this.renderTimestampEnabled,
      "meta-ttl": this.renderMetaTtl,
      "properties-colums": this.renderProperties,
      "properties-analyzer": this.renderProperties,
      "properties-boost": this.renderProperties,
      "properties-coerce": this.renderProperties,
      "properties-copy-to": this.renderProperties,
      "properties-doc-values": this.renderProperties,
      "properties-dynamic": this.renderProperties,
      "properties-enabled": this.renderProperties,
      "properties-fielddata": this.renderProperties,
      "properties-format": this.renderProperties,
      "properties-geohash": this.renderProperties,
      "properties-geohash-prefix": this.renderProperties,
      "properties-geohash-precision": this.renderProperties,
      "properties-ignore-above": this.renderProperties,
      "properties-ignore-malformed": this.renderProperties,
      "properties-include-in-all": this.renderProperties,
      "properties-index": this.renderProperties,
      "properties-index-options": this.renderProperties,
      "properties-lat-lon": this.renderProperties,
      "properties-fields": this.renderProperties,
      "properties-norms-enabled": this.renderProperties,
      "properties-norms-loading": this.renderProperties,
      "properties-null-value": this.renderProperties,
      "properties-position-increment-gap": this.renderProperties,
      "properties-properties": this.renderProperties,
      "properties-search-analyzer": this.renderProperties,
      "properties-similarity": this.renderProperties,
      "properties-store": this.renderProperties,
      "properties-term-vector": this.renderProperties
    }, this.validationControls = {}, this.createIndexNameControl(), this.createTypeNameControl(), this.createMetaAllEnabledControl(), this.createMetaAllStoreControl(), this.createMetaMetaControl(), this.createMetaParentControl(), this.createMetaRoutingRequiredControl(), this.createMetaSourceControl(), this.createMetaTimestampEnabledControl(), this.createMetaTtlControl(), this.createPropertiesControl();
  }, e.prototype.createIndexNameControl = function () {
    var t = this;
    this.$indexName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Index Name", function (e) {
      e.append(t.$indexName), t.indexNameControl = this.createInput(t.$indexName, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    }, {
      mandatory: !0
    });
    this.$indexName.on("change", function () {
      t.isInputValueChanged("index-name", $(this).val() ? [$(this).val()] : []) && t.createInputCommand("index-name", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "index-name", "Index Name");
  }, e.prototype.createTypeNameControl = function () {
    var t = this;
    this.$typeName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Type Name", function (e) {
      e.append(t.$typeName), t.typeNameControl = this.createInput(t.$typeName, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    });
    this.$typeName.on("change", function () {
      t.isInputValueChanged("type-name", $(this).val() ? [$(this).val()] : []) && t.createInputCommand("type-name", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "type-name", "Type Name");
  }, e.prototype.createMetaAllEnabledControl = function () {
    var t = this;
    this.$metaAllEnabledTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$metaAllEnabledFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var e = this.addPropertyControl("Meta All Enabled", function (e) {
      e.append(this.$metaAllEnabledTrueControl).append(this.$metaAllEnabledFalseControl), t.createRadioButton(t.$metaAllEnabledTrueControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$metaAllEnabledFalseControl, {
        width: "80",
        groupName: "Group"
      }), t.$metaAllEnabledTrueControl.on("checked", function () {
        t.createRadioButtonCommand("meta-all-enabled", "true");
      }), t.$metaAllEnabledFalseControl.on("checked", function () {
        t.createRadioButtonCommand("meta-all-enabled", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "meta-all-enabled", "Meta All Enabled");
  }, e.prototype.createMetaAllStoreControl = function () {
    var t = this;
    this.$metaAllStoreTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$metaAllStoreFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var e = this.addPropertyControl("Meta All Store", function (e) {
      e.append(this.$metaAllStoreTrueControl).append(this.$metaAllStoreFalseControl), t.createRadioButton(t.$metaAllStoreTrueControl, {
        width: "80",
        groupName: "Group1"
      }), t.createRadioButton(t.$metaAllStoreFalseControl, {
        width: "80",
        groupName: "Group1"
      }), t.$metaAllStoreTrueControl.on("checked", function () {
        t.createRadioButtonCommand("meta-all-store", "true");
      }), t.$metaAllStoreFalseControl.on("checked", function () {
        t.createRadioButtonCommand("meta-all-store", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "meta-all-store", "Meta All Store");
  }, e.prototype.createMetaMetaControl = function () {
    var t = this;
    this.$metaMeta = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Meta Meta", function (e) {
      e.append(t.$metaMeta), t.$metaMetaControl = this.createInput(t.$metaMeta, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    });
    this.$metaMeta.on("change", function () {
      t.isInputValueChanged("meta-meta", $(this).val()) && t.createInputCommand2("meta-meta", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "meta-meta", "Meta Meta");
  }, e.prototype.createMetaParentControl = function () {
    var t = this;
    this.$metaParent = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Meta Parent", function (e) {
      e.append(t.$metaParent), t.$metaParentControl = this.createInput(t.$metaParent, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    });
    this.$metaParent.on("change", function () {
      t.isInputValueChanged("meta-parent", $(this).val()) && t.createInputCommand2("meta-parent", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "meta-parent", "Meta Parent");
  }, e.prototype.createMetaRoutingRequiredControl = function () {
    var t = this;
    this.$metaRoutingRequiredTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$metaRoutingRequiredFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var e = this.addPropertyControl("Meta Routing Required", function (e) {
      e.append(this.$metaRoutingRequiredTrueControl).append(this.$metaRoutingRequiredFalseControl), t.createRadioButton(t.$metaRoutingRequiredTrueControl, {
        width: "80",
        groupName: "Group2"
      }), t.createRadioButton(t.$metaRoutingRequiredFalseControl, {
        width: "80",
        groupName: "Group2"
      }), t.$metaRoutingRequiredTrueControl.on("checked", function () {
        t.createRadioButtonCommand("meta-routing-required", "true");
      }), t.$metaRoutingRequiredFalseControl.on("checked", function () {
        t.createRadioButtonCommand("meta-routing-required", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "meta-routing-required", "Meta Routing Required");
  }, e.prototype.createMetaSourceControl = function () {
    var t = this;
    this.$metaSource = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Meta Source", function (e) {
      e.append(t.$metaSource), t.$metaSourceControl = this.createInput(t.$metaSource, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    });
    this.$metaSource.on("change", function () {
      t.isInputValueChanged("meta-source", $(this).val()) && t.createInputCommand2("meta-source", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "meta-source", "Meta Source");
  }, e.prototype.createMetaTimestampEnabledControl = function () {
    var t = this;
    this.$metaTimestampEnabledTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$metaTimestampEnabledFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var e = this.addPropertyControl("Meta Timestamp Enabled", function (e) {
      e.append(this.$metaTimestampEnabledTrueControl).append(this.$metaTimestampEnabledFalseControl), t.createRadioButton(t.$metaTimestampEnabledTrueControl, {
        width: "80",
        groupName: "Group3"
      }), t.createRadioButton(t.$metaTimestampEnabledFalseControl, {
        width: "80",
        groupName: "Group3"
      }), t.$metaTimestampEnabledTrueControl.on("checked", function () {
        t.createRadioButtonCommand("meta-timestamp-enabled", "true");
      }), t.$metaTimestampEnabledFalseControl.on("checked", function () {
        t.createRadioButtonCommand("meta-timestamp-enabled", "false");
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "meta-timestamp-enabled", "Meta Timestamp Enabled");
  }, e.prototype.createMetaTtlControl = function () {
    var t = this;
    this.$metaTtlTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$metaTtlFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>'), this.$metaTtl = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Meta Ttl", function (e) {
      e.append(this.$metaTtlTrueControl).append(this.$metaTtlFalseControl).append(this.$metaTtl), t.createRadioButton(t.$metaTtlTrueControl, {
        width: "80",
        groupName: "Group4"
      }), t.createRadioButton(t.$metaTtlFalseControl, {
        width: "80",
        groupName: "Group4"
      }), t.$metaTtlControl = this.createInput(t.$metaTtl, {
        height: "23px",
        placeHolder: "Enter value"
      }, ""), t.$metaTtlTrueControl.on("checked", function () {
        t.createMetaTtlCommand("radio", "true");
      }), t.$metaTtlFalseControl.on("checked", function () {
        t.createMetaTtlCommand("radio", "false");
      }), t.$metaTtl.on("change", function () {
        t.isInputValueChanged("meta-ttl", $(this).val()) && t.createMetaTtlCommand("input", $(this).val());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "meta-ttl", "Meta Ttl");
  }, e.prototype.createPropertiesControl = function () {
    var e = this;
    this.$stepContainer = $('<div class="brtc-va-editors-sheet-refine-step-container"/>'), this.$stepDisplayDiv = $('<div class="btrc-va-editors-sheet-refine-step-div"/>'), this.$browseButton = $('<input class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-add-key-condition" type="button" value="Set"/>'), this.addPropertyControl("Set Properties", function (o) {
      o.append(e.$browseButton), this.$browseButton.jqxButton({
        theme: t.VA.Env.Theme,
        width: "100%",
        height: 25
      });
    }), this.$browseButton.click(function (o) {
      new t.VA.Core.Dialogs.SetPropertiesDialog($(o.target), {
        fnUnit: e.options.fnUnit,
        columns: $.extend(!0, [], e.columnNameArray),
        close: function close(t) {
          t.OK && e.executeCommand(t.command);
        }
      });
    });
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.columnNameArray = t, 0 == this.options.fnUnit.param["index-name"].length && (this.options.fnUnit.param["index-name"][0] = "brightics"), 0 == this.options.fnUnit.param["type-name"].length && (this.options.fnUnit.param["type-name"][0] = this.options.fnUnit[OUT_DATA][0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "index-name" === this.problems[t].param && this.createValidationContent(this.$indexName.parent(), this.problems[t]);
    }
  }, e.prototype.renderIndexName = function () {
    var t = this.options.fnUnit.param;
    this.$indexName.val(t["index-name"][0] || "");
  }, e.prototype.renderTypeName = function () {
    var t = this.options.fnUnit.param;
    this.$typeName.val(t["type-name"][0] || "");
  }, e.prototype.renderMetaAllEnabled = function () {
    var t = this.options.fnUnit.param;
    t["meta-all-enabled"] ? ("true" === t["meta-all-enabled"] && this.$metaAllEnabledTrueControl.jqxRadioButton("check"), "false" === t["meta-all-enabled"] && this.$metaAllEnabledFalseControl.jqxRadioButton("check")) : this.$metaAllEnabledFalseControl.jqxRadioButton("check");
  }, e.prototype.renderAllStore = function () {
    var t = this.options.fnUnit.param;
    t["meta-all-store"] ? ("true" === t["meta-all-store"] && this.$metaAllStoreTrueControl.jqxRadioButton("check"), "false" === t["meta-all-store"] && this.$metaAllStoreFalseControl.jqxRadioButton("check")) : this.$metaAllStoreFalseControl.jqxRadioButton("check");
  }, e.prototype.renderMetaMeta = function () {
    var t = this.options.fnUnit.param;
    this.$metaMeta.val(t["meta-meta"] || "");
  }, e.prototype.renderMetaParent = function () {
    var t = this.options.fnUnit.param;
    this.$metaParent.val(t["meta-parent"] || "");
  }, e.prototype.renderRoutingRequired = function () {
    var t = this.options.fnUnit.param;
    t["meta-routing-required"] ? ("true" === t["meta-routing-required"] && this.$metaRoutingRequiredTrueControl.jqxRadioButton("check"), "false" === t["meta-routing-required"] && this.$metaRoutingRequiredFalseControl.jqxRadioButton("check")) : this.$metaRoutingRequiredFalseControl.jqxRadioButton("check");
  }, e.prototype.renderSource = function () {
    var t = this.options.fnUnit.param;
    this.$metaSource.val(t["meta-source"] || "");
  }, e.prototype.renderTimestampEnabled = function () {
    var t = this.options.fnUnit.param;
    t["meta-timestamp-enabled"] ? ("true" === t["meta-timestamp-enabled"] && this.$metaTimestampEnabledTrueControl.jqxRadioButton("check"), "false" === t["meta-timestamp-enabled"] && this.$metaTimestampEnabledFalseControl.jqxRadioButton("check")) : this.$metaTimestampEnabledFalseControl.jqxRadioButton("check");
  }, e.prototype.renderMetaTtl = function () {
    var t = this.options.fnUnit.param;
    t["meta-ttl"] ? (this.$metaTtl.val(t["meta-ttl"][1]), "true" === t["meta-ttl"][0] && this.$metaTtlTrueControl.jqxRadioButton("check"), "false" === t["meta-ttl"][0] && this.$metaTtlFalseControl.jqxRadioButton("check")) : this.$metaTtlFalseControl.jqxRadioButton("check");
  }, e.prototype.renderProperties = function () {}, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && r.ref.param[e].push(o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand2 = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createMetaTtlCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param["meta-ttl"] = [], "radio" == e ? (r.ref.param["meta-ttl"].push(o), r.ref.param["meta-ttl"].push(this.$metaTtl.jqxInput("val"))) : (1 == this.$metaTtlTrueControl.jqxRadioButton("checked") ? r.ref.param["meta-ttl"].push("true") : r.ref.param["meta-ttl"].push("false"), r.ref.param["meta-ttl"].push(o));
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.elasticIndexing.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_INDEX_NAME = "index-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addIndexName(), this.addNewColumnNameRule(this.PARAM_INDEX_NAME);
  }, e.prototype.addIndexName = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_INDEX_NAME,
          messageParam: ["Index Name"]
        };
        return t._checkArrayIsEmpty(o, e, e.param[t.PARAM_INDEX_NAME]);
      }
    });
  }, t.VA.Core.Functions.Library.elasticIndexing.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.elasticQueryExecutor = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "elasticQueryExecutor",
      name: "ElasticQueryExecutor",
      inData: [],
      outData: [],
      param: {
        "http-method": "GET",
        "request-method": "",
        "request-body": ""
      },
      display: {
        label: "Elastic Query Executor",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function execute for query in ElasticSearch 2.4.",
    tags: ["Elastic Query Executor", "Elastic", "Query", "Executor"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "http-method": this.renderHttpMethod,
      "request-method": this.renderRequestMethod,
      "request-body": this.renderRequestBody
    }, this.createHttpMethodControl(), this.createRequestMethodControl(), this.createRequestBody();
  }, e.prototype.createHttpMethodControl = function () {
    var t = this;
    this.$httpMethodGetControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">GET</div>'), this.$httpMethodPostControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">POST</div>'), this.$httpMethodPutControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">PUT</div>'), this.$httpMethodDeleteControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">DELETE</div>');
    var e = this.addPropertyControl("Http Method", function (e) {
      e.append(this.$httpMethodGetControl).append(this.$httpMethodPostControl).append(this.$httpMethodPutControl).append(this.$httpMethodDeleteControl), t.createRadioButton(t.$httpMethodGetControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$httpMethodPostControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$httpMethodPutControl, {
        width: "80",
        groupName: "Group"
      }), t.createRadioButton(t.$httpMethodDeleteControl, {
        width: "80",
        groupName: "Group"
      }), t.$httpMethodGetControl.on("checked", function () {
        t.createRadioButtonCommand("http-method", "GET");
      }), t.$httpMethodPostControl.on("checked", function () {
        t.createRadioButtonCommand("http-method", "POST");
      }), t.$httpMethodPutControl.on("checked", function () {
        t.createRadioButtonCommand("http-method", "PUT");
      }), t.$httpMethodDeleteControl.on("checked", function () {
        t.createRadioButtonCommand("http-method", "DELETE");
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "http-method", "Http Method");
  }, e.prototype.createRequestMethodControl = function () {
    var t = this;
    this.$requestMethod = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Request Method", function (e) {
      e.append(t.$requestMethod), t.$requestMethodControl = this.createInput(t.$requestMethod, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    }, {
      mandatory: !0
    });
    this.$requestMethod.on("change", function () {
      t.createInputCommand("request-method", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "request-method", "Request Method");
  }, e.prototype.createRequestBody = function () {
    var t = this;
    this.$requestBody = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol">'), this.addPropertyControl("Request Body", function (e) {
      e.append(t.$requestBody), this.createTextArea(t.$requestBody, {
        height: "200px"
      });
    }), this.$requestBody.on("change", function () {
      t.createInputStringCommand($(this).val());
    });
  }, e.prototype.fillControlValues = function () {
    this.$httpMethodGetControl.jqxRadioButton("check");
  }, e.prototype.renderHttpMethod = function () {
    var t = this.options.fnUnit.param;
    t["http-method"] ? ("GET" === t["http-method"] && this.$httpMethodGetControl.jqxRadioButton("check"), "POST" === t["http-method"] && this.$httpMethodPostControl.jqxRadioButton("check"), "PUT" === t["http-method"] && this.$httpMethodPutControl.jqxRadioButton("check"), "DELETE" === t["http-method"] && this.$httpMethodDeleteControl.jqxRadioButton("check")) : this.$httpMethodGetControl.jqxRadioButton("check");
  }, e.prototype.renderRequestMethod = function () {
    var t = this.options.fnUnit.param;
    this.$requestMethod.val(t["request-method"] || "");
  }, e.prototype.renderRequestBody = function () {
    var t = this.options.fnUnit.param;
    this.$requestBody.val(t["request-body"] || "");
  }, e.prototype.renderValidation = function () {
    if (this.problems.length > 0) for (var t in this.problems) {
      "http-method" === this.problems[t].param ? this.createValidationContent(this.$indexName.parent(), this.problems[t]) : "request-method" === this.problems[t].param && this.createValidationContent(this.$requestMethod.parent(), this.problems[t]);
    }
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    if (this.isInputValueChanged(e, o)) {
      var r = {
        fnUnit: this.options.fnUnit,
        ref: {
          param: {}
        }
      };
      r.ref.param[e] = "", o && (r.ref.param[e] = o);
      var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
      this.executeCommand(n);
    }
  }, e.prototype.createInputStringCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["request-body"] = "", e && (o.ref.param["request-body"] = e);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, t.VA.Core.Functions.Library.elasticQueryExecutor.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_REQUEST_METHOD = "request-method", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addRequestMethodRule();
  }, e.prototype.addRequestMethodRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: t.PARAM_REQUEST_METHOD,
        messageParam: ["Request Method"]
      }, e, e.param[t.PARAM_REQUEST_METHOD]);
    });
  }, t.VA.Core.Functions.Library.elasticQueryExecutor.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.elasticRegExpSearch = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "elasticRegExpSearch",
      name: "ElasticRegExpSearch",
      inData: [],
      outData: [],
      param: {
        "index-name": ["brightics"],
        "type-name": [],
        "regexp-column": [],
        "regexp-value": [],
        "regexp-flags": []
      },
      display: {
        label: "Elastic Reg Exp Search",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function is regular expression search data for ElasticSearch.",
    tags: ["Elastic Reg Exp Search", "ElasticRegExpSearch", "Elastic", "Reg", "Exp", "Search"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_TYPE_NAME = "type-name", this.PARAM_REGEXP_COLUMN = "regexp-column", this.PARAM_REGEXP_VALUE = "regexp-value", this.PARAM_REGEXP_FLAGS = "regexp-flags", this.render = {
      "index-name": this.renderIndexName,
      "type-name": this.renderTypeName,
      "regexp-column": this.renderRegularExpressionControl,
      "regexp-value": this.renderRegularExpressionControl,
      "regexp-flags": this.renderRegularExpressionControl
    }, this.propertyControlArray = [], this.createIndexNameControl(), this.createTypeNameControl(), this.createControlExpander(), this.createRegExpControl(), this.createAddButton();
  }, e.prototype.createIndexNameControl = function () {
    var t = this;
    this.$indexName = $('<input class="brtc-va-editor-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Index Name", function (e) {
      e.append(t.$indexName), t.indexNameControl = this.createInput(t.$indexName, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    }, {
      mandatory: !0
    });
    this.$indexName.on("change", function () {
      t.isInputValueChanged("index-name", $(this).val() ? [$(this).val()] : []) && t.createInputCommand("index-name", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "index-name", "Index Name");
  }, e.prototype.createTypeNameControl = function () {
    var t = this;
    this.$typeName = $('<input class="brtc-va-editor-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Type Name", function (e) {
      e.append(t.$typeName), t.$typeNameControl = this.createInput(t.$typeName, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    });
    this.$typeName.on("change", function () {
      t.isInputValueChanged("type-name", $(this).val() ? [$(this).val()] : []) && t.createInputCommand("type-name", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "type-name", "Type Name");
  }, e.prototype.createControlExpander = function () {
    this.$contents = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-contents-pbf"/>'), this.addPropertyControl("Properties by field", function (t) {
      t.append(this.$contents);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRegExpControl = function (t) {
    var e = this,
        o = new Object();
    o.$inputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>'), o.$inputWrapper = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-wrapper"/>'), o.$columnInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), o.$regularExpressionInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input-regularexpression"/>'), o.$regularExpressionFlags = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-operator"/>'), o.$inputWrapper.append(o.$columnInput), o.$inputWrapper.append(o.$regularExpressionInput), o.$inputWrapper.append(o.$regularExpressionFlags);
    var r = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending",
      expand: !0,
      changed: function changed(t, o) {
        if (1 != e.renderFlag) {
          var r = e.createCommand();
          e.executeCommand(r);
        }
      }
    };
    this.createInput(o.$regularExpressionInput, {
      placeHolder: "Enter regular expression"
    }), this.createDropDownList(o.$regularExpressionFlags, {
      source: ["INTERSECTION", "COMPLEMENT", "EMPTY"],
      checkboxes: !0
    }), o.$removeButton = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>'), o.$inputControl.append(o.$removeButton), o.$inputControl.append(o.$inputWrapper), this.$contents.append(o.$inputControl), o.columnsControl = this.createColumnList(o.$columnInput, r), o.columnsControl.setItems(this.columnNameArray), this.$contents.children() && $(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-deck-remove").css("display", "none"), this.createRegExpControlEvent(o), this.propertyControlArray.push(o);
  }, e.prototype.createAddButton = function () {
    var e = this;
    if (this.$contents.find(".brtc-va-editors-sheet-controls-propertycontrol-addbutton").length > 0) return !1;
    this.$addButton = $('<input type="button" class= "brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Column"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      if (e.$addButton.detach(), e.createRegExpControl(), e.$addButton.appendTo(e.$contents), 1 != e.renderFlag) {
        var t = e.createCommand();
        e.executeCommand(t);
      }
    });
  }, e.prototype.createRegExpControlEvent = function (t) {
    var e = this;
    t.$regularExpressionInput.on("change", function (t) {
      if (1 != e.renderFlag) {
        if (!e.isInputValueChanged("regexp-value", $(this).val() ? [$(this).val()] : [])) return;
        var o = e.createCommand();
        e.executeCommand(o);
      }
    }), t.$regularExpressionFlags.on("checkChange", function (t) {
      if (1 != e.renderFlag) {
        var o = e.createCommand();
        e.executeCommand(o);
      }
    }), t.$removeButton.click(function (t) {
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;

      if (o > -1 && e.propertyControlArray.splice(o, 1), $(this).parent().remove(), e.$contents.children(), 1 != e.renderFlag) {
        var r = e.createCommand();
        e.executeCommand(r);
      }

      t.stopPropagation();
    });
  }, e.prototype.fillControlValues = function () {
    var t = this;
    0 == this.options.fnUnit.param["type-name"].length && this.options.fnUnit[IN_DATA].length > 0 && (this.options.fnUnit.param["type-name"][0] = this.options.fnUnit[IN_DATA][0]), this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], $.each(this.propertyControlArray, function (e) {
      t.propertyControlArray[e].columnsControl.setItems(t.columnNameArray);
    });
  }, e.prototype.renderIndexName = function () {
    var t = this.options.fnUnit.param;
    this.$indexName.val(t["index-name"][0] || "");
  }, e.prototype.renderTypeName = function () {
    var t = this.options.fnUnit.param;
    this.$typeName.val(t["type-name"][0] || "");
  }, e.prototype.renderRegularExpressionControl = function () {
    var t = this.options.fnUnit.param["regexp-column"],
        e = this.options.fnUnit.param["regexp-value"],
        o = this.options.fnUnit.param["regexp-flags"];

    for (var r in this.renderFlag = !0, this.$addButton.detach(), 0 == t.length && this.propertyControlArray[0].columnsControl.setSelectedItems([]), 0 === e.length && this.propertyControlArray[0].$regularExpressionInput.val(""), 0 === o.length && this.propertyControlArray[0].$regularExpressionFlags.jqxDropDownList("uncheckAll"), t) {
      r > this.propertyControlArray.length - 1 && this.createRegExpControl(), this.propertyControlArray[r].columnsControl.setSelectedItems([t[r]]), this.propertyControlArray[r].$regularExpressionInput.val(e[r]);
      var n = o[r].split("|");

      for (var a in this.propertyControlArray[r].$regularExpressionFlags.jqxDropDownList("uncheckAll"), n) {
        this.propertyControlArray[r].$regularExpressionFlags.jqxDropDownList("checkItem", n[a]);
      }

      if (t.length < this.propertyControlArray.length) {
        for (a = this.propertyControlArray.length - 1; a == t.length; a--) {
          $(this.propertyControlArray[a].$inputControl).remove();
        }

        this.propertyControlArray.splice(t.length, this.propertyControlArray.length - t.length);
      }
    }

    this.$addButton.appendTo(this.$contents), this.renderFlag = !1;
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && r.ref.param[e].push(o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.getColumnsValue = function () {
    var t = [];

    for (var e in this.propertyControlArray) {
      var o = this.propertyControlArray[e].columnsControl.getSelectedItems()[0] ? this.propertyControlArray[e].columnsControl.getSelectedItems()[0] : "";
      t.push(o);
    }

    return t;
  }, e.prototype.getRegExpValue = function () {
    var t = [];

    for (var e in this.propertyControlArray) {
      var o = this.propertyControlArray[e].$regularExpressionInput.val() ? this.propertyControlArray[e].$regularExpressionInput.val() : "";
      t.push(o);
    }

    return t;
  }, e.prototype.getRegExpFlags = function () {
    var t = [];

    for (var e in this.propertyControlArray) {
      var o = this.propertyControlArray[e].$regularExpressionFlags.jqxDropDownList("getCheckedItems"),
          r = "";

      for (e = 0; e < o.length; e++) {
        r += o[e].label, e < o.length - 1 && (r += "|");
      }

      t.push(r);
    }

    return t;
  }, e.prototype.createCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_REGEXP_COLUMN] = this.getColumnsValue(), o.ref.param[this.PARAM_REGEXP_VALUE] = this.getRegExpValue(), o.ref.param[this.PARAM_REGEXP_FLAGS] = this.getRegExpFlags(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.renderValidation = function () {
    var t = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-columnlist"),
        e = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-input-regularexpression");
    if (this.problems.length > 0) for (var o in this.problems) {
      "index-name" === this.problems[o].param ? this.createValidationContent(this.$indexName.parent(), this.problems[o]) : this.problems[o].param === this.PARAM_REGEXP_COLUMN ? this.createValidationContent($(t[this.problems[o].paramIndex]).parent(), this.problems[o]) : this.problems[o].param === this.PARAM_REGEXP_VALUE && this.createValidationContent($(e[this.problems[o].paramIndex]).parent(), this.problems[o]);
    }
  }, t.VA.Core.Functions.Library.elasticRegExpSearch.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_INDEX_NAME = "index-name", this.PARAM_REGEXP_COLUMN = "regexp-column", this.PARAM_REGEXP_VALUE = "regexp-value", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addIndexName(), this.addColumnsRule(), this.addRule(this.ElasticRegExpSearchRule), this.addNewColumnNameRule(this.PARAM_INDEX_NAME);
  }, e.prototype.addIndexName = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_INDEX_NAME,
          messageParam: ["Index Name"]
        };
        return t._checkArrayIsEmpty(o, e, e.param[t.PARAM_INDEX_NAME]);
      }
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];

      if (this._hasSchema(e)) {
        if ($.each(e.param[t.PARAM_REGEXP_COLUMN], function (r, n) {
          t.isEmptyForString(n) && o.push(t.problemFactory.createProblem({
            errorCode: "BR-0033",
            param: t.PARAM_REGEXP_COLUMN,
            paramIndex: r,
            messageParam: ["Column"]
          }, e));
        }), 0 === e.param[t.PARAM_REGEXP_COLUMN].length) {
          var r = {
            errorCode: "BR-0033",
            param: t.PARAM_REGEXP_COLUMN,
            paramIndex: 0,
            messageParam: ["Column"]
          };
          o.push(t.problemFactory.createProblem(r, e));
        }

        return o;
      }
    });
  }, e.prototype.ElasticRegExpSearchRule = function (t) {
    var e = this,
        o = [];

    if (this._hasSchema(t)) {
      if ($.each(t.param[e.PARAM_REGEXP_VALUE], function (r, n) {
        e.isEmptyForString(n) && o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: e.PARAM_REGEXP_VALUE,
          paramIndex: r,
          messageParam: ["Regular Expression"]
        }, t));
      }), 0 === t.param[e.PARAM_REGEXP_VALUE].length) {
        var r = {
          errorCode: "BR-0033",
          param: e.PARAM_REGEXP_VALUE,
          paramIndex: 0,
          messageParam: ["Regular Expression"]
        };
        o.push(e.problemFactory.createProblem(r, t));
      }

      return o;
    }
  }, t.VA.Core.Functions.Library.elasticRegExpSearch.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.elasticSearch = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "elasticSearch",
      name: "ElasticSearch",
      inData: [],
      outData: [],
      param: {
        "index-name": ["brightics"],
        "type-name": [],
        "search-string": ""
      },
      display: {
        label: "Elastic Search",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function search data for ElasticSearch.",
    tags: ["Elastic Search", "ElasticSearch", "Elastic", "Search"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "index-name": this.renderIndexName,
      "type-name": this.renderTypeName,
      "search-string": this.renderSearchString
    }, this.createIndexNameControl(), this.createTypeNameControl(), this.createSearchString();
  }, e.prototype.createIndexNameControl = function () {
    var t = this;
    this.$indexName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Index Name", function (e) {
      e.append(t.$indexName), t.indexNameControl = this.createInput(t.$indexName, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    }, {
      mandatory: !0
    });
    this.$indexName.on("change", function () {
      t.isInputValueChanged("index-name", $(this).val() ? [$(this).val()] : []) && t.createInputCommand("index-name", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "index-name", "Index Name");
  }, e.prototype.createTypeNameControl = function () {
    var t = this;
    this.$typeName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var e = this.addPropertyControl("Type Name", function (e) {
      e.append(t.$typeName), t.$typeNameControl = this.createInput(t.$typeName, {
        height: "23px",
        placeHolder: "Enter value"
      }, "");
    });
    this.$typeName.on("change", function () {
      t.isInputValueChanged("type-name", $(this).val() ? [$(this).val()] : []) && t.createInputCommand("type-name", $(this).val());
    });
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "type-name", "Type Name");
  }, e.prototype.createSearchString = function () {
    var t = this;
    this.$searchString = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol">'), this.addPropertyControl("Search String", function (e) {
      e.append(t.$searchString), t.createTextArea(t.$searchString, {
        height: "200px"
      });
    }, {
      mandatory: !0
    }), this.$searchString.on("change", function () {
      t.createInputStringCommand($(this).val());
    });
  }, e.prototype.fillControlValues = function () {
    0 == this.options.fnUnit.param["type-name"].length && this.options.fnUnit[IN_DATA].length > 0 && (this.options.fnUnit.param["type-name"][0] = this.options.fnUnit[IN_DATA][0]);
  }, e.prototype.renderIndexName = function () {
    var t = this.options.fnUnit.param;
    this.$indexName.val(t["index-name"][0] || "");
  }, e.prototype.renderTypeName = function () {
    var t = this.options.fnUnit.param;
    this.$typeName.val(t["type-name"][0] || "");
  }, e.prototype.renderSearchString = function () {
    var t = this.options.fnUnit.param;
    this.$searchString.val(t["search-string"] || "");
  }, e.prototype.renderValidation = function () {
    if (this.problems.length > 0) for (var t in this.problems) {
      "index-name" === this.problems[t].param ? this.createValidationContent(this.$indexName.parent(), this.problems[t]) : "search-string" === this.problems[t].param && this.createValidationContent(this.$searchString.parent(), this.problems[t]);
    }
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && r.ref.param[e].push(o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputStringCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.ref.param["search-string"] = "", e && (o.ref.param["search-string"] = e);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, t.VA.Core.Functions.Library.elasticSearch.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_INDEX_NAME = "index-name", this.PARAM_SEARCH_STRING = "search-string", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addIndexNameRule(), this.addSearchStringRule(), this.addNewColumnNameRule(this.PARAM_INDEX_NAME);
  }, e.prototype.addIndexNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_INDEX_NAME,
          messageParam: ["Index Name"]
        };
        return t._checkArrayIsEmpty(o, e, e.param[t.PARAM_INDEX_NAME]);
      }
    });
  }, e.prototype.addSearchStringRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_SEARCH_STRING,
          messageParam: ["Search String"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_SEARCH_STRING]);
      }
    });
  }, t.VA.Core.Functions.Library.elasticSearch.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.latentDirichletAllocation = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "latentDirichletAllocation",
      name: "LatentDirichletAllocation",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "vocabulary-size": "",
        "topic-number": "",
        iteration: "",
        "terminology-number": "",
        groupby: []
      },
      display: {
        label: "Latent Dirichlet Allocation",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function builds a topic model for text documents..",
    tags: ["Latent Dirichlet Allocation", "LatentDirichletAllocation", "Latent", "Dirichlet", "Allocation", "text", "topic model", "LDA"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_VOCABULARY_SIZE = "vocabulary-size", this.PARAM_TOPIC_NUMBER = "topic-number", this.PARAM_ITERATION = "iteration", this.PARAM_TERMINOLOGY_NUMBER = "terminology-number", this.render = {
      columns: this.renderColumns,
      "vocabulary-size": this.renderVocabularySize,
      "topic-number": this.renderTopicNumber,
      iteration: this.renderIteration,
      "terminology-number": this.renderTerminologyNumber,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createVocabularySizeControl(), this.createTopicNumberControl(), this.createIterationControl(), this.createTerminologyNumberControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(this.$columns);
      var o = {
        rowCount: 1,
        multiple: !1,
        changed: function changed(e, o) {
          t.createColumnListCommand("columns", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createVocabularySizeControl = function () {
    var e = this;
    this.$vocabularySize = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Vocabulary Size", function (o) {
      o.append(this.$vocabularySize);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("262144 (2 <= value)")
      };
      e.vocabularySizeControl = e.createNumericInput(e.$vocabularySize, r), e.vocabularySizeControl.onChange(function () {
        e.createNumericInputCommand("vocabulary-size", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "vocabulary-size", "Vocabulary Size");
  }, e.prototype.createTopicNumberControl = function () {
    var e = this;
    this.$topicNumber = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Topic Number", function (o) {
      o.append(this.$topicNumber);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)")
      };
      e.topicNumberControl = e.createNumericInput(e.$topicNumber, r), e.topicNumberControl.onChange(function () {
        e.createNumericInputCommand("topic-number", this.getValue());
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "topic-number", "Topic Number");
  }, e.prototype.createIterationControl = function () {
    var e = this;
    this.$iteration = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Iteration", function (o) {
      o.append(this.$iteration);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("20 (1 <= value)")
      };
      e.iterationControl = e.createNumericInput(e.$iteration, r), e.iterationControl.onChange(function () {
        e.createNumericInputCommand("iteration", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "iteration", "Iteration");
  }, e.prototype.createTerminologyNumberControl = function () {
    var e = this;
    this.$terminologyNumber = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var o = this.addPropertyControl("Terminology Number", function (o) {
      o.append(this.$terminologyNumber);
      var r = {
        numberType: "int",
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (1 < value)")
      };
      e.terminologyNumberControl = e.createNumericInput(e.$terminologyNumber, r), e.terminologyNumberControl.onChange(function () {
        e.createNumericInputCommand("terminology-number", this.getValue());
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "terminology-number", "Terminology Number");
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var e = [];

    for (var o in t) {
      "string" == t[o].type && e.push(t[o]);
    }

    this.columnsControl.setItems(e), this.groupbyControl.setItems(t);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderVocabularySize = function () {
    var t = this.options.fnUnit.param;
    this.vocabularySizeControl.setValue(t[this.PARAM_VOCABULARY_SIZE]);
  }, e.prototype.renderTopicNumber = function () {
    var t = this.options.fnUnit.param;
    this.topicNumberControl.setValue(t[this.PARAM_TOPIC_NUMBER]);
  }, e.prototype.renderIteration = function () {
    var t = this.options.fnUnit.param;
    this.iterationControl.setValue(t[this.PARAM_ITERATION]);
  }, e.prototype.renderTerminologyNumber = function () {
    var t = this.options.fnUnit.param;
    this.terminologyNumberControl.setValue(t[this.PARAM_TERMINOLOGY_NUMBER]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "vocabulary-size" === this.problems[t].param ? this.createValidationContent(this.$vocabularySize, this.problems[t]) : "topic-number" === this.problems[t].param ? this.createValidationContent(this.$topicNumber, this.problems[t]) : "iteration" === this.problems[t].param ? this.createValidationContent(this.$iteration, this.problems[t]) : "terminology-number" === this.problems[t].param ? this.createValidationContent(this.$terminologyNumber, this.problems[t]) : "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderErrorColumns = function (t) {
    this.createValidationContent(this.$columns, t);
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.latentDirichletAllocation.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_VOCABULARY_SIZE = "vocabulary-size", this.PARAM_TOPIC_NUMBER = "topic-number", this.PARAM_ITERATION = "iteration", this.PARAM_TERMINOLOGY_NUMBER = "terminology-number", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addTopicNumberRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    }), this.addRule(function (e) {
      return t.checkNumberArray(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addTopicNumberRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (!t.checkLinkIsConnected(e) && t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: this.PARAM_TOPIC_NUMBER,
          messageParam: ["Topic Number"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_TOPIC_NUMBER]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.latentDirichletAllocation.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.nGram = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "nGram",
      name: "NGram",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "new-column": "",
        "hold-columns": [[]],
        number: ""
      },
      display: {
        label: "NGram",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function transforms input string arrays into a sequence of ngrams.",
    tags: ["Extraction", "NGram", "ngram", "N Gram", "text", "consecutive words", "letters", "string"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns,
      "new-column": this.renderNewColumnName,
      number: this.renderNumber
    }, this.createColumnsControl(), this.createHoldColumnsControl(), this.createNewColumnNameControl(), this.createNumberControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.columnsControl = {};
    this.$columns = this.createCommonColumnsControl("columnsControl", "Column", {
      multiple: !1
    }), this.columnsControl.onChange(function () {
      var t = e.createColumnsCommand("columns", e.columnsControl);
      e.executeCommand(t);
    });
  }, e.prototype.createNewColumnNameControl = function (t) {
    var e = this;
    this.$newColumnName = $('<input class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>');
    var o = this.addPropertyControl("New Column Name", function (t) {
      t.append(e.$newColumnName), e.newColumnNameControl = e.createInput(e.$newColumnName, {
        height: "23px"
      }, "");
    });
    this.$newColumnName.on("change", function () {
      if (e.isInputValueChanged("new-column", $(this).val())) {
        var t = e.createCommonCommand("new-column", $(this).val());
        e.executeCommand(t);
      }
    });
    var r = o.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "new-column", "New Column Name");
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    this.holdColumnsControl = {};
    this.$holdColumns = this.createCommonColumnsControl("holdColumnsControl", "Hold Columns", {
      maxRowCount: 6,
      multiple: !0
    }), this.holdColumnsControl.onChange(function () {
      var t = e.createColumnsCommand("hold-columns", e.holdColumnsControl);
      e.executeCommand(t);
    });
  }, e.prototype.createNumberControl = function (e) {
    var o = this;
    this.$number = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Number of Word Bundle", function (e) {
      e.append(o.$number);
      var r = {
        numberType: "int",
        min: 1,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(1 <= value)")
      };
      o.numberControl = o.createNumericInput(o.$number, r), o.numberControl.onChange(function () {
        var t = o.createCommonCommand("number", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "number", "Number of Word Bundle");
  }, e.prototype.createCommonColumnsControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(n);
      r[t] = r.createColumnList(n, o || {
        maxRowCount: 1,
        multiple: !1
      });
    }, "Column" == e ? {
      mandatory: !0
    } : {}), n;
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = $.grep(e, function (t) {
      return t.type.indexOf("string[]") > -1;
    });
    this.columnsControl.setItems(o), this.holdColumnsControl.setItems(e);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param;
    t["hold-columns"] && this.holdColumnsControl.setSelectedItems(t["hold-columns"][0]);
  }, e.prototype.renderNewColumnName = function () {
    this.$newColumnName.val(this.options.fnUnit.param["new-column"] || "");
  }, e.prototype.renderNumber = function () {
    this.numberControl.setValue(this.options.fnUnit.param.number || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param ? this.createValidationContent(this.$columns, this.problems[t]) : "number" === this.problems[t].param && this.createValidationContent(this.$number, this.problems[t]), "new-column" === this.problems[t].param && this.createValidationContent(this.$newColumnName.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]];
    var n = o.getSelectedItems();
    if (n) for (var a in n) {
      r.ref.param[e][0].push(n[a]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && "object" == typeof r) for (var i in a) {
      n.ref.param[e].push(a[i]);
    } else a && "string" == typeof r && (n.ref.param[e] = void 0 === a[0] ? "" : a[0]);
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, t.VA.Core.Functions.Library.nGram.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_NUMBER = "number", this.PARAM_NEW_COLUMN = "new-column", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addNumberRule(), this.addNewColumnNameRule(this.PARAM_NEW_COLUMN);
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addNumberRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_NUMBER,
          messageParam: ["Number of Word Bundle"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_NUMBER]);
      }
    }), this.addRule(function (e) {
      if (t._hasSchema(e) && parseInt(e.param[t.PARAM_NUMBER]) < 1) {
        var o = {
          errorCode: "BR-0010",
          param: t.PARAM_NUMBER,
          messageParam: ["Number of Word Bundle", "1"]
        };
        return t.problemFactory.createProblem(o, e);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.nGram.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.stopWordsRemover = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "stopWordsRemover",
      name: "StopWordsRemover",
      inData: [],
      outData: [],
      param: {
        "input-col": "",
        "output-col": "",
        "hold-cols": [],
        "case-sensitive": "false",
        "stop-words": []
      },
      display: {
        label: "Stop Words Remover",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Stop words are words which are to be filtered out in processing of natural language data (text). This is a function to remove the user-defined stop words (input as an array or as a second inData) or the same default stop words as scikit-learn or spark-ml (default).",
    mandatory: [],
    tags: ["StopWordsRemover", "Stop Words Remover", "StopWordsRemover", "Stop", "Words", "Remover"],
    "in-range": {
      min: "1",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-col": this.renderInputColControl,
      "output-col": this.renderOutputColControl,
      "hold-cols": this.renderHoldColsControl,
      "case-sensitive": this.renderCaseSensitiveControl,
      "stop-words": this.renderStopWordsControl
    }, this.$elements = {}, this.controls = {}, this.createInputColControl(), this.createOutputColControl(), this.createHoldColsControl(), this.createCaseSensitiveControl(), this.createStopWordsControl();
  }, e.prototype.createInputColControl = function (t) {
    var e = this;
    e.$elements["input-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Column", function (t) {
      t.append(e.$elements["input-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["input-col"] = e.createColumnList(e.$elements["input-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColControl = function (t) {
    var e = this.options.fnUnit.param["input-col"];
    this.controls["input-col"].setSelectedItems([e]);
  }, e.prototype.createOutputColControl = function (e) {
    var o = this;
    o.$elements["output-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type4"/>');
    var r = o.addPropertyControl("Output Column", function (e) {
      e.append(o.$elements["output-col"]);
      o.controls["output-col"] = o.createInput(o.$elements["output-col"], {
        placeHolder: "stop_words_remover"
      }), t.VA.Core.Utils.InputValidator.appendValidationCondition(o.$elements["output-col"]), o.$elements["output-col"].on("change", function (t) {
        if (o.isInputValueChanged("output-col", $(this).val())) {
          var e = o.createSetParameterValueCommand("output-col", $(this).val());
          o.executeCommand(e);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "output-col", "Output Column");
  }, e.prototype.renderOutputColControl = function (t) {
    var e = this.options.fnUnit.param["output-col"];
    this.$elements["output-col"].val(e || "");
  }, e.prototype.createHoldColsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createCaseSensitiveControl = function (t) {
    var e = this;
    e.$elements["case-sensitive.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["case-sensitive.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = e.addPropertyControl("Case Sensitive", function (t) {
      t.append(e.$elements["case-sensitive.true"]), e.controls["case-sensitive.true"] = e.createRadioButton(e.$elements["case-sensitive.true"], {
        width: "undefined",
        groupName: "case-sensitive"
      }), e.$elements["case-sensitive.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("case-sensitive", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["case-sensitive.false"]), e.controls["case-sensitive.false"] = e.createRadioButton(e.$elements["case-sensitive.false"], {
        width: "undefined",
        groupName: "case-sensitive"
      }), e.$elements["case-sensitive.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("case-sensitive", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "case-sensitive", "Case Sensitive");
  }, e.prototype.renderCaseSensitiveControl = function (t) {
    var e = "case-sensitive." + this.options.fnUnit.param["case-sensitive"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createStopWordsControl = function (t) {
    var e = this;
    e.$elements["stop-words"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), this.$stopWordsProperties = e.addPropertyControl("Stop Words", function (t) {
      t.append(e.$elements["stop-words"]);
      e.controls["stop-words"] = e.createInput(e.$elements["stop-words"], {}), e.$elements["stop-words"].on("change", function (t) {
        if (e.isInputValueChanged("stop-words", [$(this).val()])) {
          var o = e.createSetArrayParameterCommand("stop-words", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    });
    var o = this.$stopWordsProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "stop-words", "Stop Words");
  }, e.prototype.renderStopWordsControl = function (t) {
    var e = this.options.fnUnit.param["stop-words"],
        o = "";

    for (var r in e) {
      o = o + e[r] + ",";
    }

    this.$elements["stop-words"].val(o.substring(0, o.length - 1) || "");
  }, e.prototype.createSetArrayParameterCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [];
    var n = o.split(",");

    for (var a in n) {
      r.ref.param[e].push(n[a].trim());
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, []), this.controls["input-col"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["hold-cols"].setItems(t), this.options.fnUnit.inData.length > 1 ? this.$stopWordsProperties.hide() : this.$stopWordsProperties.show();
  }, t.VA.Core.Functions.Library.stopWordsRemover.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputColRule();
  }, o.prototype.addInputColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-col", e.param["input-col"], "Input Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-col", e.param["input-col"]);
    });
  }, t.VA.Core.Functions.Library.stopWordsRemover.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.MultiInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.tFIDF = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "tFIDF",
      name: "TFIDF",
      inData: [],
      outData: [],
      param: {
        "input-col": "",
        "hold-columns": [],
        "min-df": "",
        "min-tf": "",
        "vocabulary-size": "",
        "tf-weighting-scheme": "rawCount",
        "idf-weighting-scheme": "unary",
        "output-type": "explodeSparse",
        "vocabulary-col": "",
        "index-col": "",
        "frequency-col": ""
      },
      display: {
        label: "TFIDF",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This is a function to calculate TF-IDF, abbreviated term for term frequency-inverse document frequency.",
    mandatory: [],
    tags: ["Extraction", "tfidf"],
    "in-range": {
      min: "1",
      max: "2"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-col": this.renderInputColControl,
      "hold-columns": this.renderHoldColumnsControl,
      "min-df": this.renderMinDfControl,
      "min-tf": this.renderMinTfControl,
      "vocabulary-size": this.renderVocabularySizeControl,
      "tf-weighting-scheme": this.renderTfWeightingSchemeControl,
      "idf-weighting-scheme": this.renderIdfWeightingSchemeControl,
      "output-type": this.renderOutputTypeControl,
      "vocabulary-col": this.renderVocabularyColControl,
      "index-col": this.renderIndexColControl,
      "frequency-col": this.renderFrequencyColControl
    }, this.$elements = {}, this.controls = {}, this.createInputColControl(), this.createHoldColumnsControl(), this.createMinDfControl(), this.createMinTfControl(), this.createVocabularySizeControl(), this.createTfWeightingSchemeControl(), this.createIdfWeightingSchemeControl(), this.createOutputTypeControl(), this.createVocabularyColControl(), this.createIndexColControl(), this.createFrequencyColControl();
  }, e.prototype.createInputColControl = function (t) {
    var e = this;
    e.$elements["input-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Column", function (t) {
      t.append(e.$elements["input-col"]);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["input-col"] = e.createColumnList(e.$elements["input-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColControl = function (t) {
    var e = this.options.fnUnit.param["input-col"];
    this.controls["input-col"].setSelectedItems([e]);
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createMinDfControl = function (e) {
    var o = this;
    o.$elements["min-df"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Min Df", function (e) {
      e.append(o.$elements["min-df"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (1 <= value)"),
        numberType: "double"
      };
      o.controls["min-df"] = o.createNumericInput(o.$elements["min-df"], r), o.controls["min-df"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-df", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-df", "Min Df");
  }, e.prototype.renderMinDfControl = function (t) {
    var e = this.options.fnUnit.param["min-df"];
    this.controls["min-df"].setValue(e || "");
  }, e.prototype.createMinTfControl = function (e) {
    var o = this;
    o.$elements["min-tf"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Min Tf", function (e) {
      e.append(o.$elements["min-tf"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1.0 (1 <= value)"),
        numberType: "double"
      };
      o.controls["min-tf"] = o.createNumericInput(o.$elements["min-tf"], r), o.controls["min-tf"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-tf", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-tf", "Min Tf");
  }, e.prototype.renderMinTfControl = function (t) {
    var e = this.options.fnUnit.param["min-tf"];
    this.controls["min-tf"].setValue(e || "");
  }, e.prototype.createVocabularySizeControl = function (e) {
    var o = this;
    o.$elements["vocabulary-size"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Vocabulary Size", function (e) {
      e.append(o.$elements["vocabulary-size"]);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("262144 (1 <= value)"),
        numberType: "int"
      };
      o.controls["vocabulary-size"] = o.createNumericInput(o.$elements["vocabulary-size"], r), o.controls["vocabulary-size"].onChange(function () {
        var t = o.createSetParameterValueCommand("vocabulary-size", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "vocabulary-size", "Vocabulary Size");
  }, e.prototype.renderVocabularySizeControl = function (t) {
    var e = this.options.fnUnit.param["vocabulary-size"];
    this.controls["vocabulary-size"].setValue(e || "");
  }, e.prototype.createTfWeightingSchemeControl = function (t) {
    var e = this;
    this.$tfWeightingControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.tfSource = [{
      label: "rawCount",
      value: "rawCount"
    }];
    var o = this.addPropertyControl("Tf Weighting Scheme", function (t) {
      e.createDropDownList(this.$tfWeightingControl, {
        source: this.tfSource
      }), t.append(e.$tfWeightingControl.parent()), e.$tfWeightingControl.on("change", function () {
        var t = e.$tfWeightingControl.jqxDropDownList("getSelectedItem") ? e.$tfWeightingControl.jqxDropDownList("getSelectedItem").value : "",
            o = e.createCommonCommand("tf-weighting-scheme", t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "tf-weighting-scheme", "Tf Weighting Scheme");
  }, e.prototype.renderTfWeightingSchemeControl = function (t) {
    var e = this.options.fnUnit.param["tf-weighting-scheme"];
    void 0 === e || "" === e ? this.$tfWeightingControl.jqxDropDownList("selectIndex", 0) : this.$tfWeightingControl.jqxDropDownList("selectItem", e);
  }, e.prototype.createIdfWeightingSchemeControl = function (t) {
    var e = this;
    this.$idfWeightingControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.idfSource = [{
      label: "unary",
      value: "unary"
    }, {
      label: "inverseDocumentFrequency",
      value: "inverseDocumentFrequency"
    }];
    var o = this.addPropertyControl("Idf Weighting Scheme", function (t) {
      e.createDropDownList(this.$idfWeightingControl, {
        source: this.idfSource
      }), t.append(e.$idfWeightingControl.parent()), e.$idfWeightingControl.on("change", function () {
        var t = e.$idfWeightingControl.jqxDropDownList("getSelectedItem") ? e.$idfWeightingControl.jqxDropDownList("getSelectedItem").value : "",
            o = e.createCommonCommand("idf-weighting-scheme", t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "idf-weighting-scheme", "Idf Weighting Scheme");
  }, e.prototype.renderIdfWeightingSchemeControl = function (t) {
    var e = this.options.fnUnit.param["idf-weighting-scheme"];
    void 0 === e || "" === e ? this.$idfWeightingControl.jqxDropDownList("selectIndex", 0) : this.$idfWeightingControl.jqxDropDownList("selectItem", e);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createOutputTypeControl = function (t) {
    var e = this;
    this.$outputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.outputSource = [{
      label: "explodeSparse",
      value: "explodeSparse"
    }, {
      label: "explodeDense",
      value: "explodeDense"
    }];
    var o = this.addPropertyControl("Output Type", function (t) {
      e.createDropDownList(this.$outputControl, {
        source: this.outputSource
      }), t.append(e.$outputControl.parent()), e.$outputControl.on("change", function () {
        var t = e.$outputControl.jqxDropDownList("getSelectedItem") ? e.$outputControl.jqxDropDownList("getSelectedItem").value : "",
            o = e.createCommonCommand("output-type", t);
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "output-type", "Output Type");
  }, e.prototype.renderOutputTypeControl = function (t) {
    var e = this.options.fnUnit.param["output-type"];
    void 0 === e || "" === e ? this.$outputControl.jqxDropDownList("selectIndex", 0) : this.$outputControl.jqxDropDownList("selectItem", e);
  }, e.prototype.createVocabularyColControl = function (t) {
    var e = this;
    e.$elements["vocabulary-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$vocabularyColProperties = e.addPropertyControl("Vocabulary Column", function (t) {
      t.append(e.$elements["vocabulary-col"]);
      e.controls["vocabulary-col"] = e.createInput(e.$elements["vocabulary-col"], {
        placeHolder: "vocabulary"
      }), e.$elements["vocabulary-col"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("vocabulary-col", $(this).val());
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$vocabularyColProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "vocabulary-col", "Vocabulary Column");
  }, e.prototype.renderVocabularyColControl = function (t) {
    var e = this.options.fnUnit.param["vocabulary-col"];
    this.$elements["vocabulary-col"].val(e || "");
  }, e.prototype.createIndexColControl = function (t) {
    var e = this;
    e.$elements["index-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$indexColProperties = e.addPropertyControl("Index Column", function (t) {
      t.append(e.$elements["index-col"]);
      e.controls["index-col"] = e.createInput(e.$elements["index-col"], {
        placeHolder: "index"
      }), e.$elements["index-col"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("index-col", $(this).val());
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$indexColProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "index-col", "Index Column");
  }, e.prototype.renderIndexColControl = function (t) {
    var e = this.options.fnUnit.param["index-col"];
    this.$elements["index-col"].val(e || "");
  }, e.prototype.createFrequencyColControl = function (t) {
    var e = this;
    e.$elements["frequency-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), e.$frequencyColProperties = e.addPropertyControl("Frequency Column", function (t) {
      t.append(e.$elements["frequency-col"]);
      e.controls["frequency-col"] = e.createInput(e.$elements["frequency-col"], {
        placeHolder: "frequency"
      }), e.$elements["frequency-col"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("frequency-col", $(this).val());
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    });
    var o = e.$frequencyColProperties.find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "frequency-col", "Frequency Column");
  }, e.prototype.renderFrequencyColControl = function (t) {
    var e = this.options.fnUnit.param["frequency-col"];
    this.$elements["frequency-col"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, []), this.controls["input-col"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["hold-columns"].setItems(t);
  }, t.VA.Core.Functions.Library.tFIDF.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.MultiInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.MultiInputValidator.prototype.initRules.call(this), this.addInputColRule(), this.addHoldColumnsRule();
  }, o.prototype.addInputColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-col", e.param["input-col"], "Input Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-col", e.param["input-col"]);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "string"]);
    });
  }, t.VA.Core.Functions.Library.tFIDF.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.tokenizer = {
    category: "textanalytics",
    defaultFnUnit: {
      func: "tokenizer",
      name: "Tokenizer",
      inData: [],
      outData: [],
      param: {
        "input-col": "",
        "output-col": "",
        "hold-cols": [],
        gaps: "true",
        "min-token-length": "",
        pattern: "",
        "to-lowercase": "true"
      },
      display: {
        label: "Tokenizer",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function is a regular expression based tokenizer to extract tokens in either two ways depending on the parameter gaps is true or not",
    tags: ["Tokenizer", "Token", "split", "regular expression", "expression"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      "input-col": this.renderInputColControl,
      "output-col": this.renderOutputColControl,
      "hold-cols": this.renderHoldColumnsControl,
      gaps: this.renderGapsControl,
      "min-token-length": this.renderMinTokenLengthControl,
      pattern: this.renderPatternControl,
      "to-lowercase": this.renderToLowercaseControl
    }, this.$elements = {}, this.controls = {}, this.createInputColControl(), this.createOutputColControl(), this.createHoldColumnsControl(), this.createGapsControl(), this.createMinTokenLengthControl(), this.createPatternControl(), this.createToLowercaseControl();
  }, e.prototype.createInputColControl = function (t) {
    var e = this;
    e.$elements["input-col"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Input Column", function (t) {
      t.append(e.$elements["input-col"]);
      var o = {
        expand: !0,
        multiple: !1,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("input-col", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls["input-col"] = e.createColumnList(e.$elements["input-col"], o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderInputColControl = function (t) {
    var e = this.options.fnUnit.param["input-col"];
    this.controls["input-col"].setSelectedItems([e]);
  }, e.prototype.createOutputColControl = function (t) {
    var e = this;
    e.$elements["output-col"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Output Column", function (t) {
      t.append(e.$elements["output-col"]);
      e.controls["output-col"] = e.createInput(e.$elements["output-col"], {
        placeHolder: "Enter value"
      }), e.$elements["output-col"].on("change", function (t) {
        var o = e.createSetParameterValueCommand("output-col", $(this).val());
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "output-col", "Output Column");
  }, e.prototype.renderOutputColControl = function (t) {
    var e = this.options.fnUnit.param["output-col"];
    this.$elements["output-col"].val(e || "");
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-cols"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-cols"]);
      var o = {
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-cols", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["hold-cols"] = e.createColumnList(e.$elements["hold-cols"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-cols"];
    this.controls["hold-cols"].setSelectedItems(e);
  }, e.prototype.createGapsControl = function (t) {
    var e = this;
    e.$elements["gaps.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["gaps.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = e.addPropertyControl("Gaps", function (t) {
      t.append(e.$elements["gaps.true"]), e.controls["gaps.true"] = e.createRadioButton(e.$elements["gaps.true"], {
        width: "50%",
        groupName: "gaps"
      }), e.$elements["gaps.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("gaps", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["gaps.false"]), e.controls["gaps.false"] = e.createRadioButton(e.$elements["gaps.false"], {
        width: "50%",
        groupName: "gaps"
      }), e.$elements["gaps.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("gaps", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "gaps", "Gaps");
  }, e.prototype.renderGapsControl = function (t) {
    var e = "gaps." + this.options.fnUnit.param.gaps;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createMinTokenLengthControl = function (e) {
    var o = this;
    o.$elements["min-token-length"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Minimum Token Length", function (e) {
      e.append(o.$elements["min-token-length"]);
      var r = {
        numberType: "double",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("1 (0 <= value)")
      };
      o.controls["min-token-length"] = o.createNumericInput(o.$elements["min-token-length"], r), o.controls["min-token-length"].onChange(function () {
        var t = o.createSetParameterValueCommand("min-token-length", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "min-token-length", "Minimum Token Length");
  }, e.prototype.renderMinTokenLengthControl = function (t) {
    var e = this.options.fnUnit.param["min-token-length"];
    this.controls["min-token-length"].setValue(e || "");
  }, e.prototype.createPatternControl = function (t) {
    var e = this;
    e.$elements.pattern = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Pattern", function (t) {
      t.append(e.$elements.pattern);
      e.controls.pattern = e.createInput(e.$elements.pattern, {
        placeHolder: "\\s+"
      }), e.$elements.pattern.on("change", function (t) {
        if (e.isInputValueChanged("pattern", $(this).val())) {
          var o = e.createSetParameterValueCommand("pattern", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "pattern", "Pattern");
  }, e.prototype.renderPatternControl = function (t) {
    var e = this.options.fnUnit.param.pattern;
    this.$elements.pattern.val(e || "");
  }, e.prototype.createToLowercaseControl = function (t) {
    var e = this;
    e.$elements["to-lowercase.true"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), e.$elements["to-lowercase.false"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    var o = e.addPropertyControl("To Lowercase", function (t) {
      t.append(e.$elements["to-lowercase.true"]), e.controls["to-lowercase.true"] = e.createRadioButton(e.$elements["to-lowercase.true"], {
        width: "50%",
        groupName: "to-lowercase"
      }), e.$elements["to-lowercase.true"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("to-lowercase", "true");
        e.executeCommand(o);
      }), t.append(e.$elements["to-lowercase.false"]), e.controls["to-lowercase.false"] = e.createRadioButton(e.$elements["to-lowercase.false"], {
        width: "50%",
        groupName: "to-lowercase"
      }), e.$elements["to-lowercase.false"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("to-lowercase", "false");
        e.executeCommand(o);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "to-lowercase", "To Lowercase");
  }, e.prototype.renderToLowercaseControl = function (t) {
    var e = "to-lowercase." + this.options.fnUnit.param["to-lowercase"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["string"]), this.controls["input-col"].setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["hold-cols"].setItems(t);
  }, t.VA.Core.Functions.Library.tokenizer.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addInputColRule(), this.addHoldColumnsRule();
  }, e.prototype.addInputColRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input-col", e.param["input-col"], "Input Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input-col", e.param["input-col"]);
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-cols", e.param["hold-cols"]);
    });
  }, t.VA.Core.Functions.Library.tokenizer.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.arimaPredict = {
    category: "timeseries",
    defaultFnUnit: {
      func: "arimaPredict",
      name: "ArimaPredict",
      inData: [],
      outData: [],
      param: {
        number: "",
        groupby: []
      },
      display: {
        label: "ARIMA Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Forecast the following N steps from a given trained ARIMA model.",
    tags: ["Arima Predict", "ArimaPredict", "Arima", "Predict", "time series"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      number: this.renderNumberControl
    }, this.$elements = {}, this.controls = {}, this.createNumberControl();
  }, e.prototype.createNumberControl = function (e) {
    var o = this;
    o.$elements.number = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Number", function (e) {
      e.append(o.$elements.number);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("20 (1 <= value)")
      };
      o.controls.number = o.createNumericInput(o.$elements.number, r), o.controls.number.onChange(function () {
        var t = o.createSetParameterValueCommand("number", this.getValue());
        o.executeCommand(t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "number", "Number");
  }, e.prototype.renderNumberControl = function (t) {
    var e = this.options.fnUnit.param.number;
    this.controls.number.setValue(e || "");
  }, e.prototype.createSetParameterValueCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.arimaPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.arimaPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.arimaTrain = {
    category: "timeseries",
    defaultFnUnit: {
      func: "arimaTrain",
      name: "ArimaTrain",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        p: "",
        d: "",
        q: "",
        intercept: "true",
        groupby: []
      },
      display: {
        label: "ARIMA Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Find the best ARIMA(p,d,q) model for fixed p, d, q.",
    tags: ["Arima Train", "ArimaTrain", "Arima", "Train", "time series"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      p: this.renderPControl,
      d: this.renderDControl,
      q: this.renderQControl,
      intercept: this.renderInterceptControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createPControl(), this.createDControl(), this.createQControl(), this.createInterceptControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns[0];
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createPControl = function (e) {
    var o = this;
    o.$elements.p = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("P", function (e) {
      e.append(o.$elements.p);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(0 <= value)")
      };
      o.controls.p = o.createNumericInput(o.$elements.p, r), o.controls.p.onChange(function () {
        var t = o.createSetParameterValueCommand("p", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "p", "P");
  }, e.prototype.renderPControl = function (t) {
    var e = this.options.fnUnit.param.p;
    this.controls.p.setValue(e || "");
  }, e.prototype.createDControl = function (e) {
    var o = this;
    o.$elements.d = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("D", function (e) {
      e.append(o.$elements.d);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(0 <= value)")
      };
      o.controls.d = o.createNumericInput(o.$elements.d, r), o.controls.d.onChange(function () {
        var t = o.createSetParameterValueCommand("d", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "d", "D");
  }, e.prototype.renderDControl = function (t) {
    var e = this.options.fnUnit.param.d;
    this.controls.d.setValue(e || "");
  }, e.prototype.createQControl = function (e) {
    var o = this;
    o.$elements.q = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Q", function (e) {
      e.append(o.$elements.q);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(0 <= value)")
      };
      o.controls.q = o.createNumericInput(o.$elements.q, r), o.controls.q.onChange(function () {
        var t = o.createSetParameterValueCommand("q", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "q", "Q");
  }, e.prototype.renderQControl = function (t) {
    var e = this.options.fnUnit.param.q;
    this.controls.q.setValue(e || "");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiocontrol">' + e + "</div>");
    t.append(n), this.createRadioButton(n, {
      groupName: o
    }), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = r.createInterceptCommand();
      r.executeCommand(e);
    });
  }, e.prototype.createInterceptControl = function () {
    var t = this;
    this.$interceptControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>');
    var e = this.addPropertyControl("Intercept", function (e) {
      e.append(t.$interceptControl), t.createRadioButtonControl(t.$interceptControl, "True", "intercept"), t.createRadioButtonControl(t.$interceptControl, "False", "intercept");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "intercept", "Intercept");
  }, e.prototype.renderInterceptControl = function () {
    var t = this.options.fnUnit.param.intercept;
    "true" === t ? t = "True" : "false" === t && (t = "False"), $(this.$interceptControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.createSetParameterValueCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createInterceptCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = "true",
        r = this.$interceptControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radiocontrol");
    return $.each(r, function (t, e) {
      if ($(e).jqxRadioButton("val") && "" !== $(e).attr("value")) return o = $(e).attr("value"), !1;
    }), "True" === o ? o = "true" : "False" === o && (o = "false"), e.ref.param.intercept = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    this.dataMap && this.options.fnUnit[IN_DATA][0] && this.dataMap[this.options.fnUnit[IN_DATA][0]].columns, t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t);
  }, t.VA.Core.Functions.Library.arimaTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addPRule(), this.addDRule(), this.addQRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns, "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "columns", e.param.columns, ["number"]);
    });
  }, e.prototype.addPRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        return t._checkStringIsEmpty({
          errorCode: "BR-0033",
          param: "p",
          messageParam: ["P"]
        }, e, e.param.p);
      }
    });
  }, e.prototype.addDRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        return t._checkStringIsEmpty({
          errorCode: "BR-0033",
          param: "d",
          messageParam: ["D"]
        }, e, e.param.d);
      }
    });
  }, e.prototype.addQRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        return t._checkStringIsEmpty({
          errorCode: "BR-0033",
          param: "q",
          messageParam: ["Q"]
        }, e, e.param.q);
      }
    });
  }, t.VA.Core.Functions.Library.arimaTrain.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.aRXPredict = {
    category: "timeseries",
    defaultFnUnit: {
      func: "aRXPredict",
      name: "ARXPredict",
      inData: [],
      outData: [],
      param: {
        xcolumn: [[]]
      },
      display: {
        label: "ARX Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Predict a time series using an ARX model.",
    mandatory: [],
    tags: ["ARX", "arima", "autoregression", "time series", "arma", "arx predict"],
    "in-range": {
      min: "2",
      max: "2"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      xcolumn: this.renderXcolumnControl
    }, this.$elements = {}, this.controls = {}, this.createXcolumnControl();
  }, e.prototype.createXcolumnControl = function (t) {
    var e = this;
    e.$elements.xcolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Column", function (t) {
      t.append(e.$elements.xcolumn);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumn = e.createColumnList(e.$elements.xcolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnControl = function (t) {
    var e = this.options.fnUnit.param.xcolumn[0];
    this.controls.xcolumn.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.xcolumn.setItems(t);
  }, t.VA.Core.Functions.Library.aRXPredict.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addXcolumnRule();
  }, o.prototype.addXcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumn", e.param.xcolumn, "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumn", e.param.xcolumn);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "xcolumn", e.param.xcolumn, ["number"]);
    });
  }, t.VA.Core.Functions.Library.aRXPredict.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.aRXTrain = {
    category: "timeseries",
    defaultFnUnit: {
      func: "aRXTrain",
      name: "ARXTrain",
      inData: [],
      outData: [],
      param: {
        ycolumn: [[]],
        xcolumn: [[]],
        yMaxLag: "",
        xMaxLag: ""
      },
      display: {
        label: "ARX Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Fit an ARX model of a given time series.",
    mandatory: [],
    tags: ["ARX", "arima", "autoregression", "time series", "arma", "arx train"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ycolumn: this.renderYcolumnControl,
      xcolumn: this.renderXcolumnControl,
      yMaxLag: this.renderYMaxLagControl,
      xMaxLag: this.renderXMaxLagControl
    }, this.$elements = {}, this.controls = {}, this.createYcolumnControl(), this.createXcolumnControl(), this.createYMaxLagControl(), this.createXMaxLagControl();
  }, e.prototype.createYcolumnControl = function (t) {
    var e = this;
    e.$elements.ycolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Y Column", function (t) {
      t.append(e.$elements.ycolumn);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("ycolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.ycolumn = e.createColumnList(e.$elements.ycolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderYcolumnControl = function (t) {
    var e = this.options.fnUnit.param.ycolumn[0];
    this.controls.ycolumn.setSelectedItems(e);
  }, e.prototype.createXcolumnControl = function (t) {
    var e = this;
    e.$elements.xcolumn = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("X Column", function (t) {
      t.append(e.$elements.xcolumn);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("xcolumn", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.xcolumn = e.createColumnList(e.$elements.xcolumn, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderXcolumnControl = function (t) {
    var e = this.options.fnUnit.param.xcolumn[0];
    this.controls.xcolumn.setSelectedItems(e);
  }, e.prototype.createYMaxLagControl = function (e) {
    var o = this;
    o.$elements.yMaxLag = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Maximum Y Lag", function (e) {
      e.append(o.$elements.yMaxLag);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value)"),
        numberType: "int",
        min: 0,
        minus: !1
      };
      o.controls.yMaxLag = o.createNumericInput(o.$elements.yMaxLag, r), o.controls.yMaxLag.onChange(function () {
        var t = o.createSetParameterValueCommand("yMaxLag", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "yMaxLag", "Maximum Y Lag");
  }, e.prototype.renderYMaxLagControl = function (t) {
    var e = this.options.fnUnit.param.yMaxLag;
    this.controls.yMaxLag.setValue(e || "");
  }, e.prototype.createXMaxLagControl = function (e) {
    var o = this;
    o.$elements.xMaxLag = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Maximum X Lag", function (e) {
      e.append(o.$elements.xMaxLag);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value)"),
        numberType: "int",
        min: 0,
        minus: !1
      };
      o.controls.xMaxLag = o.createNumericInput(o.$elements.xMaxLag, r), o.controls.xMaxLag.onChange(function () {
        var t = o.createSetParameterValueCommand("xMaxLag", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "xMaxLag", "Maximum X Lag");
  }, e.prototype.renderXMaxLagControl = function (t) {
    var e = this.options.fnUnit.param.xMaxLag;
    this.controls.xMaxLag.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.ycolumn.setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls.xcolumn.setItems(t);
  }, t.VA.Core.Functions.Library.aRXTrain.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addYcolumnRule(), this.addXcolumnRule();
  }, o.prototype.addYcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "ycolumn", e.param.ycolumn, "Y Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "ycolumn", e.param.ycolumn);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "ycolumn", e.param.ycolumn, ["number"]);
    });
  }, o.prototype.addXcolumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "xcolumn", e.param.xcolumn, "X Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "xcolumn", e.param.xcolumn);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "xcolumn", e.param.xcolumn, ["number"]);
    });
  }, t.VA.Core.Functions.Library.aRXTrain.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.autoArimaPredict = {
    category: "timeseries",
    defaultFnUnit: {
      func: "autoArimaPredict",
      name: "AutoArimaPredict",
      inData: [],
      outData: [],
      param: {
        number: "",
        groupby: []
      },
      display: {
        label: "Auto ARIMA Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Forecast the following N steps from a given trained ARIMA model.",
    tags: ["Auto Arima Predict", "AutoArimaPredict", "Auto", "Arima", "Predict", "time series", "auto regression model", "auto regressive model", "moving average model", "aic error"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_NUMBER = "number", this.render = {
      number: this.renderNumberControl
    }, this.createNumberControl();
  }, e.prototype.createNumberControl = function () {
    var t = this;
    this.$numberInputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberInput"/>');
    var e = this.addPropertyControl("Number", function (e) {
      e.append(t.$numberInputControl);
      var o = {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: "20 (0 < value)"
      };
      t.$numberControl = t.createNumericInput(t.$numberInputControl, o), t.$numberControl.onChange(function (e) {
        var o = t.createNumberCommand(e);
        t.executeCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "number", "Number");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_NUMBER && this.createValidationContent(this.$numberInputControl, this.problems[t]);
    }
  }, e.prototype.renderNumberControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUMBER];
    this.$numberControl.setValue(t);
  }, e.prototype.fillControlValues = function (t) {
    this.dataMap && this.options.fnUnit[IN_DATA][0] && this.dataMap[this.options.fnUnit[IN_DATA][0]].columns;
  }, e.prototype.createNumberCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_NUMBER] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.autoArimaPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.autoArimaPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.autoArimaTrain = {
    category: "timeseries",
    defaultFnUnit: {
      func: "autoArimaTrain",
      name: "AutoArimaTrain",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        maxP: "",
        maxD: "",
        maxQ: "",
        groupby: []
      },
      display: {
        label: "Auto ARIMA Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Find the best non-seasonal ARIMA(p,d,q) model for a given time series.",
    tags: ["Auto Arima Train", "AutoArimaTrain", "Auto", "Arima", "Train", "time series", "auto regression model", "auto regressive model", "moving average model", "aic error"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      maxP: this.renderMaxPControl,
      maxD: this.renderMaxDControl,
      maxQ: this.renderMaxQControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createMaxPControl(), this.createMaxDControl(), this.createMaxQControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns[0];
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createMaxPControl = function (e) {
    var o = this;
    o.$elements.maxP = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Max P", function (e) {
      e.append(o.$elements.maxP);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value)")
      };
      o.controls.maxP = o.createNumericInput(o.$elements.maxP, r), o.controls.maxP.onChange(function () {
        var t = o.createSetParameterValueCommand("maxP", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "maxP", "Max P");
  }, e.prototype.renderMaxPControl = function (t) {
    var e = this.options.fnUnit.param.maxP;
    this.controls.maxP.setValue(e || "");
  }, e.prototype.createMaxDControl = function (e) {
    var o = this;
    o.$elements.maxD = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Max D", function (e) {
      e.append(o.$elements.maxD);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("2 (0 <= value)")
      };
      o.controls.maxD = o.createNumericInput(o.$elements.maxD, r), o.controls.maxD.onChange(function () {
        var t = o.createSetParameterValueCommand("maxD", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "maxD", "Max D");
  }, e.prototype.renderMaxDControl = function (t) {
    var e = this.options.fnUnit.param.maxD;
    this.controls.maxD.setValue(e || "");
  }, e.prototype.createMaxQControl = function (e) {
    var o = this;
    o.$elements.maxQ = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Max Q", function (e) {
      e.append(o.$elements.maxQ);
      var r = {
        numberType: "int",
        min: 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("5 (0 <= value)")
      };
      o.controls.maxQ = o.createNumericInput(o.$elements.maxQ, r), o.controls.maxQ.onChange(function () {
        var t = o.createSetParameterValueCommand("maxQ", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "maxQ", "Max Q");
  }, e.prototype.renderMaxQControl = function (t) {
    var e = this.options.fnUnit.param.maxQ;
    this.controls.maxQ.setValue(e || "");
  }, e.prototype.createSetParameterValueCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t);
  }, t.VA.Core.Functions.Library.autoArimaTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns, "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "columns", e.param.columns, ["number"]);
    });
  }, t.VA.Core.Functions.Library.autoArimaTrain.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.autoCorrelation = {
    category: "timeseries",
    defaultFnUnit: {
      func: "autoCorrelation",
      name: "AutoCorrelation",
      inData: [],
      outData: [],
      param: {
        column: [[]],
        num: ""
      },
      display: {
        label: "Auto Correlation",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Computes ACF, PACF of a time series.",
    mandatory: [],
    tags: ["ACF", "PACF", "AutoCorrelation"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "2",
      max: "2"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      column: this.renderColumnControl,
      num: this.renderNumControl
    }, this.$elements = {}, this.controls = {}, this.createColumnControl(), this.createNumControl();
  }, e.prototype.createColumnControl = function (t) {
    var e = this;
    e.$elements.column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Column", function (t) {
      t.append(e.$elements.column);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("column", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.column = e.createColumnList(e.$elements.column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnControl = function (t) {
    var e = this.options.fnUnit.param.column[0];
    this.controls.column.setSelectedItems(e);
  }, e.prototype.createNumControl = function (e) {
    var o = this;
    o.$elements.num = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Number", function (e) {
      e.append(o.$elements.num);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("20 (3 <= value)"),
        numberType: "int"
      };
      o.controls.num = o.createNumericInput(o.$elements.num, r), o.controls.num.onChange(function () {
        var t = o.createSetParameterValueCommand("num", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "num", "Number");
  }, e.prototype.renderNumControl = function (t) {
    var e = this.options.fnUnit.param.num;
    this.controls.num.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.column.setItems(t);
  }, t.VA.Core.Functions.Library.autoCorrelation.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnRule();
  }, o.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "column", e.param.column, "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "column", e.param.column);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "column", e.param.column, ["number"]);
    });
  }, t.VA.Core.Functions.Library.autoCorrelation.validator = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.crossCorrelation = {
    category: "timeseries",
    defaultFnUnit: {
      func: "crossCorrelation",
      name: "CrossCorrelation",
      inData: [],
      outData: [],
      param: {
        col1: "",
        col2: "",
        num: ""
      },
      display: {
        label: "Cross Correlation",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Compute the cross-correlation of two time series columns.",
    mandatory: [],
    tags: ["cross correlation", "crosscorrelation", "autocorrelation"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      col1: this.renderCol1Control,
      col2: this.renderCol2Control,
      num: this.renderNumControl
    }, this.$elements = {}, this.controls = {}, this.createCol1Control(), this.createCol2Control(), this.createNumControl();
  }, e.prototype.createCol1Control = function (t) {
    var e = this;
    e.$elements.col1 = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Column 1", function (t) {
      t.append(e.$elements.col1);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("col1", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls.col1 = e.createColumnList(e.$elements.col1, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderCol1Control = function (t) {
    var e = this.options.fnUnit.param.col1;
    this.controls.col1.setSelectedItems([e]);
  }, e.prototype.createCol2Control = function (t) {
    var e = this;
    e.$elements.col2 = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Column 2", function (t) {
      t.append(e.$elements.col2);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("col2", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls.col2 = e.createColumnList(e.$elements.col2, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderCol2Control = function (t) {
    var e = this.options.fnUnit.param.col2;
    this.controls.col2.setSelectedItems([e]);
  }, e.prototype.createNumControl = function (t) {
    var e = this;
    e.$elements.num = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), e.addPropertyControl("Number", function (t) {
      t.append(e.$elements.num);
      e.controls.num = e.createNumericInput(e.$elements.num, {
        placeholder: "10",
        numberType: "int"
      }), e.controls.num.onChange(function () {
        var t = e.createSetParameterValueCommand("num", this.getValue());
        e.executeCommand(t);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.renderNumControl = function (t) {
    var e = this.options.fnUnit.param.num;
    this.controls.num.setValue(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.col1.setItems(t), t = this.getColumnsOfInTable(0, ["number"]), this.controls.col2.setItems(t);
  }, t.VA.Core.Functions.Library.crossCorrelation.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addCol1Rule(), this.addCol2Rule();
  }, o.prototype.addCol1Rule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "col1", e.param.col1, "Column 1");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "col1", e.param.col1);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "col1", e.param.col1, ["number"]);
    });
  }, o.prototype.addCol2Rule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "col2", e.param.col2, "Column 2");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "col2", e.param.col2);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "col2", e.param.col2, ["number"]);
    });
  }, t.VA.Core.Functions.Library.crossCorrelation.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.holtWintersPredict = {
    category: "timeseries",
    defaultFnUnit: {
      func: "holtWintersPredict",
      name: "HoltWintersPredict",
      inData: [],
      outData: [],
      param: {
        column: [[]],
        groupby: []
      },
      display: {
        label: "Holt-Winters Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "this function fits the Holt-Winters model(additive or multiplicative).",
    tags: ["holt", "winter", "winters", "predict", "HoltWinters Predict", "time series", "seasonality", "periodicity", "Holt-Winters Predict"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, t.VA.Core.Functions.Library.holtWintersPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, e = e, t.VA.Core.Functions.Library.holtWintersPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.holtWintersTrain = {
    category: "timeseries",
    defaultFnUnit: {
      func: "holtWintersTrain",
      name: "HoltWintersTrain",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        period: "",
        "model-type": "additive",
        groupby: []
      },
      display: {
        label: "Holt-Winters Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "this function fits the Holt-Winters model(additive or multiplicative).",
    tags: ["holt", "winter", "winters", "train", "HoltWinters Train", "time series", "seasonality", "periodicity", "Holt-Winters Train"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      period: this.renderPeriod,
      "model-type": this.renderModelType
    }, this.createColumnsControl(), this.createPeriodControl(), this.createModelTypeControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(this.$columns);
      var o = {
        rowCount: 1,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("columns", o.items);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createPeriodControl = function (e) {
    var o = this;
    this.$period = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = this.addPropertyControl("Period", function (e) {
      e.append(this.$period);
      var r = {
        numberType: "int",
        minus: !0,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(4 <= value)")
      };
      o.periodControl = o.createNumericInput(o.$period, r), o.periodControl.onChange(function () {
        o.createNumericInputCommand("period", this.getValue());
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "period", "Period");
  }, e.prototype.createModelTypeControl = function (t) {
    var e = this;
    this.$modelTypeAdditiveControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Additive</div>'), this.$modelTypeMultiplicativeControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Multiplicative</div>');
    var o = this.addPropertyControl("Model Type", function (t) {
      t.append(this.$modelTypeAdditiveControl).append(this.$modelTypeMultiplicativeControl), e.createRadioButton(e.$modelTypeAdditiveControl, {
        groupName: "Group"
      }), e.createRadioButton(e.$modelTypeMultiplicativeControl, {
        groupName: "Group"
      }), e.$modelTypeAdditiveControl.on("checked", function (t) {
        e.createRadioButtonCommand("model-type", "additive");
      }), e.$modelTypeMultiplicativeControl.on("checked", function (t) {
        e.createRadioButtonCommand("model-type", "multiplicative");
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "model-type", "Model Type");
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var o = [];

    for (var r in e) {
      "number" == e[r].type && o.push(e[r]);
    }

    this.columnsControl.setItems(o);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderPeriod = function () {
    var t = this.options.fnUnit.param;
    this.periodControl.setValue(t.period);
  }, e.prototype.renderModelType = function () {
    var t = this.options.fnUnit.param;
    t["model-type"] ? "additive" === t["model-type"] ? this.$modelTypeAdditiveControl.jqxRadioButton("check") : this.$modelTypeMultiplicativeControl.jqxRadioButton("check") : this.$modelTypeAdditiveControl.jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns, this.problems[t]), "period" === this.problems[t].param && this.createValidationContent(this.$period, this.problems[t]);
    }
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [[]], o && (r.ref.param[e][0] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.holtWintersTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_PERIOD = "period", this.PARAM_MODEL_TYPE = "model-type", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnRule(), this.addPeriodRule();
  }, e.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addPeriodRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = [];
        return t.isEmptyForString(e.param[t.PARAM_PERIOD]) && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "period",
          messageParam: ["Period"]
        }, e)), o;
      }
    });
  }, e = e, t.VA.Core.Functions.Library.holtWintersTrain.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.kalmanFilter = {
    category: "timeseries",
    defaultFnUnit: {
      func: "kalmanFilter",
      name: "KalmanFilter",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        phi: [],
        theta: [],
        sigma2: ""
      },
      display: {
        label: "Kalman Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Kalman filtering, also known as linear quadratic estimation (LQE), is an algorithm that uses a series of measurements observed over time, containing statistical noise and other inaccuracies, and produces estimates of unknown variables that tend to be more precise than those based on a single measurement alone, by using Bayesian inference and estimating a joint probability distribution over the variables for each timeframe.",
    tags: ["Kalman Filter", "KalmanFilter", "Timeseries", "Trend", "Transform", "Filter", " time series", "dynamical systems", "arima", "arma"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.numericTypes = ["smallint", "integer", "bigint", "decimal", "numeric", "real", "double", "float", "number", "int"], this.PARAM_COLUMNS = "columns", this.PARAM_PHI = "phi", this.PARAM_THETA = "theta", this.PARAM_SIGMA2 = "sigma2", this.render = {
      columns: this.renderColumnsControl,
      phi: this.renderPhiControl,
      theta: this.renderThetaControl,
      sigma2: this.renderSigma2Control
    }, this.createColumnsControl(), this.createPhiControl(), this.createThetaControl(), this.createSigma2Control();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columnsWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columnsWidget);
      var o = {
        rowCount: 1,
        multiple: !1,
        showOpener: "click",
        changed: function changed() {
          var e = t.createColumnsCommand();
          t.executeCommand(e);
        }
      };
      t.$columnsControl = t.createColumnList(t.$columnsWidget, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createPhiControl = function () {
    var t = this;
    this.$phiControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Phi", function (e) {
      e.append(t.$phiControl), t.createTextArea(t.$phiControl, {
        placeHolder: "Enter value by new line"
      }), t.$phiControl.on("change", function (e) {
        var o = t.createPhiCommand();
        t.executeCommand(o);
      });
    });
  }, e.prototype.createThetaControl = function () {
    var t = this;
    this.$thetaControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Theta", function (e) {
      e.append(t.$thetaControl), t.createTextArea(t.$thetaControl, {
        placeHolder: "Enter value by new line"
      }), t.$thetaControl.on("change", function (e) {
        var o = t.createThetaCommand();
        t.executeCommand(o);
      });
    });
  }, e.prototype.createSigma2Control = function () {
    var t = this;
    this.$sigma2NumberControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol"/>'), this.addPropertyControl("Sigma2", function (e) {
      e.append(t.$sigma2NumberControl), t.$sigma2Num = t.createNumericInput(t.$sigma2NumberControl, {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: "Enter value"
      }), t.$sigma2Num.onChange(function (e) {
        var o = t.createSigma2Command();
        t.executeCommand(o);
      });
    });
  }, e.prototype.getFilteredData = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    return $.grep(t, function (t) {
      return "double" === t.internalType.toLowerCase() || "float" === t.internalType.toLowerCase() || "decimal" === t.internalType.toLowerCase();
    });
  }, e.prototype.fillControlValues = function () {
    this.$columnsControl.setItems(this.getFilteredData());
  }, e.prototype.renderColumnsControl = function () {
    this.$columnsControl.setSelectedItems(this.options.fnUnit.param.columns[0]);
  }, e.prototype.renderPhiControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_PHI],
        e = "";
    if (t) for (var o = 0; o < t.length; o++) {
      e += t[o] || "", o < t.length - 1 && (e += "\n");
    }
    this.$phiControl.jqxTextArea("val", e);
  }, e.prototype.renderThetaControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_THETA],
        e = "";
    if (t) for (var o = 0; o < t.length; o++) {
      e += t[o] || "", o < t.length - 1 && (e += "\n");
    }
    this.$thetaControl.jqxTextArea("val", e);
  }, e.prototype.renderSigma2Control = function () {
    var t = this.options.fnUnit.param[this.PARAM_SIGMA2];
    this.$sigma2Num.setValue(t && "" !== t ? t : "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && (this.renderPropertyControlHeader(this.$columnsWidget, this.problems[t]), this.createValidationContent(this.$columnsWidget, this.problems[t])), this.problems[t].param === this.PARAM_PHI && (this.renderPropertyControlHeader(this.$phiControl, this.problems[t]), this.createValidationContent(this.$phiControl.parent(), this.problems[t])), this.problems[t].param === this.PARAM_THETA && (this.renderPropertyControlHeader(this.$thetaControl.parent(), this.problems[t]), this.createValidationContent(this.$thetaControl.parent(), this.problems[t])), this.problems[t].param === this.PARAM_SIGMA2 && (this.renderPropertyControlHeader(this.$sigma2NumberControl, this.problems[t]), this.createValidationContent(this.$sigma2NumberControl, this.problems[t]));
    }
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createPhiCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      },
      renderParams: ["columns", "phi", "theta", "sigma2"]
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), "" !== this.$phiControl.jqxTextArea("val") && (e.ref.param[this.PARAM_PHI] = this.$phiControl.jqxTextArea("val").split("\n")), "" !== this.$thetaControl.jqxTextArea("val") && (e.ref.param[this.PARAM_THETA] = this.$thetaControl.jqxTextArea("val").split("\n")), e.ref.param[this.PARAM_SIGMA2] = this.$sigma2Num.getValue() ? this.$sigma2Num.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, e);
  }, e.prototype.createThetaCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      },
      renderParams: ["columns", "phi", "theta", "sigma2"]
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), "" !== this.$phiControl.jqxTextArea("val") && (e.ref.param[this.PARAM_PHI] = this.$phiControl.jqxTextArea("val").split("\n")), "" !== this.$thetaControl.jqxTextArea("val") && (e.ref.param[this.PARAM_THETA] = this.$thetaControl.jqxTextArea("val").split("\n")), e.ref.param[this.PARAM_SIGMA2] = this.$sigma2Num.getValue() ? this.$sigma2Num.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, e);
  }, e.prototype.createSigma2Command = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_SIGMA2] = this.$sigma2Num.getValue() ? this.$sigma2Num.getValue().toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, t.VA.Core.Functions.Library.kalmanFilter.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_COLUMNS = "columns", this.PARAM_PHI = "phi", this.PARAM_THETA = "theta", this.PARAM_SIGMA2 = "sigma2", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addRule(this.emptyPhiAndTheta), this.addRule(this.emptySigma2), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.emptyPhiAndTheta = function (t) {
    if (this._hasSchema(t)) {
      var e = [],
          o = t.param[this.PARAM_PHI],
          r = t.param[this.PARAM_THETA];
      if (void 0 === t.param[this.PARAM_PHI] && void 0 === t.param[this.PARAM_THETA]) return e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_PHI,
        messageParam: [this.PARAM_PHI],
        paramIndex: 0
      }, t)), e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_THETA,
        messageParam: [this.PARAM_THETA],
        paramIndex: 0
      }, t)), e;

      if (void 0 === t.param[this.PARAM_PHI] && void 0 !== t.param[this.PARAM_THETA]) {
        if (this.isEmptyForArray(t.param[this.PARAM_THETA])) return e.push(this.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: this.PARAM_PHI,
          messageParam: [this.PARAM_PHI],
          paramIndex: 0
        }, t)), e.push(this.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: this.PARAM_THETA,
          messageParam: [this.PARAM_THETA],
          paramIndex: 0
        }, t)), e;

        for (var n in t.param[this.PARAM_THETA]) {
          if (this.isEmptyForString(t.param[this.PARAM_THETA][n])) {
            var a = parseInt(n) + 1;
            e.push(this.problemFactory.createProblem({
              errorCode: "EE002",
              param: this.PARAM_THETA,
              paramIndex: n,
              messageParam: [this.PARAM_THETA, a]
            }, t));
          }
        }

        return e;
      }

      if (void 0 !== t.param[this.PARAM_PHI] && void 0 === t.param[this.PARAM_THETA]) {
        if (this.isEmptyForArray(t.param[this.PARAM_PHI])) return e.push(this.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: this.PARAM_PHI,
          messageParam: [this.PARAM_PHI],
          paramIndex: 0
        }, t)), e.push(this.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: this.PARAM_THETA,
          messageParam: [this.PARAM_THETA],
          paramIndex: 0
        }, t)), e;

        for (var n in t.param[this.PARAM_PHI]) {
          if (this.isEmptyForString(t.param[this.PARAM_PHI][n])) {
            a = parseInt(n) + 1;
            e.push(this.problemFactory.createProblem({
              errorCode: "EE002",
              param: this.PARAM_PHI,
              paramIndex: n,
              messageParam: [this.PARAM_PHI, a]
            }, t));
          }
        }

        return e;
      }

      if (this.isEmptyForArray(t.param[this.PARAM_PHI]) && this.isEmptyForArray(t.param[this.PARAM_THETA])) return e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_PHI,
        messageParam: [this.PARAM_PHI],
        paramIndex: 0
      }, t)), e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.PARAM_THETA,
        messageParam: [this.PARAM_THETA],
        paramIndex: 0
      }, t)), e;

      if (o.length > 1 && r.length > 1) {
        for (var n in t.param[this.PARAM_PHI]) {
          if (this.isEmptyForString(t.param[this.PARAM_PHI][n])) {
            a = parseInt(n) + 1;
            e.push(this.problemFactory.createProblem({
              errorCode: "EE002",
              param: this.PARAM_PHI,
              paramIndex: n,
              messageParam: [this.PARAM_PHI, a]
            }, t));
          }
        }

        for (var i in t.param[this.PARAM_THETA]) {
          if (this.isEmptyForString(t.param[this.PARAM_THETA][i])) {
            a = parseInt(i) + 1;
            e.push(this.problemFactory.createProblem({
              errorCode: "EE002",
              param: this.PARAM_THETA,
              paramIndex: i,
              messageParam: [this.PARAM_THETA, a]
            }, t));
          }
        }
      } else if (o.length > 1 && r.length <= 1) {
        for (var n in t.param[this.PARAM_PHI]) {
          if (this.isEmptyForString(t.param[this.PARAM_PHI][n])) {
            a = parseInt(n) + 1;
            e.push(this.problemFactory.createProblem({
              errorCode: "EE002",
              param: this.PARAM_PHI,
              paramIndex: n,
              messageParam: [this.PARAM_PHI, a]
            }, t));
          }
        }
      } else if (o.length <= 1 && r.length > 1) for (var i in t.param[this.PARAM_THETA]) {
        if (this.isEmptyForString(t.param[this.PARAM_THETA][i])) {
          a = parseInt(i) + 1;
          e.push(this.problemFactory.createProblem({
            errorCode: "EE002",
            param: this.PARAM_THETA,
            paramIndex: i,
            messageParam: [this.PARAM_THETA, a]
          }, t));
        }
      }

      return e;
    }
  }, e.prototype.emptySigma2 = function (t) {
    this._hasSchema(t) && this.emptyProblemMessage(t, this.PARAM_SIGMA2, t.param[this.PARAM_SIGMA2]);
  }, e = e, t.VA.Core.Functions.Library.kalmanFilter.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.timeSeriesDecomposition = {
    category: "timeseries",
    defaultFnUnit: {
      func: "timeSeriesDecomposition",
      name: "TimeSeriesDecomposition",
      inData: [],
      outData: [],
      param: {
        column: [],
        "hold-columns": [[]],
        period: "",
        "model-type": "additive"
      },
      display: {
        label: "Time Series Decomposition",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Decomposes a time series data into level, seasonal and noise. The function also gives trend, which is the slope of the level at that point.",
    mandatory: [],
    tags: ["Time Series decomposition", "tse"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      column: this.renderColumnControl,
      "hold-columns": this.renderHoldColumnsControl,
      period: this.renderPeriodControl,
      "model-type": this.renderModelTypeControl
    }, this.$elements = {}, this.controls = {}, this.createColumnControl(), this.createHoldColumnsControl(), this.createPeriodControl(), this.createModelTypeControl();
  }, e.prototype.createColumnControl = function (t) {
    var e = this;
    e.$elements.column = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Column", function (t) {
      t.append(e.$elements.column);
      var o = {
        multiple: !1,
        maxRowCount: "1",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("column", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.column = e.createColumnList(e.$elements.column, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnControl = function (t) {
    var e = this.options.fnUnit.param.column;
    this.controls.column.setSelectedItems(e);
  }, e.prototype.createHoldColumnsControl = function (t) {
    var e = this;
    e.$elements["hold-columns"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Hold Columns", function (t) {
      t.append(e.$elements["hold-columns"]);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("hold-columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls["hold-columns"] = e.createColumnList(e.$elements["hold-columns"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderHoldColumnsControl = function (t) {
    var e = this.options.fnUnit.param["hold-columns"][0];
    this.controls["hold-columns"].setSelectedItems(e);
  }, e.prototype.createPeriodControl = function (e) {
    var o = this;
    o.$elements.period = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
    var r = o.addPropertyControl("Period", function (e) {
      e.append(o.$elements.period);
      var r = {
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(4 <= value)"),
        numberType: "int"
      };
      o.controls.period = o.createNumericInput(o.$elements.period, r), o.controls.period.onChange(function () {
        var t = o.createSetParameterValueCommand("period", this.getValue());
        o.executeCommand(t);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(r, {}, "period", "Period");
  }, e.prototype.renderPeriodControl = function (t) {
    var e = this.options.fnUnit.param.period;
    this.controls.period.setValue(e || "");
  }, e.prototype.createModelTypeControl = function (t) {
    var e = this;
    e.$elements["model-type.additive"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Additive</div>'), e.$elements["model-type.multiplicative"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Multiplicative</div>');
    var o = e.addPropertyControl("Model Type", function (t) {
      t.append(e.$elements["model-type.additive"]), e.controls["model-type.additive"] = e.createRadioButton(e.$elements["model-type.additive"], {
        width: "undefined",
        groupName: "model-type",
        checked: !0
      }), e.$elements["model-type.additive"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("model-type", "additive");
        e.executeCommand(o);
      }), t.append(e.$elements["model-type.multiplicative"]), e.controls["model-type.multiplicative"] = e.createRadioButton(e.$elements["model-type.multiplicative"], {
        width: "undefined",
        groupName: "model-type"
      }), e.$elements["model-type.multiplicative"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("model-type", "multiplicative");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "model-type", "Model Type");
  }, e.prototype.renderModelTypeControl = function (t) {
    var e = "model-type." + this.options.fnUnit.param["model-type"];
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.column.setItems(t), t = this.getColumnsOfInTable(0, ["number", "String"]), this.controls["hold-columns"].setItems(t);
  }, t.VA.Core.Functions.Library.timeSeriesDecomposition.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnRule(), this.addHoldColumnsRule(), this.addPeriodRule();
  }, o.prototype.addColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "column", e.param.column, "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "column", e.param.column);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "column", e.param.column, ["number"]);
    });
  }, o.prototype.addHoldColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "hold-columns", e.param["hold-columns"]);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "hold-columns", e.param["hold-columns"], ["number", "string"]);
    });
  }, o.prototype.addPeriodRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "period",
        messageParam: ["Period"]
      }, e, e.param.period);
    });
  }, t.VA.Core.Functions.Library.timeSeriesDecomposition.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.timeSeriesLRPredict = {
    category: "timeseries",
    defaultFnUnit: {
      func: "timeSeriesLRPredict",
      name: "TimeSeriesLRPredict",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "hold-columns": [[]]
      },
      display: {
        label: "Time Series LR Predict",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "In statistics, linear regression is an approach for modeling the relationship between a scalar dependent variable y and one or more explanatory variables (or independent variables) denoted X.",
    tags: ["TimeSeriesLRPredict", "Time Series LR", "Time Series", "LR", "Predict", "Time Series LR Predict", "linear regression", "window"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "hold-columns": this.renderHoldColumns
    }, this.createColumnsControl(), this.createHoldColumnsControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(t.$holdColumns);
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, {
        rowCount: 3,
        multiple: !0
      }), t.holdColumnsControl.onChange(function () {
        var e = t.createHoldColumnsCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.holdColumnsControl.setItems(this.numberColumnArray);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderHoldColumns = function () {
    var t = this.options.fnUnit.param["hold-columns"];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "hold-columns" === this.problems[t].param && this.createValidationContent(this.$holdColumns.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createHoldColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["hold-columns"] = [[]];
    var o = this.holdColumnsControl.getSelectedItems();
    return o && (e.ref.param["hold-columns"][0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.timeSeriesLRPredict.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.timeSeriesLRPredict.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.timeSeriesLRTrain = {
    category: "timeseries",
    defaultFnUnit: {
      func: "timeSeriesLRTrain",
      name: "TimeSeriesLRTrain",
      inData: [],
      outData: [],
      param: {
        columns: [[]]
      },
      display: {
        label: "Time Series LR Train",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "In statistics, linear regression is an approach for modeling the relationship between a scalar dependent variable y and one or more explanatory variables (or independent variables) denoted X.",
    tags: ["TimeSeriesLRTrain", "TimeSeries LR", "TimeSeries LR Train", "Time Series LR", "Time Series", "LR", "Train", "Time Series LR Train", "linear regression", "window"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      degree: this.renderDegree
    }, this.createColumnsControl(), this.createDegreeControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createDegreeControl = function () {
    var t = this;
    this.$degree = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Degree", function (e) {
      e.append(t.$degree);
      t.degreeControl = t.createNumericInput(t.$degree, {
        numberType: "int",
        min: 1,
        minus: !1
      }), t.degreeControl.onChange(function () {
        var e = t.createDegreeCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderDegree = function () {
    var t = this.options.fnUnit.param.degree;
    this.degreeControl.setValue(t || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "degree" === this.problems[t].param && this.createValidationContent(this.$degree, this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createDegreeCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.degree = "";
    var o = this.degreeControl.getValue();
    return o && (e.ref.param.degree = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.timeSeriesLRTrain.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_DEGREE = "degree", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addDegreeRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addDegreeRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_DEGREE, e.param[t.PARAM_DEGREE], "Degree");
    });
  }, e = e, t.VA.Core.Functions.Library.timeSeriesLRTrain.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.timeSeriesSmoothen = {
    category: "timeseries",
    defaultFnUnit: {
      func: "timeSeriesSmoothen",
      name: "TimeSeriesSmoothen",
      inData: [],
      outData: [],
      param: {
        columns: "",
        method: "simpson",
        groupby: []
      },
      display: {
        label: "Time Series Smoothen",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Give a smoothening of a time series data.",
    mandatory: [],
    tags: ["time series smoothen", "time series smoothening", "time series smoothing", "smoothening"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      method: this.renderMethodControl,
      groupby: this.renderGroupbyControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createMethodControl(), this.createGroupbyControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Column", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", o.items[0]);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns;
    this.controls.columns.setSelectedItems([e]);
  }, e.prototype.createMethodControl = function (t) {
    var e = this;
    e.$elements["method.simpson"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Simpson</div>'), e.$elements["method.boole"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Boole</div>'), e.addPropertyControl("Method", function (t) {
      t.append(e.$elements["method.simpson"]), e.controls["method.simpson"] = e.createRadioButton(e.$elements["method.simpson"], {
        width: "undefined",
        groupName: "method",
        checked: !0
      }), e.$elements["method.simpson"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("method", "simpson");
        e.executeCommand(o);
      }), t.append(e.$elements["method.boole"]), e.controls["method.boole"] = e.createRadioButton(e.$elements["method.boole"], {
        width: "undefined",
        groupName: "method"
      }), e.$elements["method.boole"].on("checked", function (t) {
        var o = e.createSetParameterValueCommand("method", "boole");
        e.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderMethodControl = function (t) {
    var e = "method." + this.options.fnUnit.param.method;
    this.$elements[e] && this.$elements[e].jqxRadioButton("check");
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "5",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", o.items);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby;
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, ["number", "string"]), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.timeSeriesSmoothen.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, o.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns, "Column");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    }), this.addRule(function (e) {
      return t.checkColumnType(e, "columns", e.param.columns, ["number"]);
    });
  }, t.VA.Core.Functions.Library.timeSeriesSmoothen.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.addColumnByRefine = {
    category: "transform",
    defaultFnUnit: {
      func: "addColumnByRefine",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "SQL Executor"
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.advancedFilter = {
    category: "transform",
    defaultFnUnit: {
      func: "advancedFilter",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "Advanced Filter"
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Advanced Filter"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.changeValue = {
    category: "transform",
    defaultFnUnit: {
      func: "changeValue",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "Change Value"
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Change Value"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.chiSqSelection = {
    category: "transform",
    defaultFnUnit: {
      func: "chiSqSelection",
      name: "ChiSqSelection",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        label: [""],
        "hold-columns": [[]],
        numTopFeatures: "",
        percentile: "",
        numBuckets: "",
        auto: "false",
        method: "CrossValid",
        numFolds: "",
        trainRatio: "",
        classifier: "RandomForest",
        numTopFeaturesArray: []
      },
      display: {
        label: "Chi Square Selection",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["columns"],
    description: "This function performs Chi-squared feature selection using chi-squared test for categorical data.",
    tags: ["Chi Square Selection", "ChisquareSelection", "Chi", "Square", "Selection"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 3
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_LABEL = "label", this.PARAM_HOLD_COLUMNS = "hold-columns", this.PARAM_NUM_TOP_FEATURES = "numTopFeatures", this.PARAM_PERCENTILE = "percentile", this.PARAM_NUM_BUCKETS = "numBuckets", this.PARAM_AUTO = "auto", this.PARAM_METHOD = "method", this.PARAM_NUM_FOLDS = "numFolds", this.PARAM_TRAIN_RATIO = "trainRatio", this.PARAM_CLASSIFIER = "classifier", this.PARAM_NUM_TOP_FEATURES_ARRAY = "numTopFeaturesArray", this.render = {}, this.render[this.PARAM_COLUMNS] = this.renderColumnsControl, this.render[this.PARAM_LABEL] = this.renderLabelControl, this.render[this.PARAM_HOLD_COLUMNS] = this.renderHoldColumnsControl, this.render[this.PARAM_NUM_TOP_FEATURES] = this.renderNumTopFeaturesControl, this.render[this.PARAM_PERCENTILE] = this.renderPercentileControl, this.render[this.PARAM_NUM_BUCKETS] = this.renderNumBucketsControl, this.render[this.PARAM_AUTO] = this.renderAutoControl, this.render[this.PARAM_METHOD] = this.renderMethodControl, this.render[this.PARAM_NUM_FOLDS] = this.renderNumFoldsControl, this.render[this.PARAM_TRAIN_RATIO] = this.renderTrainRatioControl, this.render[this.PARAM_CLASSIFIER] = this.renderClassifierControl, this.render[this.PARAM_NUM_TOP_FEATURES_ARRAY] = this.renderNumTopFeaturesArrayControl, this.createColumnsControl(), this.createLabelControl(), this.createHoldColumnsControl(), this.createNumBucketsControl(), this.createAutoControl(), this.createNumTopFeaturesControl(), this.createPercentileControl(), this.createMethodControl(), this.createNumFoldsControl(), this.createTrainRatioControl(), this.createClassifierControl(), this.createNumTopFeaturesArrayControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.executeCommonCommand(t.PARAM_COLUMNS, $.extend(!0, [], [o.items]));
        }
      };
      t.columnsControl = t.createColumnList(t.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createLabelControl = function () {
    var t = this;
    this.$label = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-label"/>'), this.addPropertyControl("Label", function (e) {
      e.append(t.$label);
      var o = {
        rowCount: 5,
        multiple: !1,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.executeCommonCommand(t.PARAM_LABEL, $.extend(!0, [], o.items));
        }
      };
      t.labelControl = t.createColumnList(t.$label, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createHoldColumnsControl = function () {
    var t = this;
    this.$holdColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-hold-columns"/>'), this.addPropertyControl("Hold Columns", function (e) {
      e.append(t.$holdColumns);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "none",
        showOpener: "button",
        changed: function changed(e, o) {
          t.executeCommonCommand(t.PARAM_HOLD_COLUMNS, $.extend(!0, [], [o.items]));
        }
      };
      t.holdColumnsControl = t.createColumnList(t.$holdColumns, o);
    });
  }, e.prototype.createNumTopFeaturesControl = function () {
    var e = this;
    this.$numTopFeatures = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-num-top-features">   <div class="brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol"></div></div>');
    var o = this.addPropertyControl("Top Features", function (o) {
      o.append(e.$numTopFeatures);
      var r = e.$numTopFeatures.find(".brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol");
      e.numTopFeaturesControl = e.createNumericInput(r, {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("20 (1 <= value)")
      }), e.numTopFeaturesControl.onChange(function (t) {
        e.executeCommonCommand(e.PARAM_NUM_TOP_FEATURES, t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, this.PARAM_NUM_TOP_FEATURES, "Top Features");
  }, e.prototype.createPercentileControl = function () {
    var e = this;
    this.$percentile = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-percentile">   <div class="brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol"></div></div>');
    var o = this.addPropertyControl("Percentile", function (o) {
      o.append(e.$percentile);
      var r = e.$percentile.find(".brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol");
      e.percentileControl = e.createNumericInput(r, {
        numberType: "double",
        min: 0,
        max: 100,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(0 < value <= 100)")
      }), e.percentileControl.onChange(function (t) {
        e.executeCommonCommand(e.PARAM_PERCENTILE, t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, this.PARAM_PERCENTILE, "Percentile");
  }, e.prototype.createNumBucketsControl = function () {
    var e = this;
    this.$numBuckets = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-num-buckets">   <div class="brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol"></div></div>');
    var o = this.addPropertyControl("Buckets", function (o) {
      o.append(e.$numBuckets);
      var r = e.$numBuckets.find(".brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol");
      e.numBucketsControl = e.createNumericInput(r, {
        numberType: "int",
        min: 2,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(2 <= value)")
      }), e.numBucketsControl.onChange(function (t) {
        e.executeCommonCommand(e.PARAM_NUM_BUCKETS, t);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, this.PARAM_NUM_BUCKETS, "Buckets");
  }, e.prototype.createAutoControl = function () {
    var t = this;
    this.$autoControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-auto">   <div class="brtc-va-editors-sheet-controls-propertycontrol-radio" value="true">true</div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-radio" value="false">false</div></div>');
    var e = this.addPropertyControl("Auto", function (e) {
      e.append(t.$autoControl);
      var o = t.$autoControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radio");
      this.createRadioButton(o, {
        groupName: t.PARAM_AUTO
      }), o.on("checked", function (e) {
        var o = $(e.target).attr("value");
        t.adjustAutoView(o), t.executeAutoCommand(o);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, this.PARAM_AUTO, "Auto");
  }, e.prototype.createMethodControl = function () {
    var t = this;
    this.$methodControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-method">   <div class="brtc-va-editors-sheet-controls-propertycontrol-radio" value="CrossValid">Cross Valid</div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-radio" value="TrainValid">Train Valid</div></div>'), this.addPropertyControl("Method", function (e) {
      e.append(t.$methodControl);
      var o = t.$methodControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radio");
      this.createRadioButton(o, {
        groupName: t.PARAM_METHOD
      }), o.on("checked", function (e) {
        var o = $(e.target).attr("value");
        t.adjustValidView(o, t.options.fnUnit.param[t.PARAM_AUTO]), t.executeCommonCommand(t.PARAM_METHOD, o);
      });
    });
  }, e.prototype.createNumFoldsControl = function () {
    var e = this;
    this.$numFolds = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-num-buckets">   <div class="brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol"></div></div>'), this.addPropertyControl("Folds", function (o) {
      o.append(e.$numFolds);
      var r = e.$numFolds.find(".brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol");
      e.numFoldsControl = e.createNumericInput(r, {
        numberType: "int",
        min: 1,
        max: void 0,
        minus: !1,
        placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("3 (2 <= value)")
      }), e.numFoldsControl.onChange(function (t) {
        e.executeCommonCommand(e.PARAM_NUM_FOLDS, t);
      });
    });
  }, e.prototype.createTrainRatioControl = function () {
    var t = this;
    this.$trainRatio = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-num-buckets">   <div class="brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol"></div></div>'), this.addPropertyControl("Train Ratio", function (e) {
      e.append(t.$trainRatio);
      var o = t.$trainRatio.find(".brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol");
      t.trainRatioControl = t.createNumericInput(o, {
        numberType: "double",
        min: 0,
        max: 1,
        minus: !1,
        placeholder: "0.75 (0 < value < 1)"
      }), t.trainRatioControl.onChange(function (e) {
        t.executeCommonCommand(t.PARAM_TRAIN_RATIO, e);
      });
    });
  }, e.prototype.createClassifierControl = function () {
    var t = this;
    this.$classifierControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-classifier">   <div class="brtc-va-editors-sheet-controls-propertycontrol-radio" value="RandomForest">Random Forest</div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-radio" value="NaiveBayes">Naive Bayes</div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-radio" value="DecisionTree">Decision Tree</div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-radio" value="OneVsRestLR">One Vs Rest LR</div></div>'), this.addPropertyControl("Classifier", function (e) {
      e.append(t.$classifierControl);
      var o = t.$classifierControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radio");
      this.createRadioButton(o, {
        groupName: t.PARAM_CLASSIFIER
      }), o.on("checked", function (e) {
        t.executeCommonCommand(t.PARAM_CLASSIFIER, $(e.target).attr("value"));
      });
    });
  }, e.prototype.createNumTopFeaturesArrayControl = function () {}, e.prototype.executeAutoCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = $.extend(!0, [], this.options.fnUnit[OUT_DATA]);
    "false" === e && 3 === r.length ? r.splice(r.length - 1, 1) : "true" === e && 2 === r.length && r.push(t.VA.Core.Utils.IDGenerator.table.id()), o.ref.param.auto = e, o.ref[OUT_DATA] = r;
    var n = new t.VA.Core.CompoundCommand(this);
    n.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o)), n.add(new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o)), this.executeCommand(n);
  }, e.prototype.executeCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [],
        e = [];
    $.each(t, function (t, o) {
      "Double" !== o.internalType && "Float" !== o.internalType && "Decimal" !== o.internalType || e.push(o);
    }), this.columnsControl.setItems(t), this.labelControl.setItems(t), this.holdColumnsControl.setItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]), this.problems[t].param === this.PARAM_LABEL && this.createValidationContent(this.$label, this.problems[t]), this.problems[t].param === this.PARAM_HOLD_COLUMNS && this.createValidationContent(this.$holdColumns, this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMNS];
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderLabelControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_LABEL];
    this.labelControl.setSelectedItems(t);
  }, e.prototype.renderHoldColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_HOLD_COLUMNS];
    this.holdColumnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderNumTopFeaturesControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUM_TOP_FEATURES];
    this.numTopFeaturesControl.setValue(t || "");
  }, e.prototype.renderPercentileControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_PERCENTILE];
    this.percentileControl.setValue(t || "");
  }, e.prototype.renderNumBucketsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUM_BUCKETS];
    this.numBucketsControl.setValue(t || "");
  }, e.prototype.renderAutoControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_AUTO];
    this.adjustAutoView(t), this.$autoControl.find('.brtc-va-editors-sheet-controls-propertycontrol-radio[value="' + t + '"]').jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderMethodControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_METHOD];
    this.adjustValidView(t, this.options.fnUnit.param[this.PARAM_AUTO]), this.$methodControl.find('.brtc-va-editors-sheet-controls-propertycontrol-radio[value="' + t + '"]').jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderNumFoldsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_NUM_FOLDS];
    this.numFoldsControl.setValue(t || "");
  }, e.prototype.renderTrainRatioControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_TRAIN_RATIO];
    this.trainRatioControl.setValue(t || "");
  }, e.prototype.renderClassifierControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_CLASSIFIER];
    this.$classifierControl.find('.brtc-va-editors-sheet-controls-propertycontrol-radio[value="' + t + '"]').jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderNumTopFeaturesArrayControl = function () {}, e.prototype.adjustAutoView = function (t) {
    var e = this.$numTopFeatures.parents(".brtc-va-editors-sheet-controls-propertycontrol"),
        o = this.$percentile.parents(".brtc-va-editors-sheet-controls-propertycontrol"),
        r = this.$methodControl.parents(".brtc-va-editors-sheet-controls-propertycontrol"),
        n = this.$classifierControl.parents(".brtc-va-editors-sheet-controls-propertycontrol"),
        a = this.$numFolds.parents(".brtc-va-editors-sheet-controls-propertycontrol"),
        i = this.$trainRatio.parents(".brtc-va-editors-sheet-controls-propertycontrol");

    if ("true" === t) {
      e.hide(), o.hide(), r.show(), n.show();
      var s = this.options.fnUnit.param[this.PARAM_METHOD];
      this.adjustValidView(s, t);
    } else e.show(), o.show(), r.hide(), n.hide(), a.hide(), i.hide();
  }, e.prototype.adjustValidView = function (t, e) {
    var o = this.$numFolds.parents(".brtc-va-editors-sheet-controls-propertycontrol"),
        r = this.$trainRatio.parents(".brtc-va-editors-sheet-controls-propertycontrol");
    "true" === e ? "CrossValid" === t ? (o.show(), r.hide()) : (o.hide(), r.show()) : (o.hide(), r.hide());
  }, t.VA.Core.Functions.Library.chiSqSelection.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    this.PARAM_COLUMNS = "columns", this.PARAM_LABEL = "label", this.PARAM_HOLD_COLUMNS = "hold-columns", this.PARAM_NUM_TOP_FEATURES = "numTopFeatures", this.PARAM_PERCENTILE = "percentile", this.PARAM_NUM_BUCKETS = "numBuckets", this.PARAM_AUTO = "auto", this.PARAM_METHOD = "method", this.PARAM_NUM_FOLDS = "numFolds", this.PARAM_TRAIN_RATIO = "trainRatio", this.PARAM_CLASSIFIER = "classifier", this.PARAM_NUM_TOP_FEATURES_ARRAY = "numTopFeaturesArray", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addLabelRule(), this.addHoldColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addLabelRule = function () {
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnIsEmpty(t, e.PARAM_LABEL, t.param[e.PARAM_LABEL], "Label");
    }), this.addRule(function (t) {
      return e.checkColumnExists(t, e.PARAM_LABEL, t.param[e.PARAM_LABEL]);
    }), this.addRule(function (o) {
      if (void 0 !== t.VA.Core.DataQueryTemplate.getSchema(o.parent().mid, o[IN_DATA])) {
        var r = o.param[e.PARAM_COLUMNS][0],
            n = o.param[e.PARAM_LABEL],
            a = e.getConflictedElement(r, n);
        return e.createProblemForConflicted(a, e.PARAM_LABEL, "Columns", "Label", o);
      }
    });
  }, e.prototype.addHoldColumnsRule = function () {
    var e = this;
    this.addRule(function (o) {
      if (void 0 !== t.VA.Core.DataQueryTemplate.getSchema(o.parent().mid, o[IN_DATA])) {
        var r = o.param[e.PARAM_COLUMNS][0],
            n = o.param[e.PARAM_LABEL],
            a = o.param[e.PARAM_HOLD_COLUMNS][0],
            i = r.concat(n),
            s = e.getConflictedElement(i, a);
        return e.createProblemForConflicted(s, e.PARAM_HOLD_COLUMNS, "Columns or Label Column", o);
      }
    });
  }, e.prototype.getConflictedElement = function (t, e) {
    var o = [];
    if (t.length) for (var r in e) {
      t.indexOf(e[r]) > -1 && o.push(e[r]);
    }
    return o;
  }, e.prototype.createProblemForConflicted = function (t, e, o, r, n) {
    var a;
    if (t.length) return a = 1 == t.length ? {
      errorCode: "BR-0057",
      param: e,
      messageParam: [t[0], o, r]
    } : {
      errorCode: "BR-0057",
      param: e,
      messageParam: [JSON.stringify(t), o, r]
    }, this.problemFactory.createProblem(a, n);
  }, t.VA.Core.Functions.Library.chiSqSelection.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.colAppend = {
    category: "transform",
    defaultFnUnit: {
      func: "colAppend",
      name: "BindColumn",
      inData: [],
      outData: [],
      param: {
        "duplicate-column": "false",
        "table-alias": ["a", "b"]
      },
      display: {
        label: "Bind Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Bind two tables horizontally. Similar with 'cbind' function in R.",
    tags: ["Bind Column", "BindColumn", "Preprocessing", "Union", "cbind", "adjoin", "union", "attach two tables", "horizontally"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    o.joinTypes = ["inner", "left-excluding", "right-excluding", "full", "left", "right"], t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationControls = {}, this.PARAM_DUPLICATE_COLUMN = "duplicate-column", this.PARAM_IN_TABLE = "inData", this.render = {
      "duplicate-column": this.renderDuplicateColumn
    }, this.createDuplicateColumnControl(), this.createOutputPreviewControl(), this.validation = {
      inData: this.renderOutputValidation
    }, this.renderValidation();
  }, e.prototype.createDuplicateColumnControl = function () {
    var t = this;
    this.$duplicateColumnControl = $('<div class="brtc-va-editors-sheet-panels-properties-columnappendproperties-duplicatecolumn"/>'), this.addPropertyControl("Duplicate Column", function (e) {
      e.append(t.$duplicateColumnControl), t.createRadioButtonControl(t.$duplicateColumnControl, "True", "duplicate-column"), t.createRadioButtonControl(t.$duplicateColumnControl, "False", "duplicate-column");
    });
  }, e.prototype.createOutputPreviewControl = function (t) {
    var e = this;
    this.addPropertyControl("Output Preview", function (t) {
      e.$outputPreviewControl = $('<div class="brtc-va-editors-sheet-panels-properties-columnappendproperties-outputpreview" />'), t.append(this.$outputPreviewControl), e.outputPreviewControl = e.createColumnList(this.$outputPreviewControl, {
        multiple: !0,
        showOpener: "none",
        maxRowCount: 12,
        removable: !1,
        sort: "none",
        draggable: !1,
        placeHolder: "preview"
      });
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "True" === e ? e = "true" : "False" === e && (e = "false");
      var n = r.createDuplicateColumnCommand(o, e);
      r.executeCommand(n), r.renderOutputPreview();
    });
  }, e.prototype.bindEventHandlers = function () {
    var t = this;
    this.$outputControl.sortable({
      axis: "x"
    }), this.$outputControl.on("sortstop", function () {
      var e = t.$outputControl.sortable("toArray", {
        attribute: "value"
      });
      t.isSortChanged(e) && (t.executeCommand(t.createOutputCommand()), t.renderOutputPreview());
    });
  }, e.prototype.renderValues = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.renderValues.call(this), this.renderOutputPreview();
  }, e.prototype.renderDuplicateColumn = function () {
    var t = this.options.fnUnit.param[this.PARAM_DUPLICATE_COLUMN];
    "true" === t ? t = "True" : "false" === t && (t = "False"), t && $(this.$duplicateColumnControl[t]).jqxRadioButton("check");
  }, e.prototype.createTableElement = function (t) {
    var e = $('<li class="brtc-va-editors-sheet-panels-properties-columnappendproperties-output-element"/>').attr("value", t);
    return e.append($("<span />").text(this.getPreviousFnUnit(t).display.label)), e;
  }, e.prototype.getPreviousFnUnit = function (t) {
    return this.options.modelEditor.getModel().getPreFnUnitByCondition(this.options.fnUnit.fid, function (e) {
      return $.inArray(t, e[OUT_DATA]) > -1;
    });
  }, e.prototype.renderOutputPreview = function () {
    this.outputPreviewControl.setItems(this.getColumns()), this.outputPreviewControl.setSelectedItems(this.getColumnNames());
  }, e.prototype.createOutputCommand = function () {
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        inData: this.$outputControl.sortable("toArray", {
          attribute: "value"
        })
      },
      renderParam: [IN_DATA]
    });
  }, e.prototype.createDuplicateColumnCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.isSortChanged = function (t) {
    for (var e in t) {
      if (t[e] !== this.options.fnUnit[IN_DATA][e]) return !0;
    }

    return !1;
  }, e.prototype.getColumns = function () {
    var t,
        e,
        o = this.options.fnUnit[IN_DATA][0],
        r = this.options.fnUnit[IN_DATA][1];
    t = o && this.dataMap[o] ? this.dataMap[o].columns : [], e = r && this.dataMap[r] ? this.dataMap[r].columns : [];
    $.map(t, function (t) {
      return t.name.toLowerCase();
    }), $.map(e, function (t) {
      return t.name.toLowerCase();
    });
    var n = [];

    if (this.$duplicateColumnControl.False.jqxRadioButton("val")) {
      n = $.extend(!0, [], t);

      for (var a = 0; a < e.length; a++) {
        for (var i = e[a], s = !1, l = 0; l < n.length; l++) {
          n[l].name.toLowerCase() == i.name.toLowerCase() && (s = !0);
        }

        s || n.push(e[a]);
      }
    } else {
      for (var c = 0; c < t.length; c++) {
        n.push({
          name: "a_" + t[c].name,
          type: t[c].type
        });
      }

      for (var p = 0; p < e.length; p++) {
        n.push({
          name: "b_" + e[p].name,
          type: e[p].type
        });
      }
    }

    return n;
  }, e.prototype.getColumnNames = function () {
    return $.map(this.getColumns(), function (t) {
      return t.name;
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.validation[e] && this.validation[e].call(this, this.problems[t]);
    }
  }, e.prototype.renderOutputValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_IN_TABLE], t);
  }, t.VA.Core.Functions.Library.colAppend.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.colAppend.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.distinctFilter = {
    category: "transform",
    defaultFnUnit: {
      func: "distinctFilter",
      name: "Distinct",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "display-type": "false"
      },
      display: {
        label: "Distinct",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Select deduplicated data.",
    tags: ["Distinct", "Distinct Filter", "Filter", "Remove", "Preprocessing", "duplicate"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    this.columnNameArray = [], t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumn,
      "display-type": this.renderDisplayType
    }, this.createFilterControl();
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.$columnsControl.setItems(this.columnNameArray);
  }, e.prototype.createFilterControl = function (t) {
    var e = this;
    this.$columnWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-filter-columnlist"/>'), this.$displayType = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-switch-operator"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columnWidget), t.append(e.$displayType);
      var o = {
        rowCount: 5,
        multiple: !0,
        sort: "ascending",
        changed: function changed(t, o) {
          e.createCommand();
        }
      };
      e.$columnsControl = e.createColumnList(e.$columnWidget, o), this.createOperatorControl(e.$displayType);
    }, {
      mandatory: !0
    });
  }, e.prototype.createOperatorControl = function (t) {
    var e = this,
        o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-switch switch">    <div class="fl">        <p class="left">Show all</p>    </div>    <div class="fr">        <p class="right">Show selected</p>    </div></div>');
    t.append(o), o.find(".brtc-va-editors-sheet-controls-propertycontrol-switch").addClass("on"), t.find(".switch").click(function (t) {
      $(this).toggleClass("on"), e.createCommand();
    });
  }, e.prototype.renderColumn = function () {
    var t = this.options.fnUnit.param.columns;
    this.$columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderDisplayType = function () {
    var t = this.options.fnUnit.param["display-type"];
    !!t && "true" == t ? this.$displayType.find(".brtc-va-editors-sheet-controls-propertycontrol-switch").addClass("on") : this.$displayType.find(".brtc-va-editors-sheet-controls-propertycontrol-switch").removeClass("on");
  }, e.prototype.createCommand = function () {
    var e = this.getConditionValue(),
        o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: e
      }
    },
        r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
    this.executeCommand(r);
  }, e.prototype.getConditionValue = function () {
    return {
      columns: [this.$columnsControl.getSelectedItems()],
      "display-type": this.$displayType.find(".brtc-va-editors-sheet-controls-propertycontrol-switch").hasClass("on").toString()
    };
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columnWidget.parent(), this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.distinctFilter.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.distinctFilter.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.groupBy = {
    category: "transform",
    defaultFnUnit: {
      func: "groupBy",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "Group By"
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Group By"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.imputeRemoveLine = {
    category: "transform",
    defaultFnUnit: {
      func: "imputeRemoveLine",
      name: "ImputeRemoveLine",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "abnormal-string": "",
        "abnormal-number": "NaN"
      },
      display: {
        label: "Delete Missing Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["abnormal-string"],
    description: "It handles abnormal values which can be customized by setting parameters.",
    tags: ["Delete Missing Data", "DeleteMissingData", "Filter", "Missing Value", "Preprocessing", "refine", "preprocess", "delete", "nan", "null"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.numericTypes = ["smallint", "integer", "bigint", "decimal", "numeric", "real", "double", "float", "number", "int"], this.stringTypes = ["character", "char", "text", "string", "varchar"], this.PARAM_COLUMNS = "columns", this.PARAM_ABNORMAL_NUMBER = "abnormal-number", this.PARAM_ABNORMAL_STRING = "abnormal-string", this.render = {
      columns: this.renderColumnsControl,
      "abnormal-number": this.renderAbnormalNumberControl,
      "abnormal-string": this.renderAbnormalStringControl
    }, this.createColumnsControl(), this.createAbnormalNumberControl(), this.createAbnormalStringControl();
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.getAbnormalNumberValue = function () {
    var t = "",
        e = this.$abnormalNumberControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radiocontrol"),
        o = this.$abnormalNumberControl.abnormalNumber;
    return $.each(e, function (e, r) {
      if ($(r).jqxRadioButton("val")) return "" !== $(r).attr("value") ? (t = $(r).attr("value"), !1) : (t = o.getValue(), !1);
    }), t.toString();
  }, e.prototype.getAbnormalStringValue = function () {
    var t = "",
        e = this.$abnormalStringControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radiocontrol"),
        o = this.$abnormalStringControl.abnormalString;
    return $.each(e, function (e, r) {
      if ($(r).jqxRadioButton("val")) return "" !== $(r).attr("value") ? (t = $(r).attr("value"), !1) : (t = o.jqxInput("val"), !1);
    }), t.toString();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columnsWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    this.addPropertyControl("Columns", function (e) {
      e.append(t.$columnsWidget);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed() {
          var e = t.createColumnsCommand();
          t.executeCommand(e);
        }
      };
      t.$columnsControl = t.createColumnList(t.$columnsWidget, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiocontrol">' + e + "</div>");
    t.append(n);
    var a = "";
    a = "" === e ? "brtc-va-editors-sheet-controls-width-1" : "brtc-va-editors-sheet-controls-width-12", this.createRadioButton(n, {
      groupName: o
    }, a), n.on("checked", function (e) {
      var n,
          a = "" !== $(e.target).attr("value");
      "abnormalNumber" === o ? (t[o].setDisabled(a), n = r.createAbnormalNumberCommand()) : "abnormalString" === o && (t[o].jqxInput("disabled", a), n = r.createAbnormalStringCommand()), r.executeCommand(n);
    }), n.attr("value", e), t[e] = n;
  }, e.prototype.createNumberInputControl = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinputcontrol"/>');
    t.append(r);
    var n = "";
    "abnormalNumber" === e && (n = "brtc-va-editors-sheet-controls-width-11");
    var a = o.createNumericInput(r, {
      numberType: "double",
      min: void 0,
      max: void 0,
      minus: !0,
      placeholder: "Enter value"
    }, n);
    a.onChange(function (t) {
      var r;
      "abnormalNumber" === e && (r = o.createAbnormalNumberCommand(t)), o.executeCommand(r);
    }), t[e] = a;
  }, e.prototype.createAbnormalNumberControl = function () {
    var t = this;
    this.$abnormalNumberControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>'), this.addPropertyControl("Abnormal Number", function (e) {
      e.append(t.$abnormalNumberControl), t.createRadioButtonControl(t.$abnormalNumberControl, "Null", "abnormalNumber"), t.createRadioButtonControl(t.$abnormalNumberControl, "NaN", "abnormalNumber"), t.createRadioButtonControl(t.$abnormalNumberControl, "", "abnormalNumber"), t.createNumberInputControl(t.$abnormalNumberControl, "abnormalNumber");
    });
  }, e.prototype.createAbnormalStringControl = function () {
    var t = this;
    this.$abnormalStringControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>'), this.$abnormalStringInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-inputcontrol"/>'), this.addPropertyControl("Abnormal String", function (e) {
      e.append(t.$abnormalStringControl), t.createRadioButtonControl(t.$abnormalStringControl, "Null", "abnormalString"), t.createRadioButtonControl(t.$abnormalStringControl, "", "abnormalString"), t.$abnormalStringControl.append(this.$abnormalStringInput);
      t.createInput(t.$abnormalStringInput, {
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-11"), t.$abnormalStringInput.on("change", function (e) {
        if (t.isInputValueChanged("abnormal-string", $(this).val())) {
          var o = t.createAbnormalStringCommand();
          t.executeCommand(o);
        }
      }), t.$abnormalStringControl.abnormalString = t.$abnormalStringInput;
    });
  }, e.prototype.fillControlValues = function () {
    this.$columnsControl.setItems(this.getFilteredData());
  }, e.prototype.renderColumnsControl = function () {
    this.$columnsControl.setSelectedItems(this.options.fnUnit.param.columns[0]);
  }, e.prototype.renderAbnormalNumberControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ABNORMAL_NUMBER],
        e = this.$abnormalNumberControl.abnormalNumber;
    if (t && ("NaN" === t || "Null" === t)) return $(this.$abnormalNumberControl[t]).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!0), void e.setValue("");
    $(this.$abnormalNumberControl[""]).jqxRadioButton({
      checked: !0
    }), e.setDisabled(!1), e.setValue(t);
  }, e.prototype.renderAbnormalStringControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_ABNORMAL_STRING],
        e = this.$abnormalStringControl.abnormalString;
    void 0 !== t ? "Null" === t ? ($(this.$abnormalStringControl[t]).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !0), e.jqxInput("val", "")) : ($(this.$abnormalStringControl[""]).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !1), e.jqxInput("val", t)) : ($(this.$abnormalStringControl.Null).jqxRadioButton({
      checked: !0
    }), e.jqxInput("disabled", !1), e.jqxInput("val", ""));
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && (this.renderPropertyControlHeader(this.$columnsWidget.parent(), this.problems[t]), this.createValidationContent(this.$columnsWidget.parent(), this.problems[t])), this.problems[t].param === this.PARAM_ABNORMAL_NUMBER && (this.renderPropertyControlHeader(this.$abnormalNumberControl, this.problems[t]), this.createValidationContent(this.$abnormalNumberControl[""], this.problems[t]));
    }
  }, e.prototype.getFilteredData = function () {
    var t = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    return $.grep(t, function (t) {
      return "double" === t.internalType.toLowerCase() || "float" === t.internalType.toLowerCase() || "decimal" === t.internalType.toLowerCase() || "string" === t.internalType.toLowerCase();
    });
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createAbnormalNumberCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_ABNORMAL_NUMBER] = e || this.getAbnormalNumberValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createAbnormalStringCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return "Null" === this.getAbnormalStringValue() ? ((e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      },
      renderParams: [this.PARAM_COLUMNS, this.PARAM_ABNORMAL_NUMBER, this.PARAM_ABNORMAL_STRING]
    }).ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), e.ref.param[this.PARAM_ABNORMAL_NUMBER] = this.getAbnormalNumberValue(), new t.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand(this, e)) : (e.ref.param[this.PARAM_ABNORMAL_STRING] = this.getAbnormalStringValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e));
  }, t.VA.Core.Functions.Library.imputeRemoveLine.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_ABNORMAL_NUMBER = "abnormal-number", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.imputeRemoveLine.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.indexColumn = {
    category: "transform",
    defaultFnUnit: {
      func: "indexColumn",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "Index Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["Manipulation", "Column Extraction", "Table Schema Transform", "Index Column", "IndexColumn", "column", "SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "sql", "query", "sql query", "select", "hiveql"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.indexColumnByRefine = {
    category: "transform",
    defaultFnUnit: {
      func: "indexColumnByRefine",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "Index Column"
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Index Column"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.join = {
    category: "transform",
    defaultFnUnit: {
      func: "join",
      name: "Join",
      inData: [],
      outData: [],
      param: {
        columns: [[""], [""]],
        "on-columns": [[]],
        "table-alias": ["", ""],
        "join-type": "full_outer"
      },
      display: {
        label: "Join",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Join two tables. The following join type is supported : inner, left_outer, right_outer, full_outer, left_exclude, right_exclude.",
    tags: ["Join", "Union", "Preprocessing", "inner", "left outer", "right outer", "full outer", "left exclude", "right exclude", "join two tables"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    this._intableControlOption = {
      rowHeaderType: "custom",
      rowHeaderList: ["A", "B"]
    }, t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.options.joinTypes = ["full_outer", "left_outer", "right_outer", "inner", "left_exclude", "right_exclude"], this.validationControls = {}, this.PARAM_JOIN_TYPE = "join-type", this.PARAM_ON_COLUMNS = "on-columns", this.PARAM_COLUMNS = "columns", this.PARAM_TABLE_ALIAS = "table-alias", this.createJoinTypeControl(e), this.createOnColumnControl(), this.createColumnsControl(), this.createTableAliasControl(), this.render = {
      "join-type": this.renderJoinTypeValue,
      columns: this.renderColumnsValue,
      "on-columns": this.renderOnColumnsValue,
      "table-alias": this.renderTableAliasValue
    }, this.validation = {
      columns: this.renderColumnsValidation,
      "on-columns": this.renderOnColumnsValidation,
      "table-alias": this.renderTableAliasValidation
    }, this.renderValidation();
  }, e.prototype.fillControlValues = function (t) {
    var e = this.options.fnUnit[IN_DATA][0],
        o = this.options.fnUnit[IN_DATA][1];
    e && this.dataMap[e] ? this.fillLeftColumnControlValues(this.dataMap[e].columns) : this.fillLeftColumnControlValues([]), o && this.dataMap[o] ? this.fillRightColumnControlValues(this.dataMap[o].columns) : this.fillRightColumnControlValues([]);
  }, e.prototype.fillKeyControlValues = function () {
    var t = "string" == typeof this.options.fnUnit.param[this.PARAM_ON_COLUMNS][0] ? [this.options.fnUnit.param[this.PARAM_ON_COLUMNS]] : this.options.fnUnit.param[this.PARAM_ON_COLUMNS];

    for (var e in t.length > 1 && this.$addButton.detach(), t) {
      e > 0 && this.createKeyConditionControl(this.$conditionContainer);
    }

    t.length > 1 && this.$addButton.appendTo(this.$conditionContainer);
  }, e.prototype.fillLeftColumnControlValues = function (t) {
    for (var e in this.leftTableColumns = t, this.keyConditionControls) {
      this.keyConditionControls[e].leftColumn.setItems(this.leftTableColumns);
    }

    this.leftColumnsControl.setItems(this.leftTableColumns);
  }, e.prototype.fillRightColumnControlValues = function (t) {
    for (var e in this.rightTableColumns = t, this.keyConditionControls) {
      this.keyConditionControls[e].rightColumn.setItems(this.rightTableColumns);
    }

    this.rightColumnsControl.setItems(this.rightTableColumns);
  }, e.prototype.renderJoinTypeValue = function () {
    var t = this.options.fnUnit.param[this.PARAM_JOIN_TYPE];
    this.$joinTypeControl.jqxButtonGroup("setSelection", this.options.joinTypes.indexOf(t));
  }, e.prototype.renderOnColumnsValue = function () {
    var t = "string" == typeof this.options.fnUnit.param[this.PARAM_ON_COLUMNS][0] ? [this.options.fnUnit.param[this.PARAM_ON_COLUMNS]] : this.options.fnUnit.param[this.PARAM_ON_COLUMNS];
    this.$addButton.detach(), this.keyConditionControls.splice(1, this.keyConditionControls.length), this.validationControls[this.PARAM_ON_COLUMNS].splice(1, this.validationControls[this.PARAM_ON_COLUMNS].length), this.$conditionContainer.find(".non-mandatory").remove();

    for (var e = 1; e < t.length; e++) {
      this.createKeyConditionControl(this.$conditionContainer);
    }

    this.$addButton.appendTo(this.$conditionContainer);
    var o = this.options.fnUnit[IN_DATA][0],
        r = this.options.fnUnit[IN_DATA][1];

    for (var e in o && this.dataMap[o] ? this.fillLeftColumnControlValues(this.dataMap[o].columns) : this.fillLeftColumnControlValues([]), r && this.dataMap[r] ? this.fillRightColumnControlValues(this.dataMap[r].columns) : this.fillRightColumnControlValues([]), t) {
      this.keyConditionControls[e].leftColumn.setSelectedItems([t[e][0]]), this.keyConditionControls[e].rightColumn.setSelectedItems([t[e][1]]);
    }
  }, e.prototype.renderColumnsValue = function () {
    var t = this.options.fnUnit.param.columns[0],
        e = this.options.fnUnit.param.columns[1];
    this.leftColumnsControl.setSelectedItems(t), this.rightColumnsControl.setSelectedItems(e);
  }, e.prototype.renderTableAliasValue = function () {
    var t = this.options.fnUnit.param[this.PARAM_TABLE_ALIAS];
    this.$leftAliasControl.jqxInput("val", t[0]), this.$rightAliasControl.jqxInput("val", t[1]);
  }, e.prototype.createJoinTypeControl = function (e) {
    var o = this;
    this.$joinTypeControl = $('<ul  class="brtc-va-editors-sheet-panels-properties-joinproperties-buttoncontainer"><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "outer" title="Full Outer Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "leftouter" title="Left Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "rightouter" title="Right Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "inner" title="Inner Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "leftexcluding" title="Left Excluding Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "rightexcluding" title="Right Excluding Join"/></div></li> </ul>'), this.addPropertyControl("Join Type", function (t) {
      t.append(this.$joinTypeControl);
    }, {
      mandatory: !0
    }), this.$joinTypeControl.jqxButtonGroup({
      mode: "radio",
      theme: t.VA.Env.Theme
    }), this.$joinTypeControl.jqxButtonGroup("setSelection", 0), this.$joinTypeControl.on("selected", function (e) {
      var r = e.args.button,
          n = new t.VA.Core.CompoundCommand(o, {});
      o.$joinTypeControl.find(".brtc-va-editors-sheet-panels-properties-joinproperties-icon").removeClass("brtc-va-editors-sheet-panels-properties-joinproperties-icon-selected"), r.find(".brtc-va-editors-sheet-panels-properties-joinproperties-icon").addClass("brtc-va-editors-sheet-panels-properties-joinproperties-icon-selected");
      var a = $(r[0]).find('[type="leftexcluding"]'),
          i = $(r[0]).find('[type="rightexcluding"]');
      "leftexcluding" === a.attr("type") ? (o.$leftColumnsControlContainer.show(), o.$rightColumnsControlContainer.hide(), o.rightColumnsControl.setSelectedItems([]), n.add(o.createJoinTypeCommand()), n.add(o.createColumnsCommand()), o.executeCommand(n)) : "rightexcluding" === i.attr("type") ? (o.$leftColumnsControlContainer.hide(), o.$rightColumnsControlContainer.show(), o.leftColumnsControl.setSelectedItems([]), n.add(o.createJoinTypeCommand()), n.add(o.createColumnsCommand()), o.executeCommand(n)) : (o.$leftColumnsControlContainer.show(), o.$rightColumnsControlContainer.show(), o.executeCommand(o.createJoinTypeCommand()));
    });
  }, e.prototype.createOnColumnControl = function () {
    this.$conditionContainer = $('<div class="brtc-va-editors-sheet-panels-properties-joinproperties-keycondition-container"></div>'), this.keyConditionControls = [], this.validationControls[this.PARAM_ON_COLUMNS] = [], this.addPropertyControl("Key Condition (A=B)", function (t) {
      this.createKeyConditionControl(this.$conditionContainer, !0), t.append(this.$conditionContainer);
    }, {
      mandatory: !0
    }), this.createAddButton();
  }, e.prototype.createAddButton = function () {
    var e = this;
    this.$addButton = $('<input class="brtc-va-editors-sheet-panels-properties-joinproperties-keycondition-add-key-condition" type="button" value="+ Add Key Condition"/>'), this.$conditionContainer.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.$addButton.detach(), e.createKeyConditionControl(e.$conditionContainer), e.fillControlValues(!0), e.$conditionContainer.append(e.$addButton), e.executeCommand(e.createOnColumnsCommand());
    });
  }, e.prototype.createKeyConditionControl = function (t, e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-panels-properties-joinproperties-keycondition"></div>'),
        n = $('<div class="brtc-va-editors-sheet-panels-properties-joinproperties-left" style="margin-bottom: 5px;" ></div>'),
        a = $('<div class="brtc-va-editors-sheet-panels-properties-joinproperties-right"></div>'),
        i = $('<div class="brtc-va-editors-sheet-panels-properties-joinproperties-keycondition-innercontainer"></div>');
    r.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), r.addClass(".brtc-va-editors-sheet-controls-propertycontrol-deck"), e || i.addClass("non-mandatory"), r.append($('<div style="width: 10px; float: left; margin-right: 5px; margin-top: 5px; text-align: left;">A</div>')), r.append(n);
    var s = this.createColumnList(n, {
      multiple: !1,
      showOpener: "click",
      changed: function changed(t, e) {
        o.executeCommand(o.createOnColumnsCommand());
      }
    }, "brtc-va-editors-sheet-controls-width-11");
    r.append($('<div style="width: 10px; float: left; margin-right: 5px; margin-top: 5px; text-align: left;">B</div>')), r.append(a);
    var l = this.createColumnList(a, {
      multiple: !1,
      showOpener: "click",
      changed: function changed(t, e) {
        o.executeCommand(o.createOnColumnsCommand());
      }
    }, "brtc-va-editors-sheet-controls-width-11"),
        c = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
    c.click(function () {
      var t = o.validationControls[o.PARAM_ON_COLUMNS].indexOf(i);
      o.validationControls[o.PARAM_ON_COLUMNS].splice(t, 1), i.remove(), void 0 === o.keyConditionControls[t].leftColumn.getSelectedItems()[0] && o.keyConditionControls[t].rightColumn.getSelectedItems()[0], o.keyConditionControls = $.grep(o.keyConditionControls, function (t) {
        return !Object.is(t.leftColumn, s);
      }), o.executeCommand(o.createOnColumnsCommand());
    }), e || r.append(c), i.append(r), t.append(i);
    var p = {
      leftColumn: s,
      rightColumn: l
    };
    this.keyConditionControls.push(p), this.validationControls[this.PARAM_ON_COLUMNS].push(i);
  }, e.prototype.createColumnsControl = function (t) {
    var e = this,
        o = $('<table style="width: 100%"></table>');
    this.addPropertyControl("Output Columns", function (t) {
      e.$leftColumnsControl = $('<div class="brtc-va-editors-sheet-panels-properties-joinproperties-left"></div>'), e.$leftColumnsControl.addClass("outputcolumns"), e.$rightColumnsControl = $('<div class="brtc-va-editors-sheet-panels-properties-joinproperties-right"></div>'), e.$rightColumnsControl.addClass("outputcolumns"), e.$leftColumnsControlContainer = $("<tr></tr>"), o.append(e.$leftColumnsControlContainer), e.$leftColumnsControlContainer.append($('<td style="width: 15px;"><span>A:</span></td>')), e.$leftColumnsControlContainer.append($('<td style="width: 90%;"></td>')), e.$leftColumnsControlContainer.children("td:eq(1)").append(e.$leftColumnsControl), e.$rightColumnsControlContainer = $('<tr class="brtc-va-editors-sheet-controls-margin-top"></tr>'), o.append(e.$rightColumnsControlContainer), e.$rightColumnsControlContainer.append($('<td style="width: 15px;"><span>B:</span></td>')), e.$rightColumnsControlContainer.append($('<td style="width: 90%;"></td>')), e.$rightColumnsControlContainer.children("td:eq(1)").append(e.$rightColumnsControl), t.append(o), this.leftColumnsControl = this.createColumnList(e.$leftColumnsControl, {
        multiple: !0,
        maxRowCount: 4,
        changed: function changed(t, o) {
          e.executeCommand(e.createColumnsCommand());
        }
      }, "brtc-va-editors-sheet-controls-width-12 brtc-va-editors-sheet-controls-margin-bottom"), this.rightColumnsControl = this.createColumnList(e.$rightColumnsControl, {
        multiple: !0,
        maxRowCount: 4,
        changed: function changed(t, o) {
          e.executeCommand(e.createColumnsCommand());
        }
      }, "brtc-va-editors-sheet-controls-width-12"), this.validationControls.columns = t;
    });
  }, e.prototype.createTableAliasControl = function () {
    var t = this,
        e = $('<table style="width: 100%"></table>');
    this.validationControls[this.PARAM_TABLE_ALIAS] = [], this.addPropertyControl("Table Alias", function (o) {
      t.$leftAliasControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), t.$leftAliasControl.addClass("left"), t.$rightAliasControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), t.$rightAliasControl.addClass("right"), t.$leftAliasControlContainer = $("<tr></tr>"), e.append(t.$leftAliasControlContainer), t.$leftAliasControlContainer.append($('<td style="width: 15px; display: flex; padding-top: 5px;"><span>A:</span></td>')), t.$leftAliasControlContainer.append($('<td style="width: 90%;"></td>')), t.$leftAliasControlContainer.children("td:eq(1)").append(t.$leftAliasControl), t.$rightAliasControlContainer = $('<tr class="brtc-va-editors-sheet-controls-margin-top"></tr>'), e.append(t.$rightAliasControlContainer), t.$rightAliasControlContainer.append($('<td style="width: 15px; display: flex; padding-top: 5px;"><span>B:</span></td>')), t.$rightAliasControlContainer.append($('<td style="width: 90%;"></td>')), t.$rightAliasControlContainer.children("td:eq(1)").append(t.$rightAliasControl), o.append(e), this.createInput(t.$leftAliasControl, {
        height: "23px",
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-12 brtc-va-editors-sheet-controls-margin-bottom"), t.$leftAliasControl.on("change", function (e) {
        t.isInputValueChanged("table-alias", t.getTableAliasParam()) && t.executeCommand(t.createTableAliasCommand());
      }), this.createInput(t.$rightAliasControl, {
        height: "23px",
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-12"), t.$rightAliasControl.on("change", function (e) {
        t.isInputValueChanged("table-alias", t.getTableAliasParam()) && t.executeCommand(t.createTableAliasCommand());
      });
    });
  }, e.prototype.createJoinTypeCommand = function () {
    var e = this.options.joinTypes[this.$joinTypeControl.jqxButtonGroup("getSelection")] || "inner";
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          "join-type": e
        }
      }
    });
  }, e.prototype.createOnColumnsCommand = function () {
    var e = [];

    for (var o in this.keyConditionControls) {
      var r = this.getSelectedItem(this.keyConditionControls[o].leftColumn),
          n = this.getSelectedItem(this.keyConditionControls[o].rightColumn);
      e.push([r, n]);
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          "on-columns": e
        }
      }
    });
  }, e.prototype.createColumnsCommand = function () {
    var e = this.leftColumnsControl.getSelectedItems(),
        o = this.rightColumnsControl.getSelectedItems();
    return 0 === e.length && (e[0] = ""), 0 === o.length && (o[0] = ""), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          columns: [e, o]
        }
      }
    });
  }, e.prototype.createTableAliasCommand = function () {
    var e = this.$leftAliasControl.val(),
        o = this.$rightAliasControl.val();
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          "table-alias": [e, o]
        }
      }
    });
  }, e.prototype.getSelectedItem = function (t) {
    return t.getSelectedItems().length > 0 ? t.getSelectedItems()[0] : "";
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.validation[e] && this.validation[e].call(this, this.problems[t]);
    }
  }, e.prototype.renderOnColumnsValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_ON_COLUMNS][t.paramIndex].find(".brtc-va-editors-sheet-panels-properties-joinproperties-keycondition"), t);
  }, e.prototype.renderTableAliasValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_TABLE_ALIAS], t);
  }, e.prototype.getTableAliasParam = function () {
    return [this.$leftAliasControl.val(), this.$rightAliasControl.val()];
  }, t.VA.Core.Functions.Library.join.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_ON_COLUMNS = "on-columns", this.PARAM_JOIN_TYPE = "join-type", this.PARAM_TABLE_ALIAS = "table-alias", t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this), this.addOnColumnsRule(), this.addTableAliasRule();
  }, e.prototype.addTableAliasRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (2 === e[IN_DATA].length) {
        var o = !1,
            r = [],
            n = e.param[t.PARAM_TABLE_ALIAS];
        return 2 != n.length ? o = !0 : n[0] || n[1] ? !n[0] && n[1] ? o = !0 : n[0] && !n[1] && (o = !0) : o = !0, o && r.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: t.PARAM_TABLE_ALIAS,
          messageParam: ["Table Alias"],
          paramIndex: 0
        }, e)), r;
      }
    });
  }, e.prototype.addOnColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [],
          r = e.param[t.PARAM_ON_COLUMNS];

      for (var n in r) {
        var a = t.checkColumnIsEmpty(e, t.PARAM_ON_COLUMNS, r[n][0], "A Key"),
            i = t.checkColumnIsEmpty(e, t.PARAM_ON_COLUMNS, r[n][1], "B Key");
        void 0 !== a && void 0 !== i ? o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: t.PARAM_ON_COLUMNS,
          messageParam: ["Key Condition"],
          paramIndex: n
        }, e)) : a ? o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: t.PARAM_ON_COLUMNS,
          messageParam: ["Key Condition"],
          paramIndex: n
        }, e)) : i && o.push(t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: t.PARAM_ON_COLUMNS,
          messageParam: ["Key Condition"],
          paramIndex: n
        }, e));
      }

      return o;
    }), this.addRule(function (e) {
      var o = [],
          r = e.param[t.PARAM_ON_COLUMNS];

      for (var n in r) {
        var a = r[n][0] || "";
        (i = t.checkColumnExists(e, t.PARAM_ON_COLUMNS, a, 0)) && (i.paramIndex = n, o.push(i));
        var i;
        a = r[n][1] || "";
        (i = t.checkColumnExists(e, t.PARAM_ON_COLUMNS, a, 1)) && (i.paramIndex = n, o.push(i));
      }

      return o;
    });
  }, t.VA.Core.Functions.Library.join.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.pca = {
    category: "transform",
    defaultFnUnit: {
      func: "pca",
      name: "PCA",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: []
      },
      display: {
        label: "PCA",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Principal component analysis (PCA) is a statistical procedure that uses an orthogonal transformation to convert a set of observations of possibly correlated variables into a set of values of linearly uncorrelated variables called principal components.",
    tags: ["PCA", "Principal Component Analysis", "principal component analysis", "dimension reduction", "biplot", "eigenvector", "feature extraction"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 3,
      max: 3
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.render = {
      columns: this.renderColumnsControl,
      groupby: this.renderGroupByControl
    }, this.createColumnsControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 5,
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type || "number[]" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMNS];
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupByControl = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param[this.PARAM_COLUMNS] = [[]];
    var o = this.getColumnsValue();
    return o && (e.ref.param[this.PARAM_COLUMNS] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.pca.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule("columns", "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns[0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns[0]);
    });
  }, e = e, t.VA.Core.Functions.Library.pca.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.pivot = {
    category: "transform",
    defaultFnUnit: {
      func: "pivot",
      name: "Pivot",
      inData: [],
      outData: [],
      param: {
        "row-labels": [],
        "column-labels": [],
        values: [],
        "blank-column-name": ""
      },
      display: {
        label: "Pivot",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Summarize data using pivot table so that you can make a horizontally lengthy table from vertically lengthy one.",
    tags: ["Pivot", "Preprocessing", "Table Schema Transform", "summarize", "avg", "sum", "max", "min", "variance", "stddev", "count"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationControls = {}, this.PARAM_ROW_LABELS = "row-labels", this.PARAM_COLUMN_LABELS = "column-labels", this.PARAM_VALUES = "values", this.PARAM_BLANK_COLUMN_NAME = "blank-column-name", this.render = {
      "row-labels": this.renderRowLabels,
      "column-labels": this.renderColumnLabels,
      values: this.renderParamValues,
      "blank-column-name": this.renderBlankColumnName
    }, this.createRowLabelsControl(), this.createColumnLabelsControl(), this.createValuesControl(), this.createBlankColumnNameControl(), this.validation = {
      "row-labels": this.renderRowLabelsValidation,
      "column-labels": this.renderColumnLabelsValidation,
      values: this.renderValuesValidation,
      "blank-column-name": this.renderBlankColumnValidation
    }, this.renderValidation();
  }, e.prototype.createRowLabelsControl = function () {
    var t = this;
    this.$rowLabelsControl = $('<div class="brtc-va-editors-sheet-panels-properties-pivotproperties-rowlabels"/>'), this.addPropertyControl("Row Labels", function (e) {
      e.append(t.$rowLabelsControl), t.rowLabelsControl = this.createColumnList(t.$rowLabelsControl, {
        multiple: !0,
        rowCount: 2,
        maxRowCount: 3,
        removable: !0,
        changed: function changed(e, o) {
          t.executeCommand(t.createRowLabelsCommand());
        }
      }), this.validationControls[this.PARAM_ROW_LABELS] = e;
    });
  }, e.prototype.createColumnLabelsControl = function () {
    var t = this;
    this.$columnLabelsControl = $('<div class="brtc-va-editors-sheet-panels-properties-pivotproperties-columnlabel"/>'), this.addPropertyControl("Column Labels", function (e) {
      e.append(t.$columnLabelsControl), t.columnLabelsControl = this.createColumnList(t.$columnLabelsControl, {
        multiple: !0,
        rowCount: 2,
        maxRowCount: 3,
        showOpener: "button",
        removable: !0,
        changed: function changed(e, o) {
          var r = t.createSetParameterValueCommand("column-labels", o.items);
          t.executeCommand(r);
        }
      }), this.validationControls[this.PARAM_COLUMN_LABELS] = e;
    });
  }, e.prototype.createBlankColumnNameControl = function () {
    var t = this;
    this.$blankColumnNameControl = $('<input type="text" class="brtc-va-editors-sheet-panels-properties-pivotproperties-input" valid-type="type1"/>'), this.addPropertyControl("Blank Column Name", function (e) {
      e.append(t.$blankColumnNameControl), t.createInput(t.$blankColumnNameControl, {
        placeHolder: "Enter value"
      }), t.validationControls[t.PARAM_BLANK_COLUMN_NAME] = t.$blankColumnNameControl.parent();
    }), this.$blankColumnNameControl.on("change", function (e) {
      t.isInputValueChanged("blank-column-name", $(this).val()) && t.executeCommand(t.createBlankColumnNameCommand());
    }), this.$blankColumnNameControl.bind("keypress", function (t) {
      (t.which < 48 || t.which > 57 && t.which < 65 || t.which > 90 && t.which < 97 && 95 != t.which || t.which > 122) && t.preventDefault();
    });
  }, e.prototype.createValuesControl = function () {
    var t = this;
    this.valueControls = [], this.$contents = $('<div class="brtc-va-editors-sheet-panels-properties-pivotproperties-valuescontrol"/>'), this.addPropertyControl("Values", function (e) {
      e.append(t.$contents);
    }, {
      mandatory: !0
    }), this.createAddButton(), this.validationControls[this.PARAM_VALUES] = this.$contents;
  }, e.prototype.createValueControl = function () {
    var t = this,
        e = $('<div class="brtc-va-editors-sheet-panels-properties-pivotproperties-valuecontrol-wrapper"/>'),
        o = $('<div class="brtc-va-editors-sheet-panels-properties-pivotproperties-valuecontrol-columnlist"/>'),
        r = $('<div class="brtc-va-editors-sheet-panels-properties-pivotproperties-valuecontrol-operator"/>'),
        n = $('<div class="remove-value-button"></div>');
    n.click(function (e) {
      $(this).parent().remove(), t.valueControls = $.grep(t.valueControls, function (t) {
        return !Object.is(t.column, a);
      }), t.executeCommand(t.createValuesCommand());
    }), e.append(r), e.append(o), e.append(n), this.$contents.append(e);
    var a = this.createColumnList(o, {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !1,
      changed: function changed(e, o) {
        var n,
            i,
            s = o.removed[0],
            l = o.added[0];
        s && (n = t.getColumnType(s)), l && (i = t.getColumnType(l)), n !== i ? t.setOperator(r, a, "max") : t.executeCommand(t.createValuesCommand());
      }
    }, "brtc-va-editors-sheet-controls-width-7", {
      "margin-bottom": "2px",
      width: "calc(100% - 110px)"
    });
    a.setItems(this.getColumns()), this.createDropDownList(r, {
      source: [],
      displayMember: "display",
      valueMember: "value",
      placeHolder: ""
    }, "brtc-va-editors-sheet-controls-width-3", {
      width: "85px"
    }), r.on("select", function (e) {
      e.args && t.executeCommand(t.createValuesCommand());
    });
    var i = {
      column: a,
      operator: r
    };
    return this.valueControls.push(i), i;
  }, e.prototype.createAddButton = function () {
    var e = this;
    this.$addButton = $('<input type="button" value="+ Add Value" style="margin-top: 5px"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      e.removeValidation(), e.$addButton.detach(), e.createValueControl(), e.executeCommand(e.createValuesCommand()), e.$addButton.appendTo(e.$contents);
    });
  }, e.prototype.renderRowLabels = function () {
    var t = this.options.fnUnit.param[this.PARAM_ROW_LABELS];
    this.rowLabelsControl.setSelectedItems(t);
  }, e.prototype.renderColumnLabels = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMN_LABELS];
    this.columnLabelsControl.setSelectedItems(t);
  }, e.prototype.renderParamValues = function () {
    var t = this.options.fnUnit.param[this.PARAM_VALUES];

    for (var e in this.$contents.empty(), this.valueControls = [], t) {
      var o = t[e],
          r = this.createValueControl();
      r.column.setSelectedItems([o[1]]), this.setOperator(r.operator, r.column, o[0]);
    }

    this.createAddButton();
  }, e.prototype.renderBlankColumnName = function () {
    var t = this.options.fnUnit.param[this.PARAM_BLANK_COLUMN_NAME];
    this.$blankColumnNameControl.val(t || "");
  }, e.prototype.fillControlValues = function () {
    for (var t in this.rowLabelsControl.setItems(this.getColumns()), this.columnLabelsControl.setItems(this.getColumns()), this.valueControls) {
      this.valueControls[t].column.setItems(this.getColumns());
    }
  }, e.prototype.getColumns = function () {
    var t = this.options.fnUnit[IN_DATA][0];
    return t && this.dataMap[t] ? this.dataMap[t].columns : [];
  }, e.prototype.createRowLabelsCommand = function () {
    var e = this.rowLabelsControl.getSelectedItems();
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          "row-labels": e
        }
      }
    });
  }, e.prototype.createValuesCommand = function () {
    var e = [];

    for (var o in this.valueControls) {
      var r = [];
      r.push(this.valueControls[o].operator.val()), r.push(this.getSelectedItem(this.valueControls[o].column)), e.push(r);
    }

    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          values: e
        }
      }
    });
  }, e.prototype.createBlankColumnNameCommand = function () {
    var e = this.$blankColumnNameControl.val();
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          "blank-column-name": e
        }
      }
    });
  }, e.prototype.setOperator = function (t, e, o) {
    t.jqxDropDownList("clearSelection"), "string" === this.getColumnType(this.getSelectedItem(e)) ? t.jqxDropDownList({
      source: [{
        display: "MAX",
        value: "max"
      }, {
        display: "MIN",
        value: "min"
      }, {
        display: "CNT",
        value: "count"
      }, {
        display: "CONCAT",
        value: "concat"
      }, {
        display: "DISTINCT",
        value: "distinct"
      }]
    }) : t.jqxDropDownList({
      source: [{
        display: "MAX",
        value: "max"
      }, {
        display: "MIN",
        value: "min"
      }, {
        display: "AVG",
        value: "avg"
      }, {
        display: "SUM",
        value: "sum"
      }, {
        display: "VAR",
        value: "variance"
      }, {
        display: "STDEV",
        value: "stddev"
      }, {
        display: "CNT",
        value: "count"
      }, {
        display: "CONCAT",
        value: "concat"
      }, {
        display: "DISTINCT",
        value: "distinct"
      }]
    }), o && t.val(o);
  }, e.prototype.getSelectedItem = function (t) {
    return t.getSelectedItems().length > 0 ? t.getSelectedItems()[0] : "";
  }, e.prototype.getColumnType = function (t) {
    var e,
        o = this.getColumns();

    for (var r in o) {
      if (o[r].name === t) {
        e = o[r].type ? o[r].type : "string";
        break;
      }
    }

    return e;
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.validation[e] && this.validation[e].call(this, this.problems[t]);
    }
  }, e.prototype.renderRowLabelsValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_ROW_LABELS], t);
  }, e.prototype.renderColumnLabelsValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_COLUMN_LABELS], t);
  }, e.prototype.renderValuesValidation = function (t) {
    if (t.paramIndex) {
      var e = t.paramIndex,
          o = this.validationControls[this.PARAM_VALUES].find(".brtc-va-editors-sheet-panels-properties-pivotproperties-valuecontrol-wrapper")[e],
          r = $(o).find(".brtc-va-editors-sheet-controls-columnlist");
      this.createValueValidationContent(r, t);
    } else this.createValidationContent(this.validationControls[this.PARAM_VALUES], t);
  }, e.prototype.createValueValidationContent = function (t, e, o) {
    var r = $('<div class="brtc-va-editors-sheet-panels-validation-tooltip-wrapper">   <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>   <div class="brtc-va-editors-sheet-panels-validation-tooltip">' + e.message + "</div></div>");
    t.closest(".brtc-va-editors-sheet-panels-properties-pivotproperties-valuecontrol-wrapper").append(r), t.closest(".brtc-va-editors-sheet-panels-properties-pivotproperties-valuecontrol-wrapper").addClass("brtc-va-editor-sheet-panels-validation-error"), o && r.css("clear", "both"), r.show();
  }, e.prototype.renderBlankColumnValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_BLANK_COLUMN_NAME], t);
  }, t.VA.Core.Functions.Library.pivot.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_ROW_LABELS = "row-labels", this.PARAM_COLUMN_LABELS = "column-labels", this.PARAM_VALUES = "values", this.PARAM_BLANK_COLUMN_NAME = "blank-column-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addRowLabelsRule(), this.addColumnLabelsRule(), this.addValuesRule(), this.addNewColumnNameRule(this.PARAM_BLANK_COLUMN_NAME);
  }, e.prototype.addRowLabelsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_ROW_LABELS, e.param[t.PARAM_ROW_LABELS]);
    });
  }, e.prototype.addColumnLabelsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMN_LABELS, e.param[t.PARAM_COLUMN_LABELS]);
    });
  }, e.prototype.addValuesRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (this._hasSchema(e)) {
        var o = [];
        if (e.param.values.length < 1) return t.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: this.PARAM_VALUES,
          messageParam: ["Values"]
        }, e);

        var r = [],
            n = e.param.values,
            a = this._getSchema(e);

        $.map(a, function (t) {
          return t.name;
        });

        for (var i in n) {
          if (this._isEmptyString(n[i][1])) {
            var s = {
              errorCode: "BR-0033",
              param: t.PARAM_VALUES,
              messageParam: ["Column"],
              paramIndex: i
            };
            o.push(this.problemFactory.createProblem(s, e));
          }

          if ("" !== n[i][1] && this._isEmptyString(n[i][0])) {
            s = {
              errorCode: "BR-0033",
              param: t.PARAM_VALUES,
              messageParam: [n[i][1] + " Operator"],
              paramIndex: i
            };
            o.push(this.problemFactory.createProblem(s, e));
          }

          r.push(n[i][1]);
        }

        return o;
      }
    });
  }, e = e, t.VA.Core.Functions.Library.pivot.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.powerRowAppend = {
    category: "transform",
    defaultFnUnit: {
      func: "powerRowAppend",
      name: "PowerBindRow",
      inData: [],
      outData: [],
      param: {},
      display: {
        label: "Power Bind Row",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Bind two tables vertically. Similar with 'rbind' function in R.",
    tags: ["Power Bind Row", "PowerBindRow", "Preprocessing", "Union", "Bind", "rbind", "adjoin", "union", "two tables", "vertically"],
    "in-range": {
      min: 2,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationControls = {}, this.PARAM_IN_TABLE = "inData", this.createOutputPreviewControl(), this.validation = {
      inData: this.renderOutputValidation
    }, this.renderValidation();
  }, e.prototype.createOutputPreviewControl = function (t) {
    var e = this;
    this.$outputPreviewControl = $('<div class="brtc-va-editors-sheet-panels-properties-powerrowappendproperties-outputpreview" />'), this.addPropertyControl("Output Preview", function (t) {
      t.append(this.$outputPreviewControl), e.outputPreviewControl = e.createColumnList(this.$outputPreviewControl, {
        multiple: !0,
        showOpener: "none",
        maxRowCount: 15,
        removable: !1,
        sort: "none",
        draggable: !1,
        placeHolder: "preview"
      });
    });
  }, e.prototype.bindEventHandlers = function () {
    var t = this;
    this.$outputControl.sortable({
      axis: "y"
    }), this.$outputControl.on("sortstop", function () {
      var e = t.$outputControl.sortable("toArray", {
        attribute: "value"
      });
      t.isSortChanged(e) && (t.executeCommand(t.createOutputCommand()), t.renderOutputPreview());
    });
  }, e.prototype.renderValues = function (t) {
    this.renderOutputPreview();
  }, e.prototype.createTableElement = function (t) {
    var e = $('<li class="brtc-va-editors-sheet-panels-properties-powerrowappendproperties-output-element"/>').attr("value", t);
    return e.append($("<span />").text(this.getPreviousFnUnit(t).display.label)), e;
  }, e.prototype.renderOutputPreview = function () {
    this.outputPreviewControl.setItems(this.getColumns()), this.outputPreviewControl.setSelectedItems(this.getColumnNames());
  }, e.prototype.getPreviousFnUnit = function (t) {
    return this.options.modelEditor.getModel().getPreFnUnitByCondition(this.options.fnUnit.fid, function (e) {
      return $.inArray(t, e[OUT_DATA]) > -1;
    });
  }, e.prototype.createOutputCommand = function () {
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        inData: this.$outputControl.sortable("toArray", {
          attribute: "value"
        })
      }
    });
  }, e.prototype.isSortChanged = function (t) {
    for (var e in t) {
      if (t[e] !== this.options.fnUnit[this.PARAM_IN_TABLE][e]) return !0;
    }

    return !1;
  }, e.prototype.getColumns = function () {
    var t,
        e,
        o = this.options.fnUnit[this.PARAM_IN_TABLE][0],
        r = this.options.fnUnit[this.PARAM_IN_TABLE][1];
    t = o && this.dataMap[o] ? this.dataMap[o].columns : [], e = r && this.dataMap[r] ? this.dataMap[r].columns : [];

    for (var n = $.extend(!0, [], t), a = $.map(t, function (t) {
      return t.name;
    }), i = 0; i < e.length; i++) {
      -1 === $.inArray(e[i].name, a) && n.push(e[i]);
    }

    return n;
  }, e.prototype.getColumnNames = function () {
    return $.map(this.getColumns(), function (t) {
      return t.name;
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.validation[e] && this.validation[e].call(this, this.problems[t]);
    }
  }, e.prototype.renderOutputValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_IN_TABLE], t);
  }, t.VA.Core.Functions.Library.powerRowAppend.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.PairInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.PairInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.PairInputValidator.prototype.initRules.call(this);
  }, e = e, t.VA.Core.Functions.Library.powerRowAppend.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.pythonRefine = {
    category: "transform",
    defaultFnUnit: {
      func: "pythonRefine",
      name: "Subflow",
      inData: [],
      outData: [],
      param: {
        functions: [{
          func: "pythonScript",
          name: "PythonScript",
          param: {
            script: "result = inputs[0]",
            "out-table-alias": ["result"]
          }
        }],
        links: []
      },
      display: {
        label: "Refine Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      },
      context: "python"
    },
    description: "This function is used to refine data: cleaning it; transforming it; and extending it.",
    tags: ["Add Function Column", "AddFunctionColumn", "Add Column", "Extraction", "Preprocessing", "Transform", "Refine", "Refine Data"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.getPrimaryOperation = function () {
    return "RefineData";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      a: this.renderSubflowControl
    }, this.createStepControl();
  }, e.prototype.renderValues = function (t) {
    this.renderSubflowControl();
  }, e.prototype.renderSubflowControl = function () {
    var e = this;
    this.$stepDisplayDiv.empty();

    for (var o = 0; o < this.options.fnUnit.param.functions.length; o++) {
      var r = this.options.fnUnit.param.functions[o];
      if (void 0 !== r.func && "pythonScript" !== r.func) var n = $('<div class="brtc-va-refine-step">   <div class="brtc-va-refine-step-header">       <div class="brtc-va-refine-step-label" id="' + t.VA.Core.Utils.WidgetUtils.convertHTMLSpecialChar(r.fid) + '">' + t.VA.Core.Utils.WidgetUtils.convertHTMLSpecialChar(r.display.label) + "       </div>   </div></div>");
      if (e.$stepDisplayDiv.append(n), this.options.fnUnit.param.functions.length > 0 && "pythonScript" !== r.func) n.find(".brtc-va-refine-step-header").click(function (o) {
        var r = $(this).parents(".brtc-va-refine-step").prevAll(".brtc-va-refine-step").length;
        new t.VA.Core.Dialogs.RefineDialog($(o.target), {
          stepIdx: r,
          fnUnit: e.options.fnUnit,
          dataProxy: e.options.dataProxy,
          columns: $.extend(!0, [], e.columnNameArray),
          close: function close(t) {
            if (t.OK) {
              var o = e.createSubflowCommand(t.param);
              e.executeCommand(o), e.renderSubflowControl(), e.callFunction();
            }
          }
        });
      });
    }
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
  }, e.prototype.createStepControl = function () {
    var t = this;
    this.$stepContainer = $('<div class="brtc-va-editors-sheet-refine-step-container"/>'), this.$stepDisplayDiv = $('<div class="btrc-va-editors-sheet-refine-step-div"/>'), this.addPropertyControl("Step", function (e) {
      e.append(t.$stepDisplayDiv), e.append(t.$stepContainer), t.createBrowseControl(t.$stepContainer);
    }, {
      mandatory: !1
    });
  }, e.prototype.createBrowseControl = function (e) {
    var o = this,
        r = $('<input class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-add-key-condition" type="button" value="Edit"/>');
    e.append(r), r.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), r.click(function (e) {
      new t.VA.Core.Dialogs.RefineDialog($(e.target), {
        fnUnit: o.options.fnUnit,
        dataProxy: o.options.dataProxy,
        columns: $.extend(!0, [], o.columnNameArray),
        context: "python",
        close: function close(t) {
          if (t.OK) {
            var e = o.createSubflowCommand(t.param);
            o.executeCommand(e), o.renderSubflowControl();
          }
        }
      });
    });
  }, e.prototype.createSubflowCommand = function (e) {
    e.functions.length ? this.options.fnUnit.param.functions[this.options.fnUnit.param.functions.length - 1][IN_DATA] = e.functions[e.functions.length - 1][OUT_DATA] : this.options.fnUnit.param.functions[this.options.fnUnit.param.functions.length - 1][IN_DATA] = this.options.fnUnit[IN_DATA], e.functions.push(this.options.fnUnit.param.functions[this.options.fnUnit.param.functions.length - 1]);

    for (var o = [], r = 0; r < e.functions.length - 1; r++) {
      var n = {
        kid: t.VA.Core.Utils.IDGenerator.link.id(),
        sourceFid: e.functions[r].fid,
        targetFid: e.functions[r + 1].fid
      };
      o.push(n);
    }

    var a = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          functions: $.extend(!0, [], e.functions),
          links: $.extend(!0, [], o)
        }
      }
    };
    return a.ref.param.functions && a.ref.param.functions.length > 0 && (a.ref.param.entries = [a.ref.param.functions[0].fid]), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, a);
  }, t.VA.Core.Functions.Library.pythonRefine.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.pythonRefine.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.qrDecomposition = {
    category: "transform",
    defaultFnUnit: {
      func: "qrDecomposition",
      name: "QRDecomposition",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        computeQ: "false",
        groupby: []
      },
      display: {
        label: "QR Decomposition",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function returns the QR decomposition of m by n matrix.",
    tags: ["QRDecomposition", "QR Decomposition", "Decomposition", "QR", "gram schmidt", "feature selection"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      computeQ: this.renderComputeQ,
      groupby: this.renderGroupBy
    }, this.createColumnsControl(), this.createComputeQControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns);
      t.columnsControl = t.createColumnList(t.$columns, {
        rowCount: 3,
        multiple: !0
      }), t.columnsControl.onChange(function () {
        var e = t.createColumnsCommand();
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiocontrol">' + e + "</div>");
    t.append(n), this.createRadioButton(n, {
      groupName: o
    }), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = r.createComputeQCommand();
      r.executeCommand(e);
    });
  }, e.prototype.createComputeQControl = function () {
    var t = this;
    this.$computeQControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>'), this.addPropertyControl("Compute Q", function (e) {
      e.append(t.$computeQControl), t.createRadioButtonControl(t.$computeQControl, "True", "computeQ"), t.createRadioButtonControl(t.$computeQControl, "False", "computeQ");
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param.columns;
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderComputeQ = function () {
    var t = this.options.fnUnit.param.computeQ;
    "true" === t ? t = "True" : "false" === t && (t = "False"), $(this.$computeQControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "columns" === this.problems[t].param && this.createValidationContent(this.$columns.parent(), this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    return o && (e.ref.param.columns[0] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createComputeQCommand = function () {
    var e = new t.VA.Core.CompoundCommand(this),
        o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        r = "true",
        n = this.$computeQControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radiocontrol");
    $.each(n, function (t, e) {
      if ($(e).jqxRadioButton("val") && "" !== $(e).attr("value")) return r = $(e).attr("value"), !1;
    }), "True" === r ? r = "true" : "False" === r && (r = "false"), o.ref.param.computeQ = r;
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
    this.options.fnUnit[OUT_DATA] && o.ref[OUT_DATA].push(this.options.fnUnit[OUT_DATA][0]), "true" == r ? o.ref[OUT_DATA].push(t.VA.Core.Utils.IDGenerator.table.id()) : o.ref[OUT_DATA].slice(0, 1);
    var i = new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, o);
    return e.add(a), e.add(i), e;
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.qrDecomposition.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, t.VA.Core.Functions.Library.qrDecomposition.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.randomSampling = {
    category: "transform",
    defaultFnUnit: {
      func: "randomSampling",
      name: "RandomSampling",
      inData: [],
      outData: [],
      param: {
        method: "fraction",
        value: "0.5",
        seed: "",
        replacement: "true",
        shuffle: "false",
        groupby: []
      },
      display: {
        label: "Random Sampling",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "In statistics, a simple random sample is a subset of individuals (a sample) chosen from a larger set (a population).",
    tags: ["Random Sampling", "RandomSampling", "Preprocessing", "Sampling", "sample"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_MODEL = "method", this.PARAM_VALUE = "value", this.PARAM_SEED = "seed", this.PARAM_REPLACEMENT = "replacement", this.PARAM_SHUFFLE = "shuffle", this.PARAM_GROUPBY = "groupby", this.render = {
      method: this.renderModelControl,
      value: this.renderValueControl,
      seed: this.renderSeedControl,
      replacement: this.renderReplacementControl,
      shuffle: this.renderShuffleControl,
      groupby: this.renderGroupBy
    }, this.createModelControl(), this.createFractionControl(), this.createNumberControl(), this.createSeedControl(), this.createReplacementControl(), this.createShuffleControl(), this.createGroupByControl();
  }, e.prototype.createModelControl = function () {
    var t = this;
    this.$modelControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Model", function (e) {
      e.append(t.$modelControl), t.createRadioButtonControl(t.$modelControl, "Fraction", t.PARAM_MODEL), t.createRadioButtonControl(t.$modelControl, "Number", t.PARAM_MODEL);
    }, {
      mandatory: !0
    });
  }, e.prototype.createFractionControl = function () {
    var t = this;
    this.$fractionNumberControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol-percent"/>'), this.addPropertyControl("Fraction", function (e) {
      e.append(t.$fractionNumberControl);
      t.$fractionNumberInput = this.createNumericInput(t.$fractionNumberControl, {
        numberType: "double",
        minus: !1,
        placeholder: "Enter value",
        min: .01,
        max: 100,
        mandatory: !0
      }, "brtc-va-editors-sheet-controls-propertycontrol-filter-number-input"), t.$fractionNumberInput.onChange(function (e) {
        var o = t.createFractionCommand();
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createNumberControl = function () {
    var t = this;
    this.$numberControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Number", function (e) {
      e.append(t.$numberControl);
      t.$numberInput = this.createNumericInput(t.$numberControl, {
        numberType: "int",
        minus: !1,
        placeholder: "Enter value",
        min: 1,
        mandatory: !0
      }), t.$numberInput.onChange(function () {
        var e = t.createNumericInputCommand(this.getValue());
        t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createSeedControl = function () {
    var t = this;
    this.$seedControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput">'), this.addPropertyControl("Seed", function (e) {
      e.append(t.$seedControl);
      t.$seedInput = this.createNumericInput(t.$seedControl, {
        numberType: "int"
      }), t.$seedInput.onChange(function () {
        var e = t.createSeedInputCommand(this.getValue());
        t.executeCommand(e);
      });
    });
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n), this.createRadioButton(n, {
      groupName: o
    }), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e;
      o === r.PARAM_REPLACEMENT ? e = r.createReplacementCommand() : o === r.PARAM_MODEL ? e = r.createModelCommand() : o === r.PARAM_SHUFFLE && (e = r.createShuffleCommand()), r.executeCommand(e), r.renderValueControl();
    });
  }, e.prototype.createReplacementControl = function () {
    var t = this;
    this.$replacementControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Replacement", function (e) {
      e.append(t.$replacementControl), t.createRadioButtonControl(t.$replacementControl, "True", t.PARAM_REPLACEMENT), t.createRadioButtonControl(t.$replacementControl, "False", t.PARAM_REPLACEMENT);
    });
  }, e.prototype.createShuffleControl = function () {
    var t = this;
    this.$shuffleControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Shuffle", function (e) {
      e.append(t.$shuffleControl), t.createRadioButtonControl(t.$shuffleControl, "True", t.PARAM_SHUFFLE), t.createRadioButtonControl(t.$shuffleControl, "False", t.PARAM_SHUFFLE);
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.renderModelControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MODEL];
    "fraction" === t ? t = "Fraction" : "number" === t && (t = "Number"), $(this.$modelControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderValueControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_MODEL],
        e = this.options.fnUnit.param[this.PARAM_VALUE];

    if ("fraction" === t) {
      var o = this.getDecimalLength();
      this.$fractionNumberInput.setValue(e ? Number((100 * e).toFixed(o)) : "");
    } else "number" === t && this.$numberInput.setValue(e || "");
  }, e.prototype.renderSeedControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_SEED];
    this.$seedInput.setValue(t || "");
  }, e.prototype.renderReplacementControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REPLACEMENT];
    "true" === t ? t = "True" : "false" === t && (t = "False"), $(this.$replacementControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderReplacementControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REPLACEMENT];
    "true" === t ? t = "True" : "false" === t && (t = "False"), $(this.$replacementControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderShuffleControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_SHUFFLE];
    "true" === t ? t = "True" : "false" !== t && void 0 !== t || (t = "False"), $(this.$shuffleControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.createModelCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = "fraction",
        r = this.$modelControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(r, function (t, e) {
      if ($(e).jqxRadioButton("val") && "" !== $(e).attr("value")) return o = $(e).attr("value"), !1;
    }), "Fraction" === o ? (o = "fraction", this.$fractionNumberControl.parent().parent().parent().css("display", "block"), this.$numberControl.parent().parent().parent().css("display", "none")) : "Number" === o && (o = "number", this.$fractionNumberControl.parent().parent().parent().css("display", "none"), this.$numberControl.parent().parent().parent().css("display", "block")), e.ref.param[this.PARAM_MODEL] = o, e.ref.param[this.PARAM_VALUE] = "fraction" == o ? this.$fractionNumberInput.getValue() ? (this.$fractionNumberInput.getValue() / 100).toString() : "" : this.$numberInput.getValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createFractionCommand = function () {
    var e,
        o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        r = this.getDecimalLength();

    if (this.$fractionNumberInput.getValue().split(".")[1]) {
      var n = Number(this.$fractionNumberInput.getValue()).toFixed(r);
      this.$fractionNumberInput.setValue(Number(n));
    }

    return e = Number((this.$fractionNumberInput.getValue() / 100).toFixed(r + 2)), o.ref.param[this.PARAM_VALUE] = this.$fractionNumberInput.getValue() ? e.toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createNumericInputCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_VALUE] = "", e && (o.ref.param[this.PARAM_VALUE] = e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createSeedInputCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_SEED] = "", e && (o.ref.param[this.PARAM_SEED] = e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createReplacementCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = "true",
        r = this.$replacementControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(r, function (t, e) {
      if ($(e).jqxRadioButton("val") && "" !== $(e).attr("value")) return o = $(e).attr("value"), !1;
    }), "True" === o ? o = "true" : "False" === o && (o = "false"), e.ref.param[this.PARAM_REPLACEMENT] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createShuffleCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = "true",
        r = this.$shuffleControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(r, function (t, e) {
      if ($(e).jqxRadioButton("val") && "" !== $(e).attr("value")) return o = $(e).attr("value"), !1;
    }), "True" == o ? o = "true" : "False" == o && (o = "false"), e.ref.param[this.PARAM_SHUFFLE] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.fillControlValues = function (t) {
    var e;
    e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.groupbyControl.setItems(e);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_VALUE && ("fraction" === this.options.fnUnit.param[this.PARAM_MODEL] ? (this.renderPropertyControlHeader(this.$fractionNumberControl, this.problems[t]), this.createValidationContent(this.$fractionNumberControl, this.problems[t])) : (this.renderPropertyControlHeader(this.$numberControl, this.problems[t]), this.createValidationContent(this.$numberControl, this.problems[t])));
    }
  }, e.prototype.getDecimalLength = function () {
    return this.$fractionNumberInput.options.min.toString().split(".")[1] ? this.$fractionNumberInput.options.min.toString().split(".")[1].length : 0;
  }, t.VA.Core.Functions.Library.randomSampling.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    this.PARAM_VALUE = "value", this.PARAM_MODEL = "method", t.VA.Core.Validator.SingleInputValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addValueRule();
  }, e.prototype.addValueRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_VALUE,
          messageParam: ["Value(Fraction)"]
        };
        return "fraction" === e.param[this.PARAM_MODEL] ? o.messageParam = ["Value(Fraction)"] : o.messageParam = ["Value(Number)"], t._checkStringIsEmpty(o, e, e.param[t.PARAM_VALUE]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.randomSampling.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.randomSplit = {
    category: "transform",
    defaultFnUnit: {
      func: "randomSplit",
      name: "RandomSplit",
      inData: [],
      outData: [],
      param: {
        ratio: [],
        seed: "",
        "group-by": []
      },
      display: {
        label: "Random Split",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Split data randomly using randomSplit in MLlib.",
    tags: ["Split", "RandomSplit", "Split", "Random Split", "random", "randomly"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ratio: this.renderRatio,
      seed: this.renderSeed,
      "group-by": this.renderGroupBy
    }, this.ratioControlArray = [], this.createRatioControl(), this.createSeedControl(), this.createGroupByControl();
  }, e.prototype.createRatioControl = function () {
    var t = this;
    this.$ratioInputContainer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-input-container brtc-va-editors-sheet-controls-wrapper"></div>'), this.$ratioLabelRow = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label-row"></div>');
    var e = this.addPropertyControl("Ratio", function (e) {
      e.addClass("brtc-va-split-data-property"), e.append(t.$ratioInputContainer);

      for (var o = 0; o < 2; o++) {
        t.createNewRatioControl(t.$ratioInputContainer);
      }

      e.append(t.$ratioLabelRow);
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "ratio", "Ratio");
  }, e.prototype.createNewRatioControl = function (e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-input"></div>');
    e.append(r);
    var n = {
      numberType: "double",
      minus: !1,
      placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(0 < value)"),
      min: .1
    },
        a = o.createNumericInput(r, n);
    a.onChange(function () {
      var t = o.createRatioCommand();
      o.executeCommand(t);
    }), this.ratioControlArray.push(a);
  }, e.prototype.createSeedControl = function () {
    var t = this;
    this.$seedControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput">');
    var e = this.addPropertyControl("Seed", function (e) {
      e.append(t.$seedControl);
      t.$seedInput = this.createNumericInput(t.$seedControl, {
        numberType: "long",
        min: -0x8000000000000000,
        max: 0x8000000000000000,
        minus: !0,
        placeholder: "Enter value"
      }), t.$seedInput.onChange(function () {
        var e = t.createSeedInputCommand(this.getValue());
        t.executeCommand(e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "seed", "Seed");
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 5,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type || "string" === t.type;
    }), this.groupbyControl.setItems(this.numberColumnArray);
  }, e.prototype.renderRatio = function () {
    var t = this.options.fnUnit.param.ratio;
    if (0 === t.length) this.ratioControlArray[0].setValue(""), this.ratioControlArray[1].setValue("");else if (1 === t.length) this.ratioControlArray[0].setValue(t[0]), this.ratioControlArray[1].setValue("");else for (var e in t) {
      this.ratioControlArray[e].setValue(t[e]);
    }

    for (var e in this.$ratioLabelRow.empty(), t) {
      this.$ratioLabelRow.append($('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label">' + t[e] + "</div>")), e != t.length - 1 && this.$ratioLabelRow.append($('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label-colon">:</div>'));
    }
  }, e.prototype.renderSeed = function () {
    var t = this.options.fnUnit.param.seed;
    this.$seedInput.setValue(t || "");
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param["group-by"];
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "ratio" === this.problems[t].param && (this.$ratioLabelRow.empty(), this.createValidationContent(this.$ratioInputContainer, this.problems[t])), "group-by" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createRatioCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param.ratio = [], this.ratioControlArray) {
      "" !== this.ratioControlArray[o].getValue() && e.ref.param.ratio.push(this.ratioControlArray[o].getValue());
    }

    this.$ratioLabelRow.empty();
    var r = e.ref.param.ratio;
    if (r.length >= 2) for (var o in r) {
      this.$ratioLabelRow.append($('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label">' + r[o] + "</div>")), o != r.length - 1 && this.$ratioLabelRow.append($('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label-colon">:</div>'));
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createSeedInputCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param.seed = "", e && (o.ref.param.seed = e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["group-by"] = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param["group-by"] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.randomSplit.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.RATIO = "ratio", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addRule(this.checkRatio);
  }, e.prototype.checkRatio = function (t) {
    if (this._hasSchema(t)) {
      var e = [];
      return t.param.ratio.length < 2 && e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.RATIO,
        messageParam: ["Ratio"]
      }, t)), e;
    }
  }, e.prototype.isInvalidRatio = function (t) {
    return parseInt(t) <= 0 || parseInt(t) >= 100;
  }, t.VA.Core.Functions.Library.randomSplit.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.refine = {
    category: "transform",
    defaultFnUnit: {
      func: "refine",
      name: "Subflow",
      inData: [],
      outData: [],
      param: {
        functions: [{
          func: "sqlExecutor",
          name: "SQLExecutor",
          param: {
            select: "*",
            "additional-query": ""
          }
        }],
        links: []
      },
      display: {
        label: "Refine Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function is used to refine data: cleaning it; transforming it; and extending it.",
    tags: ["Add Function Column", "AddFunctionColumn", "Add Column", "Extraction", "Preprocessing", "Transform", "Refine", "Refine Data"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;
  t.VA.Core.Utils;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.getPrimaryOperation = function () {
    return "RefineData";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      a: this.renderSubflowControl
    }, this.createStepControl();
  }, e.prototype.renderValues = function (t) {
    this.renderSubflowControl();
  }, e.prototype.renderSubflowControl = function () {
    var e = this;
    this.$stepDisplayDiv.empty();

    for (var o = 0; o < this.options.fnUnit.param.functions.length; o++) {
      var r = this.options.fnUnit.param.functions[o];
      if (void 0 !== r.func && "sqlExecutor" !== r.func) var n = $('<div class="brtc-va-refine-step">   <div class="brtc-va-refine-step-header">       <div class="brtc-va-refine-step-label" id="' + t.VA.Core.Utils.WidgetUtils.convertHTMLSpecialChar(r.fid) + '">' + t.VA.Core.Utils.WidgetUtils.convertHTMLSpecialChar(r.display.label) + "       </div>   </div></div>");
      if (e.$stepDisplayDiv.append(n), this.options.fnUnit.param.functions.length > 0 && "sqlExecutor" !== r.func) n.find(".brtc-va-refine-step-header").click(function (o) {
        var r = $(this).parents(".brtc-va-refine-step").prevAll(".brtc-va-refine-step").length;
        new t.VA.Core.Dialogs.RefineDialog($(o.target), {
          stepIdx: r,
          fnUnit: e.options.fnUnit,
          dataProxy: e.options.dataProxy,
          columns: $.extend(!0, [], e.columnNameArray),
          close: function close(t) {
            if (t.OK) {
              var o = e.createSubflowCommand(t.param);
              e.executeCommand(o), e.renderSubflowControl(), e.callFunction();
            }
          }
        });
      });
    }
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
  }, e.prototype.createStepControl = function () {
    var t = this;
    this.$stepContainer = $('<div class="brtc-va-editors-sheet-refine-step-container"/>'), this.$stepDisplayDiv = $('<div class="btrc-va-editors-sheet-refine-step-div"/>'), this.addPropertyControl("Step", function (e) {
      e.append(t.$stepDisplayDiv), e.append(t.$stepContainer), t.createBrowseControl(t.$stepContainer);
    }, {
      mandatory: !1
    });
  }, e.prototype.createBrowseControl = function (e) {
    var o = this,
        r = $('<input class="brtc-va-editors-sheet-panels-properties-anovaproperties-column-add-key-condition" type="button" value="Edit"/>');
    e.append(r), r.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), r.click(function (e) {
      new t.VA.Core.Dialogs.RefineDialog($(e.target), {
        fnUnit: o.options.fnUnit,
        dataProxy: o.options.dataProxy,
        columns: $.extend(!0, [], o.columnNameArray),
        close: function close(t) {
          if (t.OK) {
            var e = o.createSubflowCommand(t.param);
            o.executeCommand(e), o.renderSubflowControl();
          }
        }
      });
    });
  }, e.prototype.createSubflowCommand = function (e) {
    e.functions.length ? this.options.fnUnit.param.functions[this.options.fnUnit.param.functions.length - 1][IN_DATA] = e.functions[e.functions.length - 1][OUT_DATA] : this.options.fnUnit.param.functions[this.options.fnUnit.param.functions.length - 1][IN_DATA] = this.options.fnUnit[IN_DATA], e.functions.push(this.options.fnUnit.param.functions[this.options.fnUnit.param.functions.length - 1]);

    for (var o = [], r = 0; r < e.functions.length - 1; r++) {
      var n = {
        kid: t.VA.Core.Utils.IDGenerator.link.id(),
        sourceFid: e.functions[r].fid,
        targetFid: e.functions[r + 1].fid
      };
      o.push(n);
    }

    var a = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          functions: $.extend(!0, [], e.functions),
          links: $.extend(!0, [], o)
        }
      }
    };
    return a.ref.param.functions && a.ref.param.functions.length > 0 && (a.ref.param.entries = [a.ref.param.functions[0].fid]), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, a);
  }, t.VA.Core.Functions.Library.refine.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, e = e, t.VA.Core.Functions.Library.refine.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.reorganizeTable = {
    category: "transform",
    defaultFnUnit: {
      func: "reorganizeTable",
      name: "SelectColumn",
      inData: [],
      outData: [],
      param: {
        columns: [[]]
      },
      display: {
        label: "Select Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Reorganize table with the selected columns according to the selected sequence.",
    tags: ["Select Column", "SelectColumn", "Table Schema Transform", "Preprocessing", "select", "reorganize table", "selected sequence", "new table"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.render = {
      columns: this.renderColumnsControl
    }, this.createColumnsControl();
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columnsWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columnsWidget);
      var o = {
        rowCount: 8,
        maxRowCount: 10,
        multiple: !0,
        draggable: !0,
        sort: "none",
        changed: function changed() {
          var e = t.createColumnsCommand();
          t.executeCommand(e);
        }
      };
      t.$columnsControl = t.createColumnList(t.$columnsWidget, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.$columnsControl.setItems(this.getFilteredData());
  }, e.prototype.renderColumnsControl = function () {
    this.$columnsControl.setSelectedItems(this.options.fnUnit.param.columns[0]);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && (this.renderPropertyControlHeader(this.$columnsWidget, this.problems[t]), this.createValidationContent(this.$columnsWidget, this.problems[t]));
    }
  }, e.prototype.getFilteredData = function () {
    return this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.reorganizeTable.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e = e, t.VA.Core.Functions.Library.reorganizeTable.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.rowAppend = {
    category: "transform",
    defaultFnUnit: {
      func: "rowAppend",
      name: "BindRow",
      inData: [],
      outData: [],
      param: {},
      display: {
        label: "Bind Row",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: " Bind N tables vertically. Similar with 'rbind' function in R.",
    tags: ["Bind Row", "BindRow", "Preprocessing", "Union", "rbind", "adjoin", "union", "attach two tables", "vertically"],
    "in-range": {
      min: 2,
      max: 999
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.renderValues = function (t) {
    this.renderOutputPreview();
  }, e.prototype.getPreviousFnUnit = function (t) {
    return this.options.modelEditor.getModel().getPreFnUnitByCondition(this.options.fnUnit.fid, function (e) {
      return $.inArray(t, e[OUT_DATA]) > -1;
    });
  }, e.prototype.renderOutputPreview = function () {
    this.outputPreviewControl.setItems(this.getColumns()), this.outputPreviewControl.setSelectedItems(this.getColumnNames());
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.validationControls = {}, this.PARAM_IN_TABLE = "inData", this.PARAM_PREVIEW = "preview", this.createOutputPreviewControl(), this.validation = {
      inData: this.renderOutputValidation,
      preview: this.renderPreviewValidation
    }, this.renderValidation();
  }, e.prototype.createOutputPreviewControl = function (t) {
    var e = this;
    this.addPropertyControl("Output Preview", function (t) {
      e.$outputPreviewControl = $('<div class="brtc-va-editors-sheet-panels-properties-rowappendproperties-outputpreview" />'), t.append(this.$outputPreviewControl), e.outputPreviewControl = e.createColumnList(this.$outputPreviewControl, {
        multiple: !0,
        showOpener: "none",
        maxRowCount: 10,
        removable: !1,
        sort: "none",
        draggable: !1,
        placeHolder: "preview"
      }), this.validationControls.preview = t;
    });
  }, e.prototype.createOutputCommand = function () {
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        inData: $.map(this.tableListControl.getItems(), function (t) {
          return t.value;
        })
      }
    });
  }, e.prototype.isSortChanged = function (t) {
    for (var e in t) {
      if (t[e].value !== this.options.fnUnit[this.PARAM_IN_TABLE][e]) return !0;
    }

    return !1;
  }, e.prototype.getColumns = function () {
    var t = this.options.fnUnit[this.PARAM_IN_TABLE][0];
    return t && this.dataMap[t] ? this.dataMap[t].columns : [];
  }, e.prototype.getColumnNames = function () {
    return $.map(this.getColumns(), function (t) {
      return t.name;
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.validation[e] && this.validation[e].call(this, this.problems[t]);
    }
  }, e.prototype.renderOutputValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_IN_TABLE], t);
  }, e.prototype.renderPreviewValidation = function (t) {
    this.createValidationContent(this.validationControls[this.PARAM_PREVIEW], t);
  }, t.VA.Core.Functions.Library.rowAppend.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addLinkRule(), this.addInTableRule();
  }, e.prototype.addLinkRule = function () {
    this.addRule(function (t) {
      return this.checkLinkIsConnected(t);
    }.bind(this));
  }, e.prototype.addInTableRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0138",
        param: "inData",
        messageParam: [[]]
      },
          r = e[IN_DATA];

      for (var n in t.hasAllSchema = !0, r) {
        var a = e.parent().getPreFnUnitByCondition(e.fid, function (t) {
          return $.inArray(r[n], t[OUT_DATA]) > -1;
        });
        t._getSchema(e, n) && 0 !== t._getSchema(e, n).length || o.messageParam[0].push("[" + a.display.label + "]");
      }

      if (o.messageParam[0].length > 0) return t.hasAllSchema = !1, t.problemFactory.createProblem(o, e);
    });
  }, e.prototype._getSchema = function (e, o) {
    var r = t.VA.Core.DataQueryTemplate.getSchema(e.parent().mid, e[IN_DATA][o || 0]);
    return r && 0 === r.length && (r = void 0), r;
  }, e = e, t.VA.Core.Functions.Library.rowAppend.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.selectColumn = {
    category: "transform",
    defaultFnUnit: {
      func: "selectColumn",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "Select Column"
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Select Column"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.simpleFilter = {
    category: "transform",
    defaultFnUnit: {
      func: "simpleFilter",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "Simple Filter"
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Simple Filter"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.sortByRefine = {
    category: "transform",
    defaultFnUnit: {
      func: "sortByRefine",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "Sort"
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Sort"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.splitData = {
    category: "transform",
    defaultFnUnit: {
      func: "splitData",
      name: "SplitData",
      inData: [],
      outData: [],
      param: {
        ratio: [],
        seed: "",
        ordering: "false",
        "group-by": []
      },
      display: {
        label: "Split Data",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Split data according to the entered ratio. In the course of splitting, data is selected randomly.",
    tags: ["Split Data", "SplitData", "Split", "Preprocessing", "ratio", "randomly"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 2,
      max: 2
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      ratio: this.renderRatio,
      seed: this.renderSeed,
      ordering: this.renderOrdering,
      "group-by": this.renderGroupBy
    }, this.ratioControlArray = [], this.createRatioControl(), this.createSeedControl(), this.createOrderingControl(), this.createGroupByControl();
  }, e.prototype.createRatioControl = function () {
    var t = this;
    this.$ratioInputContainer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-input-container brtc-va-editors-sheet-controls-wrapper"></div>'), this.$ratioLabelRow = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label-row"></div>');
    var e = this.addPropertyControl("Ratio", function (e) {
      e.addClass("brtc-va-split-data-property"), e.append(t.$ratioInputContainer);

      for (var o = 0; o < 2; o++) {
        t.createNewRatioControl(t.$ratioInputContainer);
      }

      e.append(t.$ratioLabelRow);
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "ratio", "Ratio");
  }, e.prototype.createNewRatioControl = function (e) {
    var o = this,
        r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-input"></div>');
    e.append(r);
    var n = {
      numberType: "int",
      minus: !1,
      placeholder: t.VA.Core.Utils.WidgetUtils.convertInequalitySign("(0 < value < 100)"),
      min: 1,
      max: 99
    },
        a = o.createNumericInput(r, n);
    a.onChange(function () {
      var t = o.createRatioCommand();
      o.executeCommand(t);
    }), this.ratioControlArray.push(a);
  }, e.prototype.createSeedControl = function () {
    var t = this;
    this.$seedControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput">');
    var e = this.addPropertyControl("Seed", function (e) {
      e.append(t.$seedControl);
      t.$seedInput = this.createNumericInput(t.$seedControl, {
        numberType: "int"
      }), t.$seedInput.onChange(function () {
        var e = t.createSeedInputCommand(this.getValue());
        t.executeCommand(e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "seed", "Seed");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n), this.createRadioButton(n, {
      groupName: o
    }), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = r.createOrderingCommand();
      r.executeCommand(e);
    });
  }, e.prototype.createOrderingControl = function () {
    var t = this;
    this.$orderingControl = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>'), this.addPropertyControl("Ordering", function (e) {
      e.append(t.$orderingControl), t.createRadioButtonControl(t.$orderingControl, "True", "ordering"), t.createRadioButtonControl(t.$orderingControl, "False", "ordering");
    });
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 5,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type || "string" === t.type;
    }), this.groupbyControl.setItems(this.numberColumnArray);
  }, e.prototype.renderRatio = function () {
    var t = this.options.fnUnit.param.ratio;
    if (0 === t.length) this.ratioControlArray[0].setValue(""), this.ratioControlArray[1].setValue("");else if (1 === t.length) this.ratioControlArray[0].setValue(t[0]), this.ratioControlArray[1].setValue("");else for (var e in t) {
      this.ratioControlArray[e].setValue(t[e]);
    }

    for (var e in this.$ratioLabelRow.empty(), t) {
      this.$ratioLabelRow.append($('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label">' + t[e] + "</div>")), e != t.length - 1 && this.$ratioLabelRow.append($('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label-colon">:</div>'));
    }
  }, e.prototype.renderSeed = function () {
    var t = this.options.fnUnit.param.seed;
    this.$seedInput.setValue(t || "");
  }, e.prototype.renderOrdering = function () {
    var t = this.options.fnUnit.param.ordering;
    "true" === t ? t = "True" : "false" === t && (t = "False"), $(this.$orderingControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param["group-by"];
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "ratio" === this.problems[t].param && (this.$ratioLabelRow.empty(), this.createValidationContent(this.$ratioInputContainer, this.problems[t])), "group-by" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.createRatioCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };

    for (var o in e.ref.param.ratio = [], this.ratioControlArray) {
      "" !== this.ratioControlArray[o].getValue() && e.ref.param.ratio.push(this.ratioControlArray[o].getValue());
    }

    this.$ratioLabelRow.empty();
    var r = e.ref.param.ratio;
    if (r.length >= 2) for (var o in r) {
      this.$ratioLabelRow.append($('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label">' + r[o] + "</div>")), o != r.length - 1 && this.$ratioLabelRow.append($('<div class="brtc-va-editors-sheet-controls-propertycontrol-ratio-label-colon">:</div>'));
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createSeedInputCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param.seed = "", e && (o.ref.param.seed = e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createOrderingCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = "true",
        r = this.$orderingControl.find(".brtc-va-editors-sheet-controls-radiocontrol");
    return $.each(r, function (t, e) {
      if ($(e).jqxRadioButton("val") && "" !== $(e).attr("value")) return o = $(e).attr("value"), !1;
    }), "True" === o ? o = "true" : "False" === o && (o = "false"), e.ref.param.ordering = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param["group-by"] = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param["group-by"] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.splitData.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.RATIO = "ratio", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addRule(this.checkRatio);
  }, e.prototype.checkRatio = function (t) {
    if (this._hasSchema(t)) {
      var e = [];
      return t.param.ratio.length < 2 && e.push(this.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: this.RATIO,
        messageParam: ["Ratio"]
      }, t)), e;
    }
  }, e.prototype.isInvalidRatio = function (t) {
    return parseInt(t) <= 0 || parseInt(t) >= 100;
  }, t.VA.Core.Functions.Library.splitData.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.sqlExecutor = {
    category: "transform",
    defaultFnUnit: {
      func: "sqlExecutor",
      name: "SQLExecutor",
      inData: [],
      outData: [],
      param: {
        select: "",
        "additional-query": ""
      },
      display: {
        label: "SQL Executor",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_SELECT = "select", this.PARAM_WHERE = "additional-query", this.render = {
      select: this.renderSqlControl,
      "additional-query": this.renderSqlControl
    }, this.createSelectControl();
  }, e.prototype.createSelectControl = function () {
    var e = this;
    this.codeMirror, this.$sqlControl = $('<textarea class="brtc-va-editors-sheet-controls-sqlcontrol"></textarea>'), this.addPropertyControl("SQL", function (o) {
      o.append(e.$sqlControl);
      var r = new t.VA.Core.Verifier.SqlVerifier();
      e.codeMirror = e.createTextAreaControl(e.$sqlControl, {
        verifier: r
      }), o.find(".CodeMirror-sizer").css({
        height: "380px"
      }), e.codeMirror.codeMirror.setSize("100%", "100%"), e.codeMirror.onChange(function (t, o) {
        var r = e.createSqlCommand();
        e.executeCommand(r);
      });
    });
  }, e.prototype.customizeElementClass = function () {}, e.prototype.fillControlValues = function () {
    this.fromValue = this.getInputTable(), this.fromValueLength = this.fromValue.length;
  }, e.prototype.renderValidation = function () {}, e.prototype.getInputTable = function () {
    var t = this.options.fnUnit.parent(),
        e = this.options.fnUnit.fid,
        o = "",
        r = t.getPrevious(e);
    0 !== r.length && (o = "FROM " + t.getFnUnitById(r[0]).display.label);
    return o;
  }, e.prototype.renderSqlControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_SELECT],
        e = this.options.fnUnit.param[this.PARAM_WHERE];
    this.codeMirror.setValue("()\n" + this.fromValue + " "), this.selectMarker = this.codeMirror.codeMirror.markText({
      line: 0,
      ch: 0
    }, {
      line: 0,
      ch: 7
    }, {
      readOnly: !0,
      inclusiveRight: !0,
      atomic: !0,
      css: "color: #0000CD"
    }), this.fromMarker = this.codeMirror.codeMirror.markText({
      line: 1,
      ch: 0
    }, {
      line: 1,
      ch: this.fromValueLength + 1
    }, {
      readOnly: !0,
      atomic: !0,
      css: "color: #0000CD"
    });
    this.selectMarker.find(), this.fromMarker.find();
    var o = this.codeMirror.codeMirror.getDoc().lastLine();
    this.codeMirror.codeMirror.getDoc().getLine(o).length;
    this.codeMirror.codeMirror.getDoc().replaceRange(e, {
      line: 1,
      ch: this.fromValueLength + 1
    }), this.codeMirror.codeMirror.getDoc().replaceRange(t, {
      line: 0,
      ch: 7
    });
  }, e.prototype.markingText = function (t) {
    for (var e = this.codeMirror.codeMirror.markText({
      line: 0,
      ch: 0
    }, {
      line: 0,
      ch: 7
    }, {
      readOnly: !0,
      inclusiveRight: !0,
      atomic: !0
    }), o = this.codeMirror.codeMirror.markText({
      line: 1,
      ch: 0
    }, {
      line: 1,
      ch: this.fromValueLength
    }, {
      readOnly: !0,
      atomic: !0
    }), r = (e.find(), o.find(), this.codeMirror.codeMirror.getDoc().lastLine()), n = (this.codeMirror.codeMirror.getDoc().getLine(r).length, this.codeMirror.getValue().split("\n")), a = t.length, i = 0; i < n.length; i++) {
      n[i].includes(t) && this.codeMirror.codeMirror.markText({
        line: i,
        ch: 0
      }, {
        line: i,
        ch: a
      }, {
        readOnly: !0,
        atomic: !0
      });
    }
  }, e.prototype.createSqlCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = this.selectMarker.find(),
        r = this.fromMarker.find(),
        n = this.codeMirror.codeMirror.getDoc().lastLine(),
        a = this.codeMirror.codeMirror.getDoc().getLine(n).length,
        i = this.codeMirror.codeMirror.getDoc().getRange(o.to, r.from),
        s = this.codeMirror.codeMirror.getDoc().getRange(r.to, {
      line: n,
      ch: a
    });
    return i = "" !== i ? i.replace(/\r/g, " ").replace(/\n/g, " ") : "*", "" !== s && (s = s.replace(/\r/g, " ").replace(/\n/g, " ")), e.ref.param[this.PARAM_SELECT] = i, e.ref.param[this.PARAM_WHERE] = s || "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.sqlExecutor.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_SELECT = "select", this.PARAM_WHERE = "additional-query", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, e.prototype.inputSelectRule = function (t) {
    var e = {
      errorCode: "BR-0033",
      param: this.PARAM_SELECT,
      messageParam: ["Select"]
    };
    if (this.isEmptyForString(t.param[this.PARAM_SELECT])) return this.problemFactory.createProblem(e, t);
  }, e.prototype.inputWhereRule = function (t) {
    var e = {
      errorCode: "BR-0033",
      param: this.PARAM_WHERE,
      messageParam: ["Additional Query"]
    };
    if (this.isEmptyForString(t.param[this.PARAM_WHERE])) return this.problemFactory.createProblem(e, t);
  }, e = e, t.VA.Core.Functions.Library.sqlExecutor.validator = e, t.VA.Core.Functions.Library.queryExecutor.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.stratifiedSampling = {
    category: "transform",
    defaultFnUnit: {
      func: "stratifiedSampling",
      name: "StratifiedSampling",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        fraction: "0.5",
        seed: "",
        replacement: "true"
      },
      display: {
        label: "Stratified Sampling",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "In statistics, stratified sampling is a method of sampling from a population.",
    tags: ["Stratified Sampling", "StratifiedSampling", "Preprocessing", "Extraction", "Sampling", "sample"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.INTEGER_TYPES = ["smallint", "integer", "bigint", "int"], this.STRING_TYPES = ["character", "char", "text", "string", "varchar"], this.PARAM_COLUMNS = "columns", this.PARAM_FRACTION = "fraction", this.PARAM_REPLACEMENT = "replacement", this.render = {
      columns: this.renderColumnsControl,
      fraction: this.renderFractionControl,
      seed: this.renderSeed,
      replacement: this.renderReplacementControl
    }, this.createColumnsControl(), this.createFractionControl(), this.createSeedControl(), this.createReplacementControl();
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.$columnsWidget = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columnsWidget);
      var o = {
        rowCount: 5,
        multiple: !0,
        changed: function changed() {
          var e = t.createColumnsCommand();
          t.executeCommand(e);
        }
      };
      t.$columnsControl = t.createColumnList(t.$columnsWidget, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createFractionControl = function () {
    var t = this;
    this.$fractionNumberControl = $('<div class="brtc-va-editors-sheet-controls-numberinputcontrol-percent"/>'), this.addPropertyControl("Fraction", function (e) {
      e.append(t.$fractionNumberControl);
      t.$fractionNumberInput = this.createNumericInput(t.$fractionNumberControl, {
        numberType: "int",
        minus: !1,
        placeholder: "Enter value",
        min: 0,
        max: 100
      }, "brtc-va-editors-sheet-controls-propertycontrol-filter-number-input"), t.$fractionNumberInput.setValue(100), t.$fractionNumberInput.onChange(function (e) {
        var o = t.createFractionCommand();
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createSeedControl = function () {
    var t = this;
    this.$seedControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput">');
    var e = this.addPropertyControl("Seed", function (e) {
      e.append(t.$seedControl);
      t.$seedInput = this.createNumericInput(t.$seedControl, {
        numberType: "long",
        min: -0x8000000000000000,
        max: 0x8000000000000000,
        minus: !0,
        placeholder: "Enter value"
      }), t.$seedInput.onChange(function () {
        var e = t.createSeedInputCommand(this.getValue());
        t.executeCommand(e);
      });
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "seed", "Seed");
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiocontrol">' + e + "</div>");
    t.append(n), this.createRadioButton(n, {
      groupName: o
    }), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e;
      o === r.PARAM_REPLACEMENT && (e = r.createReplacementCommand()), r.executeCommand(e);
    });
  }, e.prototype.createReplacementControl = function () {
    var t = this;
    this.$replacementControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radio-group"/>'), this.addPropertyControl("Replacement", function (e) {
      e.append(t.$replacementControl), t.createRadioButtonControl(t.$replacementControl, "True", t.PARAM_REPLACEMENT), t.createRadioButtonControl(t.$replacementControl, "False", t.PARAM_REPLACEMENT);
    });
  }, e.prototype.fillControlValues = function () {
    this.$columnsControl.setItems(this.getFilteredData());
  }, e.prototype.getFilteredData = function () {
    var t = [],
        e = this,
        o = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    return $.each(o, function (o, r) {
      -1 === $.inArray(r.internalType.toLowerCase(), e.INTEGER_TYPES) && -1 === $.inArray(r.type.toLowerCase(), e.STRING_TYPES) || t.push(r);
    }), t;
  }, e.prototype.renderColumnsControl = function () {
    this.$columnsControl.setSelectedItems(this.options.fnUnit.param.columns[0]);
  }, e.prototype.renderFractionControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_FRACTION];
    this.$fractionNumberInput.setValue(t && "" !== t ? parseInt(Number(100 * t)) : "");
  }, e.prototype.renderSeed = function () {
    var t = this.options.fnUnit.param.seed;
    this.$seedInput.setValue(t || "");
  }, e.prototype.renderReplacementControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_REPLACEMENT];
    "true" === t ? t = "True" : "false" === t && (t = "False"), $(this.$replacementControl[t]).jqxRadioButton({
      checked: !0
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && (this.renderPropertyControlHeader(this.$columnsWidget, this.problems[t]), this.createValidationContent(this.$columnsWidget, this.problems[t])), this.problems[t].param === this.PARAM_FRACTION && (this.renderPropertyControlHeader(this.$fractionNumberControl, this.problems[t]), this.createValidationContent(this.$fractionNumberControl, this.problems[t]));
    }
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.$columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createFractionCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.ref.param[this.PARAM_FRACTION] = this.$fractionNumberInput.getValue() ? (this.$fractionNumberInput.getValue() / 100).toString() : "", new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createSeedInputCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param.seed = "", e && (o.ref.param.seed = e), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, o);
  }, e.prototype.createReplacementCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        o = "true",
        r = this.$replacementControl.find(".brtc-va-editors-sheet-controls-propertycontrol-radiocontrol");
    return $.each(r, function (t, e) {
      if ($(e).jqxRadioButton("val") && "" !== $(e).attr("value")) return o = $(e).attr("value"), !1;
    }), "True" === o ? o = "true" : "False" === o && (o = "false"), e.ref.param[this.PARAM_REPLACEMENT] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, t.VA.Core.Functions.Library.stratifiedSampling.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_FRACTION = "fraction", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addFractionRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.addFractionRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = {
          errorCode: "BR-0033",
          param: t.PARAM_FRACTION,
          messageParam: ["Fraction"]
        };
        return t._checkStringIsEmpty(o, e, e.param[t.PARAM_FRACTION]);
      }
    });
  }, e = e, t.VA.Core.Functions.Library.stratifiedSampling.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.svd = {
    category: "transform",
    defaultFnUnit: {
      func: "svd",
      name: "SVD",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: []
      },
      display: {
        label: "SVD",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function returns the singular value decomposition of a matrix.",
    tags: ["SVD", "Singular Value Decomposition", "singular value decomposition", "eigen"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 4,
      max: 4
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.render = {
      columns: this.renderColumnsControl,
      groupby: this.renderGroupByControl
    }, this.createColumnsControl(), this.createGroupByControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 5,
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [], this.numberColumnArray = $.grep(this.columnNameArray, function (t) {
      return "number" === t.type || "number[]" === t.type;
    }), this.columnsControl.setItems(this.numberColumnArray), this.groupbyControl.setItems(this.columnNameArray);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMNS && this.createValidationContent(this.$columns, this.problems[t]), "groupby" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param[this.PARAM_COLUMNS];
    this.columnsControl.setSelectedItems(t[0]);
  }, e.prototype.renderGroupByControl = function () {
    var t = this.options.fnUnit.param.groupby;
    this.groupbyControl.setSelectedItems(t);
  }, e.prototype.getColumnsValue = function () {
    var t = [],
        e = [];
    return $.each(this.columnsControl.getSelectedItems(), function (e, o) {
      t.push(o);
    }), e.push(t), e;
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param[this.PARAM_COLUMNS] = [[]];
    var o = this.getColumnsValue();
    return o && (e.ref.param[this.PARAM_COLUMNS] = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, e.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        var e = t.createGroupByCommand();
        t.executeCommand(e);
      });
    });
  }, e.prototype.createGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.groupby = [];
    var o = this.groupbyControl.getSelectedItems();
    return o && (e.ref.param.groupby = o), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
  }, t.VA.Core.Functions.Library.svd.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns[0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns[0]);
    });
  }, e = e, t.VA.Core.Functions.Library.svd.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.timeSeriesTranspose = {
    category: "transform",
    defaultFnUnit: {
      func: "timeSeriesTranspose",
      name: "TransposeTimeSeries",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "out-column-names": ["", ""],
        groupby: [],
        sortby: "",
        "keep-sortby": "false"
      },
      display: {
        label: "Transpose Time Series",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function gathers values in columns of double type, double array type or Map[String,Double] type to make one long double array.",
    tags: ["Transpose TimeSeries", "TransposeTimeSeries", "Preprocessing", "Timeseries", "group by", "numeric array", "Transpose Time Series"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumns,
      "out-column-names": this.renderOutColumnNames,
      groupby: this.renderGroupby,
      sortby: this.renderSortby,
      "keep-sortby": this.renderKeepSortby
    }, this.createColumnsControl(), this.createOutColumnNamesControl(), this.createGroupbyControl(), this.createSortbyControl(), this.createKeepSortbyControl();
  }, e.prototype.renderColumns = function () {
    var t = this.options.fnUnit.param;
    this.columnsControl.setSelectedItems(t.columns[0]);
  }, e.prototype.renderOutColumnNames = function () {
    var t = this.options.fnUnit.param;
    if (void 0 !== t["out-column-names"]) for (var e in t["out-column-names"]) {
      this.$outColumnNamesControlControl[+e + 1].val(t["out-column-names"][e]);
    }
  }, e.prototype.renderGroupby = function () {
    var t = this.options.fnUnit.param;
    this.groupbyControl.setSelectedItems(t.groupby);
  }, e.prototype.renderSortby = function () {
    var t = this.options.fnUnit.param,
        e = "" === t.sortby ? [] : [t.sortby];
    this.sortbyControl.setSelectedItems(e);
  }, e.prototype.renderKeepSortby = function () {
    var t = this.options.fnUnit.param;

    if (void 0 !== t["keep-sortby"]) {
      var e = t["keep-sortby"];
      "true" === e ? e = "True" : "false" === e && (e = "False"), this.$keepSortby[e].jqxRadioButton("check");
    } else this.$keepSortby.false.jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      if ("columns" === this.problems[t].param) this.createValidationContent(this.$columns.parent(), this.problems[t]);else if ("out-column-names" === this.problems[t].param) {
        var e = this.problems[t].paramIndex;
        -1 === e ? this.createValidationContent(this.$outColumnNamesControlControl, this.problems[t]) : (e = parseInt(e) + 1, this.createValidationContent(this.$outColumnNamesControlControl[e.toString()].parent(), this.problems[t]));
      } else "groupby" === this.problems[t].param && this.createValidationContent(this.$groupby.parent(), this.problems[t]);
    }
  }, e.prototype.createColumnsControl = function () {
    var t = this;
    this.columnsControl = {};
    this.$columns = this.createCommonColumnsControl("columnsControl", "Columns", {
      maxRowCount: 2,
      multiple: !0
    }), this.columnsControl.onChange(function () {
      var e = t.createColumnsCommand();
      t.executeCommand(e);
    });
  }, e.prototype.createOutColumnNamesControl = function () {
    var t = this;
    this.$outColumnNamesControlControl = $('<div class="brtc-va-editors-sheet-controls-inputbox brtc-style-column-name-inputbox-timeseries-transpose"/>');
    var e = this.addPropertyControl("Out Column Names", function (e) {
      e.append(t.$outColumnNamesControlControl), t.createInputBoxControl(t.$outColumnNamesControlControl, "1", "out-column-names"), t.createInputBoxControl(t.$outColumnNamesControlControl, "2", "out-column-names");
    }, {
      mandatory: !0
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "out-column-names", "Out Column Names");
  }, e.prototype.createGroupbyControl = function () {
    var t = this;
    this.groupbyControl = {}, this.$groupby = this.createCommonColumnsControl("groupbyControl", "Group By", {
      maxRowCount: 3,
      multiple: !0
    }), this.groupbyControl.onChange(function () {
      var e = t.createCommonColumnCommand("groupby", t.groupbyControl, []);
      t.executeCommand(e);
    });
  }, e.prototype.createSortbyControl = function () {
    var t = this;
    this.sortbyControl = {};
    this.sortby = this.createCommonColumnsControl("sortbyControl", "Sort By", {
      maxRowCount: 1,
      multiple: !1
    }), this.sortbyControl.onChange(function () {
      var e = t.createCommonColumnCommand("sortby", t.sortbyControl, "");
      t.executeCommand(e);
    });
  }, e.prototype.createKeepSortbyControl = function () {
    var t = this;
    this.$keepSortby = $('<div class="brtc-va-editors-sheet-controls-radio-group"/>');
    var e = this.addPropertyControl("Keep Sort By", function (e) {
      e.append(t.$keepSortby), t.createRadioButtonControl(t.$keepSortby, "True", "keep-sortby"), t.createRadioButtonControl(t.$keepSortby, "False", "keep-sortby");
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(e, {}, "keep-sortby", "Keep Sort By");
  }, e.prototype.createCommonColumnsControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
    return this.addPropertyControl(e, function (e) {
      e.append(n);
      r[t] = r.createColumnList(n, o || {
        maxRowCount: 1,
        multiple: !1
      });
    }, "Columns" == e ? {
      mandatory: !0
    } : {}), n;
  }, e.prototype.createRadioButtonControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-va-editors-sheet-controls-radiocontrol">' + e + "</div>");
    t.append(n);
    this.createRadioButton(n, {
      groupName: o
    }, "brtc-va-editors-sheet-controls-width-12"), n.attr("value", e), t[e] = n, n.on("checked", function (t) {
      var e = $(t.target).attr("value");
      "True" === e ? e = "true" : "False" === e && (e = "false");
      var n = r.createCommonCommand(o, e);
      r.executeCommand(n);
    });
  }, e.prototype.createInputBoxControl = function (t, e, o) {
    var r = this,
        n = $('<div class="brtc-style-column-name-inputbox-timeseries-transpose-row">'),
        a = $('<div class="brtc-va-editors-sheet-controls-width-1 brtc-style-column-name-label-timeseries-transpose">');
    a.text(e + ":");
    var i = $('<input type="text" class="brtc-va-editors-sheet-controls-inputcontrol" valid-type = "type1"/>');
    t.append(n), n.append(a), n.append(i);
    this.createInput(i, {
      placeHolder: "Enter value"
    }, "brtc-va-editors-sheet-controls-width-11"), t[e] = i, i.on("change", function (e) {
      var o = [t[1].val(), t[2].val()],
          n = r.createCommonCommand("out-column-names", o);
      r.isInputValueChanged("out-column-names", n.options.ref.param["out-column-names"]) && r.executeCommand(n);
    });
  }, e.prototype.createColumnsCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.columns = [[]];
    var o = this.columnsControl.getSelectedItems();
    if (o) for (var r in o) {
      e.ref.param.columns[0].push(o[r]);
    }
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, e);
  }, e.prototype.createCommonColumnCommand = function (e, o, r) {
    var n = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    n.ref.param[e] = r;
    var a = o.getSelectedItems();
    if (a && "object" == typeof r) for (var i in a) {
      n.ref.param[e].push(a[i]);
    } else a && "string" == typeof r && (n.ref.param[e] = a[0] || "");
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, n);
  }, e.prototype.createCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return r.ref.param[e] = o, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
  }, e.prototype.fillControlValues = function () {
    var t = [],
        e = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    $.each(e, function (e, o) {
      "Double" !== o.internalType && "Float" !== o.internalType && "Decimal" !== o.internalType && "Double[]" !== o.internalType && "Map(String,Double)" !== o.internalType || t.push(o);
    }), this.columnsControl.setItems(t), this.groupbyControl.setItems(e), this.sortbyControl.setItems(e);
  }, t.VA.Core.Functions.Library.timeSeriesTranspose.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_OUT_COL_NAME = "out-column-names", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.outColumnNameCheckRule(), this.addBaseGroupByRule(this.PARAM_COLUMNS, "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0], "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, t.PARAM_COLUMNS, e.param[t.PARAM_COLUMNS][0]);
    });
  }, e.prototype.outColumnNameCheckRule = function () {
    var e = this;
    this.addRule(function (t) {
      if (e._getSchema(t)) {
        var o = [],
            r = t.param[e.PARAM_OUT_COL_NAME];

        if (2 == r.length && !r[0] && !r[1]) {
          var n = {
            errorCode: "BR-0033",
            param: e.PARAM_OUT_COL_NAME,
            messageParam: ["Out Column Names"],
            paramIndex: -1
          };
          return o.push(e.problemFactory.createProblem(n, t)), o;
        }

        for (var a = 0; a < r.length; a++) {
          var i = 0 == a ? "1st " : "2nd ";
          n = {
            errorCode: "BR-0033",
            param: e.PARAM_OUT_COL_NAME,
            messageParam: [i + "Out Column Name"],
            paramIndex: a
          };
          o.push(e._checkStringIsEmpty(n, t, r[a]));
        }

        var s = [];

        for (a = 0; a < r.length; a++) {
          if ("" !== r[a]) {
            if ($.inArray(r[a], s) > -1) {
              i = 0 == a ? "1st " : "2nd ", n = {
                errorCode: "BR-0057",
                param: e.PARAM_OUT_COL_NAME,
                messageParam: [r[a], "1st Out Column Name", "2nd Out Column Name"],
                paramIndex: a
              };
              o.push(this.problemFactory.createProblem(n, t));
            }

            s.push(r[a]);
          }
        }

        return o;
      }
    }), this.addRule(function (o) {
      for (var r = [], n = o.param[e.PARAM_OUT_COL_NAME], a = 0; a < n.length; a++) {
        var i = {
          errorCode: "BR-0045",
          param: this.PARAM_OUT_COL_NAME,
          messageParam: [n[a]],
          paramIndex: a
        };
        t.VA.Core.Utils.InputValidator.isValid.columnNameType(n[a]) || r.push(this.problemFactory.createProblem(i, o));
      }

      return r;
    });
  }, t.VA.Core.Functions.Library.timeSeriesTranspose.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.transpose = {
    category: "transform",
    defaultFnUnit: {
      func: "transpose",
      name: "Transpose",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "label-column": [],
        "label-column-name": ""
      },
      display: {
        label: "Transpose",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: [],
    description: "The transpose of a matrix is an operator which flips a matrix over its diagonal.",
    tags: ["Transpose"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      "label-column": this.renderLabelColumnControl,
      "label-column-name": this.renderLabelColumnNameControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createLabelColumnControl(), this.createLabelColumnNameControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        rowCount: 3,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns[0];
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createLabelColumnControl = function (t) {
    var e = this;
    e.$elements["label-column"] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Label Column", function (t) {
      t.append(e.$elements["label-column"]);
      var o = {
        multiple: !1,
        maxRowCount: 1,
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("label-column", o.items);
          e.executeCommand(r);
        }
      };
      e.controls["label-column"] = e.createColumnList(e.$elements["label-column"], o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderLabelColumnControl = function (t) {
    var e = this.options.fnUnit.param["label-column"];
    this.controls["label-column"].setSelectedItems(e);
  }, e.prototype.createLabelColumnNameControl = function (t) {
    var e = this;
    e.$elements["label-column-name"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Label Column Name", function (t) {
      t.append(e.$elements["label-column-name"]);
      e.controls["label-column-name"] = e.createInput(e.$elements["label-column-name"], {
        placeHolder: "label"
      }), e.$elements["label-column-name"].on("change", function (t) {
        if (e.isInputValueChanged("label-column-name", $(this).val())) {
          var o = e.createSetParameterValueCommand("label-column-name", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "label-column-name", "Label Column Name");
  }, e.prototype.renderLabelColumnNameControl = function (t) {
    var e = this.options.fnUnit.param["label-column-name"];
    this.$elements["label-column-name"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, ["number"]), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls["label-column"].setItems(t);
  }, t.VA.Core.Functions.Library.transpose.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addLabelColumnRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "columns", e.param.columns, "Columns");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    });
  }, e.prototype.addLabelColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "label-column", e.param["label-column"]);
    });
  }, t.VA.Core.Functions.Library.transpose.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.typeCast = {
    category: "transform",
    defaultFnUnit: {
      func: "typeCast",
      name: "TypeCast",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "typecast-mode": ["string"]
      },
      display: {
        label: "Type Cast",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function changes column types such as string, double or integer types for selected columns.",
    tags: ["Type Cast", "TypeCast", "Type Transform", "Preprocessing", "cast type"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit[IN_DATA]);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.PARAM_TYPECAST_MODE = "typecast-mode", this.TYPES = [{
      label: "String",
      value: "string"
    }, {
      label: "Integer",
      value: "integer"
    }, {
      label: "Double",
      value: "double"
    }, {
      label: "Long",
      value: "long"
    }, {
      label: "Boolean",
      value: "boolean"
    }], this.render = {
      columns: this.renderTypecastControl,
      "typecast-mode": this.renderTypecastControl
    }, this.propertyControlArray = [], this.createControlExpander(), this.createTypecastControl(), this.createAddButton();
  }, e.prototype.createControlExpander = function () {
    this.addPropertyControl("Change a Column Type", function (t) {}, {
      mandatory: !0
    }), this.$contents = this.$contentsArea.find(".brtc-va-editors-sheet-controls-propertycontrol-contents");
  }, e.prototype.createAddButton = function () {
    var e = this;
    if (this.$contents.find(".brtc-va-editors-sheet-controls-propertycontrol-addbutton").length > 0) return !1;
    this.$addButton = $('<input type="button" class= "brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Column"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      if (e.$addButton.detach(), e.createTypecastControl(), e.$addButton.appendTo(e.$contents), 1 != e.renderFlag) {
        var t = e.createCommand();
        e.executeCommand(t);
      }
    });
  }, e.prototype.createTypecastControl = function (t) {
    var e = this,
        o = new Object();
    o.$inputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>'), o.$inputWrapper = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-wrapper"/>'), o.$columnInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), o.$typecastInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-operator"/>'), o.$inputWrapper.append(o.$columnInput), o.$inputWrapper.append(o.$typecastInput), this.createDropDownList(o.$typecastInput, {
      source: e.TYPES,
      selectedIndex: 0
    }, "brtc-va-editors-sheet-controls-propertycontrol-filter-input");
    var r = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending",
      expand: !0,
      changed: function changed(t, o) {
        if (1 != e.renderFlag) {
          var r = e.createCommand();
          e.executeCommand(r);
        }
      }
    };
    o.$removeButton = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>'), o.$inputControl.append(o.$removeButton), o.$inputControl.append(o.$inputWrapper), this.$contents.append(o.$inputControl), o.columnsControl = this.createColumnList(o.$columnInput, r), o.columnsControl.setItems(this.columnNameArray), this.$contents.children() && $(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-deck-remove").css("display", "none"), this.createTypecastControlEvent(o), this.propertyControlArray.push(o);
  }, e.prototype.createTypecastControlEvent = function (t) {
    var e = this;
    t.$typecastInput.on("change", function (t) {
      if (1 != e.renderFlag) {
        var o = e.createCommand();
        e.executeCommand(o);
      }
    }), t.$removeButton.click(function (t) {
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;

      if (o > -1 && e.propertyControlArray.splice(o, 1), $(this).parent().remove(), e.$contents.children(), 1 != e.renderFlag) {
        var r = e.createCommand();
        e.executeCommand(r);
      }

      t.stopPropagation();
    });
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns"/>'), this.addPropertyControl("Columns", function (t) {
      t.append(e.$columns);
      var o = {
        rowCount: 3,
        expand: !0,
        multiple: !0,
        changed: function changed(t, o) {
          var r = e.createColumnsCommand();
          e.executeCommand(r);
        }
      };
      e.columnsControl = e.createColumnList(e.$columns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    var t = this;
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit[IN_DATA][0] ? this.dataMap[this.options.fnUnit[IN_DATA][0]].columns : [];
    var e = [];
    $.each(this.columnNameArray, function (t, o) {
      "string" !== o.type && "number" !== o.type || e.push(o);
    }), $.each(this.propertyControlArray, function (o) {
      t.propertyControlArray[o].columnsControl.setItems(e);
    });
  }, e.prototype.renderValidation = function () {
    var t = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-columnlist"),
        e = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-input-operator");

    for (var o in this.problems) {
      this.problems[o].param === this.PARAM_COLUMNS && this.createValidationContent($(t[this.problems[o].paramIndex]).parent(), this.problems[o]), this.problems[o].param === this.PARAM_TYPECAST_MODE && this.createValidationContent($(e[this.problems[o].paramIndex]).parent(), this.problems[o]);
    }
  }, e.prototype.renderTypecastControl = function () {
    var t = this.options.fnUnit.param.columns[0],
        e = this.options.fnUnit.param[this.PARAM_TYPECAST_MODE];

    if (t.length > 0) {
      for (var o in this.renderFlag = !0, this.$addButton.detach(), t) {
        o > this.propertyControlArray.length - 1 && this.createTypecastControl(), this.propertyControlArray[o].columnsControl.setSelectedItems([t[o]]);
        var r = $.map(this.TYPES, function (t, e) {
          return t.value;
        });
        this.propertyControlArray[o].$typecastInput.jqxDropDownList("selectIndex", -1 == $.inArray(e[o], r) ? 0 : $.inArray(e[o], r));
      }

      if (t.length < this.propertyControlArray.length) {
        for (var n = this.propertyControlArray.length - 1; n == t.length; n--) {
          $(this.propertyControlArray[n].$inputControl).remove();
        }

        this.propertyControlArray.splice(t.length, this.propertyControlArray.length - t.length);
      }

      this.$addButton.appendTo(this.$contents), this.renderFlag = !1;
    } else this.resetPropertyControls();
  }, e.prototype.resetPropertyControls = function () {
    for (var t = this.propertyControlArray.length - 1; t >= 0; t--) {
      0 === t ? (this.propertyControlArray[t].columnsControl.setSelectedItems([]), this.propertyControlArray[t].$typecastInput.jqxDropDownList("selectIndex", 0)) : ($(this.propertyControlArray[t].$inputControl).remove(), this.propertyControlArray.splice(t, 1));
    }
  }, e.prototype.getColumnsValue = function () {
    var t = [];

    for (var e in this.propertyControlArray) {
      var o = this.propertyControlArray[e].columnsControl.getSelectedItems()[0] ? this.propertyControlArray[e].columnsControl.getSelectedItems()[0] : "";
      t.push(o);
    }

    return [t];
  }, e.prototype.getTypecastModeValue = function () {
    var t = [];

    for (var e in this.propertyControlArray) {
      var o = this.propertyControlArray[e].$typecastInput.val() ? this.propertyControlArray[e].$typecastInput.val() : "";
      t.push(o);
    }

    return t;
  }, e.prototype.createCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), o.ref.param[this.PARAM_TYPECAST_MODE] = this.getTypecastModeValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createColumnsCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_COLUMNS] = this.getColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.typeCast.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", this.PARAM_TYPECAST_MODE = "typecast-mode", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addConditionRule(), this.addRule(this.typecastRule);
  }, e.prototype.addConditionRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [],
          r = e.param[t.PARAM_COLUMNS][0];
      0 === r.length && (a = t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, "", "Column", 0)) && o.push(a);

      for (var n in r) {
        var a,
            i = r[n] || "";
        (a = t.checkColumnIsEmpty(e, t.PARAM_COLUMNS, i, "Column", n)) && o.push(a);
      }

      return o;
    }), this.addRule(function (e) {
      var o = [],
          r = e.param[t.PARAM_COLUMNS][0];

      for (var n in r) {
        var a = r[n] || "",
            i = t.checkColumnExists(e, t.PARAM_COLUMNS, a, 0);
        i && (i.paramIndex = n, o.push(i));
      }

      return o;
    });
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (this._hasSchema(e)) {
        var o = [];

        if ($.each(e.param[t.PARAM_COLUMNS][0], function (r, n) {
          t.isEmptyForString(n) && o.push(t.problemFactory.createProblem({
            errorCode: "BR-0033",
            param: t.PARAM_COLUMNS,
            paramIndex: r,
            messageParam: ["Column"]
          }, e));
        }), 0 === e.param[t.PARAM_COLUMNS][0].length) {
          var r = {
            errorCode: "BR-0033",
            param: t.PARAM_COLUMNS,
            paramIndex: 0,
            messageParam: ["Column"]
          };
          o.push(t.problemFactory.createProblem(r, e));
        }

        return o;
      }
    });
  }, e.prototype.typecastRule = function (t) {
    if (this._hasSchema(t)) {
      var e = this,
          o = [];

      if ($.each(t.param[e.PARAM_TYPECAST_MODE], function (r, n) {
        e.isEmptyForString(n) && o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: e.PARAM_TYPECAST_MODE,
          paramIndex: r,
          messageParam: ["Typecast Mode"]
        }, t));
      }), 0 === t.param[e.PARAM_TYPECAST_MODE].length) {
        var r = {
          errorCode: "BR-0033",
          param: e.PARAM_TYPECAST_MODE,
          paramIndex: 0,
          messageParam: ["Typecast Mode"]
        };
        o.push(e.problemFactory.createProblem(r, t));
      }

      return o;
    }
  }, e = e, t.VA.Core.Functions.Library.typeCast.validator = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  function o() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  t.VA.Core.Functions.Library.unpivot = {
    category: "transform",
    defaultFnUnit: {
      func: "unpivot",
      name: "Unpivot",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        groupby: [[]],
        "column-name-label": "",
        "column-value-label": ""
      },
      display: {
        label: "Unpivot",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Transpose each columns in a row to rows with 2 columns; row column, value column.",
    mandatory: [],
    tags: ["unpivot"],
    "in-range": {
      min: "1",
      max: "1"
    },
    "out-range": {
      min: "1",
      max: "1"
    }
  }, e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      columns: this.renderColumnsControl,
      groupby: this.renderGroupbyControl,
      "column-name-label": this.renderColumnNameLabelControl,
      "column-value-label": this.renderColumnValueLabelControl
    }, this.$elements = {}, this.controls = {}, this.createColumnsControl(), this.createGroupbyControl(), this.createColumnNameLabelControl(), this.createColumnValueLabelControl();
  }, e.prototype.createColumnsControl = function (t) {
    var e = this;
    e.$elements.columns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Columns", function (t) {
      t.append(e.$elements.columns);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("columns", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.columns = e.createColumnList(e.$elements.columns, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderColumnsControl = function (t) {
    var e = this.options.fnUnit.param.columns[0];
    this.controls.columns.setSelectedItems(e);
  }, e.prototype.createGroupbyControl = function (t) {
    var e = this;
    e.$elements.groupby = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), e.addPropertyControl("Group By", function (t) {
      t.append(e.$elements.groupby);
      var o = {
        multiple: !0,
        maxRowCount: "3",
        changed: function changed(t, o) {
          var r = e.createSetParameterValueCommand("groupby", [o.items]);
          e.executeCommand(r);
        }
      };
      e.controls.groupby = e.createColumnList(e.$elements.groupby, o);
    }, {
      mandatory: !1
    });
  }, e.prototype.renderGroupbyControl = function (t) {
    var e = this.options.fnUnit.param.groupby[0];
    this.controls.groupby.setSelectedItems(e);
  }, e.prototype.createColumnNameLabelControl = function (t) {
    var e = this;
    e.$elements["column-name-label"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Column Name Label", function (t) {
      t.append(e.$elements["column-name-label"]);
      e.controls["column-name-label"] = e.createInput(e.$elements["column-name-label"], {
        placeHolder: "unpivot_column_name"
      }), e.$elements["column-name-label"].on("change", function (t) {
        if (e.isInputValueChanged("column-name-label", $(this).val())) {
          var o = e.createSetParameterValueCommand("column-name-label", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "column-name-label", "Column Name Label");
  }, e.prototype.renderColumnNameLabelControl = function (t) {
    var e = this.options.fnUnit.param["column-name-label"];
    this.$elements["column-name-label"].val(e || "");
  }, e.prototype.createColumnValueLabelControl = function (t) {
    var e = this;
    e.$elements["column-value-label"] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
    var o = e.addPropertyControl("Column Value Label", function (t) {
      t.append(e.$elements["column-value-label"]);
      e.controls["column-value-label"] = e.createInput(e.$elements["column-value-label"], {
        placeHolder: "unpivot_column_value"
      }), e.$elements["column-value-label"].on("change", function (t) {
        if (e.isInputValueChanged("column-value-label", $(this).val())) {
          var o = e.createSetParameterValueCommand("column-value-label", $(this).val());
          e.executeCommand(o);
        }
      });
    }, {
      mandatory: !1
    }).find(".brtc-va-editors-sheet-controls-propertycontrol-label");
    this.addGlobalVariableControl(o, {}, "column-value-label", "Column Value Label");
  }, e.prototype.renderColumnValueLabelControl = function (t) {
    var e = this.options.fnUnit.param["column-value-label"];
    this.$elements["column-value-label"].val(e || "");
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].param;
      this.$elements[e] && this.createValidationContent(this.$elements[e], this.problems[t]);
    }
  }, e.prototype.fillControlValues = function () {
    var t;
    t = this.getColumnsOfInTable(0, []), this.controls.columns.setItems(t), t = this.getColumnsOfInTable(0, []), this.controls.groupby.setItems(t);
  }, t.VA.Core.Functions.Library.unpivot.propertiesPanel = e, o.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addBaseGroupByRule("columns", "Columns");
    var e = this;
    this.addRule(function (t) {
      return e.checkColumnExists(t, "groupby", t.param.groupby);
    });
  }, o.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "columns", e.param.columns);
    });
  }, t.VA.Core.Functions.Library.unpivot.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.unknownFunction = {
    category: "unknown",
    defaultFnUnit: {
      func: "unknownFunction",
      name: "UnknownFunction",
      inData: [],
      outData: [],
      param: {},
      display: {
        label: "UnKnow Function",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Unknown Function.",
    tags: ["unknown", "undefined"],
    "in-range": {
      min: 1,
      max: 999
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.setContentsEditable(!0), this.createParamControl();
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {};
  }, e.prototype.fillControlValues = function () {}, e.prototype.createParamControl = function () {}, t.VA.Core.Functions.Library.unknownFunction.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.RATIO = "ratio", t.VA.Core.Validator.BaseValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.BaseValidator.prototype.initRules.call(this), this.addExistFnUnitRule();
  }, e.prototype.addExistFnUnitRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "EF002",
        messageParam: [e.func]
      };
      return t.problemFactory.createProblem(o, e);
    });
  }, t.VA.Core.Functions.Library.unknownFunction.validator = e;
}.call(this), function () {
  "use strict";

  var t = this,
      e = t.Brightics,
      o = e.VA.Core.Dialogs.PropertiesPanelDialog.prototype;

  function r(t, e) {
    o.constructor.call(this, t, e);
  }

  r.prototype = Object.create(o), r.prototype.constructor = r, r.prototype.createContentsAreaControls = function (t) {
    this.createAddColumnInfoControl(), this.createAddButtonControl();
  }, r.prototype.renderValues = function () {
    this.renderAddColumn();
  }, r.prototype.createAddColumnInfoControl = function () {
    this.$columnInfoArea = $('<div class="brtc-va-refine-addcolumn-newcolumn-container"></div>'), this.popupProperty.$contentsArea.append(this.$columnInfoArea), this.$columnInfoArea.sortable({
      axis: "y",
      helper: function helper(t, e) {
        var o = $(e).clone();
        return o.css("position", "absolute"), o.get(0);
      },
      containment: ".brtc-va-refine-addcolumn-newcolumn-container",
      handle: ".brtc-va-refine-addcolumn-newcolumn-sort",
      stop: function stop(t, e) {}
    }), this.$columnInfoArea.disableSelection(), this.popupProperty.$contentsArea.perfectScrollbar(), this.popupProperty.$contentsArea.perfectScrollbar("update");
  }, r.prototype.createAddButtonControl = function () {
    var t = this,
        o = $('<input type="button" class="brtc-va-conditional-update-property add-else-if-button" value="+ Add New Column"/>');
    this.popupProperty.$contentsArea.append(o), o.jqxButton({
      theme: e.VA.Env.Theme,
      width: "100%",
      height: 25
    }), o.click(function () {
      t.createNewColumnItem();
    });
  }, r.prototype.createNewColumnItem = function (o, r) {
    var n = $('<div class="brtc-va-refine-addcolumn-newcolumn-item">   <div class="brtc-va-refine-addcolumn-newcolumn-sort"><i class="fa fa-bars"></i></div>   <input type="text" class="brtc-va-refine-addcolumn-newcolumn-name" valid-type="type1"/>   <div class="brtc-va-refine-addcolumn-newcolumn-assignor">=</div>   <textarea class="brtc-va-refine-addcolumn-newcolumn-value"></textarea>   <div class="brtc-va-refine-addcolumn-newcolumn-remove"></div></div>');
    this.$columnInfoArea.append(n), n.find(".brtc-va-refine-addcolumn-newcolumn-name").jqxInput({
      theme: e.VA.Env.Theme,
      placeHolder: "Enter name",
      width: "122px",
      height: 27
    }), t.Brightics.VA.Core.Utils.InputValidator.appendValidationCondition(n.find(".brtc-va-refine-addcolumn-newcolumn-name")), o && n.find(".brtc-va-refine-addcolumn-newcolumn-name").val(o);
    var a = $.map(this.options.columns, function (t, e) {
      return t;
    }),
        i = CodeMirror.fromTextArea(n.find(".brtc-va-refine-addcolumn-newcolumn-value")[0], {
      mode: "text/x-sql",
      theme: "default",
      indentWithTabs: !0,
      smartIndent: !0,
      lineNumbers: !1,
      matchBrackets: !1,
      scrollbarStyle: "null",
      extraKeys: {
        "Ctrl-Space": "autocomplete"
      },
      hintOptions: {
        list: this.options.additionalHint.concat(a, ["ROUND()", "MAX()", "MIN()", "SUM()", "AVG()", "OVER()", "NVL()", "CONCAT()", "LPAD()", "LTRIM()", "RPAD()", "RTRIM()", "SUBSTR()", "SUBSTRING()", "FROM_UNIXTIME()", "YEAR()", "MONTH()", "WEEKOFYEAR()"])
      }
    });
    i.setSize("calc(100% - 200px)", n.find(".brtc-va-refine-addcolumn-newcolumn-name").height()), e.VA.Core.Utils.WidgetUtils.adjustCodeMirrorEsc(i), i.on("beforeChange", function (t, e) {
      var o = e.text.join("").replace(/\n/g, "");
      return e.update && e.update(e.from, e.to, [o]), !0;
    }), r && i.setValue(r), n.find(".brtc-va-refine-addcolumn-newcolumn-name").on("change", function (t) {}), i.on("change", function (t) {}), n.find(".brtc-va-refine-addcolumn-newcolumn-remove").click(function () {
      $(this).closest(".brtc-va-refine-addcolumn-newcolumn-item").remove();
    });
  }, r.prototype.createSelect = function () {
    var t = this.$mainControl.find(".brtc-va-refine-addcolumn-newcolumn-item"),
        e = "SELECT *",
        o = 0;
    return $.each(t, function (r, n) {
      o < t.length && (e += ", \n", o++);
      var a = $(t[r]).find(".brtc-va-refine-addcolumn-newcolumn-name").val(),
          i = $(t[r]).find(".CodeMirror")[0].CodeMirror.getValue();
      e += i + " as `" + a + "`";
    }), {
      query: e += "\nFROM #{DF(0)}"
    };
  }, r.prototype.handleOkClicked = function () {
    this.dialogResult.param = this.createSelect(), e.VA.Dialogs.Dialog.prototype.handleOkClicked.call(this);
  }, r.prototype.fillControlValues = function () {
    this.columnData = this.popupProperty.getColumnsOfInTable(0, ["number", "string"]).map(function (t) {
      return t.name;
    });
  }, r.prototype.renderAddColumn = function () {
    if (this.options.fnUnit.param) {
      var t = this.options.fnUnit.param.query.split("\n");
      t[t.length - 1].endsWith("FROM #{DF(0)}") && t.splice(t.length - 1, 1), t[0].startsWith("SELECT *") && t.splice(0, 1);

      for (var e = 0; e < t.length; e++) {
        var o = t[e].lastIndexOf(" as "),
            r = t[e].substring(0, o).trim(),
            n = t[e].substring(o + 4).trim();
        "," == (n = n.replace(/`/gi, "")).slice(-1) && (n = n.substring(0, n.length - 1)), this.createNewColumnItem(n, r);
      }
    } else this.createNewColumnItem();
  }, r.prototype.checkValidation = function () {
    var t = this,
        e = this.$mainControl.find(".brtc-va-refine-addcolumn-newcolumn-item"),
        o = [];
    $.each(e, function (r, n) {
      var a = $(e[r]).find(".brtc-va-refine-addcolumn-newcolumn-name").val(),
          i = $(e[r]).find(".CodeMirror")[0].CodeMirror.getValue();
      if ("" === a && "" === i) t.addProblem(t.createProblem({
        errorCode: "BR-0033",
        paramIndex: r,
        param: "New column name",
        messageParam: ["New column name", "Value"]
      }));else if ("" === a) t.addProblem(t.createProblem({
        errorCode: "BR-0033",
        paramIndex: r,
        param: "New column name",
        messageParam: ["New column name"]
      }));else if ($.inArray(a, o) > -1) {
        var s = "New column name(s) - '" + a + "' already exist.";
        t.addProblem(t.createProblem({
          errorCode: "BR-0100",
          paramIndex: r,
          param: "New column name",
          messageParam: [s]
        }));
      } else if ($.inArray(a, $.map(t.options.columns, function (t) {
        return t.name;
      })) > -1) {
        s = "New column name(s) - '" + a + "' already exist.";
        t.addProblem(t.createProblem({
          errorCode: "BR-0100",
          paramIndex: r,
          param: "New column name",
          messageParam: [s]
        }));
      } else "" === i && t.addProblem(t.createProblem({
        errorCode: "BR-0033",
        paramIndex: r,
        param: "Value",
        messageParam: ["Value"]
      })), o.push(a);
    }), this.renderValidation();
  }, r.prototype.renderValidation = function () {
    var t = this;
    $.each(this.problems, function (e, o) {
      var r = t.$mainControl.find(".brtc-va-refine-addcolumn-newcolumn-item");
      "BR-0033" == o.code ? t.createValidationContent($(r[o.paramIndex]), o) : t.createValidationContent($(r[o.paramIndex]), o, "New column name" == o.param ? $(r[o.paramIndex]).find(".brtc-va-refine-addcolumn-newcolumn-name") : $(r[o.paramIndex]).find(".CodeMirror")), t.$mainControl.find(".brtc-va-refine-step-validation-tooltip").css({
        width: "465px",
        "margin-left": "30px"
      });
    });
  }, e.VA.Core.Dialogs.FunctionProperties.AddColumnDialog = r;
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Dialogs.PropertiesPanelDialog.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.createContentsAreaControls = function (t) {
    this.control = {
      conditions: [],
      values: []
    }, this.createColumnInfoControl(), this.createConditionControl();
  }, o.prototype.renderValues = function () {
    this.renderColumnName(), this.renderColumnType(), this.renderExprType(), this.renderCondition();
  }, o.prototype.createColumnInfoControl = function () {
    this.$columnInfoArea = $('<div class="brtc-va-editors-sheet-controls-propertycontrol direction-row"></div>'), this.popupProperty.$contentsArea.append(this.$columnInfoArea), this.createColumnNameControl(), this.createColumnTypeControl(), this.createExprTypeControl();
  }, o.prototype.createColumnNameControl = function () {
    var t = this;
    this.popupProperty.addPropertyControl("New Column Name", function (e) {
      t.control.new_col = t.createInput(e, {
        key: "new_col",
        label: "New Column Name",
        widgetOption: {
          height: "29px"
        }
      });
    }, {
      mandatory: !0,
      propertyControlParent: t.$columnInfoArea
    });
  }, o.prototype.createExprTypeControl = function () {
    var t = this,
        e = [{
      label: "SQLite",
      value: "sqlite"
    }, {
      label: "Python",
      value: "python"
    }],
        o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    this.popupProperty.addPropertyControl("Expression Type", function (r) {
      r.append(o), t.control.expr_type = t.createDropDownList(o, {
        widgetOption: {
          source: e,
          selectedIndex: 0,
          displayMember: "label",
          valueMember: "value"
        }
      });
    }, {
      mandatory: !0,
      propertyControlParent: t.$columnInfoArea
    });
  }, o.prototype.createColumnTypeControl = function () {
    var t = this,
        e = [{
      label: "String",
      value: "string"
    }, {
      label: "Number",
      value: "number"
    }],
        o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    this.popupProperty.addPropertyControl("New Column Type", function (r) {
      r.append(o), t.control.column_type = t.createDropDownList(o, {
        widgetOption: {
          source: e,
          selectedIndex: 0,
          displayMember: "label",
          valueMember: "value"
        }
      });
    }, {
      mandatory: !0,
      propertyControlParent: t.$columnInfoArea
    });
  };
  o.prototype.createConditionControl = function () {
    var t = this;
    this.$ifArea = $("<div>"), this.popupProperty.addPropertyControl("Condition", function (e) {
      t.$deckTarget = e, e.append(t.$ifArea), t.createAddButton();
    }, {
      mandatory: !0
    }), this.bindConditionControl();
  }, o.prototype.createAddButton = function () {
    var e = this,
        o = $('<input type="button" class="brtc-va-conditional-update-property add-else-if-button" value="+ Add Else if"/>');
    this.$deckTarget.append(o), o.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), o.click(function () {
      e.createDeckControl("IF");
    });
  }, o.prototype.bindConditionControl = function () {
    var t = this;
    this.control.control_condition = {}, this.control.control_condition.setValue = function (e, o, r) {
      if (e.length > 0 && o.length > 0) {
        for (var n = 0; n < e.length; n++) {
          t.createDeckControl("IF"), t.control.conditions[n].setValue(e[n]), t.control.values[n].setValue(o[n]);
        }

        t.createDeckControl("ELSE"), t.control.else_value.setValue(r);
      } else t.createDeckControl("IF"), t.createDeckControl("ELSE");
    }, this.control.control_condition.getValue = function () {
      var e = [],
          o = [],
          r = t.control.else_value.getValue(),
          n = t.control.column_type.getValue();
      return "number" == n && (r = Number(r)), t.control.values.forEach(function (r, a) {
        e.push(t.control.conditions[a].getValue()), "number" == n ? o.push(Number(r.getValue())) : o.push(r.getValue());
      }), {
        conditions: e,
        values: o,
        else_value: r
      };
    };
  }, o.prototype.createDeckControl = function (t) {
    var e = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>');
    e.addClass("brtc-style-display-flex"), "IF" === t ? (this.$ifArea.append(e), this.createRemoveButton(e), this.createExprControl(e, t), this.createValueControl(e, t)) : (this.$deckTarget.append(e), this.createValueControl(e, t));
  }, o.prototype.createRemoveButton = function (t) {
    var e = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
    t.append(e);
    var o = this;
    e.click(function (t) {
      var e = $(this).closest(".brtc-va-editors-sheet-controls-propertycontrol-deck"),
          r = e.index();
      r > -1 && (o.control.conditions.splice(r, 1), o.control.values.splice(r, 1)), e.remove(), t.stopPropagation();
    });
  }, o.prototype.createExprControl = function (t, e) {
    var o = this.createTextArea(t, {
      widgetOption: {
        placeholder: "Condition Expression",
        height: "29px",
        scrollbarStyle: "null",
        lineWrapping: !0
      },
      addClass: "brtc-style-flex-2"
    });
    "IF" === e && "" != this.control.new_col.getValue() && o.codeMirror.focus(), t.find(".brtc-va-editors-sheet-controls-propertycontrol-textareacontrol").css({
      "max-width": "336px"
    }), this.control.conditions.push(o);
  }, o.prototype.createValueControl = function (t, e) {
    var o = this.createInput(t, {
      addClass: "brtc-style-flex-1",
      widgetOption: {
        height: "29px"
      }
    });
    "IF" === e ? this.control.values.push(o) : this.control.else_value = o;
  }, o.prototype.getControlValue = function () {
    return $.extend(!0, {}, {
      new_col: this.control.new_col.getValue(),
      expr_type: this.control.expr_type.getValue()
    }, this.control.control_condition.getValue());
  }, o.prototype.handleOkClicked = function () {
    this.dialogResult.param = this.getControlValue(), t.VA.Dialogs.Dialog.prototype.handleOkClicked.call(this);
  }, o.prototype.fillControlValues = function () {
    this.columnData = this.popupProperty.getColumnsOfInTable(0, ["number", "string"]).map(function (t) {
      return t.name;
    });
  }, o.prototype.renderColumnName = function () {
    var t = this.options.fnUnit.param.new_col;
    this.control.new_col.setValue(t), this.control.new_col.closest(".brtc-va-editors-sheet-controls-propertycontrol").css({
      "flex-grow": 2
    });
  }, o.prototype.renderColumnType = function () {
    var t = this.options.fnUnit.param.values;
    t && "number" == typeof t[0] && this.control.column_type.setValue("number"), this.control.column_type.closest(".brtc-va-editors-sheet-controls-propertycontrol").css({
      "flex-grow": 1
    });
  }, o.prototype.renderExprType = function () {
    var t = this.options.fnUnit.param.expr_type;
    this.control.expr_type.setValue(t), this.control.expr_type.closest(".brtc-va-editors-sheet-controls-propertycontrol").css({
      "flex-grow": 1
    });
  }, o.prototype.renderCondition = function () {
    var t = this.options.fnUnit.param.conditions,
        e = this.options.fnUnit.param.values,
        o = this.options.fnUnit.param.else_value;
    this.control.control_condition.setValue(t, e, o);
  }, o.prototype.renderValidation = function () {}, t.VA.Core.Dialogs.FunctionProperties.AddColumnIfDialog = o;
}.call(this), function () {
  "use strict";

  var t = this,
      e = t.Brightics,
      o = e.VA.Core.Dialogs.PropertiesPanelDialog.prototype;
  var r = "output_cols",
      n = "output_types",
      a = [{
    label: "String",
    value: "string",
    internalType: "String"
  }, {
    label: "Int",
    value: "int",
    internalType: "Integer"
  }, {
    label: "Long",
    value: "long",
    internalType: "Long"
  }, {
    label: "Double",
    value: "double",
    internalType: "Double"
  }, {
    label: "Boolean",
    value: "boolean",
    internalType: "Boolean"
  }];

  function i(t, e) {
    o.constructor.call(this, t, e);
  }

  i.prototype = Object.create(o), i.prototype.constructor = i, i.prototype.createContentsAreaControls = function (t) {
    var _this$control;

    this.control = (_this$control = {
      check: [],
      input_cols: []
    }, _this$control[r] = [], _this$control[n] = [], _this$control), this.createConditionControl();
  }, i.prototype.renderValues = function () {
    this.renderCondition();
  }, i.prototype.createConditionControl = function () {
    var t = this;
    this.$deckTarget = $('<div class="brtc-style-display-flex brtc-style-flex-direction-column"/>'), this.popupProperty.addPropertyControl("Condition", function (e) {
      e.append(t.$deckTarget), t.createHeader();
    }, {
      mandatory: !0
    }), this.bindConditionControl();
  }, i.prototype.createHeader = function () {
    $('<div class="brtc-va-selectcolumn-column-item"/>').addClass("brtc-style-flex-center");
    var t = $('<div class="brtc-va-selectcolumn-header brtc-style-flex-center-text">   <div class="brtc-va-selectcolumn-header-check"></div>   <div class="brtc-va-selectcolumn-header-label name">Name</div>   <div class="brtc-va-selectcolumn-header-label alias">New Name   </div>   <div class="brtc-va-selectcolumn-header-type">Type   </div></div>');
    this.$deckTarget.append(t);
    var e = this,
        o = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"/>');
    t.find(".brtc-va-selectcolumn-header-check").append(o), this.popupProperty.createCheckBox(o, {
      width: 23,
      height: 27,
      checked: !0
    }).on("click", function (t) {
      var o = $(e.$deckTarget.find(".brtc-va-editors-sheet-controls-propertycontrol-checkbox"));
      $(this).val() ? e._selectAllItem(o) : (e._unSelectAllItem(o), e.$okButton.jqxButton({
        disabled: !0
      }));
    });
  }, i.prototype._selectAllItem = function (t) {
    for (var e = 1; e < t.length; e++) {
      $(t[e]).jqxCheckBox({
        checked: !0
      });
    }
  }, i.prototype._unSelectAllItem = function (t) {
    for (var e = 1; e < t.length; e++) {
      $(t[e]).jqxCheckBox({
        checked: !1
      });
    }
  }, i.prototype.createDeckControl = function (t) {
    var e = $('<div class="brtc-va-selectcolumn-column-item"/>');
    e.addClass("brtc-style-flex-center");
    var o = t.check;
    this.createCheckBoxControl(e, o), this.$deckTarget.sortable({
      axis: "y",
      helper: function helper(t, e) {
        var o = $(e).clone();
        return o.css("position", "absolute"), o.get(0);
      },
      items: ".brtc-va-selectcolumn-column-item",
      cancel: ".brtc-va-selectcolumn-column-item.sort-disabled",
      handle: ".brtc-va-selectcolumn-column-sort"
    }, "refreshPositions"), this.$deckTarget.append(e), this.createSortControl(e), this.createColumnControl(e, o), this.createAliasControl(e, o), this.createTypeControl(e, o), this.createResetControl(e, t);
  }, i.prototype.createCheckBoxControl = function (t, e) {
    var o = this,
        r = this.createCheckBox(t, {
      widgetOption: {
        checked: e
      },
      checkedFunc: function checkedFunc() {
        var t = $(this).closest(".brtc-va-selectcolumn-column-item");
        t.removeClass("sort-disabled"), o.control.conditions.setEnable(t), o.setAllCheckBoxCondition();
      },
      uncheckedFunc: function uncheckedFunc() {
        var t = $(this).closest(".brtc-va-selectcolumn-column-item");
        t.addClass("sort-disabled"), o.control.conditions.setDisable(t), o.setAllCheckBoxCondition();

        for (var e = 0, r = 0; r < o.control.check.length; r++) {
          !1 === o.control.check[r].getValue() && e++;
        }

        r === e && o.$okButton.jqxButton({
          disabled: !0
        });
      }
    });
    this.control.check.push(r);
  }, i.prototype.setAllCheckBoxCondition = function () {
    for (var t = !0, e = 0; e < this.control.check.length; e++) {
      if (!1 === this.control.check[e].getValue()) {
        t = !1;
        break;
      }
    }

    t ? $(this.$deckTarget.find(".brtc-va-editors-sheet-controls-propertycontrol-checkbox")[0]).jqxCheckBox({
      checked: !0
    }) : $(this.$deckTarget.find(".brtc-va-editors-sheet-controls-propertycontrol-checkbox")[0]).jqxCheckBox({
      checked: !1
    });
  }, i.prototype.createSortControl = function (t) {
    var e = $('<div class="brtc-va-selectcolumn-column-sort"><i class="fa fa-bars"></i></div>');
    t.append(e);
  }, i.prototype.createColumnControl = function (t) {
    this.control.input_cols.push(this.createInput(t, {
      widgetOption: {
        disabled: !0
      },
      addClass: "column-name"
    }));
  }, i.prototype.createAliasControl = function (e, o) {
    var r = this.createInput(e, {
      widgetOption: {
        disabled: !o
      },
      addClass: "column-alias"
    });
    r.attr("valid-type", "type1"), this.control.output_cols.push(r), t.Brightics.VA.Core.Utils.InputValidator.appendValidationCondition(this._getAlias(e));
  }, i.prototype._getColumnType = function (t) {
    var e = a.find(function (_ref) {
      var e = _ref.internalType;
      return e === t;
    });
    return e ? e.value : t;
  }, i.prototype.createTypeControl = function (t, e) {
    this.control[n].push(this.createDropDownList(t, {
      widgetOption: {
        source: a,
        width: "80px",
        disabled: !e,
        displayMember: "label",
        valueMember: "value"
      },
      addClass: "column-type"
    }));
  }, i.prototype.createResetControl = function (t, e) {
    var o = $('\n            <div class="brtc-va-selectcolumn-column-reset-wrapper">\n                <div class="brtc-va-selectcolumn-column-reset" title="Reset"></div>\n            </div>\n        ');
    t.append(o);
    var a = this;
    o.on("click", function () {
      var t = $(this).parent();
      a._getItemValue(t, "check") && (a._resetItem(t, r, e.output_cols), a._resetItem(t, n, e[n]));
    });
  }, i.prototype.bindConditionControl = function () {
    var t = this;
    this.control.conditions = {}, this.control.conditions.setValue = function (e) {
      var o = [],
          a = 0,
          i = e.input_cols.length > 0;
      t.columnData.forEach(function (s) {
        var _o$push, _o$push2;

        e.input_cols.includes(s.name) ? (o.push((_o$push = {
          check: !0,
          input_cols: e.input_cols[a]
        }, _o$push[r] = e.output_cols[a], _o$push[n] = e[n][a], _o$push)), a++) : o.push((_o$push2 = {
          check: !i,
          input_cols: s.name
        }, _o$push2[r] = s.name, _o$push2[n] = t._getColumnType(s.internalType), _o$push2));
      }), o.forEach(function (e, o) {
        t.createDeckControl(e), t.control.input_cols[o].setValue(e.input_cols), t.control.output_cols[o].setValue(e.output_cols), t.control[n][o].setValue(e[n]);
      }), t.setAllCheckBoxCondition();
    }, this.control.conditions.getValue = function () {
      var _ref2;

      for (var e = [], o = [], a = [], i = t.$deckTarget.find(".brtc-va-selectcolumn-column-item"), s = 0; s < i.length; s++) {
        var l = $(i[s]);
        t._getItemValue(l, "check") && (e.push(t._getItemValue(l, "input_cols")), o.push(t._getItemValue(l, r)), a.push(t._getItemValue(l, n)));
      }

      return _ref2 = {
        input_cols: e
      }, _ref2[r] = o, _ref2[n] = a, _ref2;
    }, this.control.conditions.setDisable = function (e) {
      if (e) t._disableItem(e, r, !0), t._disableItem(e, n, !0);else {
        for (var o = t.control.check.length, a = 0; a < o; a++) {
          t.control.check[a].setValue(!1);
        }

        t.$okButton.jqxButton({
          disabled: !0
        });
      }
    }, this.control.conditions.setEnable = function (e) {
      if (e) t._disableItem(e, r, !1), t._disableItem(e, n, !1);else for (var o = t.control.check.length, a = 0; a < o; a++) {
        t.control.check[a].setValue(!0);
      }
      t.$okButton.jqxButton({
        disabled: !1
      });
    };
  }, i.prototype._getColumn = function (t) {
    return t.find(".column-name .brtc-va-editors-sheet-controls-propertycontrol-input");
  }, i.prototype._getAlias = function (t) {
    return t.find(".column-alias .brtc-va-editors-sheet-controls-propertycontrol-input");
  }, i.prototype._getType = function (t) {
    return t.find(".column-type .brtc-va-editors-sheet-controls-propertycontrol-combobox");
  }, i.prototype._getCheckBox = function (t) {
    return t.find(".brtc-va-editors-sheet-controls-propertycontrol-checkbox");
  }, i.prototype._disableItem = function (t, e, o) {
    e == r ? this._getAlias(t).jqxInput({
      disabled: o
    }) : e == n && this._getType(t).jqxDropDownList({
      disabled: o
    });
  }, i.prototype._resetItem = function (t, e, o) {
    e == r ? this._getAlias(t).val(o) : e == n && this._getType(t).val(o);
  }, i.prototype._getItemValue = function (t, e) {
    return "input_cols" == e ? this._getColumn(t).val() : e == r ? this._getAlias(t).val() : e == n ? this._getType(t).val() : "check" == e ? this._getCheckBox(t).val() : void 0;
  }, i.prototype.getControlValue = function () {
    return $.extend(!0, {}, this.control.conditions.getValue());
  }, i.prototype.handleOkClicked = function () {
    this.dialogResult.param = this.getControlValue(), e.VA.Dialogs.Dialog.prototype.handleOkClicked.call(this);
  }, i.prototype.fillControlValues = function () {
    this.columnData = this.popupProperty.getColumnsOfInTable(0, ["number", "string"]);
  }, i.prototype.renderCondition = function () {
    var t = this.options.fnUnit.param;
    this.control.conditions.setValue(t);
  }, i.prototype.renderValidation = function () {}, e.VA.Core.Dialogs.FunctionProperties.SelectColumnDialog = i;
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Dialogs.PropertiesPanelDialog.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.createContentsAreaControls = function (t) {
    this.control = {
      input_cols: [],
      operators: [],
      operands: []
    }, this.createConditionControl();
  }, o.prototype.renderValues = function () {
    this.renderCondition();
  }, o.prototype.createConditionControl = function () {
    var t = this;
    this.$deckArea = $("<div>"), this.popupProperty.addPropertyControl("Condition", function (e) {
      t.$deckTarget = e, t.createAndOrControl(), e.append(t.$deckArea);
    }, {
      mandatory: !0
    }), this.createAddButton(), this.bindConditionControl();
  }, o.prototype.createAndOrControl = function () {
    var t = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-and"></div>');
    t.css("height", "30px"), this.$deckTarget.append(t);
    var e = [{
      label: "And",
      value: "and"
    }, {
      label: "Or",
      value: "or"
    }];
    this.control.main_operator = this.createRadioButton(t, {
      widgetOption: {
        width: "60"
      },
      value: e[0].value,
      key: "main_operator",
      source: e,
      addCSS: {
        float: "left"
      }
    });
  }, o.prototype.createDeckControl = function () {
    var t = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>');
    t.addClass("brtc-style-display-flex"), this.$deckArea.append(t), this.createRemoveButton(t), this.createColumnControl(t), this.createOperatorControl(t), this.createOperandControl(t);
  }, o.prototype.createRemoveButton = function (t) {
    var e = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>');
    t.append(e);
    var o = this;
    e.click(function (t) {
      var e = $(this).closest(".brtc-va-editors-sheet-controls-propertycontrol-deck"),
          r = e.index();
      r > -1 && (o.control.input_cols.splice(r, 1), o.control.operators.splice(r, 1), o.control.operands.splice(r, 1)), e.remove(), t.stopPropagation();
    });
  }, o.prototype.createColumnControl = function (t) {
    var e = this.createColumnList(t, {
      widgetOption: {
        rowCount: 1,
        multiple: !1,
        height: 27
      },
      addClass: "brtc-style-flex-2"
    });
    e.setItems(this.columnObjectData), this.control.input_cols.push(e);
  }, o.prototype.createOperatorControl = function (t) {
    this.control.operators.push(this.createDropDownList(t, {
      widgetOption: {
        source: ["==", "!=", ">", ">=", "<", "<=", "in", "not in"],
        placeHolder: "",
        height: "27px !important"
      },
      addCSS: {
        width: "70px"
      }
    }));
  }, o.prototype.createOperandControl = function (t) {
    this.control.operands.push(this.createTextArea(t, {
      widgetOption: {
        height: "29px",
        placeholder: "Enter Value"
      },
      addClass: "brtc-style-flex-2"
    }));
  }, o.prototype.createAddButton = function () {
    var t = $('<input type="button" class="brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Condition"/>');
    this.$deckTarget.append(t);
    var e = this.popupProperty.createButton(t, {
      width: "100%",
      height: 25
    }),
        o = this;
    e.click(function () {
      o.createDeckControl();
    });
  }, o.prototype.bindConditionControl = function () {
    var t = this;
    this.control.conditions = {}, this.control.conditions.setValue = function (e) {
      var o = e.main_operator,
          r = e.input_cols,
          n = e.operators,
          a = e.operands;
      if (t.control.main_operator.setValue(o), n.length > 0) for (var i = 0; i < n.length; i++) {
        t.createDeckControl(), t.control.input_cols[i].setValue([r[i]]), t.control.operators[i].setValue(n[i]), t.control.operands[i].setValue(a[i]);
      } else t.createDeckControl();
    }, this.control.conditions.getValue = function () {
      return {
        main_operator: t.control.main_operator.getValue(),
        input_cols: t.control.input_cols.map(function (t) {
          return t.getValue()[0];
        }),
        operators: t.control.operators.map(function (t) {
          return t.getValue();
        }),
        operands: t.control.operands.map(function (t) {
          return t.getValue();
        })
      };
    };
  }, o.prototype.getControlValue = function () {
    return $.extend(!0, {}, this.control.conditions.getValue());
  }, o.prototype.handleOkClicked = function () {
    this.dialogResult.param = this.getControlValue(), t.VA.Dialogs.Dialog.prototype.handleOkClicked.call(this);
  }, o.prototype.fillControlValues = function () {
    this.columnObjectData = this.popupProperty.getColumnsOfInTable(0, ["number", "string"]), this.columnData = this.popupProperty.getColumnsOfInTable(0, ["number", "string"]).map(function (t) {
      return t.name;
    });
  }, o.prototype.renderCondition = function () {
    if (this.control) var t = this.options.fnUnit.param;
    this.control.conditions.setValue(t);
  }, o.prototype.renderValidation = function () {}, t.VA.Core.Dialogs.FunctionProperties.SimpleFilterDialog = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.optFuncBase = {};
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.handleCommand = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.handleCommand.call(this, e), e instanceof t.VA.Core.Editors.Diagram.Commands.SetOptFnUnitParameterValueCommand && this.handleSetFnUnitParameterValueCommand(e);
  }, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.$elements = {}, this.controls = {}, this.render = {
      method: this.renderMethod,
      script: this.renderScript
    }, this.createMethodControl(), this.createScriptControl();
  }, e.prototype.renderValues = function (t) {
    this.renderMethod(), this.renderScript();
  }, e.prototype.createMethodControl = function () {
    var e = this;
    this.$elements.method = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
    var o = $('<input class="brtc-va-editors-sheet-panels-properties-button space" type="button" value="Edit"/>');
    this.addPropertyControl("Method", function (t) {
      t.append(e.$elements.method);
      var r = {
        source: e.getMethodSource(),
        selectedIndex: 0
      };
      e.controls.method = e.createDropDownList(e.$elements.method, r), e.controls.method.setValue = function (t) {
        this.jqxDropDownList("selectItem", t);
      }, e.controls.method.getValue = function () {
        return this.jqxDropDownList("getSelectedItem").value;
      }, e.controls.method.getLabel = function () {
        return this.jqxDropDownList("getSelectedItem").label;
      }, e.controls.method.on("change", function (t) {
        var o = t.args.item.value,
            r = t.args.item.originalItem.numOfOut,
            n = e.createMethodCommand(o, r);
        e.executeCommand(n);
      }), t.append(o);
    }, {
      mandatory: !0
    }), o.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), o.click(function (o) {
      var r = $.extend(!0, {
        fnUnit: e.options.fnUnit,
        dataProxy: e.options.dataProxy,
        modelEditor: e.options.modelEditor,
        close: function close(t) {
          if (t.OK) {
            var o = e.createSetDialogParameterValueCommand(t.param);
            e.executeCommand(o);
          }
        }
      }, e.getParameterDialogOption());
      new t.VA.Core.Dialogs.OptDialog($(o.target), r);
    });
  }, e.prototype.getParameterDialogOption = function () {
    return {
      title: this.controls.method.getLabel(),
      method: this.controls.method.getValue()
    };
  }, e.prototype.getMethodSource = function () {
    return [];
  }, e.prototype.createScriptControl = function () {
    var e = this;
    this.$elements.script = $('<textarea class="brtc-va-editors-sheet-controls-sqlcontrol"></textarea>'), this.addPropertyControl("Script", function (o) {
      o.append(e.$elements.script), e.controls.script = e.createTextAreaControl(e.$elements.script, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: {
          name: "python",
          version: 3,
          singleLineStringErrors: !1
        },
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), o.find(".CodeMirror-sizer").css({
        height: "300px"
      }), e.controls.script.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        $(window).trigger("mousedown"), e._openScriptEditor();
      });
    }, {
      mandatory: !0
    });
  }, e.prototype._openScriptEditor = function () {
    var e = this;
    new t.VA.Core.Dialogs.OptScriptEditorDialog(e.$mainControl, {
      title: "Python Script",
      mode: {
        name: "python",
        version: 3,
        singleLineStringErrors: !1
      },
      dataProxy: e.options.dataProxy,
      additionalHint: e.hintList,
      fnUnit: e.options.fnUnit,
      statement: e.controls.script.codeMirror.getValue(),
      scriptType: "Python",
      close: function close(t) {
        if (t.OK) {
          var o = t.queryStatement ? t.queryStatement.replace(/\n/gm, "\\n") : "",
              r = e.createSetParameterValueCommand("script", o);
          e.executeCommand(r), e._redrawQueryStatement(t.queryStatement);
        }
      }
    });
  }, e.prototype._redrawQueryStatement = function (t) {
    this.controls.script.setValue(t), this.controls.script.codeMirror.setSize("100%", "100%");
  }, e.prototype.createMethodCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {},
        outData: []
      }
    },
        n = {
      method: {}
    };
    n.method["method-name"] = e, n.script = r.fnUnit.param.script, n["script-id"] = r.fnUnit.param["script-id"], r.ref.param = n;
    var a = this.options.fnUnit.outData.slice();

    if (o > 1 && a.length < o) {
      for (; a.length < o;) {
        a.push(t.VA.Core.Utils.IDGenerator.table.id());
      }

      r.ref.outData = a;
    } else void 0 === o && (o = 1), r.ref.outData = a.slice(0, o);

    var i = new t.VA.Core.CompoundCommand(this);
    return i.add(new t.VA.Core.Editors.Diagram.Commands.ChangeOutTableCommand(this, r)), i.add(new t.VA.Core.Editors.Diagram.Commands.SetOptFnUnitParameterValueCommand(this, r)), i;
  }, e.prototype.createSetDialogParameterValueCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    },
        r = {
      method: {}
    };
    return r.method["method-name"] = o.fnUnit.param.method["method-name"], $.extend(!0, r, e), o.ref.param = r, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.createScriptInputCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param.script = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.renderMethod = function () {
    var t = this.options.fnUnit.param.method["method-name"];
    this.controls.method.setValue(t);
  }, e.prototype.renderScript = function () {
    var t = this.options.fnUnit.param.script;
    t || (t = "#\n#   NOTE : Enter Optimize Simulation Script\n#   ex)\n#       objective = 0.0\n#       constraint = 0.0\n#       for key in parameters.keys():\n#           value = parameters[key]\n#           objective += pow(value,2) - A * math.cos(2 * math.pi * value)\n#\n"), t = t ? t.replace(/\\n/g, "\n") : "", this._redrawQueryStatement(t);
  }, t.VA.Core.Functions.Library.optFuncBase.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.optFuncBase.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.designOfExperiments = {
    category: "opt",
    defaultFnUnit: {
      func: "designOfExperiments",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "optScript",
        method: {
          "method-name": "dace"
        },
        script: ""
      },
      display: {
        label: "Design Of Experiments",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The function all generate point sets that may be used to drive a set of computer experiments",
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 6,
      max: 6
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Functions.Library.optFuncBase.propertiesPanel.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.getPrimaryOperation = function () {
    return "DesignOfExperiments";
  }, o.prototype.getMethodSource = function () {
    return [{
      label: "Dace",
      value: "dace",
      numOfOut: 6
    }, {
      label: "Fsu Cvt",
      value: "fsu_cvt",
      numOfOut: 5
    }, {
      label: "Fsu Quasi Mc",
      value: "fsu_quasi_mc",
      numOfOut: 5
    }, {
      label: "Psuade Moat",
      value: "psuade_moat"
    }];
  }, t.VA.Core.Functions.Library.designOfExperiments.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.designOfExperiments.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.globalOptimization = {
    category: "opt",
    defaultFnUnit: {
      func: "globalOptimization",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "optScript",
        method: {
          "method-name": "ncsu_direct"
        },
        script: ""
      },
      display: {
        label: "Global Optimization",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The function is find the globally best solution of models, in the presence of multiple local optima",
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Functions.Library.optFuncBase.propertiesPanel.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.getPrimaryOperation = function () {
    return "GlobalOptimization";
  }, o.prototype.getMethodSource = function () {
    return [{
      label: "Ncsu Direct",
      value: "ncsu_direct"
    }, {
      label: "Soga",
      value: "soga"
    }, {
      label: "Moga",
      value: "moga"
    }, {
      label: "Asynch Pattern Search",
      value: "asynch_pattern_search"
    }, {
      label: "Coliny Pattern Search",
      value: "coliny_pattern_search"
    }, {
      label: "Coliny Direct",
      value: "coliny_direct"
    }, {
      label: "Coliny Ea",
      value: "coliny_ea"
    }, {
      label: "Efficient Global",
      value: "efficient_global"
    }, {
      label: "Surrogate Based Global",
      value: "surrogate_based_global"
    }];
  }, t.VA.Core.Functions.Library.globalOptimization.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.globalOptimization.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.localOptimization = {
    category: "opt",
    defaultFnUnit: {
      func: "localOptimization",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "optScript",
        method: {
          "method-name": "conmin_frcg"
        },
        script: ""
      },
      display: {
        label: "Local Optimization",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The function is the method attempts to find a local minimum",
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Functions.Library.optFuncBase.propertiesPanel.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.getPrimaryOperation = function () {
    return "LocalOptimization";
  }, o.prototype.getMethodSource = function () {
    return [{
      label: "Conmin Frcg",
      value: "conmin_frcg"
    }, {
      label: "Conmin Mfd",
      value: "conmin_mfd"
    }, {
      label: "Optpp Cg",
      value: "optpp_cg"
    }, {
      label: "Optpp Fd Newton",
      value: "optpp_fd_newton"
    }, {
      label: "Optpp G Newton",
      value: "optpp_g_newton"
    }, {
      label: "Optpp Newton",
      value: "optpp_newton"
    }, {
      label: "Optpp Pds",
      value: "optpp_pds"
    }, {
      label: "Coliny Cobyla",
      value: "coliny_cobyla"
    }, {
      label: "Coliny Solis Wets",
      value: "coliny_solis_wets"
    }, {
      label: "Surrogate Based Local",
      value: "surrogate_based_local"
    }, {
      label: "Mesh Adaptive Search",
      value: "mesh_adaptive_search"
    }];
  }, t.VA.Core.Functions.Library.localOptimization.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.localOptimization.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.optDialogBase = {};
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.createControls = function () {
    this.columnControlList = [], this.problemFactory = new t.VA.Core.Validator.ProblemFactory(), this.$mainControl = $('<div class="brtc-va-editors-sheet-panels-basepanel"/>'), this.$parent.append(this.$mainControl), this.createLeftArea(), this.createContentsArea(), this.createRightArea(), this.$mainControl.addClass("dialog"), this.$contentsArea.addClass("dialog"), this.createContentsAreaControls(this.$contentsArea), this.retrieveTableInfo(this.options.fnUnit.inData), this._initializePerfectScroll();
  }, o.prototype.createLeftArea = function () {
    this.$leftArea = $('<div class="brtc-va-editors-sheet-panels-propertiespanel-contents-area brtc-va-editors-sheet-panels-basepanel-left-area"></div>'), this.$mainControl.append(this.$leftArea);
  }, o.prototype.createRightArea = function () {
    this.$rightArea = $('<div class="brtc-va-editors-sheet-panels-propertiespanel-contents-area brtc-va-editors-sheet-panels-basepanel-right-area"></div>'), this.$mainControl.append(this.$rightArea);
  }, o.prototype.createContentsAreaControls = function (t) {
    this.$elements = {}, this.controls = {}, this.render = {
      property: this.renderProperties
    };
    this.options.controlSpec;

    this._createProperties();
  }, o.prototype._createProperties = function () {
    this._createObjectControl("method"), this._createDefaultControl("default"), this._createObjectArrayControl("objectives"), this._createObjectArrayControl("constraints"), this._createObjectArrayControl("submethod"), this._createObjectArrayControl("surrogate");
  }, o.prototype._createObjectControl = function (t) {
    var e,
        o = this;
    this.controls[t] = {};
    var r = this.options.controlSpec[t];
    r && r.params && r.params.forEach(function (r) {
      e = o.options.fnUnit.param[t][r.attr], o.controls[t][r.attr] = o._createOptControl(r, e);
    });
  }, o.prototype._createDefaultControl = function (t) {
    var e,
        o = this;
    this.controls[t] = {};
    var r = this.options.controlSpec[t];
    r && r.params && r.params.forEach(function (r) {
      e = o.options.fnUnit.param[r.attr], o.controls[t][r.attr] = o._createOptControl(r, e);
    });
  }, o.prototype._createObjectArrayControl = function (t) {
    var e,
        o = this.options.controlSpec[t];
    o && o.params && (o.attr = t, e = this.options.fnUnit.param[t], this.controls[t] = this._createOptControl(o, e));
  }, o.prototype._createOptControl = function (e, o) {
    var r = e.attr,
        n = {
      isMandatory: void 0 !== e.mandatory && e.mandatory,
      params: e.params,
      source: e.source,
      disabled: void 0 !== e.disabled && e.disabled,
      value: void 0 !== o ? o : e.default
    };
    if (e.multiple && (n.multiple = e.multiple), t.VA.Core.Editors.Sheet.Controls.Optimization[r]) return new t.VA.Core.Editors.Sheet.Controls.Optimization[r](this, n);
    console.warn(r + " control not yet implemented.");
  }, o.prototype.fillControlValues = function () {
    var t = this.dataMap && this.options.fnUnit.inData[0] ? this.dataMap[this.options.fnUnit.inData[0]].columns : [];
    if (this.columnControlList) for (var e = 0; e < this.columnControlList.length; e++) {
      this.columnControlList[e].setItems(t);
    }
  }, o.prototype.registerColumnControl = function (t) {
    this.columnControlList.push(t);
  }, o.prototype.renderValues = function () {
    e.renderValues.call(this), this._updatePerfectScroll();
  }, o.prototype._initializePerfectScroll = function () {
    this.$contentsArea.perfectScrollbar(), this.$leftArea.perfectScrollbar(), this.$rightArea.perfectScrollbar();
  }, o.prototype._updatePerfectScroll = function () {
    this.$contentsArea.perfectScrollbar("update"), this.$leftArea.perfectScrollbar("update"), this.$rightArea.perfectScrollbar("update");
  }, o.prototype.renderProperties = function () {
    this._renderObjectControl("method"), this._renderObjectArrayControl("objectives"), this._renderObjectArrayControl("constraints"), this._renderObjectArrayControl("submethod"), this._renderObjectArrayControl("surrogate"), this._renderDefaultControl("default");
  }, o.prototype._renderObjectControl = function (t) {
    var e = this,
        o = this.options.controlSpec[t];
    o && o.params && o.params.forEach(function (o) {
      e._renderOptControl(e.controls[t][o.attr]);
    });
  }, o.prototype._renderDefaultControl = function (t) {
    var e = this,
        o = this.options.controlSpec[t];
    o && o.params && o.params.forEach(function (o) {
      e._renderOptControl(e.controls[t][o.attr]);
    });
  }, o.prototype._renderObjectArrayControl = function (t) {
    var e = this.options.controlSpec[t];
    e && e.params && this._renderOptControl(this.controls[t]);
  }, o.prototype._renderOptControl = function (t) {
    t && t.renderControl();
  }, o.prototype.getParams = function () {
    return $.extend(!0, {}, this._getObjectControlValue("method"), this._getDefaultControlValue("default"), this._getObjectArrayControlValue("objectives"), this._getObjectArrayControlValue("constraints"), this._getObjectArrayControlValue("model"), this._getObjectArrayControlValue("submethod"), this._getObjectArrayControlValue("surrogate"));
  }, o.prototype._getObjectControlValue = function (t) {
    var e = {},
        o = {};

    for (var r in this.controls[t]) {
      this.controls[t][r] && "function" == typeof this.controls[t][r].getValue && (e = $.extend(!0, e, this.controls[t][r].getValue()));
    }

    return o[t] = e, o;
  }, o.prototype._getDefaultControlValue = function (t) {
    var e = {};

    for (var o in this.controls[t]) {
      this.controls[t][o] && "function" == typeof this.controls[t][o].getValue && $.extend(!0, e, this.controls[t][o].getValue());
    }

    return e;
  }, o.prototype._getObjectArrayControlValue = function (t) {
    var e = [],
        o = {};
    return this.controls[t] && (e = this.controls[t].getValue(), o[t] = e), o;
  }, o.prototype.createNumberInput = function (t, o, r, n) {
    var a = e.createNumberInput.call(this, t, o, r, n);
    return a.setValue = function (t) {
      this.$mainControl.val(t), this.$mainControl.change();
    }, a;
  }, t.VA.Core.Functions.Library.optDialogBase.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.optDialogBase.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.optPreprocessing = {
    category: "opt",
    defaultFnUnit: {
      func: "optPreprocessing",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        columns: [[]],
        "script-id": "optPreprocessing"
      },
      display: {
        label: "OPT Preprocessing",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function is preporccessing function for OPT",
    tags: ["OPT preprocessing", "OPT", "OPT Preprocessing", "Preprocessing"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    this.PARAM_NEW_NAME = "new-name", this.PARAM_NAME = "name", t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.options.fnUnit.inData);
  }, e.prototype.getPrimaryOperation = function () {
    return "OptPreprocessing";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMNS = "columns", this.TYPES = [{
      label: "Continuous",
      value: "continuous"
    }, {
      label: "Discrete Range",
      value: "discrete_range"
    }, {
      label: "Discrete Set Integer",
      value: "discrete_set_integer"
    }, {
      label: "Discrete Set Real",
      value: "discrete_set_real"
    }, {
      label: "Discrete Set String",
      value: "discrete_set_string"
    }], this.render = {
      columns: this.renderColumnsControl
    }, this.propertyControlArray = [], this.createControlExpander(), this.createOptpreControl(), this.createAddButton();
  }, e.prototype.createControlExpander = function () {
    this.addPropertyControl("Columns", function (t) {}, {
      mandatory: !0
    }), this.$contents = this.$contentsArea.find(".brtc-va-editors-sheet-controls-propertycontrol-contents");
  }, e.prototype.createAddButton = function () {
    var e = this;
    if (this.$contents.find(".brtc-va-editors-sheet-controls-propertycontrol-addbutton").length > 0) return !1;
    this.$addButton = $('<input type="button" class= "brtc-va-editors-sheet-controls-propertycontrol-addbutton" value="+ Add Column"/>'), this.$contents.append(this.$addButton), this.$addButton.jqxButton({
      theme: t.VA.Env.Theme,
      width: "100%",
      height: 25
    }), this.$addButton.click(function () {
      if (e.$addButton.detach(), e.createOptpreControl(), e.$addButton.appendTo(e.$contents), 1 != e.renderFlag) {
        var t = e.createCommand();
        e.executeCommand(t);
      }
    });
  }, e.prototype.createOptpreControl = function (t) {
    var e = this,
        o = new Object();
    if (o.$inputControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-deck"/>'), o.$inputWrapper = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-wrapper"/>'), o.$columnInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), o.$typeInput = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-input-operator"/>'), o.$newColumnInput = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-new-column-input" valid-type = "type1"/>'), o.$inputWrapper.append(o.$columnInput), o.$inputWrapper.append(o.$typeInput), o.$inputWrapper.append(o.$newColumnInput), this.createInput(o.$newColumnInput, {
      placeHolder: "Enter new column"
    }, "brtc-va-editors-sheet-controls-propertycontrol-new-columns"), e.propertyControlArray[0]) var r = $.map(e.TYPES, function (t, e) {
      return t.value;
    }),
        n = e.propertyControlArray[0].$typeInput.val(),
        a = -1 == $.inArray(n, r) ? 0 : $.inArray(n, r);
    this.createDropDownList(o.$typeInput, {
      source: e.TYPES,
      selectedIndex: a
    }, "brtc-va-editors-sheet-controls-propertycontrol-filter-input");
    var i = {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !0,
      sort: "ascending",
      expand: !0,
      changed: function changed(t, o) {
        if (1 != e.renderFlag) {
          var r = e.createCommand();
          e.executeCommand(r);
        }
      }
    };
    o.$removeButton = $('<div class ="brtc-va-editors-sheet-controls-propertycontrol-deck-remove"></div>'), o.$inputControl.append(o.$removeButton), o.$inputControl.append(o.$inputWrapper), this.$contents.append(o.$inputControl), o.columnsControl = this.createColumnList(o.$columnInput, i), o.columnsControl.setItems(this.columnNameArray), this.$contents.children() && $(this.$contents.children()[0]).find(".brtc-va-editors-sheet-controls-propertycontrol-deck-remove").css("display", "none"), this.createOptpreControlEvent(o), this.propertyControlArray.push(o);
  }, e.prototype.createOptpreControlEvent = function (t) {
    var e = this;
    t.$typeInput.on("change", function (t) {
      if (1 != e.renderFlag) {
        var o = e.createCommand();
        e.executeCommand(o);
      }
    }), t.$removeButton.click(function (t) {
      var o = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-deck").prevAll().length;

      if (o > -1 && e.propertyControlArray.splice(o, 1), $(this).parent().remove(), e.$contents.children(), 1 != e.renderFlag) {
        var r = e.createCommand();
        e.executeCommand(r);
      }

      t.stopPropagation();
    }), t.$newColumnInput.on("change", function (t) {
      if (1 != e.renderFlag) {
        var o = e.createCommand();
        e.executeCommand(o);
      }
    });
  }, e.prototype.fillControlValues = function () {
    var t = this;
    this.columnNameArray = [], this.columnNameArray = this.dataMap && this.options.fnUnit.inData[0] ? this.dataMap[this.options.fnUnit.inData[0]].columns : [];
    var e = [];
    $.each(this.columnNameArray, function (t, o) {
      "string" !== o.type && "number" !== o.type || e.push(o);
    }), $.each(this.propertyControlArray, function (o) {
      t.propertyControlArray[o].columnsControl.setItems(e);
    });
  }, e.prototype.renderValidation = function () {
    var t = this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-columnlist"),
        e = (this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-input-operator"), this.$parent.find(".brtc-va-editors-sheet-controls-propertycontrol-new-column-input"));

    for (var o in this.problems) {
      this.problems[o].param === this.PARAM_NAME && this.createValidationContent($(t[this.problems[o].paramIndex]).parent(), this.problems[o]), this.problems[o].param === this.PARAM_NEW_NAME && this.createValidationContent($(e[this.problems[o].paramIndex]).parent(), this.problems[o]);
    }
  }, e.prototype.renderColumnsControl = function () {
    var t = this.options.fnUnit.param.columns;

    if (t.length > 0) {
      for (var e in this.renderFlag = !0, this.$addButton.detach(), t) {
        e > this.propertyControlArray.length - 1 && this.createOptpreControl(), this.propertyControlArray[e].columnsControl.setSelectedItems(t[e].name ? [t[e].name] : []);
        var o = $.map(this.TYPES, function (t, e) {
          return t.value;
        });
        this.propertyControlArray[e].$typeInput.jqxDropDownList("selectIndex", -1 == $.inArray(t[e].type, o) ? 0 : $.inArray(t[e].type, o)), this.propertyControlArray[e].$newColumnInput.val(t[e]["new-name"]);
      }

      if (t.length < this.propertyControlArray.length) {
        for (var r = this.propertyControlArray.length - 1; r == t.length; r--) {
          $(this.propertyControlArray[r].$inputControl).remove();
        }

        this.propertyControlArray.splice(t.length, this.propertyControlArray.length - t.length);
      }

      this.$addButton.appendTo(this.$contents), this.renderFlag = !1;
    } else this.resetPropertyControls();
  }, e.prototype.resetPropertyControls = function () {
    for (var t = this.propertyControlArray.length - 1; t >= 0; t--) {
      0 === t ? (this.propertyControlArray[t].columnsControl.setSelectedItems([]), this.propertyControlArray[t].$typeInput.jqxDropDownList("selectIndex", 0), this.propertyControlArray[t].$newColumnInput.val("")) : ($(this.propertyControlArray[t].$inputControl).remove(), this.propertyControlArray.splice(t, 1));
    }
  }, e.prototype.createCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          columns: [],
          "script-id": "optPreprocessing"
        }
      }
    };
    return o.ref.param[this.PARAM_COLUMNS] = this.getAllColumnsValue(), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.getAllColumnsValue = function (t) {
    var e = [];

    for (var o in this.propertyControlArray) {
      var r = this.propertyControlArray[o].columnsControl.getSelectedItems()[0] ? this.propertyControlArray[o].columnsControl.getSelectedItems()[0] : "",
          n = this.propertyControlArray[o].$typeInput.val() ? this.propertyControlArray[o].$typeInput.val() : "",
          a = {
        name: r,
        "new-name": this.propertyControlArray[o].$newColumnInput.val() ? this.propertyControlArray[o].$newColumnInput.val().replace(/ /gi, "") : "",
        type: n
      };
      e.push(a);
    }

    return e;
  }, t.VA.Core.Functions.Library.optPreprocessing.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_NAME = "name", this.PARAM_NEW_NAME = "new-name", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addNameRule(), this.addNewColumnRule();
  }, e.prototype.addNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [],
          r = e.param.columns;
      0 === r.length && (a = t.checkColumnIsEmpty(e, t.PARAM_NAME, "", "Column", 0)) && o.push(a);

      for (var n in r) {
        var a,
            i = r[n][t.PARAM_NAME] || "";
        (a = t.checkColumnIsEmpty(e, t.PARAM_NAME, i, "Column", n)) && o.push(a);
      }

      return o;
    }), this.addRule(function (e) {
      var o = [],
          r = e.param.columns;

      for (var n in r) {
        var a = r[n][t.PARAM_NAME] || "",
            i = t.checkColumnExists(e, t.PARAM_NAME, a, 0);
        i && (i.paramIndex = n, o.push(i));
      }

      return o;
    });
  }, e.prototype.addNewColumnRule = function () {
    var t = this;
    this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = [];

        if ($.each(e.param.columns, function (r, n) {
          if (t.isEmptyForString(n[t.PARAM_NEW_NAME]) || t.isEmptyForString(n[t.PARAM_NEW_NAME].trim())) {
            var a = {
              errorCode: "BR-0033",
              param: t.PARAM_NEW_NAME,
              paramIndex: r,
              messageParam: ["New Column"]
            };
            o.push(t.problemFactory.createProblem(a, e));
          }
        }), 0 === e.param.columns.length) {
          var r = {
            errorCode: "BR-0033",
            param: t.PARAM_NEW_NAME,
            paramIndex: 0,
            messageParam: ["New Column"]
          };
          o.push(t.problemFactory.createProblem(r, e));
        }

        return o;
      }
    }), this.addRule(function (e) {
      var o = [];

      if (e.param.columns.length > 0) {
        var r = e.param.columns.map(function (e) {
          return e[t.PARAM_NEW_NAME];
        });
        $.each(e.param.columns, function (n, a) {
          var i = r.indexOf(a[t.PARAM_NEW_NAME]);

          if ("" != a[t.PARAM_NEW_NAME] && n != i && i > -1) {
            var s = {
              errorCode: "BR-0057",
              param: t.PARAM_NEW_NAME,
              paramIndex: n,
              messageParam: [a[t.PARAM_NEW_NAME], "New Column: " + (i + 1), "New Column: " + (n + 1)]
            };
            o.push(t.problemFactory.createProblem(s, e));
          }
        });
      }

      return o;
    });
  }, t.VA.Core.Functions.Library.optPreprocessing.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.parameterStudies = {
    category: "opt",
    defaultFnUnit: {
      func: "parameterStudies",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "optScript",
        method: {
          "method-name": "vector_parameter_study"
        },
        script: ""
      },
      display: {
        label: "Parameter Studies",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The function employ deterministic designs to explore the effect of parametric changes within simulation models, yielding one form of sensitivity analysis",
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 5,
      max: 5
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Functions.Library.optFuncBase.propertiesPanel.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.getPrimaryOperation = function () {
    return "ParameterStudies";
  }, o.prototype.getMethodSource = function () {
    return [{
      label: "Vector Parameter Study",
      value: "vector_parameter_study"
    }, {
      label: "List Parameter Study",
      value: "list_parameter_study"
    }, {
      label: "Centered Parameter Study",
      value: "centered_parameter_study"
    }, {
      label: "Multidim Parameter Study",
      value: "multidim_parameter_study",
      numOfOut: 5
    }];
  }, t.VA.Core.Functions.Library.parameterStudies.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.parameterStudies.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.sampling = {
    category: "opt",
    defaultFnUnit: {
      func: "sampling",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "optScript",
        method: {
          "method-name": "sampling"
        },
        script: ""
      },
      display: {
        label: "OPT Sampling",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "The function is selected using the sampling method selection",
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 8,
      max: 8
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Functions.Library.optFuncBase.propertiesPanel.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.getPrimaryOperation = function () {
    return "Sampling";
  }, o.prototype.getMethodSource = function () {
    return [{
      label: "Sampling",
      value: "sampling",
      numOfOut: 8
    }];
  }, t.VA.Core.Functions.Library.sampling.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.sampling.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.uncertaintyQuantification = {
    category: "opt",
    defaultFnUnit: {
      func: "uncertaintyQuantification",
      name: "PyFunction",
      inData: [],
      outData: [],
      param: {
        "script-id": "optScript",
        method: {
          "method-name": "sampling"
        },
        script: ""
      },
      display: {
        label: "Uncertainty Quantification",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    "in-range": {
      min: 1,
      max: 2
    },
    "out-range": {
      min: 8,
      max: 8
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Functions.Library.optFuncBase.propertiesPanel.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.getPrimaryOperation = function () {
    return "UncertaintyQuantification";
  }, o.prototype.getMethodSource = function () {
    return [{
      label: "Sampling",
      value: "sampling",
      numOfOut: 8
    }, {
      label: "Local Reliability",
      value: "local_reliability"
    }];
  }, t.VA.Core.Functions.Library.uncertaintyQuantification.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, t.VA.Core.Functions.Library.uncertaintyQuantification.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library["brightics.function.evaluation$plot_roc_pr_curve"] = {
    category: "evaluation",
    defaultFnUnit: {
      context: "python",
      func: "brightics.function.evaluation$plot_roc_pr_curve",
      name: "brightics.function.evaluation$plot_roc_pr_curve",
      tags: ["roc", "curve", "pr", "plot"],
      version: "3.6",
      inputs: {
        table: ""
      },
      outputs: {
        result: ""
      },
      meta: {
        table: {
          type: "table"
        },
        result: {
          type: "model"
        }
      },
      param: {
        label_col: "",
        probability_col: "",
        pos_label: "",
        fig_w: "",
        fig_h: "",
        group_by: []
      },
      display: {
        label: "Plot ROC and PR Curves",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Plot ROC Curve and PR Curve."
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.createContentsAreaControls = function (e) {
    var _this = this;

    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      label_col: this.renderLabelCol,
      probability_col: this.renderProbabilityCol,
      fig_w: this.renderFigureWidth,
      fig_h: this.renderFigureHeight,
      group_by: this.renderGroupBy,
      pos_label: function pos_label() {
        return _this.showPosLabel("String" === _this.controls.label_col.getInternalType(_this.options.fnUnit.param.label_col) || "" === _this.options.fnUnit.param.label_col);
      }
    }, this.controls = {}, this.$elements = {}, this.renderError = {}, this.createLabelColsControl(), this.createProbabilityColsControl(), this.createPositiveLabelControl(), this.createFigureWidthControl(), this.createFigureHeightControl(), this.createGroupByControl();
  }, e.prototype.renderLabelCol = function () {
    var t = this.options.fnUnit.param;
    this.controls.label_col.setSelectedItems([t.label_col]);
  }, e.prototype.renderPosLabel = function (t) {
    var e = this.options.fnUnit.param;
    t ? this.controls.pos_label_STR.val(e.pos_label) : this.controls.pos_label_NUM.setValue(e.pos_label);
  }, e.prototype.showPosLabel = function (t) {
    this.renderPosLabel(t), t ? (this.$elements.pos_label_STR.css("display", "unset"), this.$elements.pos_label_NUM.css("display", "none")) : (this.$elements.pos_label_STR.css("display", "none"), this.$elements.pos_label_NUM.css("display", "unset"));
  }, e.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param;
    this.controls.group_by.setSelectedItems(t.group_by);
  }, e.prototype.renderProbabilityCol = function () {
    var t = this.options.fnUnit.param;
    this.controls.probability_col.setSelectedItems([t.probability_col]);
  }, e.prototype.renderFigureWidth = function () {
    var t = this.options.fnUnit.param;
    this.controls.fig_w.setValue(t.fig_w);
  }, e.prototype.renderFigureHeight = function () {
    var t = this.options.fnUnit.param;
    this.controls.fig_h.setValue(t.fig_h);
  }, e.prototype.createPositiveLabelControl = function () {
    var _this2 = this;

    this.$elements.pos_label_STR = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>'), this.$elements.pos_label_NUM = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Positive Label", function (t) {
      (function (e) {
        t.append(_this2.$elements.pos_label_STR);
        var o = _this2;
        _this2.controls[e] = _this2.createInput(_this2.$elements.pos_label_STR, {}), _this2.$elements.pos_label_STR.on("change", function () {
          if (!o.isInputValueChanged("pos_label", $(this).val())) return;
          var t = o.createSetParameterValueCommand("pos_label", $(this).val());
          o.executeCommand(t);
        });
      })("pos_label_STR"), function (e) {
        t.append(_this2.$elements.pos_label_NUM);
        _this2.controls[e] = _this2.createNumericInput(_this2.$elements.pos_label_NUM, {
          numberType: "double"
        }), _this2.controls[e].onChange(function () {
          var t = _this2.controls[e].getValue();

          t = "" === t ? "" : Number(t);

          var o = _this2.createSetParameterValueCommand("pos_label", t);

          _this2.executeCommand(o);
        });
      }("pos_label_NUM");
    }, {
      mandatory: !1
    });
  }, e.prototype.createFigureWidthControl = function () {
    var _this3 = this;

    this.$elements.fig_w = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Figure Width", function (t) {
      t.append(_this3.$elements.fig_w);
      _this3.controls.fig_w = _this3.createNumericInput(_this3.$elements.fig_w, {
        numberType: "double"
      }), _this3.controls.fig_w.onChange(function () {
        var t = _this3.controls.fig_w.getValue();

        t = "" === t ? "" : Number(t);

        var e = _this3.createSetParameterValueCommand("fig_w", t);

        _this3.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.createFigureHeightControl = function () {
    var _this4 = this;

    this.$elements.fig_h = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>'), this.addPropertyControl("Figure Height", function (t) {
      t.append(_this4.$elements.fig_h);
      _this4.controls.fig_h = _this4.createNumericInput(_this4.$elements.fig_h, {
        numberType: "double"
      }), _this4.controls.fig_h.onChange(function () {
        var t = _this4.controls.fig_h.getValue();

        t = "" === t ? "" : Number(t);

        var e = _this4.createSetParameterValueCommand("fig_h", t);

        _this4.executeCommand(e);
      });
    }, {
      mandatory: !1
    });
  }, e.prototype.createProbabilityColsControl = function () {
    var _this5 = this;

    this.$elements.probability_col = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Probability Column", function (t) {
      t.append(_this5.$elements.probability_col);
      var e = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, e) {
          var o = _this5.createSetParameterValueCommand("probability_col", e.items[0] || "");

          _this5.executeCommand(o);
        }
      };
      _this5.controls.probability_col = _this5.createColumnList(_this5.$elements.probability_col, e);
    }, {
      mandatory: !0
    });
  }, e.prototype.createLabelColsControl = function () {
    var _this6 = this;

    this.$elements.label_col = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Label Column", function (t) {
      t.append(_this6.$elements.label_col);
      var e = {
        multiple: !1,
        maxRowCount: "",
        changed: function changed(t, e) {
          var o = "String" === _this6.controls.label_col.getInternalType(e.items[0]),
              r = _this6.options.fnUnit.param.pos_label;

          var n = o ? "" + r : isNaN(parseFloat(r)) ? "" : parseFloat(r);

          var a = _this6.createSetParameterValueInLabelColsCommand([["label_col", e.items[0] || ""], ["pos_label", n]]);

          _this6.executeCommand(a), _this6.showPosLabel(o);
        }
      };
      _this6.controls.label_col = _this6.createColumnList(_this6.$elements.label_col, e);
    }, {
      mandatory: !0
    });
  }, e.prototype.createSetParameterValueInLabelColsCommand = function (e, o) {
    var _this7 = this;

    if (o === void 0) {
      o = !0;
    }

    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return e.forEach(function (t) {
      var e = t[0],
          n = t[1];
      if (!o && _this7.getParam(e) === n) return null;
      0 === n || n || "boolean" == typeof n || (n = ""), r.ref.param[e] = n;
    }), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
  }, e.prototype.createGroupByControl = function () {
    var _this8 = this;

    this.$elements.group_by = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Group By", function (t) {
      t.append(_this8.$elements.group_by);
      var e = {
        multiple: !0,
        changed: function changed(t, e) {
          var o = _this8.createSetParameterValueCommand("group_by", e.items || []);

          _this8.executeCommand(o);
        }
      };
      _this8.controls.group_by = _this8.createColumnList(_this8.$elements.group_by, e);
    }, {
      mandatory: !1
    });
  }, e.prototype.fillControlValues = function () {
    var t = this.FnUnitUtils.getInputs(this.options.fnUnit),
        e = this.dataMap && t.table ? this.dataMap[t.table].columns : [];
    this.controls.label_col.setItems(e), this.controls.probability_col.setItems(e), this.controls.group_by.setItems(e);
  }, e.prototype.renderValidation = function () {}, t.VA.Core.Functions.Library["brightics.function.evaluation$plot_roc_pr_curve"].propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library["brightics.function.evaluation$plot_roc_pr_curve"].validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.addColumnIfPython = {
    category: "extraction",
    defaultFnUnit: {
      func: "addColumnIfPython",
      name: "brightics.function.extraction$add_expression_column_if",
      context: "python",
      version: "3.6",
      param: {
        expr_type: "sqlite",
        new_col: "",
        conditions: [],
        values: [],
        else_value: ""
      },
      inputs: {
        table: ""
      },
      outputs: {
        out_table: ""
      },
      meta: {
        table: {
          type: "table"
        },
        out_table: {
          type: "table"
        }
      },
      display: {
        label: "Add Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["expr_type", "values", "else_value"],
    description: "This function generates a new column based on a given formula.",
    tags: ["Python"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit)), this.options.isRendered = !0;
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.control = {}, this.createOpenDialogButton();
  }, e.prototype.createOpenDialogButton = function () {
    var t = this;
    this.$summaryControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Add Column", function (e) {
      e.append(t.$summaryControl), t.control.summary = t.createTextArea(t.$summaryControl, {
        height: "300px",
        disabled: !0
      }, "brtc-style-textarea"), t.$summaryControl.on("click", function (e) {
        t.openScriptEditor();
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.openScriptEditor = function () {
    var e = this;
    new t.VA.Core.Dialogs.FunctionProperties.AddColumnIfDialog(e.$mainControl, {
      title: "Add Column",
      fnUnit: e.options.fnUnit,
      dataProxy: e.options.dataProxy,
      modelEditor: e.options.modelEditor,
      close: function close(t) {
        if (t.OK) {
          e.setSummaryString(t.param);
          var o = e.createCommonCommand(t.param);
          e.executeCommand(o);
        }
      }
    });
  }, e.prototype.renderValues = function (t) {
    this.setSummaryString(this.options.fnUnit.param);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "add-column" === this.problems[t].param && this.createValidationContent(this.$summaryControl, this.problems[t]);
    }
  }, e.prototype.setSummaryString = function (t) {
    if (t.new_col) {
      var e = "";
      e += "Expression Type: " + t.expr_type + "\n", e += "Column Name: " + t.new_col + "\n\n", t.conditions.forEach(function (o, r) {
        "" != o && (e += o + "\n\t=> " + t.values[r] + "\n");
      }), e += "ELSE \n\t=>" + t.else_value, this.control.summary.val(e);
    } else this.control.summary.val("New column name is empty");
  }, e.prototype.createCommonCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: e
      }
    };
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.addColumnIfPython.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addSummaryRequired();
  }, e.prototype.addSummaryRequired = function () {
    var t = this;
    this.addRule(function (e) {
      if (this._hasSchema(e)) {
        return t._checkArrayIsEmpty({
          errorCode: "BR-0033",
          param: "add-column",
          messageParam: ["Add Column"]
        }, e, e.param.new_col);
      }
    });
  }, t.VA.Core.Functions.Library.addColumnIfPython.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.addColumnPython = {
    category: "extraction",
    defaultFnUnit: {
      func: "addColumnPython",
      name: "brightics.function.extraction$add_expression_column",
      context: "python",
      version: "3.6",
      param: {
        expr_type: "sqlite",
        new_cols: [],
        formulas: []
      },
      inputs: {
        table: ""
      },
      outputs: {
        out_table: ""
      },
      meta: {
        table: {
          type: "table"
        },
        out_table: {
          type: "table"
        }
      },
      display: {
        label: "Add Function Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["expr_type"],
    description: "This function generates a new column based on a given formula.",
    tags: ["Python"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      new_cols: this.renderColumnName,
      expr_type: this.renderExprType,
      formulas: this.renderExpr
    }, this.control = {
      new_cols: [],
      expr_type: "",
      formulas: []
    }, this.$elements = {
      new_cols: [],
      expr_type: "",
      formulas: []
    }, this.createColumnControl(), this.createExprTypeControl(), this.createExprControl();
  }, e.prototype.createColumnControl = function () {
    var t = this;
    this.addPropertyControl("New Column Name", function (e) {
      var o = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
      e.append(o);
      var r = this.createInput(o, {
        placeHolder: "Enter value"
      }, "brtc-va-editors-sheet-controls-width-12", {
        margin: "2px 0"
      });
      o.on("change", function (e) {
        if (1 != t.renderFlag) {
          var o = $(this).val();
          if (!t.isInputValueChanged("new_cols", o)) return;
          t.executeCommonCommand("new_cols", [o]);
        }
      }), r.setValue = function (t) {
        o.val(t);
      }, t.control.new_cols.push(r), t.$elements.new_cols.push(o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createExprTypeControl = function () {
    var t = this,
        e = [{
      label: "SQLite",
      value: "sqlite"
    }, {
      label: "Python",
      value: "python"
    }];
    this.addPropertyControl("Expression Type", function (o) {
      var r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
      o.append(r);
      var n = this.createDropDownList(r, {
        placeHolder: "Enter value",
        source: e
      });
      n.on("change", function () {
        t.executeCommonCommand("expr_type", n.getValue());
      }), n.setValue = function (t) {
        void 0 !== t && this.jqxDropDownList("selectItem", t);
      }, n.getValue = function () {
        return this.jqxDropDownList("getSelectedItem").value;
      }, t.control.expr_type = n, t.$elements.expr_type = r;
    }, {
      mandatory: !0
    });
  }, e.prototype.createExprControl = function () {
    var t = this,
        e = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'),
        o = $('<textarea class="brtc-va-editors-sheet-controls-textarea"></textarea>');
    e.append(o), this.addPropertyControl("Expression", function (r) {
      r.append(e);
      var n = t.createTextAreaControl(o, {
        placeholder: "sepal_length + 1",
        hintOptions: {
          list: []
        }
      });
      n.onChange(function () {
        t.executeCommonCommand("formulas", [n.getValue()]);
      }), t.control.formulas.push(n), t.$elements.formulas.push(o);
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnData = this.getColumnsOfInTable(0, ["number", "string"]).map(function (t) {
      return t.name;
    });
    var t = this;
    this.control.formulas.forEach(function (e) {
      e.codeMirror.options.hintOptions.list = t.columnData.slice();
    });
  }, e.prototype.renderValues = function () {
    this.renderColumnName(), this.renderExprType(), this.renderExpr();
  }, e.prototype.renderColumnName = function () {
    var t = this.options.fnUnit.param.new_cols,
        e = this;
    t.forEach(function (t, o) {
      e.control.new_cols[o].setValue(t);
    });
  }, e.prototype.renderExprType = function () {
    var t = this.options.fnUnit.param.expr_type;
    this.control.expr_type.setValue(t);
  }, e.prototype.renderExpr = function () {
    var t = this.options.fnUnit.param.formulas,
        e = this;
    t.forEach(function (t, o) {
      e.control.formulas[o].setValue(t);
    });
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      var e = this.problems[t].paramIndex;
      "new_cols" === this.problems[t].param && this.createValidationContent(this.$elements.new_cols[e], this.problems[t]), "formulas" === this.problems[t].param && this.createValidationContent(this.$elements.formulas[e], this.problems[t]);
    }
  }, e.prototype.executeCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.addColumnPython.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addRule(this.columnNameRule), this.addRule(this.columnExprRule);
  }, e.prototype.columnNameRule = function (t) {
    var e = this,
        o = [];

    if (this._hasSchema(t)) {
      if ($.each(t.param.new_cols, function (r, n) {
        e.isEmptyForString(n) && o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "new_cols",
          paramIndex: r,
          messageParam: ["New Column Name"]
        }, t));
      }), 0 === t.param.new_cols.length) {
        var r = {
          errorCode: "BR-0033",
          param: "new_cols",
          paramIndex: 0,
          messageParam: ["New Column Name"]
        };
        o.push(e.problemFactory.createProblem(r, t));
      }

      return o;
    }
  }, e.prototype.columnExprRule = function (t) {
    var e = this,
        o = [];

    if (this._hasSchema(t)) {
      if ($.each(t.param.formulas, function (r, n) {
        e.isEmptyForString(n) && o.push(e.problemFactory.createProblem({
          errorCode: "BR-0033",
          param: "formulas",
          paramIndex: r,
          messageParam: ["Expression"]
        }, t));
      }), 0 === t.param.formulas.length) {
        var r = {
          errorCode: "BR-0033",
          param: "formulas",
          paramIndex: 0,
          messageParam: ["Expression"]
        };
        o.push(e.problemFactory.createProblem(r, t));
      }

      return o;
    }
  }, t.VA.Core.Functions.Library.addColumnPython.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.addFunctionColumnsPython = {
    category: "extraction",
    defaultFnUnit: {
      func: "addFunctionColumnsPython",
      name: "brightics.function.transform$sql_execute",
      context: "python",
      version: "3.6",
      param: {
        query: ""
      },
      inputs: {
        tables: ""
      },
      outputs: {
        out_table: ""
      },
      meta: {
        tables: {
          type: "table"
        },
        out_table: {
          type: "table"
        }
      },
      display: {
        label: "Add Function Columns",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: [],
    description: "This function generates a new column based on a given formula.",
    tags: ["Python"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.getPrimaryOperation = function () {
    return "brightics.function.extraction$add_function_columns";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.control = {
      CONTROL_SUMMARY: []
    }, this.createOpenDialogButton();
  }, e.prototype.createOpenDialogButton = function () {
    var t = this,
        e = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>');
    this.addPropertyControl("Add Column", function (o) {
      o.append(e), t.control.summary = t.createTextArea(e, {
        height: "300px",
        disabled: !0
      }, "brtc-style-textarea"), e.on("click", function (e) {
        t.openScriptEditor();
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.openScriptEditor = function () {
    var e = this;
    new t.VA.Core.Dialogs.FunctionProperties.AddColumnDialog(e.$mainControl, {
      title: "Add Column",
      fnUnit: e.options.fnUnit,
      dataProxy: e.options.dataProxy,
      modelEditor: e.options.modelEditor,
      columns: e.columnData,
      additionalHint: e.hintList,
      close: function close(t) {
        if (t.OK) {
          e.setSummaryString(t.param);
          var o = e.createCommonCommand(t.param);
          e.executeCommand(o);
        }
      }
    });
  }, e.prototype.setSummaryString = function (t) {
    if (t.query) {
      var e = "";
      e += t.query.substring(7, t.query.length), this.control.summary.val(e);
    } else this.control.summary.val("New column name is empty");
  }, e.prototype.createCommonCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: e
      }
    };
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.fillControlValues = function () {
    var e = this;
    this.columnData = this.getColumnsOfInTable(0, ["number", "string"]).map(function (t) {
      return t.name;
    }), this.hintList = [];
    var o = {
      url: "api/va/v3/ws/functions/" + this.options.fnUnit.func,
      type: "GET",
      blocking: !1,
      contentType: "application/json; charset=utf-8"
    };
    $.ajax(o).done(function (t) {
      var o = t.hintList;

      for (var r in o) {
        e.hintList.push(o[r]);
      }
    }).fail(function (e) {
      t.VA.Core.Utils.WidgetUtils.openBadRequestErrorDialog(e);
    });
  }, e.prototype.renderValues = function () {
    this.setSummaryString(this.options.fnUnit.param);
  }, e.prototype.executeCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.addFunctionColumnsPython.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.addFunctionColumnsPython.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.createTablePython = {
    category: "io",
    defaultFnUnit: {
      func: "createTablePython",
      name: "brightics.function.io$create_table",
      context: "python",
      version: "3.6",
      outputs: {
        out_table: ""
      },
      meta: {
        out_table: {
          type: "table"
        }
      },
      param: {
        data_array: [[]],
        type_array: [],
        col_names: []
      },
      display: {
        label: "Create Table",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["data_array", "type_array", "col_names"],
    description: "This function creates a dataframe with the given input.",
    tags: ["Create Table", "CreateTable", "Create", "Table"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), Studio.getInstance().doValidate(this.options.fnUnit.parent()), this.options.isRendered = !0, this.renderValues();
  }, e.prototype.setContentsEditable = function (t) {}, e.prototype.getPrimaryOperation = function () {
    return "brightics.function.io$create_table";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_COLUMN_NAMES = "col_names", this.PARAM_TYPE_ARRAY = "type_array", this.PARAM_DATA_ARRAY = "data_array", this.COLUMN_TYPE_DOUBLE = "double", this.COLUMN_TYPE_INTEGER = "int", this.COLUMN_TYPE_STRING = "string", this.COLUMN_TYPE_LABEL = {}, this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_DOUBLE] = "Double", this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_INTEGER] = "Integer", this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_STRING] = "String", this.COLUMNS_SOURCE = [{
      label: this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_DOUBLE],
      value: this.COLUMN_TYPE_DOUBLE
    }, {
      label: this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_INTEGER],
      value: this.COLUMN_TYPE_INTEGER
    }, {
      label: this.COLUMN_TYPE_LABEL[this.COLUMN_TYPE_STRING],
      value: this.COLUMN_TYPE_STRING
    }], this.createOpenEditorButton(), this.createColumnsView();
  }, e.prototype.renderValues = function (t) {
    this.renderColumnsView();
  }, e.prototype.createOpenEditorButton = function () {
    var e = this;
    this.$editorButtonArea = $('<div class="brtc-va-editors-sheet-editor-button-area"/>'), this.addPropertyControl("Edit", function (o) {
      o.append(e.$editorButtonArea);
      var r = $('<input class="brtc-va-editors-sheet-panels-properties-button" type="button" value="Open Editor"/>');
      e.$editorButtonArea.append(r), r.jqxButton({
        theme: t.VA.Env.Theme,
        width: "100%",
        height: 25
      }), r.click(function (o) {
        new t.VA.Core.Dialogs.InputDataFrameEditorDialog($(o.target), {
          width: 1400,
          height: 700,
          maxWidth: 1400,
          maxHeight: 700,
          title: "Create Table",
          fnUnit: e.options.fnUnit,
          context: "python",
          close: function close(t) {
            if (t.OK) {
              var o = $.extend(!0, [], t[e.PARAM_COLUMN_NAMES]),
                  r = $.extend(!0, [], t[e.PARAM_DATA_ARRAY]);
              e.generateColumnType(o, r), e.executeCommonCommand([e.PARAM_COLUMN_NAMES, e.PARAM_DATA_ARRAY, e.PARAM_TYPE_ARRAY], [o, r, e.typeArray]), e.renderColumnsView();
            }
          }
        });
      });
    });
  }, e.prototype.createColumnsView = function () {
    var t = this;
    this.$columns = $('<div class="brtc-va-editors-sheet-columns-view brtc-va-editors-sheet-controls-wrapper">   <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table">       <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-header-area">           <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-header">               <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-header-column">Name</div>               <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-header-column">Type</div>           </div>       </div>       <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-row-area-wrapper">           <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-row-area"></div>       </div>   </div></div>'), this.addPropertyControl("Columns", function (e) {
      e.append(t.$columns), t.$rowAreaScrollbarWrapper = t.$columns.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row-area-wrapper"), t.$rowArea = t.$columns.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row-area"), t.$rowAreaScrollbarWrapper.perfectScrollbar();
    }, {
      mandatory: !0
    });
  }, e.prototype._createColumnsRow = function (t, e) {
    var o = this,
        r = this.$rowArea,
        n = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-row">   <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-column"><input class="brtc-va-editors-sheet-columns-table-input"/></div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-columns-table-column"><div class="brtc-va-editors-sheet-columns-table-dropdownlist"></div></div></div>');
    r.append(n);
    var a = this.createInput(n.find(".brtc-va-editors-sheet-columns-table-input"), {
      disabled: !0
    }),
        i = this.createDropDownList(n.find(".brtc-va-editors-sheet-columns-table-dropdownlist"), {
      source: this.COLUMNS_SOURCE,
      displayMember: "label",
      valueMember: "value"
    });
    i.on("change", function (t) {
      if (o.controlsRendered && "none" !== t.args.type) {
        var e = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").prevAll().length,
            r = $.extend(!0, [], o.options.fnUnit.param[o.PARAM_TYPE_ARRAY]);
        r[e] = t.args.item.value, o.executeCommonCommand(o.PARAM_TYPE_ARRAY, r);
      }
    }), a.val(t), i.val(e);
  }, e.prototype.executeCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    if ($.isArray(e) && $.isArray(o) && e.length === o.length) for (var n = 0; n < e.length; n++) {
      r.ref.param[e[n]] = o[n];
    } else r.ref.param[e] = o;
    var a = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(a);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      this.problems[t].param === this.PARAM_COLUMN_NAMES && this.createValidationContent(this.$columns, this.problems[t]);
    }
  }, e.prototype.renderColumnsView = function () {
    this.controlsRendered = !1;
    var t,
        e = this.options.fnUnit.param[this.PARAM_COLUMN_NAMES],
        o = this.options.fnUnit.param[this.PARAM_TYPE_ARRAY];

    for (t = 0; t < e.length; t++) {
      this._renderColumnsRow(t, e[t], o[t]);
    }

    for (var r = this.$rowArea.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").length - 1; r >= t; r--) {
      var n = this.$rowArea.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").eq(r);
      n.length && n.remove();
    }

    this.$rowAreaScrollbarWrapper.perfectScrollbar("update"), this.controlsRendered = !0;
  }, e.prototype._renderColumnsRow = function (t, e, o) {
    if (this.$rowArea.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").eq(t).length) {
      var r = this.$rowArea.find(".brtc-va-editors-sheet-controls-propertycontrol-columns-table-row").eq(t),
          n = r.find(".brtc-va-editors-sheet-columns-table-input"),
          a = r.find(".brtc-va-editors-sheet-columns-table-dropdownlist");
      n.val() != e && n.val(e), a.val() != o && a.val(o);
    } else this._createColumnsRow(e, o);
  }, e.prototype.generateColumnType = function (t, e) {
    this.typeArray = [];
    var o = this.options.fnUnit.param[this.PARAM_TYPE_ARRAY];

    for (var r in t) {
      if (o[r]) this.typeArray.push(o[r]);else {
        var n = !1,
            a = !1,
            i = !1;

        for (var s in e) {
          var l = e[s][r];
          if ("" !== l) if (/^[0-9.]+$/.test(l) && 2 == l.split(".").length) n = !0;else {
            if (!/^[0-9]+$/.test(l)) {
              i = !0;
              break;
            }

            a = !0;
          }
        }

        var c = this.COLUMN_TYPE_STRING;
        i ? this.typeArray.push(this.COLUMN_TYPE_STRING) : n ? this.typeArray.push(this.COLUMN_TYPE_DOUBLE) : a ? this.typeArray.push(this.COLUMN_TYPE_INTEGER) : this.typeArray.push(c);
      }
    }
  }, t.VA.Core.Functions.Library.createTablePython.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_DATA_ARRAY = "data_array", this.PARAM_TYPE_ARRAY = "type_array", this.PARAM_COLUMN_NAMES = "col_names", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addDataArrayRule(), this.addTypeArrayRule(), this.addColumnNamesRule();
  }, e.prototype.addDataArrayRule = function () {
    this.addRule(function (t) {});
  }, e.prototype.addTypeArrayRule = function () {
    this.addRule(function (t) {});
  }, e.prototype.addColumnNamesRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = {
        errorCode: "BR-0033",
        param: this.PARAM_COLUMN_NAMES,
        messageParam: ["Columns"]
      };
      if (t.isEmptyForArray(e.param[this.PARAM_COLUMN_NAMES])) return t.problemFactory.createProblem(o, e);
    });
  }, t.VA.Core.Functions.Library.createTablePython.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.loadModel = {
    category: "io",
    defaultFnUnit: {
      func: "loadModel",
      name: "brightics.function.io$load_model",
      outputs: {
        model: ""
      },
      meta: {
        model: {
          type: "model"
        }
      },
      param: {
        path: ""
      },
      version: "3.6",
      context: "python",
      display: {
        label: "Load Model",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Load Model",
    mandatory: [],
    tags: ["load", "json", "model"]
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      path: this.renderModelPath
    }, this.createPathControl();
  }, e.prototype.createPathControl = function () {
    var t = this;
    this.$pathControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" />'), this.$pathControlWrapper = this.addPropertyControl("Path", function (e) {
      e.append(this.$pathControl), t.createInput(t.$pathControl), t.$pathControl.on("change", function (e) {
        t.isInputValueChanged("path", $(this).val()) && t.createInputCommand("path", $(this).val());
      });
    });
  }, e.prototype.renderPath = function () {
    this.$pathControl.val(this.FnUnitUtils.getParam(this.options.fnUnit).path);
  }, e.prototype.fillControlValues = function () {}, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.loadModel.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.readFromDb = {
    category: "io",
    defaultFnUnit: {
      func: "readFromDb",
      name: "brightics.function.io$read_from_db",
      param: {
        datasource: {
          metadata: "datasource",
          datasourceName: ""
        },
        sql: "SELECT "
      },
      meta: {
        table: {
          type: "table"
        }
      },
      context: "python",
      version: "3.6",
      outputs: {
        table: ""
      },
      display: {
        label: "Read from DB",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Read data from database.",
    mandatory: [],
    tags: ["Load", "DB Reader", "DB", "Reader", "unload", "hdfs"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.setContentsEditable(!1);
  }, e.prototype.getPrimaryOperation = function () {
    return "brightics.function.io$read_from_db";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      datasource: this.renderDataSource,
      sql: this.renderQueryStatement
    }, this.createDataSourceControl(), this.createQueryStatementControl();
  }, e.prototype.createDataSourceControl = function () {
    var t = this,
        e = new $.jqx.dataAdapter({
      datatype: "json",
      datafields: [{
        name: "datasourceName",
        type: "string"
      }, {
        name: "datasourceType",
        type: "string"
      }],
      url: "api/va/v2/datasources?type=RDB"
    });
    this.addPropertyControl("Data Source", function (o) {
      t.$dataSourceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), o.append(t.$dataSourceControl), t.$dataSourceControl.on("bindingComplete", function (e) {
        t.setContentsEditable(!0);
      }), t.createDropDownList(t.$dataSourceControl, {
        source: e,
        displayMember: "datasourceName",
        valueMember: "datasourceName",
        placeHolder: "Select DataSource"
      }), t.$dataSourceControl.on("change", function (e) {
        var o = t.createSetParameterValueCommand("datasource", {
          metadata: "datasource",
          datasourceName: t.$dataSourceControl.val()
        });
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createQueryStatementControl = function () {
    var e = this;
    this.addPropertyControl("Query Statement", function (o) {
      var r = $('<textarea class="brtc-va-editors-sheet-controls-sqlcontrol"></textarea>');
      o.append(r), e.sqlEditViewer = e.createTextAreaControl(r, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: "text/x-sql",
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), e.sqlEditViewer.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        new t.VA.Core.Dialogs.DBReaderSqlEditorDialog(e.$mainControl, {
          mode: "text/x-sql",
          additionalHint: e.hintList,
          fnUnit: e.options.fnUnit,
          statement: e.sqlEditViewer.codeMirror.getValue(),
          scriptType: "SQL Editor",
          scriptOnly: !0,
          close: function close(t) {
            if (t.OK) {
              e.redrawQueryStatement(t.queryStatement);
              var o = e.createSetParameterValueCommand("sql", t.queryStatement, !1);
              o && e.executeCommand(o);
            }
          },
          title: "Query Statement"
        });
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.redrawQueryStatement = function (t) {
    this.sqlEditViewer.setValue(t), this.selectMarker = this.sqlEditViewer.codeMirror.markText({
      line: 0,
      ch: 0
    }, {
      line: 0,
      ch: 7
    }, {
      readOnly: !0,
      inclusiveLeft: !0,
      atomic: !0
    }), this.sqlEditViewer.codeMirror.setSize("100%", "300px");
  }, e.prototype.renderDataSource = function () {
    var t = this.options.fnUnit.param.datasource.datasourceName;
    t ? this.$dataSourceControl.jqxDropDownList("val", t) : this.$dataSourceControl.jqxDropDownList("clearSelection");
  }, e.prototype.renderQueryStatement = function () {
    var t = this.options.fnUnit.param.sql;
    this.redrawQueryStatement(t);
  }, e.prototype.renderValidation = function () {
    var t = {
      datasourceName: this.$dataSourceControl.parent()
    };

    for (var _iterator = this.problems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref3 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref3 = _i.value;
      }

      var _e2 = _ref3;
      var o = t[_e2.param];
      o && this.showValidation(o, _e2);
    }
  }, t.VA.Core.Functions.Library.readFromDb.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addDatasourceRule();
  }, e.prototype.addDatasourceRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "datasourceName",
        messageParam: ["Data Source"]
      }, e, e.param.datasource.datasourceName);
    });
  }, t.VA.Core.Functions.Library.readFromDb.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.readFromS3 = {
    category: "io",
    defaultFnUnit: {
      func: "readFromS3",
      name: "brightics.function.io$read_from_s3",
      outputs: {
        table: ""
      },
      meta: {
        table: {
          type: "table"
        }
      },
      param: {
        datasource: {
          metadata: "s3",
          datasourceName: ""
        },
        object_key: ""
      },
      version: "3.6",
      context: "python",
      display: {
        label: "Read from S3",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Read a csv file from Amazon S3.",
    mandatory: [],
    tags: ["Load", "S3", "Reader", "unload"],
    "in-range": {
      min: 0,
      max: 0
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this);
  }, e.prototype.getPrimaryOperation = function () {
    return "brightics.function.io$read_from_s3";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      datasource: this.renderDataSource,
      object_key: this.renderObjectKey
    }, this.createDataSourceControl(), this.createObjectKeyControl();
  }, e.prototype.createDataSourceControl = function () {
    var t = this,
        e = new $.jqx.dataAdapter({
      datatype: "json",
      datafields: [{
        name: "datasourceName",
        type: "string"
      }, {
        name: "datasourceType",
        type: "string"
      }],
      url: "api/admin/v2/s3"
    });
    this.addPropertyControl("Data Source", function (o) {
      t.$dataSourceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), o.append(t.$dataSourceControl), t.$dataSourceControl.on("bindingComplete", function (e) {
        t.setContentsEditable(!0);
      }), t.createDropDownList(t.$dataSourceControl, {
        source: e,
        displayMember: "datasourceName",
        valueMember: "datasourceName",
        placeHolder: "Select DataSource"
      }), t.$dataSourceControl.on("change", function (e) {
        var o = t.createSetParameterValueCommand("datasource", {
          metadata: "s3",
          datasourceName: t.$dataSourceControl.val()
        });
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createObjectKeyControl = function () {
    var t = this;
    this.$objectKeyControl = $('<input class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Object Key", function (e) {
      e.append(t.$objectKeyControl), t.$objectKey = t.createInput(t.$objectKeyControl, {
        placeHolder: "Enter a Object Key."
      }), t.$objectKey.on("change", function () {
        var e = t.createSetParameterValueCommand("object_key", t.$objectKey.val(), !1);
        e && t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderObjectKey = function () {
    var t = this.options.fnUnit.param.object_key;
    this.$objectKey.val(t);
  }, e.prototype.renderDataSource = function () {
    var t = this.options.fnUnit.param.datasource.datasourceName;
    t ? this.$dataSourceControl.jqxDropDownList("val", t) : this.$dataSourceControl.jqxDropDownList("clearSelection");
  }, e.prototype.renderValidation = function () {
    var t = {
      datasourceName: this.$dataSourceControl.parent(),
      object_key: this.$objectKeyControl
    };

    for (var _iterator2 = this.problems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref4 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref4 = _i2.value;
      }

      var _e3 = _ref4;
      var o = t[_e3.param];
      o && this.showValidation(o, _e3);
    }
  }, t.VA.Core.Functions.Library.readFromS3.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addDatasourceRule(), this.addObjectKeyRule();
  }, e.prototype.addDatasourceRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "datasourceName",
        messageParam: ["Data Source"]
      }, e, e.param.datasource.datasourceName);
    });
  }, e.prototype.addObjectKeyRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "object_key",
        messageParam: ["Object Key"]
      }, e, e.param.object_key);
    });
  }, t.VA.Core.Functions.Library.readFromS3.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.unloadModel = {
    category: "io",
    defaultFnUnit: {
      func: "unloadModel",
      name: "brightics.function.io$unload_model",
      inputs: {
        in_1: ""
      },
      outputs: {
        model: ""
      },
      meta: {
        in_1: {
          type: "model"
        }
      },
      param: {
        target: "",
        path: "",
        linked: {
          name: "",
          param: {},
          outData: [],
          outputs: {}
        }
      },
      version: "3.6",
      context: "python",
      display: {
        label: "Unload Model",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Export model/ meta data",
    mandatory: [],
    tags: ["unload", "train", "model", "meta"]
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      target: this.renderTarget,
      path: this.renderPath
    }, this.createTargetControl(), this.createPathControl();
  }, e.prototype.createTargetControl = function () {
    var t = this;
    this.$target = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), this.targetSource = this.FnUnitUtils.getPreviousFnUnits(this.options.fnUnit);
    this.addPropertyControl("Target", function (e) {
      t.createDropDownList(this.$target, {
        source: this.targetSource
      }), e.append(this.$target.parent()), t.$target.on("change", function () {
        t.isInputValueChanged("target", $(this).val()) && t.createInputCommand("target", $(this).val());
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createPathControl = function () {
    var t = this;
    this.$pathControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" />'), this.$pathControlWrapper = this.addPropertyControl("Path", function (e) {
      e.append(this.$pathControl), t.createInput(t.$pathControl), t.$pathControl.on("change", function (e) {
        t.isInputValueChanged("path", $(this).val()) && t.createInputCommand("path", $(this).val());
      });
    });
  }, e.prototype.renderTarget = function () {
    this.$target.val(this.FnUnitUtils.getParam(this.options.fnUnit).target);
  }, e.prototype.renderPath = function () {
    this.$pathControl.val(this.FnUnitUtils.getParam(this.options.fnUnit).path);
  }, e.prototype.fillControlValues = function () {}, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.unloadModel.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.writeToDb = {
    category: "io",
    defaultFnUnit: {
      func: "writeToDb",
      name: "brightics.function.io$write_to_db",
      param: {
        datasource: {
          metadata: "datasource",
          datasourceName: ""
        },
        tableName: "",
        ifExists: "fail"
      },
      meta: {
        table: {
          type: "table"
        }
      },
      context: "python",
      version: "3.6",
      inputs: {
        table: ""
      },
      display: {
        label: "Write to DB",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Write data to database.",
    mandatory: [],
    tags: ["Load", "DB Reader", "DB", "Reader", "unload", "hdfs"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 0,
      max: 0
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.setContentsEditable(!1);
  }, e.prototype.getPrimaryOperation = function () {
    return "brightics.function.io$write_to_db";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      datasource: this.renderDataSource,
      tableName: this.renderTableName,
      ifExists: this.renderIfExists
    }, this.createDataSourceControl(), this.createTableNameControl(), this.createIfExistsControl();
  }, e.prototype.createDataSourceControl = function () {
    var t = this,
        e = new $.jqx.dataAdapter({
      datatype: "json",
      datafields: [{
        name: "datasourceName",
        type: "string"
      }, {
        name: "datasourceType",
        type: "string"
      }],
      url: "api/va/v2/datasources?type=RDB"
    });
    this.addPropertyControl("Data Source", function (o) {
      t.$dataSourceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), o.append(t.$dataSourceControl), t.$dataSourceControl.on("bindingComplete", function (e) {
        t.setContentsEditable(!0);
      }), t.createDropDownList(t.$dataSourceControl, {
        source: e,
        displayMember: "datasourceName",
        valueMember: "datasourceName",
        placeHolder: "Select DataSource"
      }), t.$dataSourceControl.on("change", function (e) {
        var o = t.createSetParameterValueCommand("datasource", {
          metadata: "datasource",
          datasourceName: t.$dataSourceControl.val()
        });
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createTableNameControl = function () {
    var t = this;
    this.$tableNameControl = $('<input class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Table Name", function (e) {
      e.append(t.$tableNameControl), t.$tableName = t.createInput(t.$tableNameControl, {
        placeHolder: "Enter a Table Name."
      }), t.$tableName.on("change", function () {
        var e = t.createSetParameterValueCommand("tableName", t.$tableName.val(), !1);
        e && t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createIfExistsControl = function () {
    var t = this;
    this.$IfExistsFailControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Fail</div>'), this.$IfExistsReplaceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Replace</div>'), this.$IfExistsAppendControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">Append</div>');
    this.addPropertyControl("If Exists", function (e) {
      var o = [t.$IfExistsFailControl, t.$IfExistsReplaceControl, t.$IfExistsAppendControl];
      e.append(o), o.forEach(function (e) {
        t.createRadioButton(e, {
          width: "80",
          groupName: "Group"
        });
      }), _.zip(o, ["fail", "replace", "append"]).forEach(function (_ref5) {
        var e = _ref5[0],
            o = _ref5[1];
        e.on("checked", function (e) {
          var r = t.createSetParameterValueCommand("ifExists", o);
          t.executeCommand(r);
        });
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderDataSource = function () {
    var t = this.options.fnUnit.param.datasource.datasourceName;
    t ? this.$dataSourceControl.jqxDropDownList("val", t) : this.$dataSourceControl.jqxDropDownList("clearSelection");
  }, e.prototype.renderTableName = function () {
    var t = this.options.fnUnit.param.tableName;
    this.$tableName.val(t);
  }, e.prototype.renderIfExists = function () {
    var t = this.options.fnUnit.param.ifExists,
        e = {
      fail: this.$IfExistsFailControl,
      replace: this.$IfExistsReplaceControl,
      append: this.$IfExistsAppendControl
    }[t];
    e && e.jqxRadioButton("check");
  }, e.prototype.renderValidation = function () {
    var t = {
      datasourceName: this.$dataSourceControl.parent(),
      tableName: this.$tableNameControl
    };

    for (var _iterator3 = this.problems, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref6 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref6 = _i3.value;
      }

      var _e4 = _ref6;
      var o = t[_e4.param];
      o && this.showValidation(o, _e4);
    }
  }, t.VA.Core.Functions.Library.writeToDb.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addDatasourceRule(), this.addTableNameRule();
  }, e.prototype.addDatasourceRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "datasourceName",
        messageParam: ["Data Source"]
      }, e, e.param.datasource.datasourceName);
    });
  }, e.prototype.addTableNameRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "tableName",
        messageParam: ["Table Name"]
      }, e, e.param.tableName);
    });
  }, t.VA.Core.Functions.Library.writeToDb.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.writeToS3 = {
    category: "io",
    defaultFnUnit: {
      func: "writeToS3",
      name: "brightics.function.io$write_to_s3",
      inputs: {
        table: ""
      },
      meta: {
        table: {
          type: "table"
        }
      },
      param: {
        datasource: {
          metadata: "s3",
          datasourceName: ""
        },
        object_key: ""
      },
      version: "3.6",
      context: "python",
      display: {
        label: "Write to S3",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Write a csv file to Amazon S3.",
    mandatory: [],
    tags: ["Load", "S3", "Reader", "unload", "write"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 0,
      max: 0
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this);
  }, e.prototype.getPrimaryOperation = function () {
    return "brightics.function.io$write_to_s3";
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      datasource: this.renderDataSource,
      object_key: this.renderObjectKey
    }, this.createDataSourceControl(), this.createObjectKeyControl();
  }, e.prototype.createDataSourceControl = function () {
    var t = this,
        e = new $.jqx.dataAdapter({
      datatype: "json",
      datafields: [{
        name: "datasourceName",
        type: "string"
      }, {
        name: "datasourceType",
        type: "string"
      }],
      url: "api/admin/v2/s3"
    });
    this.addPropertyControl("Data Source", function (o) {
      t.$dataSourceControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>'), o.append(t.$dataSourceControl), t.$dataSourceControl.on("bindingComplete", function (e) {
        t.setContentsEditable(!0);
      }), t.createDropDownList(t.$dataSourceControl, {
        source: e,
        displayMember: "datasourceName",
        valueMember: "datasourceName",
        placeHolder: "Select DataSource"
      }), t.$dataSourceControl.on("change", function (e) {
        var o = t.createSetParameterValueCommand("datasource", {
          metadata: "s3",
          datasourceName: t.$dataSourceControl.val()
        });
        t.executeCommand(o);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.createObjectKeyControl = function () {
    var t = this;
    this.$objectKeyControl = $('<input class="brtc-va-editors-sheet-controls-inputcontrol"/>'), this.addPropertyControl("Object Key", function (e) {
      e.append(t.$objectKeyControl), t.$objectKey = t.createInput(t.$objectKeyControl, {
        placeHolder: "Enter a Object Key."
      }), t.$objectKey.on("change", function () {
        var e = t.createSetParameterValueCommand("object_key", t.$objectKey.val(), !1);
        e && t.executeCommand(e);
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.renderObjectKey = function () {
    var t = this.options.fnUnit.param.object_key;
    this.$objectKey.val(t);
  }, e.prototype.renderDataSource = function () {
    var t = this.options.fnUnit.param.datasource.datasourceName;
    t ? this.$dataSourceControl.jqxDropDownList("val", t) : this.$dataSourceControl.jqxDropDownList("clearSelection");
  }, e.prototype.renderValidation = function () {
    var t = {
      datasourceName: this.$dataSourceControl.parent(),
      object_key: this.$objectKeyControl
    };

    for (var _iterator4 = this.problems, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref7;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref7 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref7 = _i4.value;
      }

      var _e5 = _ref7;
      var o = t[_e5.param];
      o && this.showValidation(o, _e5);
    }
  }, t.VA.Core.Functions.Library.writeToS3.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e) {
    t.VA.Core.Validator.BaseValidator.call(this, e);
  }

  e.prototype = Object.create(t.VA.Core.Validator.BaseValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    this.addDatasourceRule(), this.addObjectKeyRule();
  }, e.prototype.addDatasourceRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "datasourceName",
        messageParam: ["Data Source"]
      }, e, e.param.datasource.datasourceName);
    });
  }, e.prototype.addObjectKeyRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t._checkStringIsEmpty({
        errorCode: "BR-0033",
        param: "object_key",
        messageParam: ["Object Key"]
      }, e, e.param.object_key);
    });
  }, t.VA.Core.Functions.Library.writeToS3.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.advancedFilterPython = {
    category: "manipulation",
    defaultFnUnit: {
      func: "advancedFilterPython",
      name: "brightics.function.transform$sql_execute",
      context: "python",
      version: "3.6",
      param: {
        query: ""
      },
      inputs: {
        tables: ""
      },
      outputs: {
        out_table: ""
      },
      meta: {
        tables: {
          type: "table"
        },
        out_table: {
          type: "table"
        }
      },
      display: {
        label: "Advanced Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["query"],
    description: "This function generates a new column based on a given formula.",
    tags: ["Python"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.render = {
      query: this.renderExpr
    }, this.control = {}, this.createExprControl();
  }, e.prototype.createExprControl = function () {
    var t = this,
        e = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'),
        o = $('<textarea class="brtc-va-editors-sheet-controls-textarea"></textarea>');
    e.append(o), this.addPropertyControl("Expression", function (r) {
      r.append(e);
      var n = t.createTextAreaControl(o, {
        placeholder: "sepal_length + 1",
        hintOptions: {
          list: []
        }
      });
      n.onChange(function () {
        t.executeCommonCommand("query", n.getValue());
      }), t.control.query = n;
    }, {
      mandatory: !0
    });
  }, e.prototype.fillControlValues = function () {
    this.columnData = this.getColumnsOfInTable(0, ["number", "string"]).map(function (t) {
      return t.name;
    }), this.control.query.codeMirror.options.hintOptions.list = this.columnData;
  }, e.prototype.renderValues = function () {
    this.renderExpr();
  }, e.prototype.renderExpr = function () {
    var t = this.options.fnUnit.param.query;
    t = t.substr(29, t.length), this.control.query.setValue(t);
  }, e.prototype.renderValidation = function () {}, e.prototype.executeCommonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    o.length ? r.ref.param[e] = "SELECT * FROM #{DF(0)} WHERE " + o : r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, r);
    this.executeCommand(n);
  }, t.VA.Core.Functions.Library.advancedFilterPython.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this);
  }, t.VA.Core.Functions.Library.advancedFilterPython.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.sortPython = {
    category: "manipulation",
    defaultFnUnit: {
      func: "sortPython",
      name: "brightics.function.manipulation$sort",
      context: "python",
      version: "3.6",
      param: {
        input_cols: [],
        is_asc: [],
        group_by: []
      },
      inputs: {
        table: ""
      },
      outputs: {
        out_table: ""
      },
      meta: {
        table: {
          type: "table"
        },
        out_table: {
          type: "table"
        }
      },
      display: {
        label: "Sort",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["input_cols", "is_asc"],
    description: "This function generates a new column based on a given formula.",
    tags: ["Python"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype;

  function o(t, o) {
    e.constructor.call(this, t, o);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.createControls = function () {
    e.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, o.prototype.createContentsAreaControls = function (t) {
    e.createContentsAreaControls.call(this, t), this.selectedItems = [], this.changedItems = {}, this.render = {
      input_cols: this.renderSortRule,
      is_asc: this.renderSortRule,
      group_by: this.renderGroupBy
    }, this.createColumnSelector(), this.createSortRuleControl(), this.createGroupByControl();
  }, o.prototype.renderValues = function (t) {
    this.renderSortRule(), this.renderGroupBy();
  }, o.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "input_cols" === this.problems[t].param && this.createValidationContent(this.$newRowButtonArea, this.problems[t]), "group_by" === this.problems[t].param && this.createValidationContent(this.$groupbys.parent(), this.problems[t]);
    }
  }, o.prototype.createSortRuleControl = function () {
    var e = this;
    this.$sortRuleControl = $('<div class="brtc-va-selectbutton-container">   <button class="brtc-va-editors-sheet-controls-propertycontrol-columnlist-selectbutton">Select Columns</button></div><div class = "brtc-va-editors-sheet-controls-propertycontrol-sort-rule-control">   <div class = "brtc-va-editors-sheet-controls-propertycontrol-row-container"></div>   <div class = "brtc-va-editors-sheet-controls-propertycontrol-new-row-button-area"></div></div>'), this.$selectButton = this.$sortRuleControl.find(".brtc-va-editors-sheet-controls-propertycontrol-columnlist-selectbutton"), this.$selectButton.jqxButton({
      theme: t.VA.Env.Theme,
      height: "25px"
    }), this.$selectButton.on("click", function () {
      e.columnSelector.open(this, e.selectedItems);
    }), this.$rowContainer = this.$sortRuleControl.find(".brtc-va-editors-sheet-controls-propertycontrol-row-container"), this.$newRowButtonArea = this.$sortRuleControl.find(".brtc-va-editors-sheet-controls-propertycontrol-new-row-button-area"), this.addPropertyControl("Sort Rule", function (t) {
      t.addClass("brtc-va-editors-sheet-controls-propertycontrol-deck"), t.addClass("brtc-va-sort-property"), t.append(e.$sortRuleControl), e.$rowContainer.sortable({
        axis: "y",
        handle: ".brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element-wrapper",
        update: function update(t, o) {
          e.executeSortRuleCommand(), e.updateIndexNumber();
        }
      }), e.createNewSortRuleButton();
    }, {
      mandatory: !0
    });
  }, o.prototype.createColumnSelector = function (e) {
    var o = this;
    this.columnSelector = new t.VA.Core.Editors.Sheet.Controls.ColumnSelector(this.$mainControl, {
      columnList: this,
      multiple: !0,
      changed: function changed(t, e) {
        if ("selectAll" === t) for (var r in o.selectedItems = [], o.$rowContainer.empty(), e) {
          $.inArray(e[r].name, o.selectedItems) < 0 && (o.changedItems[e[r].name] = "select"), o.createNewSortRuleControl(e[r].name, "ASC"), o.selectedItems.push(e[r].name);
        }

        if ("unselectAll" === t) {
          for (var r in e) {
            $.inArray(e[r].name, o.selectedItems) > -1 && (o.changedItems[e[r].name] = "unselect");
          }

          o.selectedItems = [], o.$rowContainer.empty();
        }

        "select" === t && ($.inArray(e.name, o.selectedItems) < 0 && (o.changedItems[e.name] = "select"), o.createNewSortRuleControl(e.name, "ASC"), o.selectedItems.push(e.name));

        if ("unselect" === t) {
          $.inArray(e.name, o.selectedItems) > -1 && (o.changedItems[e.name] = "unselect");
          var n = o.$sortRuleControl.find(".brtc-va-editors-sheet-controls-propertycontrol-row");

          for (var r in n) {
            if ($(n[r]).attr("column") === e.name) {
              n[r].remove();
              break;
            }
          }

          for (var a in o.selectedItems) {
            if (o.selectedItems[a] === e.name) {
              o.selectedItems.splice(a, 1);
              break;
            }
          }
        }

        if ("close" === t) {
          var i = [],
              s = [];

          for (var l in o.changedItems) {
            "select" === o.changedItems[l] ? i.push(l) : s.push(l);
          }

          (i.length > 0 || s.length > 0) && (o.executeSortRuleCommand(), o.updateIndexNumber()), o.changedItems = {};
        }
      }
    });
  }, o.prototype.createNewSortRuleButton = function () {
    var t = this,
        e = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-row brtc-va-editors-sheet-controls-propertycontrol-new-row-button">   <div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"></div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-button brtc-va-editors-sheet-controls-new-row-toggle-button"><i class="fa fa-sort"></i></div></div>');
    this.$newRowButtonArea.append(e);
    var o = e.find(".brtc-va-editors-sheet-controls-propertycontrol-combobox");
    this.newRowColumnList = this.createColumnList(o, {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !1
    }, "brtc-va-editors-sheet-controls-width-6", {
      width: "70%",
      height: "25px",
      "padding-left": "4px",
      "margin-left": "13px"
    }), this.newRowColumnList.onChange(function (e, o) {
      t.createNewSortRuleControl(o.items[0], "ASC"), t.selectedItems.push(o.items[0]), t.executeSortRuleCommand(), t.newRowColumnList.setSelectedItems([]), t.updateIndexNumber();
    });
  }, o.prototype.createNewSortRuleControl = function (t, e) {
    var o = this;
    t = t || "", e = e || "ASC";
    var r = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-row">   <div class="brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element-wrapper">      <div class="brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element"></div>      <div class="brtc-va-editors-sheet-controls-propertycontrol-number"></div>   </div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"></div>   <div class="brtc-va-editors-sheet-controls-propertycontrol-button brtc-va-editors-sheet-controls-propertycontrol-sort-mode-button"><i class="fa fa-sort"></i></div>   <div class="brtc-va-editors-sheet-controls-sort-rule-remove-button"></div></div>');
    this.$rowContainer.append(r), r.attr("column", t), r.attr("type", this.getColumnType(t)), r.attr("sort-mode", e), r.find(".brtc-va-editors-sheet-controls-propertycontrol-button").attr("title", e);
    var n = r.find(".brtc-va-editors-sheet-controls-propertycontrol-number"),
        a = this.$rowContainer.find(".brtc-va-editors-sheet-controls-propertycontrol-row").length + 1;
    n.text(a + ""), r.find(".brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element-wrapper").attr("title", a + "");
    var i = r.find(".brtc-va-editors-sheet-controls-propertycontrol-combobox"),
        s = this.createColumnList(i, {
      rowCount: 1,
      multiple: !1,
      showOpener: "click",
      removable: !1
    }, "brtc-va-editors-sheet-controls-width-6", {
      width: "70%",
      height: "25px"
    });
    s.onChange(function (t, e) {
      r.attr("column", e.items[0]), r.attr("type", o.getColumnType(e.items[0])), o.updateSortModeIcon(l, r.attr("sort-mode"), o.getColumnType(e.items[0])), o.executeSortRuleCommand();
    }), s.setItems(this.columnData), s.setSelectedItems(t ? [t] : []), r.data("columnList", s);
    var l = r.find(".brtc-va-editors-sheet-controls-propertycontrol-button");
    l.on("click", function () {
      var t = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-row"),
          e = "ASC" === t.attr("sort-mode") ? "DESC" : "ASC";
      t.attr("sort-mode", e), $(this).attr("title", e), o.updateSortModeIcon(l, t.attr("sort-mode"), o.getColumnType(t.attr("column"))), o.executeSortRuleCommand();
    }), r.find(".brtc-va-editors-sheet-controls-sort-rule-remove-button").click(function (t) {
      var e = $(this).parents(".brtc-va-editors-sheet-controls-propertycontrol-row");

      for (var r in e.remove(), o.selectedItems) {
        if (o.selectedItems[r] === e.attr("column")) {
          o.selectedItems.splice(r, 1);
          break;
        }
      }

      o.executeSortRuleCommand(), o.updateIndexNumber();
    }), this.updateSortModeIcon(l, e, this.getColumnType(t));
  }, o.prototype.fillControlValues = function () {
    this.columnData = this.getColumnsOfInTable(0, ["number", "string"]), this.columnSelector.setSource(this.columnData), this.newRowColumnList.setItems(this.columnData), this.groupbyControl.setItems(this.columnData);
  }, o.prototype.renderSortRule = function () {
    var t = this.options.fnUnit.param.input_cols,
        e = this.options.fnUnit.param.is_asc;

    if (e.length && t.length) {
      var o,
          r,
          n,
          a,
          i,
          s,
          l = this.$rowContainer.find(".brtc-va-editors-sheet-controls-propertycontrol-row"),
          c = l.length;

      if (c < t.length) {
        for (i = 0; i < c; i++) {
          a = e[i] ? "ASC" : "DESC", o = l[i], (r = $(o).data("columnList")).setItems(this.columnData), r.setSelectedItems([t[i]]), $(o).attr("column", t[i]), $(o).attr("type", this.getColumnType(t[i])), $(o).attr("sort-mode", a), (n = $(o).find(".brtc-va-editors-sheet-controls-propertycontrol-button")).attr("title", a), this.updateSortModeIcon(n, a, this.getColumnType(t[i]));
        }

        for (s = c; s < t.length; s++) {
          a = e[s] ? "ASC" : "DESC", this.createNewSortRuleControl(t[s], a);
        }

        this.selectedItems = t;
      } else {
        for (i = 0; i < t.length; i++) {
          a = e[i] ? "ASC" : "DESC", o = l[i], (r = $(o).data("columnList")).setItems(this.columnData), r.setSelectedItems([t[i]]), $(o).attr("column", t[i]), $(o).attr("type", this.getColumnType(t[i])), $(o).attr("sort-mode", a), (n = $(o).find(".brtc-va-editors-sheet-controls-propertycontrol-button")).attr("title", a), this.updateSortModeIcon(n, a, this.getColumnType(t[i]));
        }

        for (s = t.length; s < c; s++) {
          (o = l[s]).remove();
        }
      }
    } else this.$rowContainer.empty();

    this.updateIndexNumber();
  }, o.prototype.renderGroupBy = function () {
    var t = this.options.fnUnit.param.group_by;
    this.groupbyControl.setSelectedItems(t);
  }, o.prototype.createGroupByControl = function () {
    var t = this;
    this.$groupbys = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-groupbylist"/>'), this.addPropertyControl("Group By", function (e) {
      e.append(t.$groupbys);
      t.groupbyControl = t.createColumnList(t.$groupbys, {
        rowCount: 3,
        multiple: !0
      }), t.groupbyControl.onChange(function () {
        t.executeGroupByCommand();
      });
    });
  }, o.prototype.executeGroupByCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.group_by = [];
    var o = this.groupbyControl.getSelectedItems();
    o && (e.ref.param.group_by = o);
    var r = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
    this.executeCommand(r);
  }, o.prototype.executeSortRuleCommand = function () {
    var e = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    e.ref.param.input_cols = [], e.ref.param.is_asc = [], this.$rowContainer.find(".brtc-va-editors-sheet-controls-propertycontrol-row").each(function (t, o) {
      e.ref.param.input_cols.push($(this).attr("column"));
      var r = "ASC" == $(this).attr("sort-mode");
      e.ref.param.is_asc.push(r);
    });
    var o = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, e);
    this.executeCommand(o);
  }, o.prototype.updateIndexNumber = function () {
    this.$rowContainer.find(".brtc-va-editors-sheet-controls-propertycontrol-row").each(function (t, e) {
      var o = Number(t) + 1 + "";
      $(e).find(".brtc-va-editors-sheet-controls-propertycontrol-hover-drag-element-wrapper").attr("title", o), $(e).find(".brtc-va-editors-sheet-controls-propertycontrol-number").text(o);
    });
  }, o.prototype.updateSortModeIcon = function (t, e, o) {
    var r;
    t.find("i").removeClass(), "string" === o ? (r = "fa fa-sort-alpha-" + e.toLowerCase(), t.find("i").addClass(r)) : "number" === o || "date" === o ? (r = "fa fa-sort-numeric-" + e.toLowerCase(), t.find("i").addClass(r)) : (r = "fa fa-sort", t.find("i").addClass(r));
  }, o.prototype.getColumnType = function (t) {
    return this.columnData.find(function (e) {
      return e.name == t;
    }).type;
  }, t.VA.Core.Functions.Library.sortPython.propertiesPanel = o;
}.call(this), function () {
  "use strict";

  var t = this.Brightics,
      e = t.VA.Core.Validator.SingleInputValidator.prototype;

  function o() {
    e.constructor.call(this);
  }

  o.prototype = Object.create(e), o.prototype.constructor = o, o.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule(), this.addGroupByRule();
  }, o.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, "input_cols", e.param.input_cols, "Sort Rule");
    }), this.addRule(function (e) {
      return t.checkColumnExists(e, "input_cols", $.unique($.extend(!0, [], e.param.input_cols)));
    });
  }, o.prototype.addGroupByRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnExists(e, "group_by", e.param.group_by);
    }), this.addRule(function (e) {
      if (t._hasSchema(e)) {
        var o = t.getArrayConflicted(e.param.group_by, e.param.input_cols);
        return t.createProblemForConflicted(o, "group_by", "Group By", "Columns", e);
      }
    });
  }, t.VA.Core.Functions.Library.sortPython.validator = o;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.queryExecutorPython = {
    category: "script",
    defaultFnUnit: {
      func: "queryExecutorPython",
      name: "brightics.function.transform$sql_execute",
      context: "python",
      version: "3.6",
      param: {
        query: "SELECT "
      },
      inputs: {
        tables: []
      },
      outputs: {
        out_table: ""
      },
      meta: {
        tables: {
          type: "table",
          range: {
            min: 1,
            max: 10
          }
        },
        out_table: {
          type: "table"
        }
      },
      display: {
        label: "Query Executor",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "This function returns value for executed SQL Query.",
    tags: ["SQL Executor", "SQLExecutor", "SQL", "Query", "Preprocessing", "Filter", "Missing Values", "Manipulation", "Column Extraction", "Table Schema Transform", "Query Executor"],
    "in-range": {
      min: 1,
      max: 8
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.BasePanel.prototype.createContentsAreaControls.call(this, e), this.FnUnitInputs = brtc_require("FnUnitInputs"), this.PARAM_FULL_QUERY = "query", this.render = {
      query: this.renderQueryStatement
    }, this.createSelectControl(), this.customizeElementClass();
  }, e.prototype.fillControlValues = function () {
    var e = this;

    for (var o in this.columnData = this.dataMap && this.FnUnitUtils.getInTable(this.options.fnUnit)[0] ? this.dataMap[this.FnUnitUtils.getInTable(this.options.fnUnit)[0]].columns : [], this.hintList = [], this.FnUnitUtils.getInTable(this.options.fnUnit)) {
      this.hintList.push("#{DF(" + o + ")}");
    }

    for (var o in this.columnData) {
      this.hintList.push(this.columnData[o].name);
    }

    var r = {
      url: "api/va/v3/ws/functions/" + this.options.fnUnit.func,
      type: "GET",
      blocking: !1,
      contentType: "application/json; charset=utf-8"
    };
    $.ajax(r).done(function (t) {
      var o = t.hintList;

      for (var r in o) {
        e.hintList.push(o[r]);
      }
    }).fail(function (e) {
      t.VA.Core.Utils.WidgetUtils.openBadRequestErrorDialog(e);
    });
  }, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.PARAM_FULL_QUERY = "query", this.render = {
      query: this.renderQueryStatement
    }, this.createSelectControl(), this.customizeElementClass();
  }, e.prototype.createSelectControl = function () {
    var e = this;
    this.addPropertyControl("SQL", function (o) {
      var r = $('<textarea class="brtc-va-editors-sheet-controls-sqlcontrol"></textarea>');
      o.append(r), e.sqlEditViewer = e.createTextAreaControl(r, {
        verifier: new t.VA.Core.Verifier.SqlVerifier(),
        mode: "text/x-sql",
        theme: "default",
        indentWithTabs: !0,
        smartIndent: !0,
        lineNumbers: !1,
        matchBrackets: !0,
        autofocus: !1,
        readOnly: "nocursor"
      }), e.sqlEditViewer.$mainControl.parent().children(".CodeMirror").on("mousedown", function () {
        $(window).trigger("mousedown"), new t.VA.Core.Dialogs.SqlEditorDialog(e.$mainControl, {
          title: "SQL",
          window: {
            width: 1400,
            height: 700,
            minWidth: 700,
            minHeight: 400,
            maxWidth: 1400,
            maxHeight: 700,
            resizable: !0
          },
          mode: "text/x-sql",
          additionalHint: e.hintList,
          fnUnit: e.options.fnUnit,
          statement: e.sqlEditViewer.codeMirror.getValue(),
          tables: e.getInputTables(),
          scriptType: "SQL Editor",
          close: function close(t) {
            if (t.OK) {
              e.redrawQueryStatement(t.queryStatement);
              var o = e.createQueryStatementCommand(t.queryStatement);
              e.executeCommand(o);
            }
          }
        });
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.getInputTables = function () {
    var t = this.options.fnUnit.parent(),
        e = this.options.fnUnit.fid,
        o = [],
        r = t.getPrevious(e);

    for (var n in r) {
      var a = t.getFnUnitById(r[n]);

      for (var i in a[OUT_DATA]) {
        var s = {
          name: a[OUT_DATA][i],
          label: "Out of " + a.display.label,
          columns: []
        };
        a[OUT_DATA].length > 1 && (s.label = parseInt(i) + 1 + "th " + s.label), this.dataMap[s.name] && (s.columns = this.dataMap[s.name].columns), o.push(s);
        break;
      }
    }

    return o;
  }, e.prototype.renderQueryStatement = function () {
    var t = this.options.fnUnit.param[this.PARAM_FULL_QUERY];
    this.redrawQueryStatement(t);
  }, e.prototype.renderAliasNames = function () {}, e.prototype.redrawQueryStatement = function (t) {
    this.sqlEditViewer.setValue(t), this.selectMarker = this.sqlEditViewer.codeMirror.markText({
      line: 0,
      ch: 0
    }, {
      line: 0,
      ch: 7
    }, {
      readOnly: !0,
      inclusiveLeft: !0,
      atomic: !0
    }), this.sqlEditViewer.codeMirror.setSize("100%", "100%");
  }, e.prototype.customizeElementClass = function () {
    this.$mainControl.find(".brtc-va-editors-sheet-panels-basepanel-contents-area").addClass("flex");
    this.$mainControl.find(".brtc-va-editors-sheet-controls-propertycontrol").addClass("sql").find(".brtc-va-editors-sheet-controls-propertycontrol-contents").addClass("sql-contents").find(".brtc-va-editors-sheet-controls-wrapper").addClass("sql-wrapper");
  }, e.prototype.createQueryStatementCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    return o.ref.param[this.PARAM_FULL_QUERY] = e, new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "query" == this.problems[t].param && this.createValidationContent(this.scalaScriptViewer.$mainControl.parent(), this.problems[t]);
    }
  }, t.VA.Core.Functions.Library.queryExecutorPython.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_COLUMNS = "columns", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addColumnsRule();
  }, e.prototype.addColumnsRule = function () {
    var t = this;
    this.addRule(function (e) {
      var o = [];
      return "" == e.param.script && o.push(t.problemFactory.createProblem({
        errorCode: "BR-0033",
        param: "script",
        messageParam: ["Script"]
      }, e)), o;
    });
  }, e.prototype.addLinkRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkLinkIsConnected(e);
    });
  }, e.prototype.checkLinkIsConnected = function (t) {
    var e = {
      errorCode: "EL001",
      messageParam: [t.display.label]
    };
    if (!this._hasPrevious(t)) return this.problemFactory.createProblem(e, t);
  }, e = e, t.VA.Core.Functions.Library.queryExecutorPython.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.merge = {
    category: "transform",
    defaultFnUnit: {
      context: "python",
      func: "merge",
      name: "brightics.function.transform$join",
      version: "3.6",
      inputs: {
        left_table: "",
        right_table: ""
      },
      outputs: {
        table: ""
      },
      meta: {
        left_table: {
          type: "table"
        },
        right_table: {
          type: "table"
        },
        table: {
          type: "table"
        }
      },
      param: {
        left_on: [],
        right_on: [],
        how: "outer",
        lsuffix: "",
        rsuffix: "",
        sort: "false"
      },
      display: {
        label: "Join",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    description: "Merge DataFrame objects by performing a database-style join operation by columns.",
    tags: ["join", "left", "right", "inner", "outer", "merge"]
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.options.joinTypes = ["outer", "left", "right", "inner", "left_exclude", "right_exclude"], this.render = {
      how: this.renderJoinTypeValue,
      left_on: this.renderLeftOn,
      right_on: this.renderRightOn,
      lsuffix: this.renderLsuffix,
      rsuffix: this.renderRsuffix,
      sort: this.renderSort
    }, this.renderError = {
      left_on: this.renderErrorLeftOn,
      right_on: this.renderErrorRightOn
    }, this.createJoinTypeControl(), this.createLeftOnControl(), this.createRightOnControl(), this.createLsuffixControl(), this.createRsuffixControl(), this.createSortControl();
  }, e.prototype.createLeftOnControl = function (t) {
    var e = this;
    this.$leftOnColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Left Keys", function (t) {
      t.append(this.$leftOnColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("left_on", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.leftColumnsControl = e.createColumnList(e.$leftOnColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createRightOnControl = function (t) {
    var e = this;
    this.$rightOnColumns = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>'), this.addPropertyControl("Right Keys", function (t) {
      t.append(this.$rightOnColumns);
      var o = {
        rowCount: 3,
        multiple: !0,
        changed: function changed(t, o) {
          e.createColumnListCommand("right_on", o.items);
        },
        added: function added(t) {},
        removed: function removed(t) {}
      };
      e.rightColumnsControl = e.createColumnList(e.$rightOnColumns, o);
    }, {
      mandatory: !0
    });
  }, e.prototype.createJoinTypeControl = function (e) {
    var o = this;
    this.$joinTypeControl = $('<ul  class="brtc-va-editors-sheet-panels-properties-joinproperties-buttoncontainer"><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "outer" title="Full Outer Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "leftouter" title="Left Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "rightouter" title="Right Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "inner" title="Inner Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "leftexcluding" title="Left Excluding Join"/></div></li><li> <div class="join-type"> <div class="brtc-va-editors-sheet-panels-properties-joinproperties-icon" type = "rightexcluding" title="Right Excluding Join"/></div></li> </ul>'), this.addPropertyControl("Join Type", function (t) {
      t.append(this.$joinTypeControl);
    }, {
      mandatory: !0
    }), this.$joinTypeControl.jqxButtonGroup({
      mode: "radio",
      theme: t.VA.Env.Theme
    }), this.$joinTypeControl.jqxButtonGroup("setSelection", 0), this.$joinTypeControl.on("selected", function (e) {
      var r = e.args.button,
          n = new t.VA.Core.CompoundCommand(o, {});
      o.$joinTypeControl.find(".brtc-va-editors-sheet-panels-properties-joinproperties-icon").removeClass("brtc-va-editors-sheet-panels-properties-joinproperties-icon-selected"), r.find(".brtc-va-editors-sheet-panels-properties-joinproperties-icon").addClass("brtc-va-editors-sheet-panels-properties-joinproperties-icon-selected");
      var a = $(r[0]).find('[type="leftexcluding"]'),
          i = $(r[0]).find('[type="rightexcluding"]');
      "leftexcluding" === a.attr("type") ? (n.add(o.createJoinTypeCommand()), o.executeCommand(n)) : "rightexcluding" === i.attr("type") ? (n.add(o.createJoinTypeCommand()), o.executeCommand(n)) : o.executeCommand(o.createJoinTypeCommand());
    });
  }, e.prototype.createLsuffixControl = function (t) {
    var e = this;
    this.$lsuffixControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), this.$lsuffixControlWrapper = this.addPropertyControl("Left Suffix", function (t) {
      t.append(this.$lsuffixControl), e.createInput(e.$lsuffixControl, {
        placeHolder: "_left"
      }), e.$lsuffixControl.on("change", function (t) {
        e.isInputValueChanged("lsuffix", $(this).val()) && e.createInputCommand("lsuffix", $(this).val());
      });
    });
  }, e.prototype.createRsuffixControl = function (t) {
    var e = this;
    this.$rsuffixControl = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input" valid-type="type1"/>'), this.$rsuffixControlWrapper = this.addPropertyControl("Right Suffix", function (t) {
      t.append(this.$rsuffixControl), e.createInput(e.$rsuffixControl, {
        placeHolder: "_right"
      }), e.$rsuffixControl.on("change", function (t) {
        e.isInputValueChanged("rsuffix", $(this).val()) && e.createInputCommand("rsuffix", $(this).val());
      });
    });
  }, e.prototype.createSortControl = function (t) {
    var e = this;
    this.$sortTrueControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">True</div>'), this.$sortFalseControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton">False</div>');
    this.addPropertyControl("Sort", function (t) {
      t.append(this.$sortTrueControl).append(this.$sortFalseControl), e.createRadioButton(e.$sortTrueControl, {
        width: "80",
        groupName: "Group"
      }), e.createRadioButton(e.$sortFalseControl, {
        width: "80",
        groupName: "Group"
      }), e.$sortTrueControl.on("checked", function (t) {
        e.createRadioButtonCommand("sort", "true");
      }), e.$sortFalseControl.on("checked", function (t) {
        e.createRadioButtonCommand("sort", "false");
      });
    });
  }, e.prototype.fillControlValues = function (t) {
    var e,
        o,
        r = this.FnUnitUtils.getInputs(this.options.fnUnit);
    e = this.dataMap && r.left_table ? this.dataMap[r.left_table].columns : [], o = this.dataMap && r.right_table ? this.dataMap[r.right_table].columns : [], this.leftColumnsControl.setItems(e), this.rightColumnsControl.setItems(o), this.$sortFalseControl.jqxRadioButton("check");
  }, e.prototype.renderJoinTypeValue = function () {
    var t = this.options.fnUnit.param.how;
    this.$joinTypeControl.jqxButtonGroup("setSelection", this.options.joinTypes.indexOf(t));
  }, e.prototype.renderLeftOn = function () {
    var t = this.options.fnUnit.param;
    this.leftColumnsControl.setSelectedItems(t.left_on);
  }, e.prototype.renderRightOn = function () {
    var t = this.options.fnUnit.param;
    this.rightColumnsControl.setSelectedItems(t.right_on);
  }, e.prototype.renderLsuffix = function () {
    this.$lsuffixControl.val(this.options.fnUnit.param.lsuffix || "");
  }, e.prototype.renderRsuffix = function () {
    this.$rsuffixControl.val(this.options.fnUnit.param.rsuffix || "");
  }, e.prototype.renderSort = function () {
    var t = this.options.fnUnit.param;
    void 0 === t.sort ? this.$sortFalseControl.jqxRadioButton("check") : ("true" === t.sort && this.$sortTrueControl.jqxRadioButton("check"), "false" === t.sort && this.$sortFalseControl.jqxRadioButton("check"));
  }, e.prototype.renderValidation = function () {
    if (this.problems.length > 0) for (var t in this.problems) {
      "left_on" === this.problems[t].param && this.createValidationContent(this.$leftOnColumns, this.problems[t]), "right_on" === this.problems[t].param && this.createValidationContent(this.$rightOnColumns, this.problems[t]);
    }
  }, e.prototype.renderErrorLeftOn = function (t) {
    this.createValidationContent(this.$leftOnColumns, t);
  }, e.prototype.renderErrorRightOn = function (t) {
    this.createValidationContent(this.$rightOnColumns, t);
  }, e.prototype.createColumnListCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = [], o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createNumericInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createRadioButtonCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = o;
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createInputCommand = function (e, o) {
    var r = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {}
      }
    };
    r.ref.param[e] = "", o && (r.ref.param[e] = o);
    var n = new t.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, r);
    this.executeCommand(n);
  }, e.prototype.createColumnsCommand = function () {
    var e = this.leftColumnsControl.getSelectedItems(),
        o = this.rightColumnsControl.getSelectedItems();
    return 0 === e.length && (e[0] = ""), 0 === o.length && (o[0] = ""), new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          columns: [e, o]
        }
      }
    });
  }, e.prototype.createJoinTypeCommand = function () {
    var e = this.options.joinTypes[this.$joinTypeControl.jqxButtonGroup("getSelection")] || "inner";
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, {
      fnUnit: this.options.fnUnit,
      ref: {
        param: {
          how: e
        }
      }
    });
  }, t.VA.Core.Functions.Library.merge.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    this.PARAM_LEFT_ON = "left_on", this.PARAM_RIGHT_ON = "right_on", t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addLeftOnRule(), this.addRightOnRule();
  }, e.prototype.addLeftOnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_LEFT_ON, e.param[t.PARAM_LEFT_ON], "Left Columns");
    });
  }, e.prototype.addRightOnRule = function () {
    var t = this;
    this.addRule(function (e) {
      return t.checkColumnIsEmpty(e, t.PARAM_RIGHT_ON, e.param[t.PARAM_RIGHT_ON], "Right Columns");
    });
  }, t.VA.Core.Functions.Library.merge.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.selectColumnPython = {
    category: "transform",
    defaultFnUnit: {
      func: "selectColumnPython",
      name: "brightics.function.transform$select_column",
      context: "python",
      version: "3.6",
      param: {
        input_cols: [],
        output_cols: [],
        output_types: []
      },
      inputs: {
        table: ""
      },
      outputs: {
        out_table: ""
      },
      meta: {
        table: {
          type: "table"
        },
        out_table: {
          type: "table"
        }
      },
      display: {
        label: "Select Column",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["output_cols", "output_types"],
    description: "This function creates a dataframe with the given input.",
    tags: ["Python"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit)), this.options.isRendered = !0;
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.control = {}, this.createOpenDialogButton();
  }, e.prototype.createOpenDialogButton = function () {
    var t = this;
    this.$summaryControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.$selectedColumnProp = this.addPropertyControl("Selected Column", function (e) {
      e.append(t.$summaryControl), t.control.summary = t.createTextArea(t.$summaryControl, {
        height: "300px",
        disabled: !0
      }, "brtc-style-textarea"), t.$summaryControl.on("click", function (e) {
        t.openScriptEditor();
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.openScriptEditor = function () {
    var e = this;
    new t.VA.Core.Dialogs.FunctionProperties.SelectColumnDialog(e.$mainControl, {
      title: "Select Column",
      fnUnit: e.options.fnUnit,
      dataProxy: e.options.dataProxy,
      modelEditor: e.options.modelEditor,
      close: function close(t) {
        if (t.OK) {
          e.setSummaryString(t.param);
          var o = e.createCommonCommand(t.param);
          e.executeCommand(o);
        }
      }
    });
  }, e.prototype.renderValues = function (t) {
    this.setSummaryString(this.options.fnUnit.param);
  }, e.prototype.renderValidation = function () {
    for (var t in this.problems) {
      "selected-column" === this.problems[t].param && this.createValidationContent(this.$summaryControl, this.problems[t]);
    }
  }, e.prototype.setSummaryString = function (t) {
    if (t.input_cols) {
      var _e6 = _.zip(t.input_cols, t.output_cols, t.output_types).map(function (_ref8) {
        var t = _ref8[0],
            e = _ref8[1],
            o = _ref8[2];
        return [t, "        Alias: " + e + ",", "        Type: " + o, ""].join("\n");
      }).join("\n");

      this.control.summary.val(_e6);
    }
  }, e.prototype.createCommonCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: e
      }
    };
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.selectColumnPython.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addSelectedColumnRequired();
  }, e.prototype.addSelectedColumnRequired = function () {
    var t = this;
    this.addRule(function (e) {
      if (this._hasSchema(e)) {
        return t._checkArrayIsEmpty({
          errorCode: "BR-0033",
          param: "selected-column",
          messageParam: ["Selected Column"]
        }, e, e.param.input_cols);
      }
    });
  }, t.VA.Core.Functions.Library.selectColumnPython.validator = e;
}.call(this), function () {
  "use strict";

  this.Brightics.VA.Core.Functions.Library.simpleFilterPython = {
    category: "transform",
    defaultFnUnit: {
      func: "simpleFilterPython",
      name: "brightics.function.manipulation$simple_filter",
      context: "python",
      version: "3.6",
      param: {
        main_operator: "and",
        input_cols: [],
        operators: [],
        operands: []
      },
      inputs: {
        table: ""
      },
      outputs: {
        out_table: ""
      },
      meta: {
        table: {
          type: "table"
        },
        out_table: {
          type: "table"
        }
      },
      display: {
        label: "Filter",
        diagram: {
          position: {
            x: 20,
            y: 10
          }
        },
        sheet: {
          in: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          },
          out: {
            partial: [{
              panel: [],
              layout: {}
            }],
            full: [{
              panel: [],
              layout: {}
            }]
          }
        }
      }
    },
    mandatory: ["main_operator", "input_cols", "operators", "operands"],
    description: "This function creates a dataframe with the given input.",
    tags: ["Python"],
    "in-range": {
      min: 1,
      max: 1
    },
    "out-range": {
      min: 1,
      max: 1
    }
  };
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e(e, o) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, e, o);
  }

  e.prototype = Object.create(t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype), e.prototype.constructor = e, e.prototype.createControls = function () {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this), this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit)), this.options.isRendered = !0;
  }, e.prototype.createContentsAreaControls = function (e) {
    t.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, e), this.control = {}, this.createOpenDialogButton();
  }, e.prototype.createOpenDialogButton = function () {
    var t = this;
    this.$summaryControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-textareacontrol"/>'), this.addPropertyControl("Condition", function (e) {
      e.append(t.$summaryControl), t.control.summary = t.createTextArea(t.$summaryControl, {
        height: "300px",
        disabled: !0
      }, "brtc-style-textarea"), t.$summaryControl.on("click", function (e) {
        t.openScriptEditor();
      });
    }, {
      mandatory: !0
    });
  }, e.prototype.openScriptEditor = function () {
    var e = this;
    new t.VA.Core.Dialogs.FunctionProperties.SimpleFilterDialog(e.$mainControl, {
      title: "Filter",
      fnUnit: e.options.fnUnit,
      dataProxy: e.options.dataProxy,
      modelEditor: e.options.modelEditor,
      close: function close(t) {
        if (t.OK) {
          e.setSummaryString(t.param);
          var o = e.createCommonCommand(t.param);
          e.executeCommand(o);
        }
      }
    });
  }, e.prototype.renderValues = function (t) {
    this.setSummaryString(this.options.fnUnit.param);
  }, e.prototype.renderValidation = function () {}, e.prototype.setSummaryString = function (t) {
    if (t.input_cols) {
      var e = t.main_operator,
          o = "";
      t.input_cols.forEach(function (r, n, a) {
        o += r + " " + t.operators[n] + " " + t.operands[n] + "\n", n != a.length - 1 && (o += "\t" + e + "\n");
      }), this.control.summary.val(o);
    }
  }, e.prototype.createCommonCommand = function (e) {
    var o = {
      fnUnit: this.options.fnUnit,
      ref: {
        param: e
      }
    };
    return new t.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, o);
  }, t.VA.Core.Functions.Library.simpleFilterPython.propertiesPanel = e;
}.call(this), function () {
  "use strict";

  var t = this.Brightics;

  function e() {
    t.VA.Core.Validator.SingleInputValidator.call(this);
  }

  e.prototype = Object.create(t.VA.Core.Validator.SingleInputValidator.prototype), e.prototype.constructor = e, e.prototype.initRules = function () {
    t.VA.Core.Validator.SingleInputValidator.prototype.initRules.call(this), this.addSummaryRequired();
  }, e.prototype.addSummaryRequired = function () {
    var t = this;
    this.addRule(function (e) {
      if (this._hasSchema(e)) {
        return t._checkArrayIsEmpty({
          errorCode: "BR-0033",
          param: "filter",
          messageParam: ["Filter"]
        }, e, e.param.input_cols);
      }
    });
  }, t.VA.Core.Functions.Library.simpleFilterPython.validator = e;
}.call(this);